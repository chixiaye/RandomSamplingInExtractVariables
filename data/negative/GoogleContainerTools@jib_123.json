{
  "id" : 123,
  "expression" : "testResources",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/frontend/JavaDockerContextGeneratorTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "testResources",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 86,
      "startColumnNumber" : 70,
      "endLineNumber" : 86,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 86,
        "startColumnNumber" : 49,
        "endLineNumber" : 86,
        "endColumnNumber" : 84
      },
      "nodeContext" : "listFilesInDirectory(testResources)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 86,
        "startColumnNumber" : 24,
        "endLineNumber" : 86,
        "endColumnNumber" : 84
      },
      "nodeContext" : "expectedResourcesFiles=listFilesInDirectory(testResources)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ImmutableList<Path> expectedResourcesFiles=listFilesInDirectory(testResources);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2571,
        "startLineNumber" : 75,
        "startColumnNumber" : 68,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path testDependencies=Paths.get(Resources.getResource(\"application/dependencies\").toURI());\n  Path testSnapshotDependencies=Paths.get(Resources.getResource(\"application/snapshot-dependencies\").toURI());\n  Path testResources=Paths.get(Resources.getResource(\"application/resources\").toURI());\n  Path testClasses=Paths.get(Resources.getResource(\"application/classes\").toURI());\n  Path testExtraFiles=Paths.get(Resources.getResource(\"layer\").toURI());\n  ImmutableList<Path> expectedDependenciesFiles=listFilesInDirectory(testDependencies);\n  ImmutableList<Path> expectedSnapshotDependenciesFiles=listFilesInDirectory(testSnapshotDependencies);\n  ImmutableList<Path> expectedResourcesFiles=listFilesInDirectory(testResources);\n  ImmutableList<Path> expectedClassesFiles=listFilesInDirectory(testClasses);\n  ImmutableList<Path> expectedExtraFiles=listFilesInDirectory(testExtraFiles);\n  Path targetDirectory=temporaryFolder.newFolder().toPath();\n  Files.delete(targetDirectory);\n  Mockito.when(mockJavaLayerConfigurations.getDependenciesLayerEntry()).thenReturn(new LayerEntry(expectedDependenciesFiles,EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getSnapshotDependenciesLayerEntry()).thenReturn(new LayerEntry(expectedSnapshotDependenciesFiles,EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getResourcesLayerEntry()).thenReturn(new LayerEntry(expectedResourcesFiles,EXPECTED_RESOURCES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getClassesLayerEntry()).thenReturn(new LayerEntry(expectedClassesFiles,EXPECTED_CLASSES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getExtraFilesLayerEntry()).thenReturn(new LayerEntry(expectedExtraFiles,\"/\"));\n  new JavaDockerContextGenerator(mockJavaLayerConfigurations).setBaseImage(\"somebaseimage\").generate(targetDirectory);\n  Assert.assertTrue(Files.exists(targetDirectory.resolve(\"Dockerfile\")));\n  assertSameFiles(targetDirectory.resolve(\"libs\"),testDependencies);\n  assertSameFiles(targetDirectory.resolve(\"snapshot-libs\"),testSnapshotDependencies);\n  assertSameFiles(targetDirectory.resolve(\"resources\"),testResources);\n  assertSameFiles(targetDirectory.resolve(\"classes\"),testClasses);\n  assertSameFiles(targetDirectory.resolve(\"root\"),testExtraFiles);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2645,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testGenerate() throws IOException, URISyntaxException {\n  Path testDependencies=Paths.get(Resources.getResource(\"application/dependencies\").toURI());\n  Path testSnapshotDependencies=Paths.get(Resources.getResource(\"application/snapshot-dependencies\").toURI());\n  Path testResources=Paths.get(Resources.getResource(\"application/resources\").toURI());\n  Path testClasses=Paths.get(Resources.getResource(\"application/classes\").toURI());\n  Path testExtraFiles=Paths.get(Resources.getResource(\"layer\").toURI());\n  ImmutableList<Path> expectedDependenciesFiles=listFilesInDirectory(testDependencies);\n  ImmutableList<Path> expectedSnapshotDependenciesFiles=listFilesInDirectory(testSnapshotDependencies);\n  ImmutableList<Path> expectedResourcesFiles=listFilesInDirectory(testResources);\n  ImmutableList<Path> expectedClassesFiles=listFilesInDirectory(testClasses);\n  ImmutableList<Path> expectedExtraFiles=listFilesInDirectory(testExtraFiles);\n  Path targetDirectory=temporaryFolder.newFolder().toPath();\n  Files.delete(targetDirectory);\n  Mockito.when(mockJavaLayerConfigurations.getDependenciesLayerEntry()).thenReturn(new LayerEntry(expectedDependenciesFiles,EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getSnapshotDependenciesLayerEntry()).thenReturn(new LayerEntry(expectedSnapshotDependenciesFiles,EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getResourcesLayerEntry()).thenReturn(new LayerEntry(expectedResourcesFiles,EXPECTED_RESOURCES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getClassesLayerEntry()).thenReturn(new LayerEntry(expectedClassesFiles,EXPECTED_CLASSES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getExtraFilesLayerEntry()).thenReturn(new LayerEntry(expectedExtraFiles,\"/\"));\n  new JavaDockerContextGenerator(mockJavaLayerConfigurations).setBaseImage(\"somebaseimage\").generate(targetDirectory);\n  Assert.assertTrue(Files.exists(targetDirectory.resolve(\"Dockerfile\")));\n  assertSameFiles(targetDirectory.resolve(\"libs\"),testDependencies);\n  assertSameFiles(targetDirectory.resolve(\"snapshot-libs\"),testSnapshotDependencies);\n  assertSameFiles(targetDirectory.resolve(\"resources\"),testResources);\n  assertSameFiles(targetDirectory.resolve(\"classes\"),testClasses);\n  assertSameFiles(targetDirectory.resolve(\"root\"),testExtraFiles);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ImmutableList<Path> expectedResourcesFiles=listFilesInDirectory(testResources);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Path"
  }, {
    "nodeContext" : "testResources",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 115,
      "startColumnNumber" : 58,
      "endLineNumber" : 115,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertSameFiles(targetDirectory.resolve(\"resources\"),testResources)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertSameFiles(targetDirectory.resolve(\"resources\"),testResources);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2571,
        "startLineNumber" : 75,
        "startColumnNumber" : 68,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path testDependencies=Paths.get(Resources.getResource(\"application/dependencies\").toURI());\n  Path testSnapshotDependencies=Paths.get(Resources.getResource(\"application/snapshot-dependencies\").toURI());\n  Path testResources=Paths.get(Resources.getResource(\"application/resources\").toURI());\n  Path testClasses=Paths.get(Resources.getResource(\"application/classes\").toURI());\n  Path testExtraFiles=Paths.get(Resources.getResource(\"layer\").toURI());\n  ImmutableList<Path> expectedDependenciesFiles=listFilesInDirectory(testDependencies);\n  ImmutableList<Path> expectedSnapshotDependenciesFiles=listFilesInDirectory(testSnapshotDependencies);\n  ImmutableList<Path> expectedResourcesFiles=listFilesInDirectory(testResources);\n  ImmutableList<Path> expectedClassesFiles=listFilesInDirectory(testClasses);\n  ImmutableList<Path> expectedExtraFiles=listFilesInDirectory(testExtraFiles);\n  Path targetDirectory=temporaryFolder.newFolder().toPath();\n  Files.delete(targetDirectory);\n  Mockito.when(mockJavaLayerConfigurations.getDependenciesLayerEntry()).thenReturn(new LayerEntry(expectedDependenciesFiles,EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getSnapshotDependenciesLayerEntry()).thenReturn(new LayerEntry(expectedSnapshotDependenciesFiles,EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getResourcesLayerEntry()).thenReturn(new LayerEntry(expectedResourcesFiles,EXPECTED_RESOURCES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getClassesLayerEntry()).thenReturn(new LayerEntry(expectedClassesFiles,EXPECTED_CLASSES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getExtraFilesLayerEntry()).thenReturn(new LayerEntry(expectedExtraFiles,\"/\"));\n  new JavaDockerContextGenerator(mockJavaLayerConfigurations).setBaseImage(\"somebaseimage\").generate(targetDirectory);\n  Assert.assertTrue(Files.exists(targetDirectory.resolve(\"Dockerfile\")));\n  assertSameFiles(targetDirectory.resolve(\"libs\"),testDependencies);\n  assertSameFiles(targetDirectory.resolve(\"snapshot-libs\"),testSnapshotDependencies);\n  assertSameFiles(targetDirectory.resolve(\"resources\"),testResources);\n  assertSameFiles(targetDirectory.resolve(\"classes\"),testClasses);\n  assertSameFiles(targetDirectory.resolve(\"root\"),testExtraFiles);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2645,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testGenerate() throws IOException, URISyntaxException {\n  Path testDependencies=Paths.get(Resources.getResource(\"application/dependencies\").toURI());\n  Path testSnapshotDependencies=Paths.get(Resources.getResource(\"application/snapshot-dependencies\").toURI());\n  Path testResources=Paths.get(Resources.getResource(\"application/resources\").toURI());\n  Path testClasses=Paths.get(Resources.getResource(\"application/classes\").toURI());\n  Path testExtraFiles=Paths.get(Resources.getResource(\"layer\").toURI());\n  ImmutableList<Path> expectedDependenciesFiles=listFilesInDirectory(testDependencies);\n  ImmutableList<Path> expectedSnapshotDependenciesFiles=listFilesInDirectory(testSnapshotDependencies);\n  ImmutableList<Path> expectedResourcesFiles=listFilesInDirectory(testResources);\n  ImmutableList<Path> expectedClassesFiles=listFilesInDirectory(testClasses);\n  ImmutableList<Path> expectedExtraFiles=listFilesInDirectory(testExtraFiles);\n  Path targetDirectory=temporaryFolder.newFolder().toPath();\n  Files.delete(targetDirectory);\n  Mockito.when(mockJavaLayerConfigurations.getDependenciesLayerEntry()).thenReturn(new LayerEntry(expectedDependenciesFiles,EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getSnapshotDependenciesLayerEntry()).thenReturn(new LayerEntry(expectedSnapshotDependenciesFiles,EXPECTED_DEPENDENCIES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getResourcesLayerEntry()).thenReturn(new LayerEntry(expectedResourcesFiles,EXPECTED_RESOURCES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getClassesLayerEntry()).thenReturn(new LayerEntry(expectedClassesFiles,EXPECTED_CLASSES_PATH));\n  Mockito.when(mockJavaLayerConfigurations.getExtraFilesLayerEntry()).thenReturn(new LayerEntry(expectedExtraFiles,\"/\"));\n  new JavaDockerContextGenerator(mockJavaLayerConfigurations).setBaseImage(\"somebaseimage\").generate(targetDirectory);\n  Assert.assertTrue(Files.exists(targetDirectory.resolve(\"Dockerfile\")));\n  assertSameFiles(targetDirectory.resolve(\"libs\"),testDependencies);\n  assertSameFiles(targetDirectory.resolve(\"snapshot-libs\"),testSnapshotDependencies);\n  assertSameFiles(targetDirectory.resolve(\"resources\"),testResources);\n  assertSameFiles(targetDirectory.resolve(\"classes\"),testClasses);\n  assertSameFiles(targetDirectory.resolve(\"root\"),testExtraFiles);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertSameFiles(targetDirectory.resolve(\"resources\"),testResources);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Path"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 86,
    "startColumnNumber" : 70,
    "endLineNumber" : 86,
    "endColumnNumber" : 83
  }, {
    "charLength" : 13,
    "startLineNumber" : 115,
    "startColumnNumber" : 58,
    "endLineNumber" : 115,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}