{
  "id" : 241,
  "expression" : "ErrorHandler.class",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-jms/src/test/java/org/springframework/jms/listener/SimpleMessageListenerContainerTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ErrorHandler.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 329,
      "startColumnNumber" : 35,
      "endLineNumber" : 329,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 329,
        "startColumnNumber" : 30,
        "endLineNumber" : 329,
        "endColumnNumber" : 54
      },
      "nodeContext" : "mock(ErrorHandler.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 329,
        "startColumnNumber" : 15,
        "endLineNumber" : 329,
        "endColumnNumber" : 54
      },
      "nodeContext" : "errorHandler=mock(ErrorHandler.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 329,
        "startColumnNumber" : 2,
        "endLineNumber" : 329,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ErrorHandler errorHandler=mock(ErrorHandler.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1944,
        "startLineNumber" : 298,
        "startColumnNumber" : 79,
        "endLineNumber" : 343,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final SimpleMessageConsumer messageConsumer=new SimpleMessageConsumer();\n  Session session=mock(Session.class);\n  given(session.createQueue(DESTINATION_NAME)).willReturn(QUEUE_DESTINATION);\n  given(session.createConsumer(QUEUE_DESTINATION,null)).willReturn(messageConsumer);\n  given(session.getTransacted()).willReturn(false);\n  Connection connection=mock(Connection.class);\n  given(connection.createSession(this.container.isSessionTransacted(),this.container.getSessionAcknowledgeMode())).willReturn(session);\n  ConnectionFactory connectionFactory=mock(ConnectionFactory.class);\n  given(connectionFactory.createConnection()).willReturn(connection);\n  final IllegalStateException theException=new IllegalStateException(\"intentional test failure\");\n  this.container.setConnectionFactory(connectionFactory);\n  this.container.setDestinationName(DESTINATION_NAME);\n  this.container.setMessageListener(new SessionAwareMessageListener<Message>(){\n    @Override public void onMessage(    Message message,    @Nullable Session session) throws JMSException {\n      throw theException;\n    }\n  }\n);\n  ErrorHandler errorHandler=mock(ErrorHandler.class);\n  this.container.setErrorHandler(errorHandler);\n  this.container.afterPropertiesSet();\n  this.container.start();\n  Message message=mock(Message.class);\n  messageConsumer.sendMessage(message);\n  verify(connection).setExceptionListener(this.container);\n  verify(connection).start();\n  verify(errorHandler).handleError(theException);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2029,
        "startLineNumber" : 297,
        "startColumnNumber" : 1,
        "endLineNumber" : 343,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRegisteredErrorHandlerIsInvokedOnException() throws Exception {\n  final SimpleMessageConsumer messageConsumer=new SimpleMessageConsumer();\n  Session session=mock(Session.class);\n  given(session.createQueue(DESTINATION_NAME)).willReturn(QUEUE_DESTINATION);\n  given(session.createConsumer(QUEUE_DESTINATION,null)).willReturn(messageConsumer);\n  given(session.getTransacted()).willReturn(false);\n  Connection connection=mock(Connection.class);\n  given(connection.createSession(this.container.isSessionTransacted(),this.container.getSessionAcknowledgeMode())).willReturn(session);\n  ConnectionFactory connectionFactory=mock(ConnectionFactory.class);\n  given(connectionFactory.createConnection()).willReturn(connection);\n  final IllegalStateException theException=new IllegalStateException(\"intentional test failure\");\n  this.container.setConnectionFactory(connectionFactory);\n  this.container.setDestinationName(DESTINATION_NAME);\n  this.container.setMessageListener(new SessionAwareMessageListener<Message>(){\n    @Override public void onMessage(    Message message,    @Nullable Session session) throws JMSException {\n      throw theException;\n    }\n  }\n);\n  ErrorHandler errorHandler=mock(ErrorHandler.class);\n  this.container.setErrorHandler(errorHandler);\n  this.container.afterPropertiesSet();\n  this.container.start();\n  Message message=mock(Message.class);\n  messageConsumer.sendMessage(message);\n  verify(connection).setExceptionListener(this.container);\n  verify(connection).start();\n  verify(errorHandler).handleError(theException);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 329,
        "startColumnNumber" : 2,
        "endLineNumber" : 329,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ErrorHandler errorHandler=mock(ErrorHandler.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.springframework.util.ErrorHandler>"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 329,
    "startColumnNumber" : 35,
    "endLineNumber" : 329,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}