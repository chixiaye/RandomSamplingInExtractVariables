{
  "id" : 299,
  "expression" : "i < n",
  "projectName" : "libgdx@libgdx",
  "commitID" : "0d592b9703000c29994e4395d15194d0cd56872c",
  "filePath" : "gdx/src/com/badlogic/gdx/graphics/g3d/ModelCache.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < n",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 270,
      "startColumnNumber" : 34,
      "endLineNumber" : 270,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1618,
        "startLineNumber" : 270,
        "startColumnNumber" : 2,
        "endLineNumber" : 303,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0, n=items.size; i < n; ++i) {\n  final Renderable renderable=items.get(i);\n  final VertexAttributes va=renderable.meshPart.mesh.getVertexAttributes();\n  final Material mat=renderable.material;\n  final int pt=renderable.meshPart.primitiveType;\n  final boolean sameAttributes=va.equals(vertexAttributes);\n  final boolean indexedMesh=renderable.meshPart.mesh.getNumIndices() > 0;\n  final int verticesToAdd=indexedMesh ? renderable.meshPart.mesh.getNumVertices() : renderable.meshPart.size;\n  final boolean canHoldVertices=meshBuilder.getNumVertices() + verticesToAdd <= MeshBuilder.MAX_VERTICES;\n  final boolean sameMesh=sameAttributes && canHoldVertices;\n  final boolean samePart=sameMesh && pt == primitiveType && mat.same(material,true);\n  if (!samePart) {\n    if (!sameMesh) {\n      final Mesh mesh=meshBuilder.end(meshPool.obtain(vertexAttributes,meshBuilder.getNumVertices(),meshBuilder.getNumIndices()));\n      while (offset < renderables.size)       renderables.get(offset++).meshPart.mesh=mesh;\n      meshBuilder.begin(vertexAttributes=va);\n    }\n    final MeshPart newPart=meshBuilder.part(\"\",pt,meshPartPool.obtain());\n    final Renderable previous=renderables.get(renderables.size - 1);\n    previous.meshPart.offset=part.offset;\n    previous.meshPart.size=part.size;\n    part=newPart;\n    renderables.add(obtainRenderable(material=mat,primitiveType=pt));\n  }\n  meshBuilder.setVertexTransform(renderable.worldTransform);\n  meshBuilder.addMesh(renderable.meshPart.mesh,renderable.meshPart.offset,renderable.meshPart.size);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 281,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2660,
        "startLineNumber" : 250,
        "startColumnNumber" : 20,
        "endLineNumber" : 313,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!building)   throw new GdxRuntimeException(\"Call begin() prior to calling end()\");\n  building=false;\n  if (items.size == 0)   return;\n  sorter.sort(camera,items);\n  int itemCount=items.size;\n  int initCount=renderables.size;\n  final Renderable first=items.get(0);\n  VertexAttributes vertexAttributes=first.meshPart.mesh.getVertexAttributes();\n  Material material=first.material;\n  int primitiveType=first.meshPart.primitiveType;\n  int offset=renderables.size;\n  meshBuilder.begin(vertexAttributes);\n  MeshPart part=meshBuilder.part(\"\",primitiveType,meshPartPool.obtain());\n  renderables.add(obtainRenderable(material,primitiveType));\n  for (int i=0, n=items.size; i < n; ++i) {\n    final Renderable renderable=items.get(i);\n    final VertexAttributes va=renderable.meshPart.mesh.getVertexAttributes();\n    final Material mat=renderable.material;\n    final int pt=renderable.meshPart.primitiveType;\n    final boolean sameAttributes=va.equals(vertexAttributes);\n    final boolean indexedMesh=renderable.meshPart.mesh.getNumIndices() > 0;\n    final int verticesToAdd=indexedMesh ? renderable.meshPart.mesh.getNumVertices() : renderable.meshPart.size;\n    final boolean canHoldVertices=meshBuilder.getNumVertices() + verticesToAdd <= MeshBuilder.MAX_VERTICES;\n    final boolean sameMesh=sameAttributes && canHoldVertices;\n    final boolean samePart=sameMesh && pt == primitiveType && mat.same(material,true);\n    if (!samePart) {\n      if (!sameMesh) {\n        final Mesh mesh=meshBuilder.end(meshPool.obtain(vertexAttributes,meshBuilder.getNumVertices(),meshBuilder.getNumIndices()));\n        while (offset < renderables.size)         renderables.get(offset++).meshPart.mesh=mesh;\n        meshBuilder.begin(vertexAttributes=va);\n      }\n      final MeshPart newPart=meshBuilder.part(\"\",pt,meshPartPool.obtain());\n      final Renderable previous=renderables.get(renderables.size - 1);\n      previous.meshPart.offset=part.offset;\n      previous.meshPart.size=part.size;\n      part=newPart;\n      renderables.add(obtainRenderable(material=mat,primitiveType=pt));\n    }\n    meshBuilder.setVertexTransform(renderable.worldTransform);\n    meshBuilder.addMesh(renderable.meshPart.mesh,renderable.meshPart.offset,renderable.meshPart.size);\n  }\n  final Mesh mesh=meshBuilder.end(meshPool.obtain(vertexAttributes,meshBuilder.getNumVertices(),meshBuilder.getNumIndices()));\n  while (offset < renderables.size)   renderables.get(offset++).meshPart.mesh=mesh;\n  final Renderable previous=renderables.get(renderables.size - 1);\n  previous.meshPart.offset=part.offset;\n  previous.meshPart.size=part.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 464,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2985,
        "startLineNumber" : 247,
        "startColumnNumber" : 1,
        "endLineNumber" : 313,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Finishes creating the cache, must be called after a call to  {@link #begin()}, only after this call the cache will be valid (until the next call to  {@link #begin()}). Calling this method will process all renderables added using one of the add(...) methods and will combine them if possible. \n */\npublic void end(){\n  if (!building)   throw new GdxRuntimeException(\"Call begin() prior to calling end()\");\n  building=false;\n  if (items.size == 0)   return;\n  sorter.sort(camera,items);\n  int itemCount=items.size;\n  int initCount=renderables.size;\n  final Renderable first=items.get(0);\n  VertexAttributes vertexAttributes=first.meshPart.mesh.getVertexAttributes();\n  Material material=first.material;\n  int primitiveType=first.meshPart.primitiveType;\n  int offset=renderables.size;\n  meshBuilder.begin(vertexAttributes);\n  MeshPart part=meshBuilder.part(\"\",primitiveType,meshPartPool.obtain());\n  renderables.add(obtainRenderable(material,primitiveType));\n  for (int i=0, n=items.size; i < n; ++i) {\n    final Renderable renderable=items.get(i);\n    final VertexAttributes va=renderable.meshPart.mesh.getVertexAttributes();\n    final Material mat=renderable.material;\n    final int pt=renderable.meshPart.primitiveType;\n    final boolean sameAttributes=va.equals(vertexAttributes);\n    final boolean indexedMesh=renderable.meshPart.mesh.getNumIndices() > 0;\n    final int verticesToAdd=indexedMesh ? renderable.meshPart.mesh.getNumVertices() : renderable.meshPart.size;\n    final boolean canHoldVertices=meshBuilder.getNumVertices() + verticesToAdd <= MeshBuilder.MAX_VERTICES;\n    final boolean sameMesh=sameAttributes && canHoldVertices;\n    final boolean samePart=sameMesh && pt == primitiveType && mat.same(material,true);\n    if (!samePart) {\n      if (!sameMesh) {\n        final Mesh mesh=meshBuilder.end(meshPool.obtain(vertexAttributes,meshBuilder.getNumVertices(),meshBuilder.getNumIndices()));\n        while (offset < renderables.size)         renderables.get(offset++).meshPart.mesh=mesh;\n        meshBuilder.begin(vertexAttributes=va);\n      }\n      final MeshPart newPart=meshBuilder.part(\"\",pt,meshPartPool.obtain());\n      final Renderable previous=renderables.get(renderables.size - 1);\n      previous.meshPart.offset=part.offset;\n      previous.meshPart.size=part.size;\n      part=newPart;\n      renderables.add(obtainRenderable(material=mat,primitiveType=pt));\n    }\n    meshBuilder.setVertexTransform(renderable.worldTransform);\n    meshBuilder.addMesh(renderable.meshPart.mesh,renderable.meshPart.offset,renderable.meshPart.size);\n  }\n  final Mesh mesh=meshBuilder.end(meshPool.obtain(vertexAttributes,meshBuilder.getNumVertices(),meshBuilder.getNumIndices()));\n  while (offset < renderables.size)   renderables.get(offset++).meshPart.mesh=mesh;\n  final Renderable previous=renderables.get(renderables.size - 1);\n  previous.meshPart.offset=part.offset;\n  previous.meshPart.size=part.size;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1618,
        "startLineNumber" : 270,
        "startColumnNumber" : 2,
        "endLineNumber" : 303,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0, n=items.size; i < n; ++i) {\n  final Renderable renderable=items.get(i);\n  final VertexAttributes va=renderable.meshPart.mesh.getVertexAttributes();\n  final Material mat=renderable.material;\n  final int pt=renderable.meshPart.primitiveType;\n  final boolean sameAttributes=va.equals(vertexAttributes);\n  final boolean indexedMesh=renderable.meshPart.mesh.getNumIndices() > 0;\n  final int verticesToAdd=indexedMesh ? renderable.meshPart.mesh.getNumVertices() : renderable.meshPart.size;\n  final boolean canHoldVertices=meshBuilder.getNumVertices() + verticesToAdd <= MeshBuilder.MAX_VERTICES;\n  final boolean sameMesh=sameAttributes && canHoldVertices;\n  final boolean samePart=sameMesh && pt == primitiveType && mat.same(material,true);\n  if (!samePart) {\n    if (!sameMesh) {\n      final Mesh mesh=meshBuilder.end(meshPool.obtain(vertexAttributes,meshBuilder.getNumVertices(),meshBuilder.getNumIndices()));\n      while (offset < renderables.size)       renderables.get(offset++).meshPart.mesh=mesh;\n      meshBuilder.begin(vertexAttributes=va);\n    }\n    final MeshPart newPart=meshBuilder.part(\"\",pt,meshPartPool.obtain());\n    final Renderable previous=renderables.get(renderables.size - 1);\n    previous.meshPart.offset=part.offset;\n    previous.meshPart.size=part.size;\n    part=newPart;\n    renderables.add(obtainRenderable(material=mat,primitiveType=pt));\n  }\n  meshBuilder.setVertexTransform(renderable.worldTransform);\n  meshBuilder.addMesh(renderable.meshPart.mesh,renderable.meshPart.offset,renderable.meshPart.size);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 281,
      "astHeight" : 14
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 270,
    "startColumnNumber" : 34,
    "endLineNumber" : 270,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}