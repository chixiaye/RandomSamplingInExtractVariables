{
  "id" : 413,
  "expression" : "4",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-javanica/src/test/java/com/netflix/hystrix/contrib/javanica/test/common/collapser/BasicCollapserTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "4",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 150,
      "startColumnNumber" : 21,
      "endLineNumber" : 150,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 150,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 94
      },
      "nodeContext" : "assertEquals(4,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 150,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 95
      },
      "nodeContext" : "assertEquals(4,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1868,
        "startLineNumber" : 137,
        "startColumnNumber" : 112,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Future<User> f1=userService.getUserByIdWithFallbackWithThrowableParam(\"1\");\n  Future<User> f2=userService.getUserByIdWithFallbackWithThrowableParam(\"2\");\n  Future<User> f3=userService.getUserByIdWithFallbackWithThrowableParam(\"3\");\n  Future<User> f4=userService.getUserByIdWithFallbackWithThrowableParam(\"4\");\n  Future<User> f5=userService.getUserByIdWithFallbackWithThrowableParam(\"5\");\n  assertEquals(\"name: 1\",f1.get().getName());\n  assertEquals(\"name: 2\",f2.get().getName());\n  assertEquals(\"name: 3\",f3.get().getName());\n  assertEquals(\"name: 4\",f4.get().getName());\n  assertEquals(\"name: 5\",f5.get().getName());\n  assertEquals(4,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n  HystrixInvokableInfo<?> batchCommand=getHystrixCommandByKey(\"getUserByIdsThrowsException\");\n  com.netflix.hystrix.HystrixInvokableInfo fallback1=getHystrixCommandByKey(\"getUserByIdsFallbackWithThrowableParam1\");\n  com.netflix.hystrix.HystrixInvokableInfo fallback2=getHystrixCommandByKey(\"getUserByIdsFallbackWithThrowableParam2\");\n  com.netflix.hystrix.HystrixInvokableInfo fallback3=getHystrixCommandByKey(\"getUserByIdsFallbackWithThrowableParam3\");\n  assertTrue(batchCommand.getExecutionEvents().contains(HystrixEventType.FAILURE));\n  assertTrue(fallback1.getExecutionEvents().contains(HystrixEventType.FAILURE));\n  assertTrue(fallback2.getExecutionEvents().contains(HystrixEventType.FAILURE));\n  assertTrue(fallback2.getExecutionEvents().contains(HystrixEventType.FALLBACK_SUCCESS));\n  assertTrue(fallback3.getExecutionEvents().contains(HystrixEventType.SUCCESS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1986,
        "startLineNumber" : 136,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetUserByIdWithFallbackWithThrowableParam() throws ExecutionException, InterruptedException {\n  Future<User> f1=userService.getUserByIdWithFallbackWithThrowableParam(\"1\");\n  Future<User> f2=userService.getUserByIdWithFallbackWithThrowableParam(\"2\");\n  Future<User> f3=userService.getUserByIdWithFallbackWithThrowableParam(\"3\");\n  Future<User> f4=userService.getUserByIdWithFallbackWithThrowableParam(\"4\");\n  Future<User> f5=userService.getUserByIdWithFallbackWithThrowableParam(\"5\");\n  assertEquals(\"name: 1\",f1.get().getName());\n  assertEquals(\"name: 2\",f2.get().getName());\n  assertEquals(\"name: 3\",f3.get().getName());\n  assertEquals(\"name: 4\",f4.get().getName());\n  assertEquals(\"name: 5\",f5.get().getName());\n  assertEquals(4,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n  HystrixInvokableInfo<?> batchCommand=getHystrixCommandByKey(\"getUserByIdsThrowsException\");\n  com.netflix.hystrix.HystrixInvokableInfo fallback1=getHystrixCommandByKey(\"getUserByIdsFallbackWithThrowableParam1\");\n  com.netflix.hystrix.HystrixInvokableInfo fallback2=getHystrixCommandByKey(\"getUserByIdsFallbackWithThrowableParam2\");\n  com.netflix.hystrix.HystrixInvokableInfo fallback3=getHystrixCommandByKey(\"getUserByIdsFallbackWithThrowableParam3\");\n  assertTrue(batchCommand.getExecutionEvents().contains(HystrixEventType.FAILURE));\n  assertTrue(fallback1.getExecutionEvents().contains(HystrixEventType.FAILURE));\n  assertTrue(fallback2.getExecutionEvents().contains(HystrixEventType.FAILURE));\n  assertTrue(fallback2.getExecutionEvents().contains(HystrixEventType.FALLBACK_SUCCESS));\n  assertTrue(fallback3.getExecutionEvents().contains(HystrixEventType.SUCCESS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 234,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 150,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 95
      },
      "nodeContext" : "assertEquals(4,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 150,
    "startColumnNumber" : 21,
    "endLineNumber" : 150,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}