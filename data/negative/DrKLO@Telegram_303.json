{
  "id" : 303,
  "expression" : "null",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "51aa4141a41a811e87b829f587753f0b20158a9b",
  "filePath" : "TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java",
  "occurrences" : 23,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1833,
      "startColumnNumber" : 23,
      "endLineNumber" : 1833,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1833,
        "startColumnNumber" : 12,
        "endLineNumber" : 1833,
        "endColumnNumber" : 27
      },
      "nodeContext" : "message == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 1833,
        "startColumnNumber" : 8,
        "endLineNumber" : 1836,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message == null) {\n  FileLog.e(\"tmessages\",\"message is null\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1833,
        "startColumnNumber" : 12,
        "endLineNumber" : 1833,
        "endColumnNumber" : 27
      },
      "nodeContext" : "message == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1842,
      "startColumnNumber" : 23,
      "endLineNumber" : 1842,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 1842,
        "startColumnNumber" : 16,
        "endLineNumber" : 1842,
        "endColumnNumber" : 27
      },
      "nodeContext" : "arr == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 1842,
        "startColumnNumber" : 12,
        "endLineNumber" : 1845,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (arr == null) {\n  arr=new ArrayList<Long>();\n  processedSessionChanges.put(sessionId,arr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2114,
        "startLineNumber" : 1839,
        "startColumnNumber" : 61,
        "endLineNumber" : 1878,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 1842,
        "startColumnNumber" : 16,
        "endLineNumber" : 1842,
        "endColumnNumber" : 27
      },
      "nodeContext" : "arr == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1862,
      "startColumnNumber" : 148,
      "endLineNumber" : 1862,
      "endColumnNumber" : 152
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1862,
        "startColumnNumber" : 137,
        "endLineNumber" : 1862,
        "endColumnNumber" : 152
      },
      "nodeContext" : "dcenter != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 1862,
        "startColumnNumber" : 24,
        "endLineNumber" : 1862,
        "endColumnNumber" : 152
      },
      "nodeContext" : "request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 1862,
        "startColumnNumber" : 24,
        "endLineNumber" : 1862,
        "endColumnNumber" : 203
      },
      "nodeContext" : "request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 1862,
        "startColumnNumber" : 20,
        "endLineNumber" : 1868,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n  request.runningMessageId=0;\n  request.runningMessageSeqNo=0;\n  request.runningStartTime=0;\n  request.runningMinStartTime=0;\n  request.transportChannelToken=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 1860,
        "startColumnNumber" : 59,
        "endLineNumber" : 1869,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n  if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.runningStartTime=0;\n    request.runningMinStartTime=0;\n    request.transportChannelToken=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 1860,
        "startColumnNumber" : 16,
        "endLineNumber" : 1869,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n  if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.runningStartTime=0;\n    request.runningMinStartTime=0;\n    request.transportChannelToken=0;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1731,
        "startLineNumber" : 1846,
        "startColumnNumber" : 53,
        "endLineNumber" : 1877,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FileLog.d(\"tmessages\",\"New session:\");\n  FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n  FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n  FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n  long serverSalt=newSession.server_salt;\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=serverSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  for (  RPCRequest request : runningRequests) {\n    Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n    if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.runningStartTime=0;\n      request.runningMinStartTime=0;\n      request.transportChannelToken=0;\n    }\n  }\n  saveSession();\n  if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n    MessagesController.getInstance().getDifference();\n  }\n  arr.add(newSession.unique_id);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1772,
        "startLineNumber" : 1846,
        "startColumnNumber" : 12,
        "endLineNumber" : 1877,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!arr.contains(newSession.unique_id)) {\n  FileLog.d(\"tmessages\",\"New session:\");\n  FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n  FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n  FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n  long serverSalt=newSession.server_salt;\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=serverSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  for (  RPCRequest request : runningRequests) {\n    Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n    if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.runningStartTime=0;\n      request.runningMinStartTime=0;\n      request.transportChannelToken=0;\n    }\n  }\n  saveSession();\n  if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n    MessagesController.getInstance().getDifference();\n  }\n  arr.add(newSession.unique_id);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2114,
        "startLineNumber" : 1839,
        "startColumnNumber" : 61,
        "endLineNumber" : 1878,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 1862,
        "startColumnNumber" : 24,
        "endLineNumber" : 1862,
        "endColumnNumber" : 203
      },
      "nodeContext" : "request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 30,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1890,
      "startColumnNumber" : 31,
      "endLineNumber" : 1890,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 1890,
        "startColumnNumber" : 24,
        "endLineNumber" : 1890,
        "endColumnNumber" : 35
      },
      "nodeContext" : "set == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 1890,
        "startColumnNumber" : 20,
        "endLineNumber" : 1893,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (set == null) {\n  set=new ArrayList<Long>();\n  messagesIdsForConfirmation.put(sessionId,set);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 1888,
        "startColumnNumber" : 49,
        "endLineNumber" : 1895,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n  if (set == null) {\n    set=new ArrayList<Long>();\n    messagesIdsForConfirmation.put(sessionId,set);\n  }\n  set.add(innerMessageId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 1888,
        "startColumnNumber" : 16,
        "endLineNumber" : 1895,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (innerMessage.seqno % 2 != 0) {\n  ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n  if (set == null) {\n    set=new ArrayList<Long>();\n    messagesIdsForConfirmation.put(sessionId,set);\n  }\n  set.add(innerMessageId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 1886,
        "startColumnNumber" : 81,
        "endLineNumber" : 1901,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  long innerMessageId=innerMessage.msg_id;\n  if (innerMessage.seqno % 2 != 0) {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(innerMessageId);\n  }\n  if (isMessageIdProcessed(sessionId,innerMessageId)) {\n    continue;\n  }\n  processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n  addProcessedMessageId(sessionId,innerMessageId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 1886,
        "startColumnNumber" : 12,
        "endLineNumber" : 1901,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n  long innerMessageId=innerMessage.msg_id;\n  if (innerMessage.seqno % 2 != 0) {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(innerMessageId);\n  }\n  if (isMessageIdProcessed(sessionId,innerMessageId)) {\n    continue;\n  }\n  processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n  addProcessedMessageId(sessionId,innerMessageId);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 1878,
        "startColumnNumber" : 62,
        "endLineNumber" : 1902,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 1890,
        "startColumnNumber" : 24,
        "endLineNumber" : 1890,
        "endColumnNumber" : 35
      },
      "nodeContext" : "set == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1934,
      "startColumnNumber" : 51,
      "endLineNumber" : 1934,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1934,
        "startColumnNumber" : 24,
        "endLineNumber" : 1934,
        "endColumnNumber" : 55
      },
      "nodeContext" : "request.completionBlock != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 1934,
        "startColumnNumber" : 20,
        "endLineNumber" : 1936,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  request.completionBlock.run(futureSalts,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 348,
        "startLineNumber" : 1933,
        "startColumnNumber" : 61,
        "endLineNumber" : 1944,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.completionBlock != null) {\n    request.completionBlock.run(futureSalts,null);\n  }\n  futureSalts.freeResources();\n  messagesConfirmed(requestMid);\n  rpcCompleted(requestMid);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 393,
        "startLineNumber" : 1933,
        "startColumnNumber" : 16,
        "endLineNumber" : 1944,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.respondsToMessageId(requestMid)) {\n  if (request.completionBlock != null) {\n    request.completionBlock.run(futureSalts,null);\n  }\n  futureSalts.freeResources();\n  messagesConfirmed(requestMid);\n  rpcCompleted(requestMid);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 1932,
        "startColumnNumber" : 55,
        "endLineNumber" : 1945,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(requestMid)) {\n    if (request.completionBlock != null) {\n      request.completionBlock.run(futureSalts,null);\n    }\n    futureSalts.freeResources();\n    messagesConfirmed(requestMid);\n    rpcCompleted(requestMid);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 1932,
        "startColumnNumber" : 12,
        "endLineNumber" : 1945,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(requestMid)) {\n    if (request.completionBlock != null) {\n      request.completionBlock.run(futureSalts,null);\n    }\n    futureSalts.freeResources();\n    messagesConfirmed(requestMid);\n    rpcCompleted(requestMid);\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 1929,
        "startColumnNumber" : 60,
        "endLineNumber" : 1946,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1934,
        "startColumnNumber" : 24,
        "endLineNumber" : 1934,
        "endColumnNumber" : 55
      },
      "nodeContext" : "request.completionBlock != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1935,
      "startColumnNumber" : 65,
      "endLineNumber" : 1935,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 1935,
        "startColumnNumber" : 24,
        "endLineNumber" : 1935,
        "endColumnNumber" : 70
      },
      "nodeContext" : "request.completionBlock.run(futureSalts,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1935,
        "startColumnNumber" : 24,
        "endLineNumber" : 1935,
        "endColumnNumber" : 71
      },
      "nodeContext" : "request.completionBlock.run(futureSalts,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 1934,
        "startColumnNumber" : 57,
        "endLineNumber" : 1936,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  request.completionBlock.run(futureSalts,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 1934,
        "startColumnNumber" : 20,
        "endLineNumber" : 1936,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  request.completionBlock.run(futureSalts,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 348,
        "startLineNumber" : 1933,
        "startColumnNumber" : 61,
        "endLineNumber" : 1944,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.completionBlock != null) {\n    request.completionBlock.run(futureSalts,null);\n  }\n  futureSalts.freeResources();\n  messagesConfirmed(requestMid);\n  rpcCompleted(requestMid);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 393,
        "startLineNumber" : 1933,
        "startColumnNumber" : 16,
        "endLineNumber" : 1944,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.respondsToMessageId(requestMid)) {\n  if (request.completionBlock != null) {\n    request.completionBlock.run(futureSalts,null);\n  }\n  futureSalts.freeResources();\n  messagesConfirmed(requestMid);\n  rpcCompleted(requestMid);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 1932,
        "startColumnNumber" : 55,
        "endLineNumber" : 1945,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(requestMid)) {\n    if (request.completionBlock != null) {\n      request.completionBlock.run(futureSalts,null);\n    }\n    futureSalts.freeResources();\n    messagesConfirmed(requestMid);\n    rpcCompleted(requestMid);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 1932,
        "startColumnNumber" : 12,
        "endLineNumber" : 1945,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(requestMid)) {\n    if (request.completionBlock != null) {\n      request.completionBlock.run(futureSalts,null);\n    }\n    futureSalts.freeResources();\n    messagesConfirmed(requestMid);\n    rpcCompleted(requestMid);\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 1929,
        "startColumnNumber" : 60,
        "endLineNumber" : 1946,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1935,
        "startColumnNumber" : 24,
        "endLineNumber" : 1935,
        "endColumnNumber" : 71
      },
      "nodeContext" : "request.completionBlock.run(futureSalts,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1989,
      "startColumnNumber" : 38,
      "endLineNumber" : 1989,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 1989,
        "startColumnNumber" : 32,
        "endLineNumber" : 1989,
        "endColumnNumber" : 42
      },
      "nodeContext" : "val=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 1989,
        "startColumnNumber" : 32,
        "endLineNumber" : 1989,
        "endColumnNumber" : 43
      },
      "nodeContext" : "val=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 1988,
        "startColumnNumber" : 50,
        "endLineNumber" : 1990,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  val=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 1988,
        "startColumnNumber" : 30,
        "endLineNumber" : 1990,
        "endColumnNumber" : 29
      },
      "nodeContext" : "catch (Exception e) {\n  val=null;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 1986,
        "startColumnNumber" : 28,
        "endLineNumber" : 1990,
        "endColumnNumber" : 29
      },
      "nodeContext" : "try {\n  val=Integer.parseInt(errorMsg);\n}\n catch (Exception e) {\n  val=null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 1976,
        "startColumnNumber" : 66,
        "endLineNumber" : 1997,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  String errorMsg=errorMessage.replace(possibleError,\"\");\n  Pattern pattern=Pattern.compile(\"[0-9]+\");\n  Matcher matcher=pattern.matcher(errorMsg);\n  if (matcher.find()) {\n    errorMsg=matcher.group(0);\n  }\n  Integer val;\n  try {\n    val=Integer.parseInt(errorMsg);\n  }\n catch (  Exception e) {\n    val=null;\n  }\n  if (val != null) {\n    migrateToDatacenterId=val;\n  }\n else {\n    migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 967,
        "startLineNumber" : 1976,
        "startColumnNumber" : 24,
        "endLineNumber" : 1997,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (errorMessage.contains(possibleError)) {\n  String errorMsg=errorMessage.replace(possibleError,\"\");\n  Pattern pattern=Pattern.compile(\"[0-9]+\");\n  Matcher matcher=pattern.matcher(errorMsg);\n  if (matcher.find()) {\n    errorMsg=matcher.group(0);\n  }\n  Integer val;\n  try {\n    val=Integer.parseInt(errorMsg);\n  }\n catch (  Exception e) {\n    val=null;\n  }\n  if (val != null) {\n    migrateToDatacenterId=val;\n  }\n else {\n    migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 1975,
        "startColumnNumber" : 63,
        "endLineNumber" : 1998,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (errorMessage.contains(possibleError)) {\n    String errorMsg=errorMessage.replace(possibleError,\"\");\n    Pattern pattern=Pattern.compile(\"[0-9]+\");\n    Matcher matcher=pattern.matcher(errorMsg);\n    if (matcher.find()) {\n      errorMsg=matcher.group(0);\n    }\n    Integer val;\n    try {\n      val=Integer.parseInt(errorMsg);\n    }\n catch (    Exception e) {\n      val=null;\n    }\n    if (val != null) {\n      migrateToDatacenterId=val;\n    }\n else {\n      migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 1975,
        "startColumnNumber" : 20,
        "endLineNumber" : 1998,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (String possibleError : migrateErrors) {\n  if (errorMessage.contains(possibleError)) {\n    String errorMsg=errorMessage.replace(possibleError,\"\");\n    Pattern pattern=Pattern.compile(\"[0-9]+\");\n    Matcher matcher=pattern.matcher(errorMsg);\n    if (matcher.find()) {\n      errorMsg=matcher.group(0);\n    }\n    Integer val;\n    try {\n      val=Integer.parseInt(errorMsg);\n    }\n catch (    Exception e) {\n      val=null;\n    }\n    if (val != null) {\n      migrateToDatacenterId=val;\n    }\n else {\n      migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1349,
        "startLineNumber" : 1970,
        "startColumnNumber" : 80,
        "endLineNumber" : 1999,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ArrayList<String> migrateErrors=new ArrayList<String>();\n  migrateErrors.add(\"NETWORK_MIGRATE_\");\n  migrateErrors.add(\"PHONE_MIGRATE_\");\n  migrateErrors.add(\"USER_MIGRATE_\");\n  for (  String possibleError : migrateErrors) {\n    if (errorMessage.contains(possibleError)) {\n      String errorMsg=errorMessage.replace(possibleError,\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        migrateToDatacenterId=val;\n      }\n else {\n        migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1413,
        "startLineNumber" : 1970,
        "startColumnNumber" : 16,
        "endLineNumber" : 1999,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n  ArrayList<String> migrateErrors=new ArrayList<String>();\n  migrateErrors.add(\"NETWORK_MIGRATE_\");\n  migrateErrors.add(\"PHONE_MIGRATE_\");\n  migrateErrors.add(\"USER_MIGRATE_\");\n  for (  String possibleError : migrateErrors) {\n    if (errorMessage.contains(possibleError)) {\n      String errorMsg=errorMessage.replace(possibleError,\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        migrateToDatacenterId=val;\n      }\n else {\n        migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 135,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1947,
        "startLineNumber" : 1964,
        "startColumnNumber" : 66,
        "endLineNumber" : 2005,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n  if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n    ArrayList<String> migrateErrors=new ArrayList<String>();\n    migrateErrors.add(\"NETWORK_MIGRATE_\");\n    migrateErrors.add(\"PHONE_MIGRATE_\");\n    migrateErrors.add(\"USER_MIGRATE_\");\n    for (    String possibleError : migrateErrors) {\n      if (errorMessage.contains(possibleError)) {\n        String errorMsg=errorMessage.replace(possibleError,\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          migrateToDatacenterId=val;\n        }\n else {\n          migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n        }\n      }\n    }\n  }\n  if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n    ignoreResult=true;\n    moveToDatacenter(migrateToDatacenterId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2001,
        "startLineNumber" : 1964,
        "startColumnNumber" : 12,
        "endLineNumber" : 2005,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resultContainer.result instanceof TLRPC.RpcError) {\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n  if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n    ArrayList<String> migrateErrors=new ArrayList<String>();\n    migrateErrors.add(\"NETWORK_MIGRATE_\");\n    migrateErrors.add(\"PHONE_MIGRATE_\");\n    migrateErrors.add(\"USER_MIGRATE_\");\n    for (    String possibleError : migrateErrors) {\n      if (errorMessage.contains(possibleError)) {\n        String errorMsg=errorMessage.replace(possibleError,\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          migrateToDatacenterId=val;\n        }\n else {\n          migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n        }\n      }\n    }\n  }\n  if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n    ignoreResult=true;\n    moveToDatacenter(migrateToDatacenterId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 200,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 1989,
        "startColumnNumber" : 32,
        "endLineNumber" : 1989,
        "endColumnNumber" : 43
      },
      "nodeContext" : "val=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1992,
      "startColumnNumber" : 39,
      "endLineNumber" : 1992,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 1992,
        "startColumnNumber" : 32,
        "endLineNumber" : 1992,
        "endColumnNumber" : 43
      },
      "nodeContext" : "val != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 1992,
        "startColumnNumber" : 28,
        "endLineNumber" : 1996,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (val != null) {\n  migrateToDatacenterId=val;\n}\n else {\n  migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 1976,
        "startColumnNumber" : 66,
        "endLineNumber" : 1997,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  String errorMsg=errorMessage.replace(possibleError,\"\");\n  Pattern pattern=Pattern.compile(\"[0-9]+\");\n  Matcher matcher=pattern.matcher(errorMsg);\n  if (matcher.find()) {\n    errorMsg=matcher.group(0);\n  }\n  Integer val;\n  try {\n    val=Integer.parseInt(errorMsg);\n  }\n catch (  Exception e) {\n    val=null;\n  }\n  if (val != null) {\n    migrateToDatacenterId=val;\n  }\n else {\n    migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 967,
        "startLineNumber" : 1976,
        "startColumnNumber" : 24,
        "endLineNumber" : 1997,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (errorMessage.contains(possibleError)) {\n  String errorMsg=errorMessage.replace(possibleError,\"\");\n  Pattern pattern=Pattern.compile(\"[0-9]+\");\n  Matcher matcher=pattern.matcher(errorMsg);\n  if (matcher.find()) {\n    errorMsg=matcher.group(0);\n  }\n  Integer val;\n  try {\n    val=Integer.parseInt(errorMsg);\n  }\n catch (  Exception e) {\n    val=null;\n  }\n  if (val != null) {\n    migrateToDatacenterId=val;\n  }\n else {\n    migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 1975,
        "startColumnNumber" : 63,
        "endLineNumber" : 1998,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (errorMessage.contains(possibleError)) {\n    String errorMsg=errorMessage.replace(possibleError,\"\");\n    Pattern pattern=Pattern.compile(\"[0-9]+\");\n    Matcher matcher=pattern.matcher(errorMsg);\n    if (matcher.find()) {\n      errorMsg=matcher.group(0);\n    }\n    Integer val;\n    try {\n      val=Integer.parseInt(errorMsg);\n    }\n catch (    Exception e) {\n      val=null;\n    }\n    if (val != null) {\n      migrateToDatacenterId=val;\n    }\n else {\n      migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 1975,
        "startColumnNumber" : 20,
        "endLineNumber" : 1998,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (String possibleError : migrateErrors) {\n  if (errorMessage.contains(possibleError)) {\n    String errorMsg=errorMessage.replace(possibleError,\"\");\n    Pattern pattern=Pattern.compile(\"[0-9]+\");\n    Matcher matcher=pattern.matcher(errorMsg);\n    if (matcher.find()) {\n      errorMsg=matcher.group(0);\n    }\n    Integer val;\n    try {\n      val=Integer.parseInt(errorMsg);\n    }\n catch (    Exception e) {\n      val=null;\n    }\n    if (val != null) {\n      migrateToDatacenterId=val;\n    }\n else {\n      migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1349,
        "startLineNumber" : 1970,
        "startColumnNumber" : 80,
        "endLineNumber" : 1999,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ArrayList<String> migrateErrors=new ArrayList<String>();\n  migrateErrors.add(\"NETWORK_MIGRATE_\");\n  migrateErrors.add(\"PHONE_MIGRATE_\");\n  migrateErrors.add(\"USER_MIGRATE_\");\n  for (  String possibleError : migrateErrors) {\n    if (errorMessage.contains(possibleError)) {\n      String errorMsg=errorMessage.replace(possibleError,\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        migrateToDatacenterId=val;\n      }\n else {\n        migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1413,
        "startLineNumber" : 1970,
        "startColumnNumber" : 16,
        "endLineNumber" : 1999,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n  ArrayList<String> migrateErrors=new ArrayList<String>();\n  migrateErrors.add(\"NETWORK_MIGRATE_\");\n  migrateErrors.add(\"PHONE_MIGRATE_\");\n  migrateErrors.add(\"USER_MIGRATE_\");\n  for (  String possibleError : migrateErrors) {\n    if (errorMessage.contains(possibleError)) {\n      String errorMsg=errorMessage.replace(possibleError,\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        migrateToDatacenterId=val;\n      }\n else {\n        migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 135,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1947,
        "startLineNumber" : 1964,
        "startColumnNumber" : 66,
        "endLineNumber" : 2005,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n  if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n    ArrayList<String> migrateErrors=new ArrayList<String>();\n    migrateErrors.add(\"NETWORK_MIGRATE_\");\n    migrateErrors.add(\"PHONE_MIGRATE_\");\n    migrateErrors.add(\"USER_MIGRATE_\");\n    for (    String possibleError : migrateErrors) {\n      if (errorMessage.contains(possibleError)) {\n        String errorMsg=errorMessage.replace(possibleError,\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          migrateToDatacenterId=val;\n        }\n else {\n          migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n        }\n      }\n    }\n  }\n  if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n    ignoreResult=true;\n    moveToDatacenter(migrateToDatacenterId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2001,
        "startLineNumber" : 1964,
        "startColumnNumber" : 12,
        "endLineNumber" : 2005,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resultContainer.result instanceof TLRPC.RpcError) {\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n  if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n    ArrayList<String> migrateErrors=new ArrayList<String>();\n    migrateErrors.add(\"NETWORK_MIGRATE_\");\n    migrateErrors.add(\"PHONE_MIGRATE_\");\n    migrateErrors.add(\"USER_MIGRATE_\");\n    for (    String possibleError : migrateErrors) {\n      if (errorMessage.contains(possibleError)) {\n        String errorMsg=errorMessage.replace(possibleError,\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          migrateToDatacenterId=val;\n        }\n else {\n          migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n        }\n      }\n    }\n  }\n  if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n    ignoreResult=true;\n    moveToDatacenter(migrateToDatacenterId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 200,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 1992,
        "startColumnNumber" : 32,
        "endLineNumber" : 1992,
        "endColumnNumber" : 43
      },
      "nodeContext" : "val != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2019,
      "startColumnNumber" : 55,
      "endLineNumber" : 2019,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 2019,
        "startColumnNumber" : 28,
        "endLineNumber" : 2019,
        "endColumnNumber" : 59
      },
      "nodeContext" : "request.completionBlock != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 2019,
        "startColumnNumber" : 28,
        "endLineNumber" : 2019,
        "endColumnNumber" : 59
      },
      "nodeContext" : "request.completionBlock != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2020,
      "startColumnNumber" : 59,
      "endLineNumber" : 2020,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 2020,
        "startColumnNumber" : 43,
        "endLineNumber" : 2020,
        "endColumnNumber" : 63
      },
      "nodeContext" : "implicitError=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 2020,
        "startColumnNumber" : 28,
        "endLineNumber" : 2020,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TLRPC.TL_error implicitError=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 2020,
        "startColumnNumber" : 28,
        "endLineNumber" : 2020,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TLRPC.TL_error implicitError=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2024,
      "startColumnNumber" : 51,
      "endLineNumber" : 2024,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 2024,
        "startColumnNumber" : 36,
        "endLineNumber" : 2024,
        "endColumnNumber" : 55
      },
      "nodeContext" : "uncomressed == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 2024,
        "startColumnNumber" : 32,
        "endLineNumber" : 2027,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (uncomressed == null) {\n  System.gc();\n  uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 795,
        "startLineNumber" : 2021,
        "startColumnNumber" : 88,
        "endLineNumber" : 2032,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n  TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n  if (uncomressed == null) {\n    System.gc();\n    uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n  }\n  if (uncomressed == null) {\n    throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n  }\n  resultContainer.result=uncomressed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 855,
        "startLineNumber" : 2021,
        "startColumnNumber" : 28,
        "endLineNumber" : 2032,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n  TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n  if (uncomressed == null) {\n    System.gc();\n    uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n  }\n  if (uncomressed == null) {\n    throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n  }\n  resultContainer.result=uncomressed;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 2024,
        "startColumnNumber" : 36,
        "endLineNumber" : 2024,
        "endColumnNumber" : 55
      },
      "nodeContext" : "uncomressed == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2028,
      "startColumnNumber" : 51,
      "endLineNumber" : 2028,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 2028,
        "startColumnNumber" : 36,
        "endLineNumber" : 2028,
        "endColumnNumber" : 55
      },
      "nodeContext" : "uncomressed == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 2028,
        "startColumnNumber" : 32,
        "endLineNumber" : 2030,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (uncomressed == null) {\n  throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 795,
        "startLineNumber" : 2021,
        "startColumnNumber" : 88,
        "endLineNumber" : 2032,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n  TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n  if (uncomressed == null) {\n    System.gc();\n    uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n  }\n  if (uncomressed == null) {\n    throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n  }\n  resultContainer.result=uncomressed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 855,
        "startLineNumber" : 2021,
        "startColumnNumber" : 28,
        "endLineNumber" : 2032,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n  TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n  if (uncomressed == null) {\n    System.gc();\n    uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n  }\n  if (uncomressed == null) {\n    throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n  }\n  resultContainer.result=uncomressed;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 2028,
        "startColumnNumber" : 36,
        "endLineNumber" : 2028,
        "endColumnNumber" : 55
      },
      "nodeContext" : "uncomressed == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2069,
      "startColumnNumber" : 54,
      "endLineNumber" : 2069,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 2069,
        "startColumnNumber" : 48,
        "endLineNumber" : 2069,
        "endColumnNumber" : 58
      },
      "nodeContext" : "val=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 2069,
        "startColumnNumber" : 48,
        "endLineNumber" : 2069,
        "endColumnNumber" : 59
      },
      "nodeContext" : "val=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 2068,
        "startColumnNumber" : 66,
        "endLineNumber" : 2070,
        "endColumnNumber" : 45
      },
      "nodeContext" : "{\n  val=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 2068,
        "startColumnNumber" : 46,
        "endLineNumber" : 2070,
        "endColumnNumber" : 45
      },
      "nodeContext" : "catch (Exception e) {\n  val=null;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 2066,
        "startColumnNumber" : 44,
        "endLineNumber" : 2070,
        "endColumnNumber" : 45
      },
      "nodeContext" : "try {\n  val=Integer.parseInt(errorMsg);\n}\n catch (Exception e) {\n  val=null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 2056,
        "startColumnNumber" : 82,
        "endLineNumber" : 2074,
        "endColumnNumber" : 41
      },
      "nodeContext" : "{\n  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n  Pattern pattern=Pattern.compile(\"[0-9]+\");\n  Matcher matcher=pattern.matcher(errorMsg);\n  if (matcher.find()) {\n    errorMsg=matcher.group(0);\n  }\n  Integer val;\n  try {\n    val=Integer.parseInt(errorMsg);\n  }\n catch (  Exception e) {\n    val=null;\n  }\n  if (val != null) {\n    waitTime=val;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 2056,
        "startColumnNumber" : 40,
        "endLineNumber" : 2074,
        "endColumnNumber" : 41
      },
      "nodeContext" : "if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n  Pattern pattern=Pattern.compile(\"[0-9]+\");\n  Matcher matcher=pattern.matcher(errorMsg);\n  if (matcher.find()) {\n    errorMsg=matcher.group(0);\n  }\n  Integer val;\n  try {\n    val=Integer.parseInt(errorMsg);\n  }\n catch (  Exception e) {\n    val=null;\n  }\n  if (val != null) {\n    waitTime=val;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1568,
        "startLineNumber" : 2053,
        "startColumnNumber" : 109,
        "endLineNumber" : 2081,
        "endColumnNumber" : 37
      },
      "nodeContext" : "{\n  double waitTime=2.0;\n  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n    Pattern pattern=Pattern.compile(\"[0-9]+\");\n    Matcher matcher=pattern.matcher(errorMsg);\n    if (matcher.find()) {\n      errorMsg=matcher.group(0);\n    }\n    Integer val;\n    try {\n      val=Integer.parseInt(errorMsg);\n    }\n catch (    Exception e) {\n      val=null;\n    }\n    if (val != null) {\n      waitTime=val;\n    }\n  }\n  waitTime=Math.min(30,waitTime);\n  discardResponse=true;\n  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n  request.confirmed=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1641,
        "startLineNumber" : 2053,
        "startColumnNumber" : 36,
        "endLineNumber" : 2081,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n  double waitTime=2.0;\n  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n    Pattern pattern=Pattern.compile(\"[0-9]+\");\n    Matcher matcher=pattern.matcher(errorMsg);\n    if (matcher.find()) {\n      errorMsg=matcher.group(0);\n    }\n    Integer val;\n    try {\n      val=Integer.parseInt(errorMsg);\n    }\n catch (    Exception e) {\n      val=null;\n    }\n    if (val != null) {\n      waitTime=val;\n    }\n  }\n  waitTime=Math.min(30,waitTime);\n  discardResponse=true;\n  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n  request.confirmed=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 129,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1713,
        "startLineNumber" : 2052,
        "startColumnNumber" : 61,
        "endLineNumber" : 2082,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n    double waitTime=2.0;\n    if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n      String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        waitTime=val;\n      }\n    }\n    waitTime=Math.min(30,waitTime);\n    discardResponse=true;\n    request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n    request.confirmed=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1735,
        "startLineNumber" : 2052,
        "startColumnNumber" : 39,
        "endLineNumber" : 2082,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (errorCode == 420) {\n  if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n    double waitTime=2.0;\n    if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n      String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        waitTime=val;\n      }\n    }\n    waitTime=Math.min(30,waitTime);\n    discardResponse=true;\n    request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n    request.confirmed=false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2699,
        "startLineNumber" : 2039,
        "startColumnNumber" : 32,
        "endLineNumber" : 2082,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (errorCode == 500 || errorCode < 0) {\n  if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n    if (request.serverFailureCount < 1) {\n      discardResponse=true;\n      request.runningMinStartTime=request.runningStartTime + 1;\n    }\n  }\n else {\n    discardResponse=true;\n    int delay=Math.min(1,request.serverFailureCount * 2);\n    request.runningMinStartTime=request.runningStartTime + delay;\n    request.confirmed=false;\n  }\n  request.serverFailureCount++;\n}\n else if (errorCode == 420) {\n  if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n    double waitTime=2.0;\n    if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n      String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        waitTime=val;\n      }\n    }\n    waitTime=Math.min(30,waitTime);\n    discardResponse=true;\n    request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n    request.confirmed=false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 2033,
        "startColumnNumber" : 82,
        "endLineNumber" : 2087,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n  if (errorCode == 500 || errorCode < 0) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n      if (request.serverFailureCount < 1) {\n        discardResponse=true;\n        request.runningMinStartTime=request.runningStartTime + 1;\n      }\n    }\n else {\n      discardResponse=true;\n      int delay=Math.min(1,request.serverFailureCount * 2);\n      request.runningMinStartTime=request.runningStartTime + delay;\n      request.confirmed=false;\n    }\n    request.serverFailureCount++;\n  }\n else   if (errorCode == 420) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n      double waitTime=2.0;\n      if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n        String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          waitTime=val;\n        }\n      }\n      waitTime=Math.min(30,waitTime);\n      discardResponse=true;\n      request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n      request.confirmed=false;\n    }\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n  implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 308,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4337,
        "startLineNumber" : 2033,
        "startColumnNumber" : 28,
        "endLineNumber" : 2097,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (resultContainer.result instanceof TLRPC.RpcError) {\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n  if (errorCode == 500 || errorCode < 0) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n      if (request.serverFailureCount < 1) {\n        discardResponse=true;\n        request.runningMinStartTime=request.runningStartTime + 1;\n      }\n    }\n else {\n      discardResponse=true;\n      int delay=Math.min(1,request.serverFailureCount * 2);\n      request.runningMinStartTime=request.runningStartTime + delay;\n      request.confirmed=false;\n    }\n    request.serverFailureCount++;\n  }\n else   if (errorCode == 420) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n      double waitTime=2.0;\n      if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n        String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          waitTime=val;\n        }\n      }\n      waitTime=Math.min(30,waitTime);\n      discardResponse=true;\n      request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n      request.confirmed=false;\n    }\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n  implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n}\n else if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n  if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n    if (request.rawRequest == null) {\n      FileLog.e(\"tmessages\",\"rawRequest is null\");\n    }\n else {\n      FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=-1000;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 396,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 2069,
        "startColumnNumber" : 48,
        "endLineNumber" : 2069,
        "endColumnNumber" : 59
      },
      "nodeContext" : "val=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2071,
      "startColumnNumber" : 55,
      "endLineNumber" : 2071,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 2071,
        "startColumnNumber" : 48,
        "endLineNumber" : 2071,
        "endColumnNumber" : 59
      },
      "nodeContext" : "val != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 2071,
        "startColumnNumber" : 44,
        "endLineNumber" : 2073,
        "endColumnNumber" : 45
      },
      "nodeContext" : "if (val != null) {\n  waitTime=val;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 2056,
        "startColumnNumber" : 82,
        "endLineNumber" : 2074,
        "endColumnNumber" : 41
      },
      "nodeContext" : "{\n  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n  Pattern pattern=Pattern.compile(\"[0-9]+\");\n  Matcher matcher=pattern.matcher(errorMsg);\n  if (matcher.find()) {\n    errorMsg=matcher.group(0);\n  }\n  Integer val;\n  try {\n    val=Integer.parseInt(errorMsg);\n  }\n catch (  Exception e) {\n    val=null;\n  }\n  if (val != null) {\n    waitTime=val;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 2056,
        "startColumnNumber" : 40,
        "endLineNumber" : 2074,
        "endColumnNumber" : 41
      },
      "nodeContext" : "if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n  Pattern pattern=Pattern.compile(\"[0-9]+\");\n  Matcher matcher=pattern.matcher(errorMsg);\n  if (matcher.find()) {\n    errorMsg=matcher.group(0);\n  }\n  Integer val;\n  try {\n    val=Integer.parseInt(errorMsg);\n  }\n catch (  Exception e) {\n    val=null;\n  }\n  if (val != null) {\n    waitTime=val;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1568,
        "startLineNumber" : 2053,
        "startColumnNumber" : 109,
        "endLineNumber" : 2081,
        "endColumnNumber" : 37
      },
      "nodeContext" : "{\n  double waitTime=2.0;\n  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n    Pattern pattern=Pattern.compile(\"[0-9]+\");\n    Matcher matcher=pattern.matcher(errorMsg);\n    if (matcher.find()) {\n      errorMsg=matcher.group(0);\n    }\n    Integer val;\n    try {\n      val=Integer.parseInt(errorMsg);\n    }\n catch (    Exception e) {\n      val=null;\n    }\n    if (val != null) {\n      waitTime=val;\n    }\n  }\n  waitTime=Math.min(30,waitTime);\n  discardResponse=true;\n  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n  request.confirmed=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1641,
        "startLineNumber" : 2053,
        "startColumnNumber" : 36,
        "endLineNumber" : 2081,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n  double waitTime=2.0;\n  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n    Pattern pattern=Pattern.compile(\"[0-9]+\");\n    Matcher matcher=pattern.matcher(errorMsg);\n    if (matcher.find()) {\n      errorMsg=matcher.group(0);\n    }\n    Integer val;\n    try {\n      val=Integer.parseInt(errorMsg);\n    }\n catch (    Exception e) {\n      val=null;\n    }\n    if (val != null) {\n      waitTime=val;\n    }\n  }\n  waitTime=Math.min(30,waitTime);\n  discardResponse=true;\n  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n  request.confirmed=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 129,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1713,
        "startLineNumber" : 2052,
        "startColumnNumber" : 61,
        "endLineNumber" : 2082,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n    double waitTime=2.0;\n    if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n      String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        waitTime=val;\n      }\n    }\n    waitTime=Math.min(30,waitTime);\n    discardResponse=true;\n    request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n    request.confirmed=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1735,
        "startLineNumber" : 2052,
        "startColumnNumber" : 39,
        "endLineNumber" : 2082,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (errorCode == 420) {\n  if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n    double waitTime=2.0;\n    if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n      String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        waitTime=val;\n      }\n    }\n    waitTime=Math.min(30,waitTime);\n    discardResponse=true;\n    request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n    request.confirmed=false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2699,
        "startLineNumber" : 2039,
        "startColumnNumber" : 32,
        "endLineNumber" : 2082,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (errorCode == 500 || errorCode < 0) {\n  if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n    if (request.serverFailureCount < 1) {\n      discardResponse=true;\n      request.runningMinStartTime=request.runningStartTime + 1;\n    }\n  }\n else {\n    discardResponse=true;\n    int delay=Math.min(1,request.serverFailureCount * 2);\n    request.runningMinStartTime=request.runningStartTime + delay;\n    request.confirmed=false;\n  }\n  request.serverFailureCount++;\n}\n else if (errorCode == 420) {\n  if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n    double waitTime=2.0;\n    if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n      String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n      Pattern pattern=Pattern.compile(\"[0-9]+\");\n      Matcher matcher=pattern.matcher(errorMsg);\n      if (matcher.find()) {\n        errorMsg=matcher.group(0);\n      }\n      Integer val;\n      try {\n        val=Integer.parseInt(errorMsg);\n      }\n catch (      Exception e) {\n        val=null;\n      }\n      if (val != null) {\n        waitTime=val;\n      }\n    }\n    waitTime=Math.min(30,waitTime);\n    discardResponse=true;\n    request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n    request.confirmed=false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 215,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 2033,
        "startColumnNumber" : 82,
        "endLineNumber" : 2087,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n  if (errorCode == 500 || errorCode < 0) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n      if (request.serverFailureCount < 1) {\n        discardResponse=true;\n        request.runningMinStartTime=request.runningStartTime + 1;\n      }\n    }\n else {\n      discardResponse=true;\n      int delay=Math.min(1,request.serverFailureCount * 2);\n      request.runningMinStartTime=request.runningStartTime + delay;\n      request.confirmed=false;\n    }\n    request.serverFailureCount++;\n  }\n else   if (errorCode == 420) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n      double waitTime=2.0;\n      if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n        String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          waitTime=val;\n        }\n      }\n      waitTime=Math.min(30,waitTime);\n      discardResponse=true;\n      request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n      request.confirmed=false;\n    }\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n  implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 308,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4337,
        "startLineNumber" : 2033,
        "startColumnNumber" : 28,
        "endLineNumber" : 2097,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (resultContainer.result instanceof TLRPC.RpcError) {\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n  if (errorCode == 500 || errorCode < 0) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n      if (request.serverFailureCount < 1) {\n        discardResponse=true;\n        request.runningMinStartTime=request.runningStartTime + 1;\n      }\n    }\n else {\n      discardResponse=true;\n      int delay=Math.min(1,request.serverFailureCount * 2);\n      request.runningMinStartTime=request.runningStartTime + delay;\n      request.confirmed=false;\n    }\n    request.serverFailureCount++;\n  }\n else   if (errorCode == 420) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n      double waitTime=2.0;\n      if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n        String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          waitTime=val;\n        }\n      }\n      waitTime=Math.min(30,waitTime);\n      discardResponse=true;\n      request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n      request.confirmed=false;\n    }\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n  implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n}\n else if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n  if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n    if (request.rawRequest == null) {\n      FileLog.e(\"tmessages\",\"rawRequest is null\");\n    }\n else {\n      FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=-1000;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 396,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 2071,
        "startColumnNumber" : 48,
        "endLineNumber" : 2071,
        "endColumnNumber" : 59
      },
      "nodeContext" : "val != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2088,
      "startColumnNumber" : 58,
      "endLineNumber" : 2088,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2088,
        "startColumnNumber" : 36,
        "endLineNumber" : 2088,
        "endColumnNumber" : 62
      },
      "nodeContext" : "request.rawRequest == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 2088,
        "startColumnNumber" : 36,
        "endLineNumber" : 2088,
        "endColumnNumber" : 153
      },
      "nodeContext" : "request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 2088,
        "startColumnNumber" : 32,
        "endLineNumber" : 2096,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n  if (request.rawRequest == null) {\n    FileLog.e(\"tmessages\",\"rawRequest is null\");\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=-1000;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 2087,
        "startColumnNumber" : 92,
        "endLineNumber" : 2097,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n    if (request.rawRequest == null) {\n      FileLog.e(\"tmessages\",\"rawRequest is null\");\n    }\n else {\n      FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=-1000;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 2087,
        "startColumnNumber" : 35,
        "endLineNumber" : 2097,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n  if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n    if (request.rawRequest == null) {\n      FileLog.e(\"tmessages\",\"rawRequest is null\");\n    }\n else {\n      FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=-1000;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4337,
        "startLineNumber" : 2033,
        "startColumnNumber" : 28,
        "endLineNumber" : 2097,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (resultContainer.result instanceof TLRPC.RpcError) {\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n  if (errorCode == 500 || errorCode < 0) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n      if (request.serverFailureCount < 1) {\n        discardResponse=true;\n        request.runningMinStartTime=request.runningStartTime + 1;\n      }\n    }\n else {\n      discardResponse=true;\n      int delay=Math.min(1,request.serverFailureCount * 2);\n      request.runningMinStartTime=request.runningStartTime + delay;\n      request.confirmed=false;\n    }\n    request.serverFailureCount++;\n  }\n else   if (errorCode == 420) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n      double waitTime=2.0;\n      if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n        String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          waitTime=val;\n        }\n      }\n      waitTime=Math.min(30,waitTime);\n      discardResponse=true;\n      request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n      request.confirmed=false;\n    }\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n  implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n}\n else if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n  if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n    if (request.rawRequest == null) {\n      FileLog.e(\"tmessages\",\"rawRequest is null\");\n    }\n else {\n      FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=-1000;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 396,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 2088,
        "startColumnNumber" : 36,
        "endLineNumber" : 2088,
        "endColumnNumber" : 153
      },
      "nodeContext" : "request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2089,
      "startColumnNumber" : 62,
      "endLineNumber" : 2089,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2089,
        "startColumnNumber" : 40,
        "endLineNumber" : 2089,
        "endColumnNumber" : 66
      },
      "nodeContext" : "request.rawRequest == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 394,
        "startLineNumber" : 2089,
        "startColumnNumber" : 36,
        "endLineNumber" : 2093,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if (request.rawRequest == null) {\n  FileLog.e(\"tmessages\",\"rawRequest is null\");\n}\n else {\n  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 2088,
        "startColumnNumber" : 155,
        "endLineNumber" : 2096,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  if (request.rawRequest == null) {\n    FileLog.e(\"tmessages\",\"rawRequest is null\");\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=-1000;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 2088,
        "startColumnNumber" : 32,
        "endLineNumber" : 2096,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n  if (request.rawRequest == null) {\n    FileLog.e(\"tmessages\",\"rawRequest is null\");\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=-1000;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 2087,
        "startColumnNumber" : 92,
        "endLineNumber" : 2097,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n    if (request.rawRequest == null) {\n      FileLog.e(\"tmessages\",\"rawRequest is null\");\n    }\n else {\n      FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=-1000;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 2087,
        "startColumnNumber" : 35,
        "endLineNumber" : 2097,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n  if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n    if (request.rawRequest == null) {\n      FileLog.e(\"tmessages\",\"rawRequest is null\");\n    }\n else {\n      FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=-1000;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4337,
        "startLineNumber" : 2033,
        "startColumnNumber" : 28,
        "endLineNumber" : 2097,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (resultContainer.result instanceof TLRPC.RpcError) {\n  String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n  FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n  int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n  if (errorCode == 500 || errorCode < 0) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n      if (request.serverFailureCount < 1) {\n        discardResponse=true;\n        request.runningMinStartTime=request.runningStartTime + 1;\n      }\n    }\n else {\n      discardResponse=true;\n      int delay=Math.min(1,request.serverFailureCount * 2);\n      request.runningMinStartTime=request.runningStartTime + delay;\n      request.confirmed=false;\n    }\n    request.serverFailureCount++;\n  }\n else   if (errorCode == 420) {\n    if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n      double waitTime=2.0;\n      if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n        String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n        Pattern pattern=Pattern.compile(\"[0-9]+\");\n        Matcher matcher=pattern.matcher(errorMsg);\n        if (matcher.find()) {\n          errorMsg=matcher.group(0);\n        }\n        Integer val;\n        try {\n          val=Integer.parseInt(errorMsg);\n        }\n catch (        Exception e) {\n          val=null;\n        }\n        if (val != null) {\n          waitTime=val;\n        }\n      }\n      waitTime=Math.min(30,waitTime);\n      discardResponse=true;\n      request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n      request.confirmed=false;\n    }\n  }\n  implicitError=new TLRPC.TL_error();\n  implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n  implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n}\n else if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n  if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n    if (request.rawRequest == null) {\n      FileLog.e(\"tmessages\",\"rawRequest is null\");\n    }\n else {\n      FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=-1000;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 396,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2089,
        "startColumnNumber" : 40,
        "endLineNumber" : 2089,
        "endColumnNumber" : 66
      },
      "nodeContext" : "request.rawRequest == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2100,
      "startColumnNumber" : 53,
      "endLineNumber" : 2100,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 2100,
        "startColumnNumber" : 36,
        "endLineNumber" : 2100,
        "endColumnNumber" : 57
      },
      "nodeContext" : "implicitError != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 2100,
        "startColumnNumber" : 36,
        "endLineNumber" : 2100,
        "endColumnNumber" : 109
      },
      "nodeContext" : "implicitError != null || resultContainer.result instanceof TLRPC.TL_error",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 2100,
        "startColumnNumber" : 32,
        "endLineNumber" : 2105,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n  isError=true;\n  request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n}\n else {\n  request.completionBlock.run(resultContainer.result,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 2099,
        "startColumnNumber" : 50,
        "endLineNumber" : 2106,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n    isError=true;\n    request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n  }\n else {\n    request.completionBlock.run(resultContainer.result,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 2099,
        "startColumnNumber" : 28,
        "endLineNumber" : 2106,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!discardResponse) {\n  if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n    isError=true;\n    request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n  }\n else {\n    request.completionBlock.run(resultContainer.result,null);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 2100,
        "startColumnNumber" : 36,
        "endLineNumber" : 2100,
        "endColumnNumber" : 109
      },
      "nodeContext" : "implicitError != null || resultContainer.result instanceof TLRPC.TL_error",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2102,
      "startColumnNumber" : 64,
      "endLineNumber" : 2102,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 2102,
        "startColumnNumber" : 36,
        "endLineNumber" : 2102,
        "endColumnNumber" : 150
      },
      "nodeContext" : "request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 2102,
        "startColumnNumber" : 36,
        "endLineNumber" : 2102,
        "endColumnNumber" : 151
      },
      "nodeContext" : "request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 2100,
        "startColumnNumber" : 111,
        "endLineNumber" : 2103,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  isError=true;\n  request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 2100,
        "startColumnNumber" : 32,
        "endLineNumber" : 2105,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n  isError=true;\n  request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n}\n else {\n  request.completionBlock.run(resultContainer.result,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 2099,
        "startColumnNumber" : 50,
        "endLineNumber" : 2106,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n    isError=true;\n    request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n  }\n else {\n    request.completionBlock.run(resultContainer.result,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 2099,
        "startColumnNumber" : 28,
        "endLineNumber" : 2106,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!discardResponse) {\n  if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n    isError=true;\n    request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n  }\n else {\n    request.completionBlock.run(resultContainer.result,null);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 2102,
        "startColumnNumber" : 36,
        "endLineNumber" : 2102,
        "endColumnNumber" : 151
      },
      "nodeContext" : "request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2102,
      "startColumnNumber" : 87,
      "endLineNumber" : 2102,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 2102,
        "startColumnNumber" : 70,
        "endLineNumber" : 2102,
        "endColumnNumber" : 91
      },
      "nodeContext" : "implicitError != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 2102,
        "startColumnNumber" : 70,
        "endLineNumber" : 2102,
        "endColumnNumber" : 149
      },
      "nodeContext" : "implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 2102,
        "startColumnNumber" : 36,
        "endLineNumber" : 2102,
        "endColumnNumber" : 150
      },
      "nodeContext" : "request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 2102,
        "startColumnNumber" : 36,
        "endLineNumber" : 2102,
        "endColumnNumber" : 151
      },
      "nodeContext" : "request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 2100,
        "startColumnNumber" : 111,
        "endLineNumber" : 2103,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  isError=true;\n  request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 2100,
        "startColumnNumber" : 32,
        "endLineNumber" : 2105,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n  isError=true;\n  request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n}\n else {\n  request.completionBlock.run(resultContainer.result,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 2099,
        "startColumnNumber" : 50,
        "endLineNumber" : 2106,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n    isError=true;\n    request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n  }\n else {\n    request.completionBlock.run(resultContainer.result,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 2099,
        "startColumnNumber" : 28,
        "endLineNumber" : 2106,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!discardResponse) {\n  if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n    isError=true;\n    request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n  }\n else {\n    request.completionBlock.run(resultContainer.result,null);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 2102,
        "startColumnNumber" : 36,
        "endLineNumber" : 2102,
        "endColumnNumber" : 151
      },
      "nodeContext" : "request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2104,
      "startColumnNumber" : 88,
      "endLineNumber" : 2104,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 2104,
        "startColumnNumber" : 36,
        "endLineNumber" : 2104,
        "endColumnNumber" : 93
      },
      "nodeContext" : "request.completionBlock.run(resultContainer.result,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 2104,
        "startColumnNumber" : 36,
        "endLineNumber" : 2104,
        "endColumnNumber" : 94
      },
      "nodeContext" : "request.completionBlock.run(resultContainer.result,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 2103,
        "startColumnNumber" : 39,
        "endLineNumber" : 2105,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  request.completionBlock.run(resultContainer.result,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 2100,
        "startColumnNumber" : 32,
        "endLineNumber" : 2105,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n  isError=true;\n  request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n}\n else {\n  request.completionBlock.run(resultContainer.result,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 2099,
        "startColumnNumber" : 50,
        "endLineNumber" : 2106,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n    isError=true;\n    request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n  }\n else {\n    request.completionBlock.run(resultContainer.result,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 2099,
        "startColumnNumber" : 28,
        "endLineNumber" : 2106,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!discardResponse) {\n  if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n    isError=true;\n    request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n  }\n else {\n    request.completionBlock.run(resultContainer.result,null);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 2104,
        "startColumnNumber" : 36,
        "endLineNumber" : 2104,
        "endColumnNumber" : 94
      },
      "nodeContext" : "request.completionBlock.run(resultContainer.result,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2108,
      "startColumnNumber" : 49,
      "endLineNumber" : 2108,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 2108,
        "startColumnNumber" : 32,
        "endLineNumber" : 2108,
        "endColumnNumber" : 53
      },
      "nodeContext" : "implicitError != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 2108,
        "startColumnNumber" : 32,
        "endLineNumber" : 2108,
        "endColumnNumber" : 82
      },
      "nodeContext" : "implicitError != null && implicitError.code == 401",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1650,
        "startLineNumber" : 2108,
        "startColumnNumber" : 28,
        "endLineNumber" : 2131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (implicitError != null && implicitError.code == 401) {\n  isError=true;\n  if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n    if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n      if (UserConfig.clientActivated) {\n        UserConfig.clearConfig();\n        Utilities.RunOnUIThread(new Runnable(){\n          @Override public void run(){\n            NotificationCenter.getInstance().postNotificationName(1234);\n          }\n        }\n);\n      }\n    }\n  }\n else {\n    datacenter.authorized=false;\n    saveSession();\n    discardResponse=true;\n    if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n      retryRequestsFromDatacenter=datacenter.datacenterId;\n      retryRequestsClass=request.flags;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 120,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7592,
        "startLineNumber" : 2019,
        "startColumnNumber" : 61,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7629,
        "startLineNumber" : 2019,
        "startColumnNumber" : 24,
        "endLineNumber" : 2132,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (request.completionBlock != null) {\n  TLRPC.TL_error implicitError=null;\n  if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n    TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    if (uncomressed == null) {\n      System.gc();\n      uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n    }\n    if (uncomressed == null) {\n      throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n    }\n    resultContainer.result=uncomressed;\n  }\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n    if (errorCode == 500 || errorCode < 0) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n        if (request.serverFailureCount < 1) {\n          discardResponse=true;\n          request.runningMinStartTime=request.runningStartTime + 1;\n        }\n      }\n else {\n        discardResponse=true;\n        int delay=Math.min(1,request.serverFailureCount * 2);\n        request.runningMinStartTime=request.runningStartTime + delay;\n        request.confirmed=false;\n      }\n      request.serverFailureCount++;\n    }\n else     if (errorCode == 420) {\n      if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n        double waitTime=2.0;\n        if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n          String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            waitTime=val;\n          }\n        }\n        waitTime=Math.min(30,waitTime);\n        discardResponse=true;\n        request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n        request.confirmed=false;\n      }\n    }\n    implicitError=new TLRPC.TL_error();\n    implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n    implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n  }\n else   if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n    if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n      if (request.rawRequest == null) {\n        FileLog.e(\"tmessages\",\"rawRequest is null\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=-1000;\n    }\n  }\n  if (!discardResponse) {\n    if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n      isError=true;\n      request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n    }\n else {\n      request.completionBlock.run(resultContainer.result,null);\n    }\n  }\n  if (implicitError != null && implicitError.code == 401) {\n    isError=true;\n    if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n      if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n        if (UserConfig.clientActivated) {\n          UserConfig.clearConfig();\n          Utilities.RunOnUIThread(new Runnable(){\n            @Override public void run(){\n              NotificationCenter.getInstance().postNotificationName(1234);\n            }\n          }\n);\n        }\n      }\n    }\n else {\n      datacenter.authorized=false;\n      saveSession();\n      discardResponse=true;\n      if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n        retryRequestsFromDatacenter=datacenter.datacenterId;\n        retryRequestsClass=request.flags;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 664,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 8793,
        "startLineNumber" : 2014,
        "startColumnNumber" : 64,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 744,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8837,
        "startLineNumber" : 2014,
        "startColumnNumber" : 20,
        "endLineNumber" : 2151,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.respondsToMessageId(resultMid)) {\n  found=true;\n  boolean discardResponse=false;\n  boolean isError=false;\n  if (request.completionBlock != null) {\n    TLRPC.TL_error implicitError=null;\n    if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n      TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n      TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      if (uncomressed == null) {\n        System.gc();\n        uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n      }\n      if (uncomressed == null) {\n        throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n      }\n      resultContainer.result=uncomressed;\n    }\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n      if (errorCode == 500 || errorCode < 0) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n          if (request.serverFailureCount < 1) {\n            discardResponse=true;\n            request.runningMinStartTime=request.runningStartTime + 1;\n          }\n        }\n else {\n          discardResponse=true;\n          int delay=Math.min(1,request.serverFailureCount * 2);\n          request.runningMinStartTime=request.runningStartTime + delay;\n          request.confirmed=false;\n        }\n        request.serverFailureCount++;\n      }\n else       if (errorCode == 420) {\n        if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n          double waitTime=2.0;\n          if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n            String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              waitTime=val;\n            }\n          }\n          waitTime=Math.min(30,waitTime);\n          discardResponse=true;\n          request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n          request.confirmed=false;\n        }\n      }\n      implicitError=new TLRPC.TL_error();\n      implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n      implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n    }\n else     if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n      if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n        if (request.rawRequest == null) {\n          FileLog.e(\"tmessages\",\"rawRequest is null\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=-1000;\n      }\n    }\n    if (!discardResponse) {\n      if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n        isError=true;\n        request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n      }\n else {\n        request.completionBlock.run(resultContainer.result,null);\n      }\n    }\n    if (implicitError != null && implicitError.code == 401) {\n      isError=true;\n      if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n        if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n          if (UserConfig.clientActivated) {\n            UserConfig.clearConfig();\n            Utilities.RunOnUIThread(new Runnable(){\n              @Override public void run(){\n                NotificationCenter.getInstance().postNotificationName(1234);\n              }\n            }\n);\n          }\n        }\n      }\n else {\n        datacenter.authorized=false;\n        saveSession();\n        discardResponse=true;\n        if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n          retryRequestsFromDatacenter=datacenter.datacenterId;\n          retryRequestsClass=request.flags;\n        }\n      }\n    }\n  }\n  if (!discardResponse) {\n    if (request.initRequest && !isError) {\n      if (datacenter.lastInitVersion != currentAppVersion) {\n        datacenter.lastInitVersion=currentAppVersion;\n        saveSession();\n        FileLog.e(\"tmessages\",\"init connection completed\");\n      }\n else {\n        FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n      }\n    }\n    rpcCompleted(resultMid);\n  }\n else {\n    request.runningMessageId=0;\n    request.runningMessageSeqNo=0;\n    request.transportChannelToken=0;\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 749,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 8877,
        "startLineNumber" : 2013,
        "startColumnNumber" : 59,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 750,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8920,
        "startLineNumber" : 2013,
        "startColumnNumber" : 16,
        "endLineNumber" : 2152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (RPCRequest request : runningRequests) {\n  if (request.respondsToMessageId(resultMid)) {\n    found=true;\n    boolean discardResponse=false;\n    boolean isError=false;\n    if (request.completionBlock != null) {\n      TLRPC.TL_error implicitError=null;\n      if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n        TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n        TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        if (uncomressed == null) {\n          System.gc();\n          uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n        }\n        if (uncomressed == null) {\n          throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n        }\n        resultContainer.result=uncomressed;\n      }\n      if (resultContainer.result instanceof TLRPC.RpcError) {\n        String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n        FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n        int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n        if (errorCode == 500 || errorCode < 0) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n            if (request.serverFailureCount < 1) {\n              discardResponse=true;\n              request.runningMinStartTime=request.runningStartTime + 1;\n            }\n          }\n else {\n            discardResponse=true;\n            int delay=Math.min(1,request.serverFailureCount * 2);\n            request.runningMinStartTime=request.runningStartTime + delay;\n            request.confirmed=false;\n          }\n          request.serverFailureCount++;\n        }\n else         if (errorCode == 420) {\n          if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n            double waitTime=2.0;\n            if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n              String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n              Pattern pattern=Pattern.compile(\"[0-9]+\");\n              Matcher matcher=pattern.matcher(errorMsg);\n              if (matcher.find()) {\n                errorMsg=matcher.group(0);\n              }\n              Integer val;\n              try {\n                val=Integer.parseInt(errorMsg);\n              }\n catch (              Exception e) {\n                val=null;\n              }\n              if (val != null) {\n                waitTime=val;\n              }\n            }\n            waitTime=Math.min(30,waitTime);\n            discardResponse=true;\n            request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n            request.confirmed=false;\n          }\n        }\n        implicitError=new TLRPC.TL_error();\n        implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n        implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n      }\n else       if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n        if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n          if (request.rawRequest == null) {\n            FileLog.e(\"tmessages\",\"rawRequest is null\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=-1000;\n        }\n      }\n      if (!discardResponse) {\n        if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n          isError=true;\n          request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n        }\n else {\n          request.completionBlock.run(resultContainer.result,null);\n        }\n      }\n      if (implicitError != null && implicitError.code == 401) {\n        isError=true;\n        if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n          if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n            if (UserConfig.clientActivated) {\n              UserConfig.clearConfig();\n              Utilities.RunOnUIThread(new Runnable(){\n                @Override public void run(){\n                  NotificationCenter.getInstance().postNotificationName(1234);\n                }\n              }\n);\n            }\n          }\n        }\n else {\n          datacenter.authorized=false;\n          saveSession();\n          discardResponse=true;\n          if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n            retryRequestsFromDatacenter=datacenter.datacenterId;\n            retryRequestsClass=request.flags;\n          }\n        }\n      }\n    }\n    if (!discardResponse) {\n      if (request.initRequest && !isError) {\n        if (datacenter.lastInitVersion != currentAppVersion) {\n          datacenter.lastInitVersion=currentAppVersion;\n          saveSession();\n          FileLog.e(\"tmessages\",\"init connection completed\");\n        }\n else {\n          FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n        }\n      }\n      rpcCompleted(resultMid);\n    }\n else {\n      request.runningMessageId=0;\n      request.runningMessageSeqNo=0;\n      request.transportChannelToken=0;\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 756,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 9275,
        "startLineNumber" : 2010,
        "startColumnNumber" : 31,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 784,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9294,
        "startLineNumber" : 2010,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ignoreResult) {\n  boolean found=false;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(resultMid)) {\n      found=true;\n      boolean discardResponse=false;\n      boolean isError=false;\n      if (request.completionBlock != null) {\n        TLRPC.TL_error implicitError=null;\n        if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n          TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n          TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          if (uncomressed == null) {\n            System.gc();\n            uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n          }\n          if (uncomressed == null) {\n            throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n          }\n          resultContainer.result=uncomressed;\n        }\n        if (resultContainer.result instanceof TLRPC.RpcError) {\n          String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n          FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n          int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n          if (errorCode == 500 || errorCode < 0) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n              if (request.serverFailureCount < 1) {\n                discardResponse=true;\n                request.runningMinStartTime=request.runningStartTime + 1;\n              }\n            }\n else {\n              discardResponse=true;\n              int delay=Math.min(1,request.serverFailureCount * 2);\n              request.runningMinStartTime=request.runningStartTime + delay;\n              request.confirmed=false;\n            }\n            request.serverFailureCount++;\n          }\n else           if (errorCode == 420) {\n            if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n              double waitTime=2.0;\n              if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                Pattern pattern=Pattern.compile(\"[0-9]+\");\n                Matcher matcher=pattern.matcher(errorMsg);\n                if (matcher.find()) {\n                  errorMsg=matcher.group(0);\n                }\n                Integer val;\n                try {\n                  val=Integer.parseInt(errorMsg);\n                }\n catch (                Exception e) {\n                  val=null;\n                }\n                if (val != null) {\n                  waitTime=val;\n                }\n              }\n              waitTime=Math.min(30,waitTime);\n              discardResponse=true;\n              request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n              request.confirmed=false;\n            }\n          }\n          implicitError=new TLRPC.TL_error();\n          implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n          implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n        }\n else         if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n          if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n            if (request.rawRequest == null) {\n              FileLog.e(\"tmessages\",\"rawRequest is null\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=-1000;\n          }\n        }\n        if (!discardResponse) {\n          if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n            isError=true;\n            request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n          }\n else {\n            request.completionBlock.run(resultContainer.result,null);\n          }\n        }\n        if (implicitError != null && implicitError.code == 401) {\n          isError=true;\n          if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n              if (UserConfig.clientActivated) {\n                UserConfig.clearConfig();\n                Utilities.RunOnUIThread(new Runnable(){\n                  @Override public void run(){\n                    NotificationCenter.getInstance().postNotificationName(1234);\n                  }\n                }\n);\n              }\n            }\n          }\n else {\n            datacenter.authorized=false;\n            saveSession();\n            discardResponse=true;\n            if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n              retryRequestsFromDatacenter=datacenter.datacenterId;\n              retryRequestsClass=request.flags;\n            }\n          }\n        }\n      }\n      if (!discardResponse) {\n        if (request.initRequest && !isError) {\n          if (datacenter.lastInitVersion != currentAppVersion) {\n            datacenter.lastInitVersion=currentAppVersion;\n            saveSession();\n            FileLog.e(\"tmessages\",\"init connection completed\");\n          }\n else {\n            FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n          }\n        }\n        rpcCompleted(resultMid);\n      }\n else {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.transportChannelToken=0;\n      }\n      break;\n    }\n  }\n  resultContainer.freeResources();\n  if (!found) {\n    FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n    rpcCompleted(resultMid);\n  }\n  messagesConfirmed(resultMid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 787,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 11910,
        "startLineNumber" : 1958,
        "startColumnNumber" : 59,
        "endLineNumber" : 2169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1050,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 2108,
        "startColumnNumber" : 32,
        "endLineNumber" : 2108,
        "endColumnNumber" : 82
      },
      "nodeContext" : "implicitError != null && implicitError.code == 401",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2216,
      "startColumnNumber" : 38,
      "endLineNumber" : 2216,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2216,
        "startColumnNumber" : 16,
        "endLineNumber" : 2216,
        "endColumnNumber" : 42
      },
      "nodeContext" : "datacenter.authKey != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 2216,
        "startColumnNumber" : 12,
        "endLineNumber" : 2218,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (datacenter.authKey != null) {\n  processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 2196,
        "startColumnNumber" : 64,
        "endLineNumber" : 2219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 2196,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 377,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4465,
        "startLineNumber" : 2173,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 522,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4521,
        "startLineNumber" : 2171,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 530,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4581,
        "startLineNumber" : 2169,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 538,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2216,
        "startColumnNumber" : 16,
        "endLineNumber" : 2216,
        "endColumnNumber" : 42
      },
      "nodeContext" : "datacenter.authKey != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 2250,
      "startColumnNumber" : 27,
      "endLineNumber" : 2250,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 2250,
        "startColumnNumber" : 20,
        "endLineNumber" : 2250,
        "endColumnNumber" : 31
      },
      "nodeContext" : "set == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 2250,
        "startColumnNumber" : 16,
        "endLineNumber" : 2253,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (set == null) {\n  set=new ArrayList<Long>();\n  messagesIdsForConfirmation.put(sessionId,set);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 2248,
        "startColumnNumber" : 19,
        "endLineNumber" : 2255,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n  if (set == null) {\n    set=new ArrayList<Long>();\n    messagesIdsForConfirmation.put(sessionId,set);\n  }\n  set.add(detailedInfo.answer_msg_id);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 2238,
        "startColumnNumber" : 12,
        "endLineNumber" : 2255,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (requestResend) {\n  TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n  resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n  NetworkMessage networkMessage=new NetworkMessage();\n  networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n  ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n  arr.add(networkMessage);\n  sendMessagesToTransport(arr,connection,sessionId,false,true);\n}\n else {\n  ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n  if (set == null) {\n    set=new ArrayList<Long>();\n    messagesIdsForConfirmation.put(sessionId,set);\n  }\n  set.add(detailedInfo.answer_msg_id);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1586,
        "startLineNumber" : 2219,
        "startColumnNumber" : 61,
        "endLineNumber" : 2256,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2253,
        "startLineNumber" : 2219,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 2196,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 377,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4465,
        "startLineNumber" : 2173,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 522,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4521,
        "startLineNumber" : 2171,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 530,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4581,
        "startLineNumber" : 2169,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 538,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 16541,
        "startLineNumber" : 1958,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1595,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17208,
        "startLineNumber" : 1946,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1682,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 17883,
        "startLineNumber" : 1929,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1751,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 19081,
        "startLineNumber" : 1902,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1908,
      "astHeight" : 31
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 20361,
        "startLineNumber" : 1878,
        "startColumnNumber" : 15,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2020,
      "astHeight" : 32
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22534,
        "startLineNumber" : 1839,
        "startColumnNumber" : 8,
        "endLineNumber" : 2264,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof TLRPC.TL_new_session_created) {\n  TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n  ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n  if (arr == null) {\n    arr=new ArrayList<Long>();\n    processedSessionChanges.put(sessionId,arr);\n  }\n  if (!arr.contains(newSession.unique_id)) {\n    FileLog.d(\"tmessages\",\"New session:\");\n    FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n    FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n    FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n    long serverSalt=newSession.server_salt;\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=serverSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    for (    RPCRequest request : runningRequests) {\n      Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n      if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n        request.runningMessageId=0;\n        request.runningMessageSeqNo=0;\n        request.runningStartTime=0;\n        request.runningMinStartTime=0;\n        request.transportChannelToken=0;\n      }\n    }\n    saveSession();\n    if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n      MessagesController.getInstance().getDifference();\n    }\n    arr.add(newSession.unique_id);\n  }\n}\n else if (message instanceof TLRPC.TL_msg_container) {\n  TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n  for (  TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n    long innerMessageId=innerMessage.msg_id;\n    if (innerMessage.seqno % 2 != 0) {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(innerMessageId);\n    }\n    if (isMessageIdProcessed(sessionId,innerMessageId)) {\n      continue;\n    }\n    processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n    addProcessedMessageId(sessionId,innerMessageId);\n  }\n}\n else if (message instanceof TLRPC.TL_pong) {\n  TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n  long pingId=pong.ping_id;\n  ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n  for (  Long pid : pingIdToDate.keySet()) {\n    if (pid == pingId) {\n      int time=pingIdToDate.get(pid);\n      int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n      if (Math.abs(pingTime) < 10) {\n        currentPingTime=(pingTime + currentPingTime) / 2;\n        if (messageId != 0) {\n          long timeMessage=getTimeFromMsgId(messageId);\n          long currentTime=System.currentTimeMillis();\n          timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n        }\n      }\n      itemsToDelete.add(pid);\n    }\n else     if (pid < pingId) {\n      itemsToDelete.add(pid);\n    }\n  }\n  for (  Long pid : itemsToDelete) {\n    pingIdToDate.remove(pid);\n  }\n}\n else if (message instanceof TLRPC.TL_futuresalts) {\n  TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n  long requestMid=futureSalts.req_msg_id;\n  for (  RPCRequest request : runningRequests) {\n    if (request.respondsToMessageId(requestMid)) {\n      if (request.completionBlock != null) {\n        request.completionBlock.run(futureSalts,null);\n      }\n      futureSalts.freeResources();\n      messagesConfirmed(requestMid);\n      rpcCompleted(requestMid);\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.DestroySessionRes) {\n  TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n  ArrayList<Long> lst=new ArrayList<Long>();\n  lst.addAll(sessionsToDestroy);\n  destroyingSessions.remove(res.session_id);\n  for (  long session : lst) {\n    if (session == res.session_id) {\n      sessionsToDestroy.remove(session);\n      FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n      break;\n    }\n  }\n}\n else if (message instanceof TLRPC.TL_rpc_result) {\n  TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n  long resultMid=resultContainer.req_msg_id;\n  boolean ignoreResult=false;\n  FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n  if (resultContainer.result instanceof TLRPC.RpcError) {\n    String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n    FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n    int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n    if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n      ArrayList<String> migrateErrors=new ArrayList<String>();\n      migrateErrors.add(\"NETWORK_MIGRATE_\");\n      migrateErrors.add(\"PHONE_MIGRATE_\");\n      migrateErrors.add(\"USER_MIGRATE_\");\n      for (      String possibleError : migrateErrors) {\n        if (errorMessage.contains(possibleError)) {\n          String errorMsg=errorMessage.replace(possibleError,\"\");\n          Pattern pattern=Pattern.compile(\"[0-9]+\");\n          Matcher matcher=pattern.matcher(errorMsg);\n          if (matcher.find()) {\n            errorMsg=matcher.group(0);\n          }\n          Integer val;\n          try {\n            val=Integer.parseInt(errorMsg);\n          }\n catch (          Exception e) {\n            val=null;\n          }\n          if (val != null) {\n            migrateToDatacenterId=val;\n          }\n else {\n            migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n          }\n        }\n      }\n    }\n    if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n      ignoreResult=true;\n      moveToDatacenter(migrateToDatacenterId);\n    }\n  }\n  int retryRequestsFromDatacenter=-1;\n  int retryRequestsClass=0;\n  if (!ignoreResult) {\n    boolean found=false;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(resultMid)) {\n        found=true;\n        boolean discardResponse=false;\n        boolean isError=false;\n        if (request.completionBlock != null) {\n          TLRPC.TL_error implicitError=null;\n          if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n            TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n            TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            if (uncomressed == null) {\n              System.gc();\n              uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n            }\n            if (uncomressed == null) {\n              throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n            }\n            resultContainer.result=uncomressed;\n          }\n          if (resultContainer.result instanceof TLRPC.RpcError) {\n            String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n            FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n            int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n            if (errorCode == 500 || errorCode < 0) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                if (request.serverFailureCount < 1) {\n                  discardResponse=true;\n                  request.runningMinStartTime=request.runningStartTime + 1;\n                }\n              }\n else {\n                discardResponse=true;\n                int delay=Math.min(1,request.serverFailureCount * 2);\n                request.runningMinStartTime=request.runningStartTime + delay;\n                request.confirmed=false;\n              }\n              request.serverFailureCount++;\n            }\n else             if (errorCode == 420) {\n              if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                double waitTime=2.0;\n                if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                  String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                  Pattern pattern=Pattern.compile(\"[0-9]+\");\n                  Matcher matcher=pattern.matcher(errorMsg);\n                  if (matcher.find()) {\n                    errorMsg=matcher.group(0);\n                  }\n                  Integer val;\n                  try {\n                    val=Integer.parseInt(errorMsg);\n                  }\n catch (                  Exception e) {\n                    val=null;\n                  }\n                  if (val != null) {\n                    waitTime=val;\n                  }\n                }\n                waitTime=Math.min(30,waitTime);\n                discardResponse=true;\n                request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                request.confirmed=false;\n              }\n            }\n            implicitError=new TLRPC.TL_error();\n            implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n            implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n          }\n else           if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n            if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n              if (request.rawRequest == null) {\n                FileLog.e(\"tmessages\",\"rawRequest is null\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=-1000;\n            }\n          }\n          if (!discardResponse) {\n            if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n              isError=true;\n              request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n            }\n else {\n              request.completionBlock.run(resultContainer.result,null);\n            }\n          }\n          if (implicitError != null && implicitError.code == 401) {\n            isError=true;\n            if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n              if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                if (UserConfig.clientActivated) {\n                  UserConfig.clearConfig();\n                  Utilities.RunOnUIThread(new Runnable(){\n                    @Override public void run(){\n                      NotificationCenter.getInstance().postNotificationName(1234);\n                    }\n                  }\n);\n                }\n              }\n            }\n else {\n              datacenter.authorized=false;\n              saveSession();\n              discardResponse=true;\n              if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                retryRequestsFromDatacenter=datacenter.datacenterId;\n                retryRequestsClass=request.flags;\n              }\n            }\n          }\n        }\n        if (!discardResponse) {\n          if (request.initRequest && !isError) {\n            if (datacenter.lastInitVersion != currentAppVersion) {\n              datacenter.lastInitVersion=currentAppVersion;\n              saveSession();\n              FileLog.e(\"tmessages\",\"init connection completed\");\n            }\n else {\n              FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n            }\n          }\n          rpcCompleted(resultMid);\n        }\n else {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.transportChannelToken=0;\n        }\n        break;\n      }\n    }\n    resultContainer.freeResources();\n    if (!found) {\n      FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n      rpcCompleted(resultMid);\n    }\n    messagesConfirmed(resultMid);\n  }\n  if (retryRequestsFromDatacenter >= 0) {\n    processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n  }\n else {\n    processRequestQueue(0,0);\n  }\n}\n else if (message instanceof TLRPC.TL_msgs_ack) {\n}\n else if (message instanceof TLRPC.TL_ping) {\n}\n else if (message instanceof TLRPC.TL_bad_msg_notification) {\n  TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n  FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n  if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n    long realId=messageId != 0 ? messageId : containerMessageId;\n    if (realId == 0) {\n      realId=innerMsgId;\n    }\n    if (realId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    }\n    recreateSession(datacenter.authSessionId,datacenter);\n    saveSession();\n    lastOutgoingMessageId=0;\n    clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n  }\n}\n else if (message instanceof TLRPC.TL_bad_server_salt) {\n  if (messageId != 0) {\n    long time=getTimeFromMsgId(messageId);\n    long currentTime=System.currentTimeMillis();\n    timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n    lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n  }\n  datacenter.clearServerSalts();\n  ServerSalt serverSaltDesc=new ServerSalt();\n  serverSaltDesc.validSince=getCurrentTime();\n  serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n  serverSaltDesc.value=messageSalt;\n  datacenter.addServerSalt(serverSaltDesc);\n  saveSession();\n  refillSaltSet(datacenter);\n  if (datacenter.authKey != null) {\n    processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n  }\n}\n else if (message instanceof TLRPC.MsgDetailedInfo) {\n  TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n  boolean requestResend=false;\n  if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n    long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        requestResend=true;\n        break;\n      }\n    }\n  }\n else {\n    if (!isMessageIdProcessed(sessionId,messageId)) {\n      requestResend=true;\n    }\n  }\n  if (requestResend) {\n    TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n    resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n    NetworkMessage networkMessage=new NetworkMessage();\n    networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n    ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n    arr.add(networkMessage);\n    sendMessagesToTransport(arr,connection,sessionId,false,true);\n  }\n else {\n    ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n    if (set == null) {\n      set=new ArrayList<Long>();\n      messagesIdsForConfirmation.put(sessionId,set);\n    }\n    set.add(detailedInfo.answer_msg_id);\n  }\n}\n else if (message instanceof TLRPC.TL_gzip_packed) {\n  TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n  TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n  processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n}\n else if (message instanceof TLRPC.Updates) {\n  MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n}\n else {\n  FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 2280,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22747,
        "startLineNumber" : 1832,
        "startColumnNumber" : 178,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2303,
      "astHeight" : 34
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22921,
        "startLineNumber" : 1832,
        "startColumnNumber" : 4,
        "endLineNumber" : 2265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processMessage(TLObject message,long messageId,int messageSeqNo,long messageSalt,TcpConnection connection,long sessionId,long innerMsgId,long containerMessageId){\n  if (message == null) {\n    FileLog.e(\"tmessages\",\"message is null\");\n    return;\n  }\n  Datacenter datacenter=datacenterWithId(connection.getDatacenterId());\n  if (message instanceof TLRPC.TL_new_session_created) {\n    TLRPC.TL_new_session_created newSession=(TLRPC.TL_new_session_created)message;\n    ArrayList<Long> arr=processedSessionChanges.get(sessionId);\n    if (arr == null) {\n      arr=new ArrayList<Long>();\n      processedSessionChanges.put(sessionId,arr);\n    }\n    if (!arr.contains(newSession.unique_id)) {\n      FileLog.d(\"tmessages\",\"New session:\");\n      FileLog.d(\"tmessages\",String.format(\"    first message id: %d\",newSession.first_msg_id));\n      FileLog.d(\"tmessages\",String.format(\"    server salt: %d\",newSession.server_salt));\n      FileLog.d(\"tmessages\",String.format(\"    unique id: %d\",newSession.unique_id));\n      long serverSalt=newSession.server_salt;\n      ServerSalt serverSaltDesc=new ServerSalt();\n      serverSaltDesc.validSince=getCurrentTime();\n      serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n      serverSaltDesc.value=serverSalt;\n      datacenter.addServerSalt(serverSaltDesc);\n      for (      RPCRequest request : runningRequests) {\n        Datacenter dcenter=datacenterWithId(request.runningDatacenterId);\n        if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {\n          request.runningMessageId=0;\n          request.runningMessageSeqNo=0;\n          request.runningStartTime=0;\n          request.runningMinStartTime=0;\n          request.transportChannelToken=0;\n        }\n      }\n      saveSession();\n      if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {\n        MessagesController.getInstance().getDifference();\n      }\n      arr.add(newSession.unique_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msg_container) {\n    TLRPC.TL_msg_container messageContainer=(TLRPC.TL_msg_container)message;\n    for (    TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {\n      long innerMessageId=innerMessage.msg_id;\n      if (innerMessage.seqno % 2 != 0) {\n        ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n        if (set == null) {\n          set=new ArrayList<Long>();\n          messagesIdsForConfirmation.put(sessionId,set);\n        }\n        set.add(innerMessageId);\n      }\n      if (isMessageIdProcessed(sessionId,innerMessageId)) {\n        continue;\n      }\n      processMessage(innerMessage.body,0,innerMessage.seqno,messageSalt,connection,sessionId,innerMessageId,messageId);\n      addProcessedMessageId(sessionId,innerMessageId);\n    }\n  }\n else   if (message instanceof TLRPC.TL_pong) {\n    TLRPC.TL_pong pong=(TLRPC.TL_pong)message;\n    long pingId=pong.ping_id;\n    ArrayList<Long> itemsToDelete=new ArrayList<Long>();\n    for (    Long pid : pingIdToDate.keySet()) {\n      if (pid == pingId) {\n        int time=pingIdToDate.get(pid);\n        int pingTime=(int)(System.currentTimeMillis() / 1000) - time;\n        if (Math.abs(pingTime) < 10) {\n          currentPingTime=(pingTime + currentPingTime) / 2;\n          if (messageId != 0) {\n            long timeMessage=getTimeFromMsgId(messageId);\n            long currentTime=System.currentTimeMillis();\n            timeDifference=(int)((timeMessage - currentTime) / 1000 - currentPingTime / 2.0);\n          }\n        }\n        itemsToDelete.add(pid);\n      }\n else       if (pid < pingId) {\n        itemsToDelete.add(pid);\n      }\n    }\n    for (    Long pid : itemsToDelete) {\n      pingIdToDate.remove(pid);\n    }\n  }\n else   if (message instanceof TLRPC.TL_futuresalts) {\n    TLRPC.TL_futuresalts futureSalts=(TLRPC.TL_futuresalts)message;\n    long requestMid=futureSalts.req_msg_id;\n    for (    RPCRequest request : runningRequests) {\n      if (request.respondsToMessageId(requestMid)) {\n        if (request.completionBlock != null) {\n          request.completionBlock.run(futureSalts,null);\n        }\n        futureSalts.freeResources();\n        messagesConfirmed(requestMid);\n        rpcCompleted(requestMid);\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.DestroySessionRes) {\n    TLRPC.DestroySessionRes res=(TLRPC.DestroySessionRes)message;\n    ArrayList<Long> lst=new ArrayList<Long>();\n    lst.addAll(sessionsToDestroy);\n    destroyingSessions.remove(res.session_id);\n    for (    long session : lst) {\n      if (session == res.session_id) {\n        sessionsToDestroy.remove(session);\n        FileLog.d(\"tmessages\",String.format(\"Destroyed session %d (%s)\",res.session_id,res instanceof TLRPC.TL_destroy_session_ok ? \"ok\" : \"not found\"));\n        break;\n      }\n    }\n  }\n else   if (message instanceof TLRPC.TL_rpc_result) {\n    TLRPC.TL_rpc_result resultContainer=(TLRPC.TL_rpc_result)message;\n    long resultMid=resultContainer.req_msg_id;\n    boolean ignoreResult=false;\n    FileLog.d(\"tmessages\",\"object in rpc_result is \" + resultContainer.result);\n    if (resultContainer.result instanceof TLRPC.RpcError) {\n      String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n      FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n      int migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n      if (((TLRPC.RpcError)resultContainer.result).error_code == 303) {\n        ArrayList<String> migrateErrors=new ArrayList<String>();\n        migrateErrors.add(\"NETWORK_MIGRATE_\");\n        migrateErrors.add(\"PHONE_MIGRATE_\");\n        migrateErrors.add(\"USER_MIGRATE_\");\n        for (        String possibleError : migrateErrors) {\n          if (errorMessage.contains(possibleError)) {\n            String errorMsg=errorMessage.replace(possibleError,\"\");\n            Pattern pattern=Pattern.compile(\"[0-9]+\");\n            Matcher matcher=pattern.matcher(errorMsg);\n            if (matcher.find()) {\n              errorMsg=matcher.group(0);\n            }\n            Integer val;\n            try {\n              val=Integer.parseInt(errorMsg);\n            }\n catch (            Exception e) {\n              val=null;\n            }\n            if (val != null) {\n              migrateToDatacenterId=val;\n            }\n else {\n              migrateToDatacenterId=DEFAULT_DATACENTER_ID;\n            }\n          }\n        }\n      }\n      if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {\n        ignoreResult=true;\n        moveToDatacenter(migrateToDatacenterId);\n      }\n    }\n    int retryRequestsFromDatacenter=-1;\n    int retryRequestsClass=0;\n    if (!ignoreResult) {\n      boolean found=false;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(resultMid)) {\n          found=true;\n          boolean discardResponse=false;\n          boolean isError=false;\n          if (request.completionBlock != null) {\n            TLRPC.TL_error implicitError=null;\n            if (resultContainer.result instanceof TLRPC.TL_gzip_packed) {\n              TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)resultContainer.result;\n              TLObject uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              if (uncomressed == null) {\n                System.gc();\n                uncomressed=Utilities.decompress(packet.packed_data,request.rawRequest);\n              }\n              if (uncomressed == null) {\n                throw new RuntimeException(\"failed to decomress responce for \" + request.rawRequest);\n              }\n              resultContainer.result=uncomressed;\n            }\n            if (resultContainer.result instanceof TLRPC.RpcError) {\n              String errorMessage=((TLRPC.RpcError)resultContainer.result).error_message;\n              FileLog.e(\"tmessages\",String.format(\"***** RPC error %d: %s\",((TLRPC.RpcError)resultContainer.result).error_code,errorMessage));\n              int errorCode=((TLRPC.RpcError)resultContainer.result).error_code;\n              if (errorCode == 500 || errorCode < 0) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) != 0) {\n                  if (request.serverFailureCount < 1) {\n                    discardResponse=true;\n                    request.runningMinStartTime=request.runningStartTime + 1;\n                  }\n                }\n else {\n                  discardResponse=true;\n                  int delay=Math.min(1,request.serverFailureCount * 2);\n                  request.runningMinStartTime=request.runningStartTime + delay;\n                  request.confirmed=false;\n                }\n                request.serverFailureCount++;\n              }\n else               if (errorCode == 420) {\n                if ((request.flags & RPCRequest.RPCRequestClassFailOnServerErrors) == 0) {\n                  double waitTime=2.0;\n                  if (errorMessage.contains(\"FLOOD_WAIT_\")) {\n                    String errorMsg=errorMessage.replace(\"FLOOD_WAIT_\",\"\");\n                    Pattern pattern=Pattern.compile(\"[0-9]+\");\n                    Matcher matcher=pattern.matcher(errorMsg);\n                    if (matcher.find()) {\n                      errorMsg=matcher.group(0);\n                    }\n                    Integer val;\n                    try {\n                      val=Integer.parseInt(errorMsg);\n                    }\n catch (                    Exception e) {\n                      val=null;\n                    }\n                    if (val != null) {\n                      waitTime=val;\n                    }\n                  }\n                  waitTime=Math.min(30,waitTime);\n                  discardResponse=true;\n                  request.runningMinStartTime=(int)(System.currentTimeMillis() / 1000 + waitTime);\n                  request.confirmed=false;\n                }\n              }\n              implicitError=new TLRPC.TL_error();\n              implicitError.code=((TLRPC.RpcError)resultContainer.result).error_code;\n              implicitError.text=((TLRPC.RpcError)resultContainer.result).error_message;\n            }\n else             if (!(resultContainer.result instanceof TLRPC.TL_error)) {\n              if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {\n                if (request.rawRequest == null) {\n                  FileLog.e(\"tmessages\",\"rawRequest is null\");\n                }\n else {\n                  FileLog.e(\"tmessages\",\"***** RPC error: invalid response class \" + resultContainer.result + \" (\"+ request.rawRequest.responseClass()+ \" expected)\");\n                }\n                implicitError=new TLRPC.TL_error();\n                implicitError.code=-1000;\n              }\n            }\n            if (!discardResponse) {\n              if (implicitError != null || resultContainer.result instanceof TLRPC.TL_error) {\n                isError=true;\n                request.completionBlock.run(null,implicitError != null ? implicitError : (TLRPC.TL_error)resultContainer.result);\n              }\n else {\n                request.completionBlock.run(resultContainer.result,null);\n              }\n            }\n            if (implicitError != null && implicitError.code == 401) {\n              isError=true;\n              if (datacenter.datacenterId == currentDatacenterId || datacenter.datacenterId == movingToDatacenterId) {\n                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {\n                  if (UserConfig.clientActivated) {\n                    UserConfig.clearConfig();\n                    Utilities.RunOnUIThread(new Runnable(){\n                      @Override public void run(){\n                        NotificationCenter.getInstance().postNotificationName(1234);\n                      }\n                    }\n);\n                  }\n                }\n              }\n else {\n                datacenter.authorized=false;\n                saveSession();\n                discardResponse=true;\n                if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {\n                  retryRequestsFromDatacenter=datacenter.datacenterId;\n                  retryRequestsClass=request.flags;\n                }\n              }\n            }\n          }\n          if (!discardResponse) {\n            if (request.initRequest && !isError) {\n              if (datacenter.lastInitVersion != currentAppVersion) {\n                datacenter.lastInitVersion=currentAppVersion;\n                saveSession();\n                FileLog.e(\"tmessages\",\"init connection completed\");\n              }\n else {\n                FileLog.e(\"tmessages\",\"rpc is init, but init connection already completed\");\n              }\n            }\n            rpcCompleted(resultMid);\n          }\n else {\n            request.runningMessageId=0;\n            request.runningMessageSeqNo=0;\n            request.transportChannelToken=0;\n          }\n          break;\n        }\n      }\n      resultContainer.freeResources();\n      if (!found) {\n        FileLog.d(\"tmessages\",\"Response received, but request wasn't found.\");\n        rpcCompleted(resultMid);\n      }\n      messagesConfirmed(resultMid);\n    }\n    if (retryRequestsFromDatacenter >= 0) {\n      processRequestQueue(retryRequestsClass,retryRequestsFromDatacenter);\n    }\n else {\n      processRequestQueue(0,0);\n    }\n  }\n else   if (message instanceof TLRPC.TL_msgs_ack) {\n  }\n else   if (message instanceof TLRPC.TL_ping) {\n  }\n else   if (message instanceof TLRPC.TL_bad_msg_notification) {\n    TLRPC.TL_bad_msg_notification badMsgNotification=(TLRPC.TL_bad_msg_notification)message;\n    FileLog.e(\"tmessages\",String.format(\"***** Bad message: %d\",badMsgNotification.error_code));\n    if (badMsgNotification.error_code == 16 || badMsgNotification.error_code == 17 || badMsgNotification.error_code == 19 || badMsgNotification.error_code == 32 || badMsgNotification.error_code == 33 || badMsgNotification.error_code == 64) {\n      long realId=messageId != 0 ? messageId : containerMessageId;\n      if (realId == 0) {\n        realId=innerMsgId;\n      }\n      if (realId != 0) {\n        long time=getTimeFromMsgId(messageId);\n        long currentTime=System.currentTimeMillis();\n        timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      }\n      recreateSession(datacenter.authSessionId,datacenter);\n      saveSession();\n      lastOutgoingMessageId=0;\n      clearRequestsForRequestClass(connection.transportRequestClass,datacenter);\n    }\n  }\n else   if (message instanceof TLRPC.TL_bad_server_salt) {\n    if (messageId != 0) {\n      long time=getTimeFromMsgId(messageId);\n      long currentTime=System.currentTimeMillis();\n      timeDifference=(int)((time - currentTime) / 1000 - currentPingTime / 2.0);\n      lastOutgoingMessageId=Math.max(messageId,lastOutgoingMessageId);\n    }\n    datacenter.clearServerSalts();\n    ServerSalt serverSaltDesc=new ServerSalt();\n    serverSaltDesc.validSince=getCurrentTime();\n    serverSaltDesc.validUntil=getCurrentTime() + 30 * 60;\n    serverSaltDesc.value=messageSalt;\n    datacenter.addServerSalt(serverSaltDesc);\n    saveSession();\n    refillSaltSet(datacenter);\n    if (datacenter.authKey != null) {\n      processRequestQueue(RPCRequest.RPCRequestClassTransportMask,datacenter.datacenterId);\n    }\n  }\n else   if (message instanceof TLRPC.MsgDetailedInfo) {\n    TLRPC.MsgDetailedInfo detailedInfo=(TLRPC.MsgDetailedInfo)message;\n    boolean requestResend=false;\n    if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {\n      long requestMid=((TLRPC.TL_msg_detailed_info)detailedInfo).msg_id;\n      for (      RPCRequest request : runningRequests) {\n        if (request.respondsToMessageId(requestMid)) {\n          requestResend=true;\n          break;\n        }\n      }\n    }\n else {\n      if (!isMessageIdProcessed(sessionId,messageId)) {\n        requestResend=true;\n      }\n    }\n    if (requestResend) {\n      TLRPC.TL_msg_resend_req resendReq=new TLRPC.TL_msg_resend_req();\n      resendReq.msg_ids.add(detailedInfo.answer_msg_id);\n      NetworkMessage networkMessage=new NetworkMessage();\n      networkMessage.protoMessage=wrapMessage(resendReq,sessionId,false);\n      ArrayList<NetworkMessage> arr=new ArrayList<NetworkMessage>();\n      arr.add(networkMessage);\n      sendMessagesToTransport(arr,connection,sessionId,false,true);\n    }\n else {\n      ArrayList<Long> set=messagesIdsForConfirmation.get(sessionId);\n      if (set == null) {\n        set=new ArrayList<Long>();\n        messagesIdsForConfirmation.put(sessionId,set);\n      }\n      set.add(detailedInfo.answer_msg_id);\n    }\n  }\n else   if (message instanceof TLRPC.TL_gzip_packed) {\n    TLRPC.TL_gzip_packed packet=(TLRPC.TL_gzip_packed)message;\n    TLObject result=Utilities.decompress(packet.packed_data,getRequestWithMessageId(messageId));\n    processMessage(result,messageId,messageSeqNo,messageSalt,connection,sessionId,innerMsgId,containerMessageId);\n  }\n else   if (message instanceof TLRPC.Updates) {\n    MessagesController.getInstance().processUpdates((TLRPC.Updates)message,false);\n  }\n else {\n    FileLog.e(\"tmessages\",\"***** Error: unknown message class \" + message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2332,
      "astHeight" : 35
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 2250,
        "startColumnNumber" : 20,
        "endLineNumber" : 2250,
        "endColumnNumber" : 31
      },
      "nodeContext" : "set == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 1833,
    "startColumnNumber" : 23,
    "endLineNumber" : 1833,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 1842,
    "startColumnNumber" : 23,
    "endLineNumber" : 1842,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 1862,
    "startColumnNumber" : 148,
    "endLineNumber" : 1862,
    "endColumnNumber" : 152
  }, {
    "charLength" : 4,
    "startLineNumber" : 1890,
    "startColumnNumber" : 31,
    "endLineNumber" : 1890,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 1934,
    "startColumnNumber" : 51,
    "endLineNumber" : 1934,
    "endColumnNumber" : 55
  }, {
    "charLength" : 4,
    "startLineNumber" : 1935,
    "startColumnNumber" : 65,
    "endLineNumber" : 1935,
    "endColumnNumber" : 69
  }, {
    "charLength" : 4,
    "startLineNumber" : 1989,
    "startColumnNumber" : 38,
    "endLineNumber" : 1989,
    "endColumnNumber" : 42
  }, {
    "charLength" : 4,
    "startLineNumber" : 1992,
    "startColumnNumber" : 39,
    "endLineNumber" : 1992,
    "endColumnNumber" : 43
  }, {
    "charLength" : 4,
    "startLineNumber" : 2019,
    "startColumnNumber" : 55,
    "endLineNumber" : 2019,
    "endColumnNumber" : 59
  }, {
    "charLength" : 4,
    "startLineNumber" : 2020,
    "startColumnNumber" : 59,
    "endLineNumber" : 2020,
    "endColumnNumber" : 63
  }, {
    "charLength" : 4,
    "startLineNumber" : 2024,
    "startColumnNumber" : 51,
    "endLineNumber" : 2024,
    "endColumnNumber" : 55
  }, {
    "charLength" : 4,
    "startLineNumber" : 2028,
    "startColumnNumber" : 51,
    "endLineNumber" : 2028,
    "endColumnNumber" : 55
  }, {
    "charLength" : 4,
    "startLineNumber" : 2069,
    "startColumnNumber" : 54,
    "endLineNumber" : 2069,
    "endColumnNumber" : 58
  }, {
    "charLength" : 4,
    "startLineNumber" : 2071,
    "startColumnNumber" : 55,
    "endLineNumber" : 2071,
    "endColumnNumber" : 59
  }, {
    "charLength" : 4,
    "startLineNumber" : 2088,
    "startColumnNumber" : 58,
    "endLineNumber" : 2088,
    "endColumnNumber" : 62
  }, {
    "charLength" : 4,
    "startLineNumber" : 2089,
    "startColumnNumber" : 62,
    "endLineNumber" : 2089,
    "endColumnNumber" : 66
  }, {
    "charLength" : 4,
    "startLineNumber" : 2100,
    "startColumnNumber" : 53,
    "endLineNumber" : 2100,
    "endColumnNumber" : 57
  }, {
    "charLength" : 4,
    "startLineNumber" : 2102,
    "startColumnNumber" : 64,
    "endLineNumber" : 2102,
    "endColumnNumber" : 68
  }, {
    "charLength" : 4,
    "startLineNumber" : 2102,
    "startColumnNumber" : 87,
    "endLineNumber" : 2102,
    "endColumnNumber" : 91
  }, {
    "charLength" : 4,
    "startLineNumber" : 2104,
    "startColumnNumber" : 88,
    "endLineNumber" : 2104,
    "endColumnNumber" : 92
  }, {
    "charLength" : 4,
    "startLineNumber" : 2108,
    "startColumnNumber" : 49,
    "endLineNumber" : 2108,
    "endColumnNumber" : 53
  }, {
    "charLength" : 4,
    "startLineNumber" : 2216,
    "startColumnNumber" : 38,
    "endLineNumber" : 2216,
    "endColumnNumber" : 42
  }, {
    "charLength" : 4,
    "startLineNumber" : 2250,
    "startColumnNumber" : 27,
    "endLineNumber" : 2250,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 20
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 19
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 19
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 18
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 16
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 16
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 13
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 14
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 14
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 17
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 16
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 16
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 15
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 17
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 16
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 16
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 19
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 18
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 18
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 15
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 15
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 13
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 13
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 19
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 18
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 18
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 15
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 15
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 13
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 29
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 28
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 28
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 27
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 25
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 25
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 22
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 22
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 15
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 23
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 23
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 26
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 25
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 25
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 24
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 22
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 22
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 19
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 19
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 12
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 20
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 20
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 21
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 20
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 20
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 19
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 17
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 17
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 14
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 14
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 15
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 15
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 22
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 21
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 21
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 20
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 18
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 18
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 15
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 15
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 16
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 16
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 20
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 19
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 19
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 18
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 16
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 16
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 13
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 13
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 14
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 14
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 21
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 20
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 20
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 19
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 17
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 17
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 14
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 14
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 0
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 15
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 15
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 23
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 22
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 22
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 21
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 19
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 19
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 16
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 16
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 17
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 17
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 21
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 20
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 20
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 19
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 17
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 17
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 14
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 14
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 15
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 15
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 18
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 17
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 17
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 16
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 14
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 14
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 12
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 12
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 16
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 15
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 12
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 6
  } ]
}