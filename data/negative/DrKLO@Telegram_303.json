{
  "id" : 303,
  "expression" : "Math.max(Math.abs(vX),Math.abs(vY))",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropGestureDetector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math.max(Math.abs(vX),Math.abs(vY))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 206,
      "startColumnNumber" : 28,
      "endLineNumber" : 206,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 11,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 206,
        "startColumnNumber" : 28,
        "endLineNumber" : 206,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 206,
        "startColumnNumber" : 24,
        "endLineNumber" : 209,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\n  mListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 821,
        "startLineNumber" : 193,
        "startColumnNumber" : 50,
        "endLineNumber" : 210,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  mLastTouchX=getActiveX(ev);\n  mLastTouchY=getActiveY(ev);\n  mVelocityTracker.addMovement(ev);\n  mVelocityTracker.computeCurrentVelocity(1000);\n  final float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();\n  if (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\n    mListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 851,
        "startLineNumber" : 193,
        "startColumnNumber" : 20,
        "endLineNumber" : 210,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (null != mVelocityTracker) {\n  mLastTouchX=getActiveX(ev);\n  mLastTouchY=getActiveY(ev);\n  mVelocityTracker.addMovement(ev);\n  mVelocityTracker.computeCurrentVelocity(1000);\n  final float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();\n  if (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\n    mListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 192,
        "startColumnNumber" : 33,
        "endLineNumber" : 213,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (null != mVelocityTracker) {\n    mLastTouchX=getActiveX(ev);\n    mLastTouchY=getActiveY(ev);\n    mVelocityTracker.addMovement(ev);\n    mVelocityTracker.computeCurrentVelocity(1000);\n    final float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();\n    if (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\n      mListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n    }\n  }\n  mIsDragging=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 192,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mIsDragging) {\n  if (null != mVelocityTracker) {\n    mLastTouchX=getActiveX(ev);\n    mLastTouchY=getActiveY(ev);\n    mVelocityTracker.addMovement(ev);\n    mVelocityTracker.computeCurrentVelocity(1000);\n    final float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();\n    if (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\n      mListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n    }\n  }\n  mIsDragging=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1243,
        "startLineNumber" : 191,
        "startColumnNumber" : 40,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mIsDragging) {\n    if (null != mVelocityTracker) {\n      mLastTouchX=getActiveX(ev);\n      mLastTouchY=getActiveY(ev);\n      mVelocityTracker.addMovement(ev);\n      mVelocityTracker.computeCurrentVelocity(1000);\n      final float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();\n      if (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\n        mListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n      }\n    }\n    mIsDragging=false;\n  }\n  if (null != mVelocityTracker) {\n    mVelocityTracker.recycle();\n    mVelocityTracker=null;\n  }\n  started=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2989,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (ev.getAction()) {\ncase MotionEvent.ACTION_DOWN:case MotionEvent.ACTION_MOVE:{\n    if (!started) {\n      mVelocityTracker=VelocityTracker.obtain();\n      if (null != mVelocityTracker) {\n        mVelocityTracker.addMovement(ev);\n      }\n      mLastTouchX=getActiveX(ev);\n      mLastTouchY=getActiveY(ev);\n      mIsDragging=false;\n      started=true;\n      return true;\n    }\n    final float x=getActiveX(ev);\n    final float y=getActiveY(ev);\n    final float dx=x - mLastTouchX, dy=y - mLastTouchY;\n    if (!mIsDragging) {\n      mIsDragging=(float)Math.sqrt((dx * dx) + (dy * dy)) >= mTouchSlop;\n    }\n    if (mIsDragging) {\n      mListener.onDrag(dx,dy);\n      mLastTouchX=x;\n      mLastTouchY=y;\n      if (null != mVelocityTracker) {\n        mVelocityTracker.addMovement(ev);\n      }\n    }\n    break;\n  }\ncase MotionEvent.ACTION_CANCEL:{\n  if (null != mVelocityTracker) {\n    mVelocityTracker.recycle();\n    mVelocityTracker=null;\n  }\n  started=false;\n  mIsDragging=false;\n  break;\n}\ncase MotionEvent.ACTION_UP:{\nif (mIsDragging) {\n  if (null != mVelocityTracker) {\n    mLastTouchX=getActiveX(ev);\n    mLastTouchY=getActiveY(ev);\n    mVelocityTracker.addMovement(ev);\n    mVelocityTracker.computeCurrentVelocity(1000);\n    final float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();\n    if (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\n      mListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n    }\n  }\n  mIsDragging=false;\n}\nif (null != mVelocityTracker) {\n  mVelocityTracker.recycle();\n  mVelocityTracker=null;\n}\nstarted=false;\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 257,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4557,
        "startLineNumber" : 104,
        "startColumnNumber" : 48,
        "endLineNumber" : 227,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mDetector.onTouchEvent(ev);\n  int i=0;\nswitch (ev.getAction() & MotionEventCompat.ACTION_MASK) {\ncase MotionEvent.ACTION_DOWN:    this.mActivePointerId=ev.getPointerId(0);\n  touchTime=SystemClock.elapsedRealtime();\nbreak;\ncase MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:if (!mIsDragging && SystemClock.elapsedRealtime() - touchTime < 800) {\nmListener.onTapUp();\n}\nthis.mActivePointerId=INVALID_POINTER_ID;\nbreak;\ncase MotionEvent.ACTION_POINTER_UP:int pointerIndex=(MotionEventCompat.ACTION_POINTER_INDEX_MASK & ev.getAction()) >> 8;\nif (ev.getPointerId(pointerIndex) == this.mActivePointerId) {\nint newPointerIndex;\nif (pointerIndex == 0) {\nnewPointerIndex=1;\n}\n else {\nnewPointerIndex=0;\n}\nthis.mActivePointerId=ev.getPointerId(newPointerIndex);\nthis.mLastTouchX=ev.getX(newPointerIndex);\nthis.mLastTouchY=ev.getY(newPointerIndex);\nbreak;\n}\nbreak;\n}\nif (this.mActivePointerId != INVALID_POINTER_ID) {\ni=this.mActivePointerId;\n}\nthis.mActivePointerIndex=ev.findPointerIndex(i);\nswitch (ev.getAction()) {\ncase MotionEvent.ACTION_DOWN:case MotionEvent.ACTION_MOVE:{\nif (!started) {\nmVelocityTracker=VelocityTracker.obtain();\nif (null != mVelocityTracker) {\nmVelocityTracker.addMovement(ev);\n}\nmLastTouchX=getActiveX(ev);\nmLastTouchY=getActiveY(ev);\nmIsDragging=false;\nstarted=true;\nreturn true;\n}\nfinal float x=getActiveX(ev);\nfinal float y=getActiveY(ev);\nfinal float dx=x - mLastTouchX, dy=y - mLastTouchY;\nif (!mIsDragging) {\nmIsDragging=(float)Math.sqrt((dx * dx) + (dy * dy)) >= mTouchSlop;\n}\nif (mIsDragging) {\nmListener.onDrag(dx,dy);\nmLastTouchX=x;\nmLastTouchY=y;\nif (null != mVelocityTracker) {\nmVelocityTracker.addMovement(ev);\n}\n}\nbreak;\n}\ncase MotionEvent.ACTION_CANCEL:{\nif (null != mVelocityTracker) {\nmVelocityTracker.recycle();\nmVelocityTracker=null;\n}\nstarted=false;\nmIsDragging=false;\nbreak;\n}\ncase MotionEvent.ACTION_UP:{\nif (mIsDragging) {\nif (null != mVelocityTracker) {\nmLastTouchX=getActiveX(ev);\nmLastTouchY=getActiveY(ev);\nmVelocityTracker.addMovement(ev);\nmVelocityTracker.computeCurrentVelocity(1000);\nfinal float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();\nif (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\nmListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n}\n}\nmIsDragging=false;\n}\nif (null != mVelocityTracker) {\nmVelocityTracker.recycle();\nmVelocityTracker=null;\n}\nstarted=false;\nbreak;\n}\n}\nreturn true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 426,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4601,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 227,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean onTouchEvent(MotionEvent ev){\n  mDetector.onTouchEvent(ev);\n  int i=0;\nswitch (ev.getAction() & MotionEventCompat.ACTION_MASK) {\ncase MotionEvent.ACTION_DOWN:    this.mActivePointerId=ev.getPointerId(0);\n  touchTime=SystemClock.elapsedRealtime();\nbreak;\ncase MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:if (!mIsDragging && SystemClock.elapsedRealtime() - touchTime < 800) {\nmListener.onTapUp();\n}\nthis.mActivePointerId=INVALID_POINTER_ID;\nbreak;\ncase MotionEvent.ACTION_POINTER_UP:int pointerIndex=(MotionEventCompat.ACTION_POINTER_INDEX_MASK & ev.getAction()) >> 8;\nif (ev.getPointerId(pointerIndex) == this.mActivePointerId) {\nint newPointerIndex;\nif (pointerIndex == 0) {\nnewPointerIndex=1;\n}\n else {\nnewPointerIndex=0;\n}\nthis.mActivePointerId=ev.getPointerId(newPointerIndex);\nthis.mLastTouchX=ev.getX(newPointerIndex);\nthis.mLastTouchY=ev.getY(newPointerIndex);\nbreak;\n}\nbreak;\n}\nif (this.mActivePointerId != INVALID_POINTER_ID) {\ni=this.mActivePointerId;\n}\nthis.mActivePointerIndex=ev.findPointerIndex(i);\nswitch (ev.getAction()) {\ncase MotionEvent.ACTION_DOWN:case MotionEvent.ACTION_MOVE:{\nif (!started) {\nmVelocityTracker=VelocityTracker.obtain();\nif (null != mVelocityTracker) {\nmVelocityTracker.addMovement(ev);\n}\nmLastTouchX=getActiveX(ev);\nmLastTouchY=getActiveY(ev);\nmIsDragging=false;\nstarted=true;\nreturn true;\n}\nfinal float x=getActiveX(ev);\nfinal float y=getActiveY(ev);\nfinal float dx=x - mLastTouchX, dy=y - mLastTouchY;\nif (!mIsDragging) {\nmIsDragging=(float)Math.sqrt((dx * dx) + (dy * dy)) >= mTouchSlop;\n}\nif (mIsDragging) {\nmListener.onDrag(dx,dy);\nmLastTouchX=x;\nmLastTouchY=y;\nif (null != mVelocityTracker) {\nmVelocityTracker.addMovement(ev);\n}\n}\nbreak;\n}\ncase MotionEvent.ACTION_CANCEL:{\nif (null != mVelocityTracker) {\nmVelocityTracker.recycle();\nmVelocityTracker=null;\n}\nstarted=false;\nmIsDragging=false;\nbreak;\n}\ncase MotionEvent.ACTION_UP:{\nif (mIsDragging) {\nif (null != mVelocityTracker) {\nmLastTouchX=getActiveX(ev);\nmLastTouchY=getActiveY(ev);\nmVelocityTracker.addMovement(ev);\nmVelocityTracker.computeCurrentVelocity(1000);\nfinal float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();\nif (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {\nmListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);\n}\n}\nmIsDragging=false;\n}\nif (null != mVelocityTracker) {\nmVelocityTracker.recycle();\nmVelocityTracker=null;\n}\nstarted=false;\nbreak;\n}\n}\nreturn true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 434,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 206,
        "startColumnNumber" : 28,
        "endLineNumber" : 206,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 8,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 206,
    "startColumnNumber" : 28,
    "endLineNumber" : 206,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}