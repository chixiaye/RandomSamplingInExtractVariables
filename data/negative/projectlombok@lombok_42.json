{
  "id" : 42,
  "expression" : "TypeIds.T_byte",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/utils/lombok/eclipse/Eclipse.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TypeIds.T_byte",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 156,
      "startColumnNumber" : 8,
      "endLineNumber" : 156,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 156,
        "startColumnNumber" : 3,
        "endLineNumber" : 156,
        "endColumnNumber" : 23
      },
      "nodeContext" : "case TypeIds.T_byte:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 154,
        "startColumnNumber" : 3,
        "endLineNumber" : 165,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (e.constant.typeID()) {\ncase TypeIds.T_int:  return e.constant.intValue();\ncase TypeIds.T_byte:return e.constant.byteValue();\ncase TypeIds.T_short:return e.constant.shortValue();\ncase TypeIds.T_char:return e.constant.charValue();\ncase TypeIds.T_float:return e.constant.floatValue();\ncase TypeIds.T_double:return e.constant.doubleValue();\ncase TypeIds.T_boolean:return e.constant.booleanValue();\ncase TypeIds.T_long:return e.constant.longValue();\ncase TypeIds.T_JavaLangString:return e.constant.stringValue();\ndefault:return null;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 99,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 623,
        "startLineNumber" : 152,
        "startColumnNumber" : 28,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ((Literal)e).computeConstant();\nswitch (e.constant.typeID()) {\ncase TypeIds.T_int:    return e.constant.intValue();\ncase TypeIds.T_byte:  return e.constant.byteValue();\ncase TypeIds.T_short:return e.constant.shortValue();\ncase TypeIds.T_char:return e.constant.charValue();\ncase TypeIds.T_float:return e.constant.floatValue();\ncase TypeIds.T_double:return e.constant.doubleValue();\ncase TypeIds.T_boolean:return e.constant.booleanValue();\ncase TypeIds.T_long:return e.constant.longValue();\ncase TypeIds.T_JavaLangString:return e.constant.stringValue();\ndefault:return null;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 152,
        "startColumnNumber" : 2,
        "endLineNumber" : 174,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (e instanceof Literal) {\n  ((Literal)e).computeConstant();\nswitch (e.constant.typeID()) {\ncase TypeIds.T_int:    return e.constant.intValue();\ncase TypeIds.T_byte:  return e.constant.byteValue();\ncase TypeIds.T_short:return e.constant.shortValue();\ncase TypeIds.T_char:return e.constant.charValue();\ncase TypeIds.T_float:return e.constant.floatValue();\ncase TypeIds.T_double:return e.constant.doubleValue();\ncase TypeIds.T_boolean:return e.constant.booleanValue();\ncase TypeIds.T_long:return e.constant.longValue();\ncase TypeIds.T_JavaLangString:return e.constant.stringValue();\ndefault:return null;\n}\n}\n else if (e instanceof ClassLiteralAccess) {\nreturn Eclipse.toQualifiedName(((ClassLiteralAccess)e).type.getTypeName());\n}\n else if (e instanceof SingleNameReference) {\nreturn new String(((SingleNameReference)e).token);\n}\n else if (e instanceof QualifiedNameReference) {\nString qName=Eclipse.toQualifiedName(((QualifiedNameReference)e).tokens);\nint idx=qName.lastIndexOf('.');\nreturn idx == -1 ? qName : qName.substring(idx + 1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 151,
        "startColumnNumber" : 51,
        "endLineNumber" : 177,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (e instanceof Literal) {\n    ((Literal)e).computeConstant();\nswitch (e.constant.typeID()) {\ncase TypeIds.T_int:      return e.constant.intValue();\ncase TypeIds.T_byte:    return e.constant.byteValue();\ncase TypeIds.T_short:  return e.constant.shortValue();\ncase TypeIds.T_char:return e.constant.charValue();\ncase TypeIds.T_float:return e.constant.floatValue();\ncase TypeIds.T_double:return e.constant.doubleValue();\ncase TypeIds.T_boolean:return e.constant.booleanValue();\ncase TypeIds.T_long:return e.constant.longValue();\ncase TypeIds.T_JavaLangString:return e.constant.stringValue();\ndefault:return null;\n}\n}\n else if (e instanceof ClassLiteralAccess) {\nreturn Eclipse.toQualifiedName(((ClassLiteralAccess)e).type.getTypeName());\n}\n else if (e instanceof SingleNameReference) {\nreturn new String(((SingleNameReference)e).token);\n}\n else if (e instanceof QualifiedNameReference) {\nString qName=Eclipse.toQualifiedName(((QualifiedNameReference)e).tokens);\nint idx=qName.lastIndexOf('.');\nreturn idx == -1 ? qName : qName.substring(idx + 1);\n}\nreturn null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 148,
        "startColumnNumber" : 1,
        "endLineNumber" : 177,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns the actual value of the given Literal or Literal-like node.\n */\npublic static Object calculateValue(Expression e){\n  if (e instanceof Literal) {\n    ((Literal)e).computeConstant();\nswitch (e.constant.typeID()) {\ncase TypeIds.T_int:      return e.constant.intValue();\ncase TypeIds.T_byte:    return e.constant.byteValue();\ncase TypeIds.T_short:  return e.constant.shortValue();\ncase TypeIds.T_char:return e.constant.charValue();\ncase TypeIds.T_float:return e.constant.floatValue();\ncase TypeIds.T_double:return e.constant.doubleValue();\ncase TypeIds.T_boolean:return e.constant.booleanValue();\ncase TypeIds.T_long:return e.constant.longValue();\ncase TypeIds.T_JavaLangString:return e.constant.stringValue();\ndefault:return null;\n}\n}\n else if (e instanceof ClassLiteralAccess) {\nreturn Eclipse.toQualifiedName(((ClassLiteralAccess)e).type.getTypeName());\n}\n else if (e instanceof SingleNameReference) {\nreturn new String(((SingleNameReference)e).token);\n}\n else if (e instanceof QualifiedNameReference) {\nString qName=Eclipse.toQualifiedName(((QualifiedNameReference)e).tokens);\nint idx=qName.lastIndexOf('.');\nreturn idx == -1 ? qName : qName.substring(idx + 1);\n}\nreturn null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 205,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 156,
        "startColumnNumber" : 3,
        "endLineNumber" : 156,
        "endColumnNumber" : 23
      },
      "nodeContext" : "case TypeIds.T_byte:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 156,
    "startColumnNumber" : 8,
    "endLineNumber" : 156,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}