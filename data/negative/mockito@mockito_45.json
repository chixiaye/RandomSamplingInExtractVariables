{
  "id" : 45,
  "expression" : "mocks",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mocks",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 31,
      "startColumnNumber" : 12,
      "endLineNumber" : 31,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 24
      },
      "nodeContext" : "mocks.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 29
      },
      "nodeContext" : "mocks.size() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (mocks.size() == 1) {\n  final Object matchingMock=mocks.iterator().next();\n  MemberAccessor accessor=Plugins.getMemberAccessor();\n  return () -> {\n    try {\n      if (!new BeanPropertySetter(injectee,candidateFieldToBeInjected).set(matchingMock)) {\n        accessor.set(candidateFieldToBeInjected,injectee,matchingMock);\n      }\n    }\n catch (    RuntimeException|IllegalAccessException e) {\n      throw cannotInjectDependency(candidateFieldToBeInjected,matchingMock,e);\n    }\n    return matchingMock;\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 30,
        "startColumnNumber" : 35,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mocks.size() == 1) {\n    final Object matchingMock=mocks.iterator().next();\n    MemberAccessor accessor=Plugins.getMemberAccessor();\n    return () -> {\n      try {\n        if (!new BeanPropertySetter(injectee,candidateFieldToBeInjected).set(matchingMock)) {\n          accessor.set(candidateFieldToBeInjected,injectee,matchingMock);\n        }\n      }\n catch (      RuntimeException|IllegalAccessException e) {\n        throw cannotInjectDependency(candidateFieldToBeInjected,matchingMock,e);\n      }\n      return matchingMock;\n    }\n;\n  }\n  return OngoingInjector.nop;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1007,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public OngoingInjector filterCandidate(final Collection<Object> mocks,final Field candidateFieldToBeInjected,final List<Field> allRemainingCandidateFields,final Object injectee){\n  if (mocks.size() == 1) {\n    final Object matchingMock=mocks.iterator().next();\n    MemberAccessor accessor=Plugins.getMemberAccessor();\n    return () -> {\n      try {\n        if (!new BeanPropertySetter(injectee,candidateFieldToBeInjected).set(matchingMock)) {\n          accessor.set(candidateFieldToBeInjected,injectee,matchingMock);\n        }\n      }\n catch (      RuntimeException|IllegalAccessException e) {\n        throw cannotInjectDependency(candidateFieldToBeInjected,matchingMock,e);\n      }\n      return matchingMock;\n    }\n;\n  }\n  return OngoingInjector.nop;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 102,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 29
      },
      "nodeContext" : "mocks.size() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<java.lang.Object>"
  }, {
    "nodeContext" : "mocks",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 32,
      "startColumnNumber" : 40,
      "endLineNumber" : 32,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 32,
        "startColumnNumber" : 40,
        "endLineNumber" : 32,
        "endColumnNumber" : 56
      },
      "nodeContext" : "mocks.iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 32,
        "startColumnNumber" : 40,
        "endLineNumber" : 32,
        "endColumnNumber" : 63
      },
      "nodeContext" : "mocks.iterator().next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 32,
        "startColumnNumber" : 25,
        "endLineNumber" : 32,
        "endColumnNumber" : 63
      },
      "nodeContext" : "matchingMock=mocks.iterator().next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 32,
        "startColumnNumber" : 12,
        "endLineNumber" : 32,
        "endColumnNumber" : 64
      },
      "nodeContext" : "final Object matchingMock=mocks.iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 693,
        "startLineNumber" : 31,
        "startColumnNumber" : 31,
        "endLineNumber" : 46,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Object matchingMock=mocks.iterator().next();\n  MemberAccessor accessor=Plugins.getMemberAccessor();\n  return () -> {\n    try {\n      if (!new BeanPropertySetter(injectee,candidateFieldToBeInjected).set(matchingMock)) {\n        accessor.set(candidateFieldToBeInjected,injectee,matchingMock);\n      }\n    }\n catch (    RuntimeException|IllegalAccessException e) {\n      throw cannotInjectDependency(candidateFieldToBeInjected,matchingMock,e);\n    }\n    return matchingMock;\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (mocks.size() == 1) {\n  final Object matchingMock=mocks.iterator().next();\n  MemberAccessor accessor=Plugins.getMemberAccessor();\n  return () -> {\n    try {\n      if (!new BeanPropertySetter(injectee,candidateFieldToBeInjected).set(matchingMock)) {\n        accessor.set(candidateFieldToBeInjected,injectee,matchingMock);\n      }\n    }\n catch (    RuntimeException|IllegalAccessException e) {\n      throw cannotInjectDependency(candidateFieldToBeInjected,matchingMock,e);\n    }\n    return matchingMock;\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 30,
        "startColumnNumber" : 35,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mocks.size() == 1) {\n    final Object matchingMock=mocks.iterator().next();\n    MemberAccessor accessor=Plugins.getMemberAccessor();\n    return () -> {\n      try {\n        if (!new BeanPropertySetter(injectee,candidateFieldToBeInjected).set(matchingMock)) {\n          accessor.set(candidateFieldToBeInjected,injectee,matchingMock);\n        }\n      }\n catch (      RuntimeException|IllegalAccessException e) {\n        throw cannotInjectDependency(candidateFieldToBeInjected,matchingMock,e);\n      }\n      return matchingMock;\n    }\n;\n  }\n  return OngoingInjector.nop;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1007,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public OngoingInjector filterCandidate(final Collection<Object> mocks,final Field candidateFieldToBeInjected,final List<Field> allRemainingCandidateFields,final Object injectee){\n  if (mocks.size() == 1) {\n    final Object matchingMock=mocks.iterator().next();\n    MemberAccessor accessor=Plugins.getMemberAccessor();\n    return () -> {\n      try {\n        if (!new BeanPropertySetter(injectee,candidateFieldToBeInjected).set(matchingMock)) {\n          accessor.set(candidateFieldToBeInjected,injectee,matchingMock);\n        }\n      }\n catch (      RuntimeException|IllegalAccessException e) {\n        throw cannotInjectDependency(candidateFieldToBeInjected,matchingMock,e);\n      }\n      return matchingMock;\n    }\n;\n  }\n  return OngoingInjector.nop;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 102,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 32,
        "startColumnNumber" : 12,
        "endLineNumber" : 32,
        "endColumnNumber" : 64
      },
      "nodeContext" : "final Object matchingMock=mocks.iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 31,
    "startColumnNumber" : 12,
    "endLineNumber" : 31,
    "endColumnNumber" : 17
  }, {
    "charLength" : 5,
    "startLineNumber" : 32,
    "startColumnNumber" : 40,
    "endLineNumber" : 32,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}