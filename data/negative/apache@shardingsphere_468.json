{
  "id" : 468,
  "expression" : "actual",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/assignment/AssignmentValueAssert.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 47,
      "startColumnNumber" : 12,
      "endLineNumber" : 47,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 62
      },
      "nodeContext" : "actual instanceof ParameterMarkerExpressionSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 62
      },
      "nodeContext" : "actual instanceof ParameterMarkerExpressionSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 48,
      "startColumnNumber" : 111,
      "endLineNumber" : 48,
      "endColumnNumber" : 117
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 48,
        "startColumnNumber" : 76,
        "endLineNumber" : 48,
        "endColumnNumber" : 117
      },
      "nodeContext" : "(ParameterMarkerExpressionSegment)actual",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 159
      },
      "nodeContext" : "ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 160
      },
      "nodeContext" : "ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 47,
        "startColumnNumber" : 64,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 160
      },
      "nodeContext" : "ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 49,
      "startColumnNumber" : 19,
      "endLineNumber" : 49,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 49,
        "startColumnNumber" : 19,
        "endLineNumber" : 49,
        "endColumnNumber" : 61
      },
      "nodeContext" : "actual instanceof LiteralExpressionSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 49,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 49,
        "startColumnNumber" : 19,
        "endLineNumber" : 49,
        "endColumnNumber" : 61
      },
      "nodeContext" : "actual instanceof LiteralExpressionSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 50,
      "startColumnNumber" : 95,
      "endLineNumber" : 50,
      "endColumnNumber" : 101
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 50,
        "startColumnNumber" : 68,
        "endLineNumber" : 50,
        "endColumnNumber" : 101
      },
      "nodeContext" : "(LiteralExpressionSegment)actual",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 135
      },
      "nodeContext" : "ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 136
      },
      "nodeContext" : "ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 49,
        "startColumnNumber" : 63,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 49,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 136
      },
      "nodeContext" : "ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 52,
      "startColumnNumber" : 19,
      "endLineNumber" : 52,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 52,
        "startColumnNumber" : 19,
        "endLineNumber" : 52,
        "endColumnNumber" : 64
      },
      "nodeContext" : "actual instanceof ExpressionProjectionSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 49,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 52,
        "startColumnNumber" : 19,
        "endLineNumber" : 52,
        "endColumnNumber" : 64
      },
      "nodeContext" : "actual instanceof ExpressionProjectionSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 53,
      "startColumnNumber" : 97,
      "endLineNumber" : 53,
      "endColumnNumber" : 103
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 53,
        "startColumnNumber" : 67,
        "endLineNumber" : 53,
        "endColumnNumber" : 103
      },
      "nodeContext" : "(ExpressionProjectionSegment)actual",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 136
      },
      "nodeContext" : "ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 137
      },
      "nodeContext" : "ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 52,
        "startColumnNumber" : 66,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 49,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 137
      },
      "nodeContext" : "ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 54,
      "startColumnNumber" : 19,
      "endLineNumber" : 54,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 54,
        "startColumnNumber" : 19,
        "endLineNumber" : 54,
        "endColumnNumber" : 50
      },
      "nodeContext" : "actual instanceof ColumnSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 54,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 49,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 54,
        "startColumnNumber" : 19,
        "endLineNumber" : 54,
        "endColumnNumber" : 50
      },
      "nodeContext" : "actual instanceof ColumnSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 55,
      "startColumnNumber" : 65,
      "endLineNumber" : 55,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 55,
        "startColumnNumber" : 49,
        "endLineNumber" : 55,
        "endColumnNumber" : 71
      },
      "nodeContext" : "(ColumnSegment)actual",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 94
      },
      "nodeContext" : "ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 95
      },
      "nodeContext" : "ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 54,
        "startColumnNumber" : 52,
        "endLineNumber" : 56,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 54,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 49,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 95
      },
      "nodeContext" : "ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 56,
      "startColumnNumber" : 19,
      "endLineNumber" : 56,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 56,
        "startColumnNumber" : 19,
        "endLineNumber" : 56,
        "endColumnNumber" : 62
      },
      "nodeContext" : "actual instanceof SubqueryExpressionSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 56,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 54,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 49,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 56,
        "startColumnNumber" : 19,
        "endLineNumber" : 56,
        "endColumnNumber" : 62
      },
      "nodeContext" : "actual instanceof SubqueryExpressionSegment",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 57,
      "startColumnNumber" : 97,
      "endLineNumber" : 57,
      "endColumnNumber" : 103
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 57,
        "startColumnNumber" : 69,
        "endLineNumber" : 57,
        "endColumnNumber" : 103
      },
      "nodeContext" : "(SubqueryExpressionSegment)actual",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 128
      },
      "nodeContext" : "ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 129
      },
      "nodeContext" : "ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 56,
        "startColumnNumber" : 64,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 56,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 54,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 49,
        "startColumnNumber" : 15,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof ParameterMarkerExpressionSegment) {\n  ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n}\n else if (actual instanceof LiteralExpressionSegment) {\n  ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n}\n else if (actual instanceof ExpressionProjectionSegment) {\n  ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n}\n else if (actual instanceof ColumnSegment) {\n  ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n}\n else if (actual instanceof SubqueryExpressionSegment) {\n  ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1089,
        "startLineNumber" : 46,
        "startColumnNumber" : 146,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert actual expression segment is correct with expected assignment value.\n * @param assertContext assert context\n * @param actual actual expression segment\n * @param expected expected assignment value\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final ExpressionSegment actual,final ExpectedAssignmentValue expected){\n  if (actual instanceof ParameterMarkerExpressionSegment) {\n    ExpressionAssert.assertParameterMarkerExpression(assertContext,(ParameterMarkerExpressionSegment)actual,expected.getParameterMarkerExpression());\n  }\n else   if (actual instanceof LiteralExpressionSegment) {\n    ExpressionAssert.assertLiteralExpression(assertContext,(LiteralExpressionSegment)actual,expected.getLiteralExpression());\n  }\n else   if (actual instanceof ExpressionProjectionSegment) {\n    ExpressionAssert.assertCommonExpression(assertContext,(ExpressionProjectionSegment)actual,expected.getCommonExpression());\n  }\n else   if (actual instanceof ColumnSegment) {\n    ColumnAssert.assertIs(assertContext,(ColumnSegment)actual,expected.getColumn());\n  }\n else   if (actual instanceof SubqueryExpressionSegment) {\n    ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 129
      },
      "nodeContext" : "ExpressionAssert.assertSubqueryExpression(assertContext,(SubqueryExpressionSegment)actual,expected.getSubquery());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 47,
    "startColumnNumber" : 12,
    "endLineNumber" : 47,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 48,
    "startColumnNumber" : 111,
    "endLineNumber" : 48,
    "endColumnNumber" : 117
  }, {
    "charLength" : 6,
    "startLineNumber" : 49,
    "startColumnNumber" : 19,
    "endLineNumber" : 49,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 50,
    "startColumnNumber" : 95,
    "endLineNumber" : 50,
    "endColumnNumber" : 101
  }, {
    "charLength" : 6,
    "startLineNumber" : 52,
    "startColumnNumber" : 19,
    "endLineNumber" : 52,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 53,
    "startColumnNumber" : 97,
    "endLineNumber" : 53,
    "endColumnNumber" : 103
  }, {
    "charLength" : 6,
    "startLineNumber" : 54,
    "startColumnNumber" : 19,
    "endLineNumber" : 54,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 55,
    "startColumnNumber" : 65,
    "endLineNumber" : 55,
    "endColumnNumber" : 71
  }, {
    "charLength" : 6,
    "startLineNumber" : 56,
    "startColumnNumber" : 19,
    "endLineNumber" : 56,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 57,
    "startColumnNumber" : 97,
    "endLineNumber" : 57,
    "endColumnNumber" : 103
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  } ]
}