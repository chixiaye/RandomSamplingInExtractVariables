{
  "id" : 429,
  "expression" : "to",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListIterative.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "to",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 61,
      "startColumnNumber" : 37,
      "endLineNumber" : 61,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 61,
        "startColumnNumber" : 33,
        "endLineNumber" : 61,
        "endColumnNumber" : 40
      },
      "nodeContext" : "low[to]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 41
      },
      "nodeContext" : "min(low[at],low[to])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 61,
        "startColumnNumber" : 10,
        "endLineNumber" : 61,
        "endColumnNumber" : 41
      },
      "nodeContext" : "low[at]=min(low[at],low[to])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 61,
        "startColumnNumber" : 10,
        "endLineNumber" : 61,
        "endColumnNumber" : 42
      },
      "nodeContext" : "low[at]=min(low[at],low[to]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 58,
        "startColumnNumber" : 34,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  at=stack.pop();\n  int to=stack.pop();\n  low[at]=min(low[at],low[to]);\n  if (ids[at] < low[to]) {\n    bridges.add(at);\n    bridges.add(to);\n  }\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (at == CALLBACK_TOKEN) {\n  at=stack.pop();\n  int to=stack.pop();\n  low[at]=min(low[at],low[to]);\n  if (ids[at] < low[to]) {\n    bridges.add(at);\n    bridges.add(to);\n  }\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 55,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 36,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1485,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<Integer> findBridges(){\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 61,
        "startColumnNumber" : 10,
        "endLineNumber" : 61,
        "endColumnNumber" : 42
      },
      "nodeContext" : "low[at]=min(low[at],low[to]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "to",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 62,
      "startColumnNumber" : 28,
      "endLineNumber" : 62,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 62,
        "startColumnNumber" : 24,
        "endLineNumber" : 62,
        "endColumnNumber" : 31
      },
      "nodeContext" : "low[to]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 62,
        "startColumnNumber" : 14,
        "endLineNumber" : 62,
        "endColumnNumber" : 31
      },
      "nodeContext" : "ids[at] < low[to]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 62,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (ids[at] < low[to]) {\n  bridges.add(at);\n  bridges.add(to);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 58,
        "startColumnNumber" : 34,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  at=stack.pop();\n  int to=stack.pop();\n  low[at]=min(low[at],low[to]);\n  if (ids[at] < low[to]) {\n    bridges.add(at);\n    bridges.add(to);\n  }\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (at == CALLBACK_TOKEN) {\n  at=stack.pop();\n  int to=stack.pop();\n  low[at]=min(low[at],low[to]);\n  if (ids[at] < low[to]) {\n    bridges.add(at);\n    bridges.add(to);\n  }\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 55,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 36,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1485,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<Integer> findBridges(){\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 62,
        "startColumnNumber" : 14,
        "endLineNumber" : 62,
        "endColumnNumber" : 31
      },
      "nodeContext" : "ids[at] < low[to]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "to",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 64,
      "startColumnNumber" : 24,
      "endLineNumber" : 64,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 27
      },
      "nodeContext" : "bridges.add(to)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 28
      },
      "nodeContext" : "bridges.add(to);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 62,
        "startColumnNumber" : 33,
        "endLineNumber" : 65,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  bridges.add(at);\n  bridges.add(to);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 62,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (ids[at] < low[to]) {\n  bridges.add(at);\n  bridges.add(to);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 58,
        "startColumnNumber" : 34,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  at=stack.pop();\n  int to=stack.pop();\n  low[at]=min(low[at],low[to]);\n  if (ids[at] < low[to]) {\n    bridges.add(at);\n    bridges.add(to);\n  }\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (at == CALLBACK_TOKEN) {\n  at=stack.pop();\n  int to=stack.pop();\n  low[at]=min(low[at],low[to]);\n  if (ids[at] < low[to]) {\n    bridges.add(at);\n    bridges.add(to);\n  }\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 55,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 36,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1485,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<Integer> findBridges(){\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 28
      },
      "nodeContext" : "bridges.add(to);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "to",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 76,
      "startColumnNumber" : 16,
      "endLineNumber" : 76,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 76,
        "endColumnNumber" : 28
      },
      "nodeContext" : "to == parent",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 39
      },
      "nodeContext" : "if (to == parent) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 75,
        "startColumnNumber" : 35,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 75,
        "startColumnNumber" : 10,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Integer to : edges) {\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 70,
        "startColumnNumber" : 26,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!visited[at]) {\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 92,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 55,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 36,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1485,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<Integer> findBridges(){\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 39
      },
      "nodeContext" : "if (to == parent) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "to",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 77,
      "startColumnNumber" : 25,
      "endLineNumber" : 77,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 77,
        "startColumnNumber" : 17,
        "endLineNumber" : 77,
        "endColumnNumber" : 28
      },
      "nodeContext" : "visited[to]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 28
      },
      "nodeContext" : "!visited[to]",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!visited[to]) {\n  stack.push(to);\n  stack.push(at);\n  stack.push(CALLBACK_TOKEN);\n  stack.push(to);\n  parentStack.push(at);\n}\n else {\n  low[at]=min(low[at],ids[to]);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 75,
        "startColumnNumber" : 35,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 75,
        "startColumnNumber" : 10,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Integer to : edges) {\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 70,
        "startColumnNumber" : 26,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!visited[at]) {\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 92,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 55,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 36,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1485,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<Integer> findBridges(){\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 28
      },
      "nodeContext" : "!visited[to]",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "to",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 78,
      "startColumnNumber" : 25,
      "endLineNumber" : 78,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 78,
        "startColumnNumber" : 14,
        "endLineNumber" : 78,
        "endColumnNumber" : 28
      },
      "nodeContext" : "stack.push(to)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 78,
        "startColumnNumber" : 14,
        "endLineNumber" : 78,
        "endColumnNumber" : 29
      },
      "nodeContext" : "stack.push(to);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 77,
        "startColumnNumber" : 30,
        "endLineNumber" : 83,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  stack.push(to);\n  stack.push(at);\n  stack.push(CALLBACK_TOKEN);\n  stack.push(to);\n  parentStack.push(at);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!visited[to]) {\n  stack.push(to);\n  stack.push(at);\n  stack.push(CALLBACK_TOKEN);\n  stack.push(to);\n  parentStack.push(at);\n}\n else {\n  low[at]=min(low[at],ids[to]);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 75,
        "startColumnNumber" : 35,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 75,
        "startColumnNumber" : 10,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Integer to : edges) {\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 70,
        "startColumnNumber" : 26,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!visited[at]) {\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 92,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 55,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 36,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1485,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<Integer> findBridges(){\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 78,
        "startColumnNumber" : 14,
        "endLineNumber" : 78,
        "endColumnNumber" : 29
      },
      "nodeContext" : "stack.push(to);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "to",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 81,
      "startColumnNumber" : 25,
      "endLineNumber" : 81,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 81,
        "startColumnNumber" : 14,
        "endLineNumber" : 81,
        "endColumnNumber" : 28
      },
      "nodeContext" : "stack.push(to)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 81,
        "startColumnNumber" : 14,
        "endLineNumber" : 81,
        "endColumnNumber" : 29
      },
      "nodeContext" : "stack.push(to);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 77,
        "startColumnNumber" : 30,
        "endLineNumber" : 83,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  stack.push(to);\n  stack.push(at);\n  stack.push(CALLBACK_TOKEN);\n  stack.push(to);\n  parentStack.push(at);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!visited[to]) {\n  stack.push(to);\n  stack.push(at);\n  stack.push(CALLBACK_TOKEN);\n  stack.push(to);\n  parentStack.push(at);\n}\n else {\n  low[at]=min(low[at],ids[to]);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 75,
        "startColumnNumber" : 35,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 75,
        "startColumnNumber" : 10,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Integer to : edges) {\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 70,
        "startColumnNumber" : 26,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!visited[at]) {\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 92,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 55,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 36,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1485,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<Integer> findBridges(){\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 81,
        "startColumnNumber" : 14,
        "endLineNumber" : 81,
        "endColumnNumber" : 29
      },
      "nodeContext" : "stack.push(to);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "to",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 84,
      "startColumnNumber" : 41,
      "endLineNumber" : 84,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 84,
        "startColumnNumber" : 37,
        "endLineNumber" : 84,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ids[to]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 84,
        "startColumnNumber" : 24,
        "endLineNumber" : 84,
        "endColumnNumber" : 45
      },
      "nodeContext" : "min(low[at],ids[to])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 14,
        "endLineNumber" : 84,
        "endColumnNumber" : 45
      },
      "nodeContext" : "low[at]=min(low[at],ids[to])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 84,
        "startColumnNumber" : 14,
        "endLineNumber" : 84,
        "endColumnNumber" : 46
      },
      "nodeContext" : "low[at]=min(low[at],ids[to]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 83,
        "startColumnNumber" : 19,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  low[at]=min(low[at],ids[to]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!visited[to]) {\n  stack.push(to);\n  stack.push(at);\n  stack.push(CALLBACK_TOKEN);\n  stack.push(to);\n  parentStack.push(at);\n}\n else {\n  low[at]=min(low[at],ids[to]);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 75,
        "startColumnNumber" : 35,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 75,
        "startColumnNumber" : 10,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Integer to : edges) {\n  if (to == parent)   continue;\n  if (!visited[to]) {\n    stack.push(to);\n    stack.push(at);\n    stack.push(CALLBACK_TOKEN);\n    stack.push(to);\n    parentStack.push(at);\n  }\n else {\n    low[at]=min(low[at],ids[to]);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 70,
        "startColumnNumber" : 26,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!visited[at]) {\n  low[at]=ids[at]=++id;\n  visited[at]=true;\n  List<Integer> edges=graph.get(at);\n  for (  Integer to : edges) {\n    if (to == parent)     continue;\n    if (!visited[to]) {\n      stack.push(to);\n      stack.push(at);\n      stack.push(CALLBACK_TOKEN);\n      stack.push(to);\n      parentStack.push(at);\n    }\n else {\n      low[at]=min(low[at],ids[to]);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 92,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 55,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  int at=stack.pop();\n  if (at == CALLBACK_TOKEN) {\n    at=stack.pop();\n    int to=stack.pop();\n    low[at]=min(low[at],low[to]);\n    if (ids[at] < low[to]) {\n      bridges.add(at);\n      bridges.add(to);\n    }\n    continue;\n  }\n  int parent=parentStack.pop();\n  if (!visited[at]) {\n    low[at]=ids[at]=++id;\n    visited[at]=true;\n    List<Integer> edges=graph.get(at);\n    for (    Integer to : edges) {\n      if (to == parent)       continue;\n      if (!visited[to]) {\n        stack.push(to);\n        stack.push(at);\n        stack.push(CALLBACK_TOKEN);\n        stack.push(to);\n        parentStack.push(at);\n      }\n else {\n        low[at]=min(low[at],ids[to]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (visited[i])   continue;\n  Deque<Integer> stack=new ArrayDeque<>();\n  Deque<Integer> parentStack=new ArrayDeque<>();\n  stack.push(i);\n  parentStack.push(-1);\n  while (!stack.isEmpty()) {\n    int at=stack.pop();\n    if (at == CALLBACK_TOKEN) {\n      at=stack.pop();\n      int to=stack.pop();\n      low[at]=min(low[at],low[to]);\n      if (ids[at] < low[to]) {\n        bridges.add(at);\n        bridges.add(to);\n      }\n      continue;\n    }\n    int parent=parentStack.pop();\n    if (!visited[at]) {\n      low[at]=ids[at]=++id;\n      visited[at]=true;\n      List<Integer> edges=graph.get(at);\n      for (      Integer to : edges) {\n        if (to == parent)         continue;\n        if (!visited[to]) {\n          stack.push(to);\n          stack.push(at);\n          stack.push(CALLBACK_TOKEN);\n          stack.push(to);\n          parentStack.push(at);\n        }\n else {\n          low[at]=min(low[at],ids[to]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 36,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1485,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<Integer> findBridges(){\n  if (solved)   return bridges;\n  id=0;\n  low=new int[n];\n  ids=new int[n];\n  visited=new boolean[n];\n  bridges=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    if (visited[i])     continue;\n    Deque<Integer> stack=new ArrayDeque<>();\n    Deque<Integer> parentStack=new ArrayDeque<>();\n    stack.push(i);\n    parentStack.push(-1);\n    while (!stack.isEmpty()) {\n      int at=stack.pop();\n      if (at == CALLBACK_TOKEN) {\n        at=stack.pop();\n        int to=stack.pop();\n        low[at]=min(low[at],low[to]);\n        if (ids[at] < low[to]) {\n          bridges.add(at);\n          bridges.add(to);\n        }\n        continue;\n      }\n      int parent=parentStack.pop();\n      if (!visited[at]) {\n        low[at]=ids[at]=++id;\n        visited[at]=true;\n        List<Integer> edges=graph.get(at);\n        for (        Integer to : edges) {\n          if (to == parent)           continue;\n          if (!visited[to]) {\n            stack.push(to);\n            stack.push(at);\n            stack.push(CALLBACK_TOKEN);\n            stack.push(to);\n            parentStack.push(at);\n          }\n else {\n            low[at]=min(low[at],ids[to]);\n          }\n        }\n      }\n    }\n  }\n  solved=true;\n  return bridges;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 84,
        "startColumnNumber" : 14,
        "endLineNumber" : 84,
        "endColumnNumber" : 46
      },
      "nodeContext" : "low[at]=min(low[at],ids[to]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 61,
    "startColumnNumber" : 37,
    "endLineNumber" : 61,
    "endColumnNumber" : 39
  }, {
    "charLength" : 2,
    "startLineNumber" : 62,
    "startColumnNumber" : 28,
    "endLineNumber" : 62,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 64,
    "startColumnNumber" : 24,
    "endLineNumber" : 64,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 76,
    "startColumnNumber" : 16,
    "endLineNumber" : 76,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 77,
    "startColumnNumber" : 25,
    "endLineNumber" : 77,
    "endColumnNumber" : 27
  }, {
    "charLength" : 2,
    "startLineNumber" : 78,
    "startColumnNumber" : 25,
    "endLineNumber" : 78,
    "endColumnNumber" : 27
  }, {
    "charLength" : 2,
    "startLineNumber" : 81,
    "startColumnNumber" : 25,
    "endLineNumber" : 81,
    "endColumnNumber" : 27
  }, {
    "charLength" : 2,
    "startLineNumber" : 84,
    "startColumnNumber" : 41,
    "endLineNumber" : 84,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  } ]
}