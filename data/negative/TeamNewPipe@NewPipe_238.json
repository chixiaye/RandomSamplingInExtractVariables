{
  "id" : 238,
  "expression" : "prefixFileName",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/util/StateSaver.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "prefixFileName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 213,
      "startColumnNumber" : 45,
      "endLineNumber" : 213,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 211,
        "startColumnNumber" : 23,
        "endLineNumber" : 215,
        "endColumnNumber" : 55
      },
      "nodeContext" : "\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 210,
        "startColumnNumber" : 32,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 210,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (MainActivity.DEBUG) {\n  Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2947,
        "startLineNumber" : 209,
        "startColumnNumber" : 96,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * If it's not changing configuration (i.e. rotating screen), try to write the state from  {@link StateSaver.WriteRead#writeTo(Queue)}to the file with the name of prefixFileName + suffixFileName, in a cache folder got from the  {@link #init(Context)}. <p> It checks if the file already exists and if it does, just return the path, so a good way to save is: </p> <ul> <li>A fixed prefix for the file</li> <li>A changing suffix</li> </ul>\n * @param isChangingConfig\n * @param prefixFileName\n * @param suffixFileName\n * @param writeRead\n * @return the saved state or {@code null}\n */\n@Nullable private static SavedState tryToSave(final boolean isChangingConfig,final String prefixFileName,final String suffixFileName,final WriteRead writeRead){\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 322,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 211,
        "startColumnNumber" : 23,
        "endLineNumber" : 215,
        "endColumnNumber" : 55
      },
      "nodeContext" : "\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "prefixFileName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 223,
      "startColumnNumber" : 41,
      "endLineNumber" : 223,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 223,
        "startColumnNumber" : 16,
        "endLineNumber" : 223,
        "endColumnNumber" : 70
      },
      "nodeContext" : "STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 223,
        "startColumnNumber" : 16,
        "endLineNumber" : 223,
        "endColumnNumber" : 71
      },
      "nodeContext" : "STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 222,
        "startColumnNumber" : 41,
        "endLineNumber" : 225,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n  return new SavedState(prefixFileName,\"\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 336,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 230,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (savedObjects.size() > 0) {\n  STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n  return new SavedState(prefixFileName,\"\");\n}\n else {\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"Nothing to save\");\n  }\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 221,
        "startColumnNumber" : 30,
        "endLineNumber" : 231,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (savedObjects.size() > 0) {\n    STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n    return new SavedState(prefixFileName,\"\");\n  }\n else {\n    if (MainActivity.DEBUG) {\n      Log.d(TAG,\"Nothing to save\");\n    }\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isChangingConfig) {\n  if (savedObjects.size() > 0) {\n    STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n    return new SavedState(prefixFileName,\"\");\n  }\n else {\n    if (MainActivity.DEBUG) {\n      Log.d(TAG,\"Nothing to save\");\n    }\n    return null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2947,
        "startLineNumber" : 209,
        "startColumnNumber" : 96,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * If it's not changing configuration (i.e. rotating screen), try to write the state from  {@link StateSaver.WriteRead#writeTo(Queue)}to the file with the name of prefixFileName + suffixFileName, in a cache folder got from the  {@link #init(Context)}. <p> It checks if the file already exists and if it does, just return the path, so a good way to save is: </p> <ul> <li>A fixed prefix for the file</li> <li>A changing suffix</li> </ul>\n * @param isChangingConfig\n * @param prefixFileName\n * @param suffixFileName\n * @param writeRead\n * @return the saved state or {@code null}\n */\n@Nullable private static SavedState tryToSave(final boolean isChangingConfig,final String prefixFileName,final String suffixFileName,final WriteRead writeRead){\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 322,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 223,
        "startColumnNumber" : 16,
        "endLineNumber" : 223,
        "endColumnNumber" : 71
      },
      "nodeContext" : "STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "prefixFileName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 224,
      "startColumnNumber" : 38,
      "endLineNumber" : 224,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 224,
        "startColumnNumber" : 23,
        "endLineNumber" : 224,
        "endColumnNumber" : 57
      },
      "nodeContext" : "new SavedState(prefixFileName,\"\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 224,
        "startColumnNumber" : 16,
        "endLineNumber" : 224,
        "endColumnNumber" : 58
      },
      "nodeContext" : "return new SavedState(prefixFileName,\"\");\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 222,
        "startColumnNumber" : 41,
        "endLineNumber" : 225,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n  return new SavedState(prefixFileName,\"\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 336,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 230,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (savedObjects.size() > 0) {\n  STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n  return new SavedState(prefixFileName,\"\");\n}\n else {\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"Nothing to save\");\n  }\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 221,
        "startColumnNumber" : 30,
        "endLineNumber" : 231,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (savedObjects.size() > 0) {\n    STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n    return new SavedState(prefixFileName,\"\");\n  }\n else {\n    if (MainActivity.DEBUG) {\n      Log.d(TAG,\"Nothing to save\");\n    }\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isChangingConfig) {\n  if (savedObjects.size() > 0) {\n    STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n    return new SavedState(prefixFileName,\"\");\n  }\n else {\n    if (MainActivity.DEBUG) {\n      Log.d(TAG,\"Nothing to save\");\n    }\n    return null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2947,
        "startLineNumber" : 209,
        "startColumnNumber" : 96,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * If it's not changing configuration (i.e. rotating screen), try to write the state from  {@link StateSaver.WriteRead#writeTo(Queue)}to the file with the name of prefixFileName + suffixFileName, in a cache folder got from the  {@link #init(Context)}. <p> It checks if the file already exists and if it does, just return the path, so a good way to save is: </p> <ul> <li>A fixed prefix for the file</li> <li>A changing suffix</li> </ul>\n * @param isChangingConfig\n * @param prefixFileName\n * @param suffixFileName\n * @param writeRead\n * @return the saved state or {@code null}\n */\n@Nullable private static SavedState tryToSave(final boolean isChangingConfig,final String prefixFileName,final String suffixFileName,final WriteRead writeRead){\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 322,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 224,
        "startColumnNumber" : 16,
        "endLineNumber" : 224,
        "endColumnNumber" : 58
      },
      "nodeContext" : "return new SavedState(prefixFileName,\"\");\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "prefixFileName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 250,
      "startColumnNumber" : 43,
      "endLineNumber" : 250,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 250,
        "startColumnNumber" : 43,
        "endLineNumber" : 251,
        "endColumnNumber" : 85
      },
      "nodeContext" : "prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 250,
        "startColumnNumber" : 24,
        "endLineNumber" : 251,
        "endColumnNumber" : 86
      },
      "nodeContext" : "new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 250,
        "startColumnNumber" : 17,
        "endLineNumber" : 251,
        "endColumnNumber" : 86
      },
      "nodeContext" : "file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 250,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 87
      },
      "nodeContext" : "File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1719,
        "startLineNumber" : 234,
        "startColumnNumber" : 12,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  File cacheDir=new File(cacheDirPath);\n  if (!cacheDir.exists()) {\n    throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n  }\n  cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n  if (!cacheDir.exists()) {\n    if (!cacheDir.mkdir()) {\n      if (BuildConfig.DEBUG) {\n        Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n      }\n      return null;\n    }\n  }\n  File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n  if (file.exists() && file.length() > 0) {\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n else {\n    File[] files=cacheDir.listFiles(new FilenameFilter(){\n      @Override public boolean accept(      final File dir,      final String name){\n        return name.contains(prefixFileName);\n      }\n    }\n);\n    for (    File fileToDelete : files) {\n      fileToDelete.delete();\n    }\n  }\n  fileOutputStream=new FileOutputStream(file);\n  ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n  outputStream.writeObject(savedObjects);\n  return new SavedState(prefixFileName,file.getAbsolutePath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2002,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 281,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  File cacheDir=new File(cacheDirPath);\n  if (!cacheDir.exists()) {\n    throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n  }\n  cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n  if (!cacheDir.exists()) {\n    if (!cacheDir.mkdir()) {\n      if (BuildConfig.DEBUG) {\n        Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n      }\n      return null;\n    }\n  }\n  File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n  if (file.exists() && file.length() > 0) {\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n else {\n    File[] files=cacheDir.listFiles(new FilenameFilter(){\n      @Override public boolean accept(      final File dir,      final String name){\n        return name.contains(prefixFileName);\n      }\n    }\n);\n    for (    File fileToDelete : files) {\n      fileToDelete.delete();\n    }\n  }\n  fileOutputStream=new FileOutputStream(file);\n  ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n  outputStream.writeObject(savedObjects);\n  return new SavedState(prefixFileName,file.getAbsolutePath());\n}\n catch (Exception e) {\n  Log.e(TAG,\"Failed to save state\",e);\n}\n finally {\n  if (fileOutputStream != null) {\n    try {\n      fileOutputStream.close();\n    }\n catch (    IOException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 207,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2947,
        "startLineNumber" : 209,
        "startColumnNumber" : 96,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * If it's not changing configuration (i.e. rotating screen), try to write the state from  {@link StateSaver.WriteRead#writeTo(Queue)}to the file with the name of prefixFileName + suffixFileName, in a cache folder got from the  {@link #init(Context)}. <p> It checks if the file already exists and if it does, just return the path, so a good way to save is: </p> <ul> <li>A fixed prefix for the file</li> <li>A changing suffix</li> </ul>\n * @param isChangingConfig\n * @param prefixFileName\n * @param suffixFileName\n * @param writeRead\n * @return the saved state or {@code null}\n */\n@Nullable private static SavedState tryToSave(final boolean isChangingConfig,final String prefixFileName,final String suffixFileName,final WriteRead writeRead){\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 322,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 250,
        "startColumnNumber" : 43,
        "endLineNumber" : 251,
        "endColumnNumber" : 85
      },
      "nodeContext" : "prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "prefixFileName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 254,
      "startColumnNumber" : 38,
      "endLineNumber" : 254,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 254,
        "startColumnNumber" : 23,
        "endLineNumber" : 254,
        "endColumnNumber" : 77
      },
      "nodeContext" : "new SavedState(prefixFileName,file.getAbsolutePath())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return new SavedState(prefixFileName,file.getAbsolutePath());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 252,
        "startColumnNumber" : 52,
        "endLineNumber" : 255,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  return new SavedState(prefixFileName,file.getAbsolutePath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 674,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (file.exists() && file.length() > 0) {\n  return new SavedState(prefixFileName,file.getAbsolutePath());\n}\n else {\n  File[] files=cacheDir.listFiles(new FilenameFilter(){\n    @Override public boolean accept(    final File dir,    final String name){\n      return name.contains(prefixFileName);\n    }\n  }\n);\n  for (  File fileToDelete : files) {\n    fileToDelete.delete();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1719,
        "startLineNumber" : 234,
        "startColumnNumber" : 12,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  File cacheDir=new File(cacheDirPath);\n  if (!cacheDir.exists()) {\n    throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n  }\n  cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n  if (!cacheDir.exists()) {\n    if (!cacheDir.mkdir()) {\n      if (BuildConfig.DEBUG) {\n        Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n      }\n      return null;\n    }\n  }\n  File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n  if (file.exists() && file.length() > 0) {\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n else {\n    File[] files=cacheDir.listFiles(new FilenameFilter(){\n      @Override public boolean accept(      final File dir,      final String name){\n        return name.contains(prefixFileName);\n      }\n    }\n);\n    for (    File fileToDelete : files) {\n      fileToDelete.delete();\n    }\n  }\n  fileOutputStream=new FileOutputStream(file);\n  ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n  outputStream.writeObject(savedObjects);\n  return new SavedState(prefixFileName,file.getAbsolutePath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2002,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 281,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  File cacheDir=new File(cacheDirPath);\n  if (!cacheDir.exists()) {\n    throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n  }\n  cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n  if (!cacheDir.exists()) {\n    if (!cacheDir.mkdir()) {\n      if (BuildConfig.DEBUG) {\n        Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n      }\n      return null;\n    }\n  }\n  File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n  if (file.exists() && file.length() > 0) {\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n else {\n    File[] files=cacheDir.listFiles(new FilenameFilter(){\n      @Override public boolean accept(      final File dir,      final String name){\n        return name.contains(prefixFileName);\n      }\n    }\n);\n    for (    File fileToDelete : files) {\n      fileToDelete.delete();\n    }\n  }\n  fileOutputStream=new FileOutputStream(file);\n  ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n  outputStream.writeObject(savedObjects);\n  return new SavedState(prefixFileName,file.getAbsolutePath());\n}\n catch (Exception e) {\n  Log.e(TAG,\"Failed to save state\",e);\n}\n finally {\n  if (fileOutputStream != null) {\n    try {\n      fileOutputStream.close();\n    }\n catch (    IOException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 207,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2947,
        "startLineNumber" : 209,
        "startColumnNumber" : 96,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * If it's not changing configuration (i.e. rotating screen), try to write the state from  {@link StateSaver.WriteRead#writeTo(Queue)}to the file with the name of prefixFileName + suffixFileName, in a cache folder got from the  {@link #init(Context)}. <p> It checks if the file already exists and if it does, just return the path, so a good way to save is: </p> <ul> <li>A fixed prefix for the file</li> <li>A changing suffix</li> </ul>\n * @param isChangingConfig\n * @param prefixFileName\n * @param suffixFileName\n * @param writeRead\n * @return the saved state or {@code null}\n */\n@Nullable private static SavedState tryToSave(final boolean isChangingConfig,final String prefixFileName,final String suffixFileName,final WriteRead writeRead){\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 322,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return new SavedState(prefixFileName,file.getAbsolutePath());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "prefixFileName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 272,
      "startColumnNumber" : 34,
      "endLineNumber" : 272,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 272,
        "startColumnNumber" : 19,
        "endLineNumber" : 272,
        "endColumnNumber" : 73
      },
      "nodeContext" : "new SavedState(prefixFileName,file.getAbsolutePath())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 272,
        "startColumnNumber" : 12,
        "endLineNumber" : 272,
        "endColumnNumber" : 74
      },
      "nodeContext" : "return new SavedState(prefixFileName,file.getAbsolutePath());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1719,
        "startLineNumber" : 234,
        "startColumnNumber" : 12,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  File cacheDir=new File(cacheDirPath);\n  if (!cacheDir.exists()) {\n    throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n  }\n  cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n  if (!cacheDir.exists()) {\n    if (!cacheDir.mkdir()) {\n      if (BuildConfig.DEBUG) {\n        Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n      }\n      return null;\n    }\n  }\n  File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n  if (file.exists() && file.length() > 0) {\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n else {\n    File[] files=cacheDir.listFiles(new FilenameFilter(){\n      @Override public boolean accept(      final File dir,      final String name){\n        return name.contains(prefixFileName);\n      }\n    }\n);\n    for (    File fileToDelete : files) {\n      fileToDelete.delete();\n    }\n  }\n  fileOutputStream=new FileOutputStream(file);\n  ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n  outputStream.writeObject(savedObjects);\n  return new SavedState(prefixFileName,file.getAbsolutePath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2002,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 281,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  File cacheDir=new File(cacheDirPath);\n  if (!cacheDir.exists()) {\n    throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n  }\n  cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n  if (!cacheDir.exists()) {\n    if (!cacheDir.mkdir()) {\n      if (BuildConfig.DEBUG) {\n        Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n      }\n      return null;\n    }\n  }\n  File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n  if (file.exists() && file.length() > 0) {\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n else {\n    File[] files=cacheDir.listFiles(new FilenameFilter(){\n      @Override public boolean accept(      final File dir,      final String name){\n        return name.contains(prefixFileName);\n      }\n    }\n);\n    for (    File fileToDelete : files) {\n      fileToDelete.delete();\n    }\n  }\n  fileOutputStream=new FileOutputStream(file);\n  ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n  outputStream.writeObject(savedObjects);\n  return new SavedState(prefixFileName,file.getAbsolutePath());\n}\n catch (Exception e) {\n  Log.e(TAG,\"Failed to save state\",e);\n}\n finally {\n  if (fileOutputStream != null) {\n    try {\n      fileOutputStream.close();\n    }\n catch (    IOException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 207,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2947,
        "startLineNumber" : 209,
        "startColumnNumber" : 96,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3854,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * If it's not changing configuration (i.e. rotating screen), try to write the state from  {@link StateSaver.WriteRead#writeTo(Queue)}to the file with the name of prefixFileName + suffixFileName, in a cache folder got from the  {@link #init(Context)}. <p> It checks if the file already exists and if it does, just return the path, so a good way to save is: </p> <ul> <li>A fixed prefix for the file</li> <li>A changing suffix</li> </ul>\n * @param isChangingConfig\n * @param prefixFileName\n * @param suffixFileName\n * @param writeRead\n * @return the saved state or {@code null}\n */\n@Nullable private static SavedState tryToSave(final boolean isChangingConfig,final String prefixFileName,final String suffixFileName,final WriteRead writeRead){\n  if (MainActivity.DEBUG) {\n    Log.d(TAG,\"tryToSave() called with: \" + \"isChangingConfig = [\" + isChangingConfig + \"], \"+ \"prefixFileName = [\"+ prefixFileName+ \"], \"+ \"suffixFileName = [\"+ suffixFileName+ \"], \"+ \"writeRead = [\"+ writeRead+ \"]\");\n  }\n  LinkedList<Object> savedObjects=new LinkedList<>();\n  writeRead.writeTo(savedObjects);\n  if (isChangingConfig) {\n    if (savedObjects.size() > 0) {\n      STATE_OBJECTS_HOLDER.put(prefixFileName,savedObjects);\n      return new SavedState(prefixFileName,\"\");\n    }\n else {\n      if (MainActivity.DEBUG) {\n        Log.d(TAG,\"Nothing to save\");\n      }\n      return null;\n    }\n  }\n  FileOutputStream fileOutputStream=null;\n  try {\n    File cacheDir=new File(cacheDirPath);\n    if (!cacheDir.exists()) {\n      throw new RuntimeException(\"Cache dir does not exist > \" + cacheDirPath);\n    }\n    cacheDir=new File(cacheDir,CACHE_DIR_NAME);\n    if (!cacheDir.exists()) {\n      if (!cacheDir.mkdir()) {\n        if (BuildConfig.DEBUG) {\n          Log.e(TAG,\"Failed to create cache directory \" + cacheDir.getAbsolutePath());\n        }\n        return null;\n      }\n    }\n    File file=new File(cacheDir,prefixFileName + (TextUtils.isEmpty(suffixFileName) ? \".cache\" : suffixFileName));\n    if (file.exists() && file.length() > 0) {\n      return new SavedState(prefixFileName,file.getAbsolutePath());\n    }\n else {\n      File[] files=cacheDir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        final File dir,        final String name){\n          return name.contains(prefixFileName);\n        }\n      }\n);\n      for (      File fileToDelete : files) {\n        fileToDelete.delete();\n      }\n    }\n    fileOutputStream=new FileOutputStream(file);\n    ObjectOutputStream outputStream=new ObjectOutputStream(fileOutputStream);\n    outputStream.writeObject(savedObjects);\n    return new SavedState(prefixFileName,file.getAbsolutePath());\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to save state\",e);\n  }\n finally {\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 322,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 272,
        "startColumnNumber" : 12,
        "endLineNumber" : 272,
        "endColumnNumber" : 74
      },
      "nodeContext" : "return new SavedState(prefixFileName,file.getAbsolutePath());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 213,
    "startColumnNumber" : 45,
    "endLineNumber" : 213,
    "endColumnNumber" : 59
  }, {
    "charLength" : 14,
    "startLineNumber" : 223,
    "startColumnNumber" : 41,
    "endLineNumber" : 223,
    "endColumnNumber" : 55
  }, {
    "charLength" : 14,
    "startLineNumber" : 224,
    "startColumnNumber" : 38,
    "endLineNumber" : 224,
    "endColumnNumber" : 52
  }, {
    "charLength" : 14,
    "startLineNumber" : 250,
    "startColumnNumber" : 43,
    "endLineNumber" : 250,
    "endColumnNumber" : 57
  }, {
    "charLength" : 14,
    "startLineNumber" : 254,
    "startColumnNumber" : 38,
    "endLineNumber" : 254,
    "endColumnNumber" : 52
  }, {
    "charLength" : 14,
    "startLineNumber" : 272,
    "startColumnNumber" : 34,
    "endLineNumber" : 272,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}