{
  "id" : 89,
  "expression" : "OuterJoinType",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/operators/LeftOuterJoinDriver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "OuterJoinType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 61,
      "startColumnNumber" : 24,
      "endLineNumber" : 61,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 61,
        "startColumnNumber" : 24,
        "endLineNumber" : 61,
        "endColumnNumber" : 42
      },
      "nodeContext" : "OuterJoinType.LEFT",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 549,
        "startLineNumber" : 60,
        "startColumnNumber" : 23,
        "endLineNumber" : 72,
        "endColumnNumber" : 62
      },
      "nodeContext" : "new ReusingMergeOuterJoinIterator<>(OuterJoinType.LEFT,in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,numPages,super.taskContext.getContainingTask())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 25,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 72,
        "endColumnNumber" : 63
      },
      "nodeContext" : "return new ReusingMergeOuterJoinIterator<>(OuterJoinType.LEFT,in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,numPages,super.taskContext.getContainingTask());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 26,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2291,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (driverStrategy) {\ncase LEFT_OUTER_MERGE:  int numPages=memoryManager.computeNumberOfPages(driverMemFraction);\nreturn new ReusingMergeOuterJoinIterator<>(OuterJoinType.LEFT,in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,numPages,super.taskContext.getContainingTask());\ncase LEFT_HYBRIDHASH_BUILD_FIRST:return new ReusingBuildFirstHashJoinIterator<>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator21(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getContainingTask(),driverMemFraction,false,true,false);\ncase LEFT_HYBRIDHASH_BUILD_SECOND:return new ReusingBuildSecondHashJoinIterator<>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getContainingTask(),driverMemFraction,true,false,false);\ndefault:throw new Exception(\"Unsupported driver strategy for left outer join driver: \" + driverStrategy.name());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 106,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 56,
        "startColumnNumber" : 29,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (driverStrategy) {\ncase LEFT_OUTER_MERGE:    int numPages=memoryManager.computeNumberOfPages(driverMemFraction);\n  return new ReusingMergeOuterJoinIterator<>(OuterJoinType.LEFT,in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,numPages,super.taskContext.getContainingTask());\ncase LEFT_HYBRIDHASH_BUILD_FIRST:return new ReusingBuildFirstHashJoinIterator<>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator21(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getContainingTask(),driverMemFraction,false,true,false);\ncase LEFT_HYBRIDHASH_BUILD_SECOND:return new ReusingBuildSecondHashJoinIterator<>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getContainingTask(),driverMemFraction,true,false,false);\ndefault:throw new Exception(\"Unsupported driver strategy for left outer join driver: \" + driverStrategy.name());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2914,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected JoinTaskIterator<IT1,IT2,OT> getReusingOuterJoinIterator(DriverStrategy driverStrategy,MutableObjectIterator<IT1> in1,MutableObjectIterator<IT2> in2,TypeSerializer<IT1> serializer1,TypeComparator<IT1> comparator1,TypeSerializer<IT2> serializer2,TypeComparator<IT2> comparator2,TypePairComparatorFactory<IT1,IT2> pairComparatorFactory,MemoryManager memoryManager,IOManager ioManager,double driverMemFraction) throws Exception {\nswitch (driverStrategy) {\ncase LEFT_OUTER_MERGE:    int numPages=memoryManager.computeNumberOfPages(driverMemFraction);\n  return new ReusingMergeOuterJoinIterator<>(OuterJoinType.LEFT,in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,numPages,super.taskContext.getContainingTask());\ncase LEFT_HYBRIDHASH_BUILD_FIRST:return new ReusingBuildFirstHashJoinIterator<>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator21(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getContainingTask(),driverMemFraction,false,true,false);\ncase LEFT_HYBRIDHASH_BUILD_SECOND:return new ReusingBuildSecondHashJoinIterator<>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getContainingTask(),driverMemFraction,true,false,false);\ndefault:throw new Exception(\"Unsupported driver strategy for left outer join driver: \" + driverStrategy.name());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 61,
        "startColumnNumber" : 24,
        "endLineNumber" : 61,
        "endColumnNumber" : 42
      },
      "nodeContext" : "OuterJoinType.LEFT",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.api.common.operators.base.OuterJoinOperatorBase.OuterJoinType"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 61,
    "startColumnNumber" : 24,
    "endLineNumber" : 61,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}