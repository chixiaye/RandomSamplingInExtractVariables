{
  "id" : 276,
  "expression" : "Ids.OPEN_ACL_UNSAFE",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/SledgeHammer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Ids.OPEN_ACL_UNSAFE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 51,
      "startColumnNumber" : 20,
      "endLineNumber" : 51,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 50,
        "startColumnNumber" : 26,
        "endLineNumber" : 51,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 50,
        "startColumnNumber" : 19,
        "endLineNumber" : 51,
        "endColumnNumber" : 74
      },
      "nodeContext" : "path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 51,
        "endColumnNumber" : 75
      },
      "nodeContext" : "String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1574,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Stat stat=new Stat();\n  String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  byte tag[]=(path + \" was here!\").getBytes();\nsynchronized (this) {\n    String startPath=\"/hammers/start\";\n    System.out.println(\"Waiting for \" + startPath);\n    while (zk.exists(startPath,true) == null) {\n      wait();\n    }\n    System.out.println(\"Running\");\n  }\n  for (int i=0; i < count; i++) {\n    try {\n      System.out.print(i + \"\\r\");\n      List<String> childs=zk.getChildren(\"/hammers\",false);\n      Collections.shuffle(childs);\n      for (      String s : childs) {\n        if (s.startsWith(\"hammer-\")) {\n          s=\"/hammers/\" + s;\n          zk.setData(s,tag,-1);\n          for (int j=0; j < readsPerWrite; j++) {\n            zk.getData(s,false,stat);\n          }\n          break;\n        }\n      }\n    }\n catch (    KeeperException.ConnectionLossException e) {\n    }\ncatch (    KeeperException e) {\n      e.printStackTrace();\n    }\n  }\n  System.out.println();\n  zk.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Stat stat=new Stat();\n  String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  byte tag[]=(path + \" was here!\").getBytes();\nsynchronized (this) {\n    String startPath=\"/hammers/start\";\n    System.out.println(\"Waiting for \" + startPath);\n    while (zk.exists(startPath,true) == null) {\n      wait();\n    }\n    System.out.println(\"Running\");\n  }\n  for (int i=0; i < count; i++) {\n    try {\n      System.out.print(i + \"\\r\");\n      List<String> childs=zk.getChildren(\"/hammers\",false);\n      Collections.shuffle(childs);\n      for (      String s : childs) {\n        if (s.startsWith(\"hammer-\")) {\n          s=\"/hammers/\" + s;\n          zk.setData(s,tag,-1);\n          for (int j=0; j < readsPerWrite; j++) {\n            zk.getData(s,false,stat);\n          }\n          break;\n        }\n      }\n    }\n catch (    KeeperException.ConnectionLossException e) {\n    }\ncatch (    KeeperException e) {\n      e.printStackTrace();\n    }\n  }\n  System.out.println();\n  zk.close();\n}\n catch (Exception e) {\n  e.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 204,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 47,
        "startColumnNumber" : 22,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    Stat stat=new Stat();\n    String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    byte tag[]=(path + \" was here!\").getBytes();\nsynchronized (this) {\n      String startPath=\"/hammers/start\";\n      System.out.println(\"Waiting for \" + startPath);\n      while (zk.exists(startPath,true) == null) {\n        wait();\n      }\n      System.out.println(\"Running\");\n    }\n    for (int i=0; i < count; i++) {\n      try {\n        System.out.print(i + \"\\r\");\n        List<String> childs=zk.getChildren(\"/hammers\",false);\n        Collections.shuffle(childs);\n        for (        String s : childs) {\n          if (s.startsWith(\"hammer-\")) {\n            s=\"/hammers/\" + s;\n            zk.setData(s,tag,-1);\n            for (int j=0; j < readsPerWrite; j++) {\n              zk.getData(s,false,stat);\n            }\n            break;\n          }\n        }\n      }\n catch (      KeeperException.ConnectionLossException e) {\n      }\ncatch (      KeeperException e) {\n        e.printStackTrace();\n      }\n    }\n    System.out.println();\n    zk.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void run(){\n  try {\n    Stat stat=new Stat();\n    String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    byte tag[]=(path + \" was here!\").getBytes();\nsynchronized (this) {\n      String startPath=\"/hammers/start\";\n      System.out.println(\"Waiting for \" + startPath);\n      while (zk.exists(startPath,true) == null) {\n        wait();\n      }\n      System.out.println(\"Running\");\n    }\n    for (int i=0; i < count; i++) {\n      try {\n        System.out.print(i + \"\\r\");\n        List<String> childs=zk.getChildren(\"/hammers\",false);\n        Collections.shuffle(childs);\n        for (        String s : childs) {\n          if (s.startsWith(\"hammer-\")) {\n            s=\"/hammers/\" + s;\n            zk.setData(s,tag,-1);\n            for (int j=0; j < readsPerWrite; j++) {\n              zk.getData(s,false,stat);\n            }\n            break;\n          }\n        }\n      }\n catch (      KeeperException.ConnectionLossException e) {\n      }\ncatch (      KeeperException e) {\n        e.printStackTrace();\n      }\n    }\n    System.out.println();\n    zk.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 50,
        "startColumnNumber" : 26,
        "endLineNumber" : 51,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.util.ArrayList<org.apache.zookeeper.ACL>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 51,
    "startColumnNumber" : 20,
    "endLineNumber" : 51,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}