{
  "id" : 118,
  "expression" : "nestedArraySchema",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator/src/test/java/org/openapitools/codegen/go/AbstractGoCodegenTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nestedArraySchema",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 70,
      "startColumnNumber" : 95,
      "endLineNumber" : 70,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 70,
        "startColumnNumber" : 52,
        "endLineNumber" : 70,
        "endColumnNumber" : 113
      },
      "nodeContext" : "new Components().addSchemas(\"NestedArray\",nestedArraySchema)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 70,
        "startColumnNumber" : 27,
        "endLineNumber" : 70,
        "endColumnNumber" : 114
      },
      "nodeContext" : "new OpenAPI().components(new Components().addSchemas(\"NestedArray\",nestedArraySchema))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 115
      },
      "nodeContext" : "codegen.setOpenAPI(new OpenAPI().components(new Components().addSchemas(\"NestedArray\",nestedArraySchema)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 116
      },
      "nodeContext" : "codegen.setOpenAPI(new OpenAPI().components(new Components().addSchemas(\"NestedArray\",nestedArraySchema)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1411,
        "startLineNumber" : 65,
        "startColumnNumber" : 41,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractGoCodegen codegen=new P_AbstractGoCodegen();\n  Schema<?> nestedArraySchema=new ArraySchema().items(new IntegerSchema().format(\"int32\"));\n  codegen.setOpenAPI(new OpenAPI().components(new Components().addSchemas(\"NestedArray\",nestedArraySchema)));\n  Schema<?> schema=new ArraySchema().items(new Schema().$ref(\"#/components/schemas/NestedArray\"));\n  ModelUtils.setGenerateAliasAsModel(false);\n  String defaultValue=codegen.getTypeDeclaration(schema);\n  Assert.assertEquals(defaultValue,\"[][]int32\");\n  ModelUtils.setGenerateAliasAsModel(true);\n  defaultValue=codegen.getTypeDeclaration(schema);\n  Assert.assertEquals(defaultValue,\"[]NestedArray\");\n  schema=new MapSchema().additionalProperties(new Schema().$ref(\"#/components/schemas/NestedArray\"));\n  ModelUtils.setGenerateAliasAsModel(false);\n  defaultValue=codegen.getTypeDeclaration(schema);\n  Assert.assertEquals(defaultValue,\"map[string][]int32\");\n  ModelUtils.setGenerateAliasAsModel(true);\n  defaultValue=codegen.getTypeDeclaration(schema);\n  Assert.assertEquals(defaultValue,\"map[string]NestedArray\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1458,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void getTypeDeclarationTest(){\n  final AbstractGoCodegen codegen=new P_AbstractGoCodegen();\n  Schema<?> nestedArraySchema=new ArraySchema().items(new IntegerSchema().format(\"int32\"));\n  codegen.setOpenAPI(new OpenAPI().components(new Components().addSchemas(\"NestedArray\",nestedArraySchema)));\n  Schema<?> schema=new ArraySchema().items(new Schema().$ref(\"#/components/schemas/NestedArray\"));\n  ModelUtils.setGenerateAliasAsModel(false);\n  String defaultValue=codegen.getTypeDeclaration(schema);\n  Assert.assertEquals(defaultValue,\"[][]int32\");\n  ModelUtils.setGenerateAliasAsModel(true);\n  defaultValue=codegen.getTypeDeclaration(schema);\n  Assert.assertEquals(defaultValue,\"[]NestedArray\");\n  schema=new MapSchema().additionalProperties(new Schema().$ref(\"#/components/schemas/NestedArray\"));\n  ModelUtils.setGenerateAliasAsModel(false);\n  defaultValue=codegen.getTypeDeclaration(schema);\n  Assert.assertEquals(defaultValue,\"map[string][]int32\");\n  ModelUtils.setGenerateAliasAsModel(true);\n  defaultValue=codegen.getTypeDeclaration(schema);\n  Assert.assertEquals(defaultValue,\"map[string]NestedArray\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 156,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 116
      },
      "nodeContext" : "codegen.setOpenAPI(new OpenAPI().components(new Components().addSchemas(\"NestedArray\",nestedArraySchema)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.go.Schema<>"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 70,
    "startColumnNumber" : 95,
    "endLineNumber" : 70,
    "endColumnNumber" : 112
  } ],
  "layoutRelationDataList" : [ ]
}