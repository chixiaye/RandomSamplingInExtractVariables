{
  "id" : 483,
  "expression" : "method",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 70,
      "startColumnNumber" : 8,
      "endLineNumber" : 70,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 22
      },
      "nodeContext" : "method == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (method == null) {\n  throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n  if (method == null) {\n    throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n  }\n  return ReflectionUtils.invokeMethod(method,null,message);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 75,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n  return accessor;\n}\n else {\n  Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n  if (method == null) {\n    throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n  }\n  return ReflectionUtils.invokeMethod(method,null,message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 63,
        "startColumnNumber" : 68,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n    return accessor;\n  }\n else {\n    Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n    if (method == null) {\n      throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n    }\n    return ReflectionUtils.invokeMethod(method,null,message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 63,
        "startColumnNumber" : 7,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n    return accessor;\n  }\n else {\n    Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n    if (method == null) {\n      throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n    }\n    return ReflectionUtils.invokeMethod(method,null,message);\n  }\n}\n else {\n  throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 83,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1061,
        "startLineNumber" : 59,
        "startColumnNumber" : 7,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (MessageHeaderAccessor.class == paramType) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  return (accessor != null ? accessor : new MessageHeaderAccessor(message));\n}\n else if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n    return accessor;\n  }\n else {\n    Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n    if (method == null) {\n      throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n    }\n    return ReflectionUtils.invokeMethod(method,null,message);\n  }\n}\n else {\n  throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Map.class.isAssignableFrom(paramType)) {\n  return message.getHeaders();\n}\n else if (MessageHeaderAccessor.class == paramType) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  return (accessor != null ? accessor : new MessageHeaderAccessor(message));\n}\n else if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n    return accessor;\n  }\n else {\n    Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n    if (method == null) {\n      throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n    }\n    return ReflectionUtils.invokeMethod(method,null,message);\n  }\n}\n else {\n  throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1209,
        "startLineNumber" : 54,
        "startColumnNumber" : 95,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<?> paramType=parameter.getParameterType();\n  if (Map.class.isAssignableFrom(paramType)) {\n    return message.getHeaders();\n  }\n else   if (MessageHeaderAccessor.class == paramType) {\n    MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n    return (accessor != null ? accessor : new MessageHeaderAccessor(message));\n  }\n else   if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n    MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n    if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n      return accessor;\n    }\n else {\n      Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n      if (method == null) {\n        throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n      }\n      return ReflectionUtils.invokeMethod(method,null,message);\n    }\n  }\n else {\n    throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 52,
        "startColumnNumber" : 1,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @Nullable public Object resolveArgument(MethodParameter parameter,Message<?> message) throws Exception {\n  Class<?> paramType=parameter.getParameterType();\n  if (Map.class.isAssignableFrom(paramType)) {\n    return message.getHeaders();\n  }\n else   if (MessageHeaderAccessor.class == paramType) {\n    MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n    return (accessor != null ? accessor : new MessageHeaderAccessor(message));\n  }\n else   if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n    MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n    if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n      return accessor;\n    }\n else {\n      Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n      if (method == null) {\n        throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n      }\n      return ReflectionUtils.invokeMethod(method,null,message);\n    }\n  }\n else {\n    throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 22
      },
      "nodeContext" : "method == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.Method"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 74,
      "startColumnNumber" : 40,
      "endLineNumber" : 74,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 74,
        "startColumnNumber" : 11,
        "endLineNumber" : 74,
        "endColumnNumber" : 62
      },
      "nodeContext" : "ReflectionUtils.invokeMethod(method,null,message)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 63
      },
      "nodeContext" : "return ReflectionUtils.invokeMethod(method,null,message);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n  if (method == null) {\n    throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n  }\n  return ReflectionUtils.invokeMethod(method,null,message);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 75,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n  return accessor;\n}\n else {\n  Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n  if (method == null) {\n    throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n  }\n  return ReflectionUtils.invokeMethod(method,null,message);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 63,
        "startColumnNumber" : 68,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n    return accessor;\n  }\n else {\n    Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n    if (method == null) {\n      throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n    }\n    return ReflectionUtils.invokeMethod(method,null,message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 63,
        "startColumnNumber" : 7,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n    return accessor;\n  }\n else {\n    Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n    if (method == null) {\n      throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n    }\n    return ReflectionUtils.invokeMethod(method,null,message);\n  }\n}\n else {\n  throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 83,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1061,
        "startLineNumber" : 59,
        "startColumnNumber" : 7,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (MessageHeaderAccessor.class == paramType) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  return (accessor != null ? accessor : new MessageHeaderAccessor(message));\n}\n else if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n    return accessor;\n  }\n else {\n    Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n    if (method == null) {\n      throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n    }\n    return ReflectionUtils.invokeMethod(method,null,message);\n  }\n}\n else {\n  throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Map.class.isAssignableFrom(paramType)) {\n  return message.getHeaders();\n}\n else if (MessageHeaderAccessor.class == paramType) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  return (accessor != null ? accessor : new MessageHeaderAccessor(message));\n}\n else if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n  MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n  if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n    return accessor;\n  }\n else {\n    Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n    if (method == null) {\n      throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n    }\n    return ReflectionUtils.invokeMethod(method,null,message);\n  }\n}\n else {\n  throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1209,
        "startLineNumber" : 54,
        "startColumnNumber" : 95,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<?> paramType=parameter.getParameterType();\n  if (Map.class.isAssignableFrom(paramType)) {\n    return message.getHeaders();\n  }\n else   if (MessageHeaderAccessor.class == paramType) {\n    MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n    return (accessor != null ? accessor : new MessageHeaderAccessor(message));\n  }\n else   if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n    MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n    if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n      return accessor;\n    }\n else {\n      Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n      if (method == null) {\n        throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n      }\n      return ReflectionUtils.invokeMethod(method,null,message);\n    }\n  }\n else {\n    throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 52,
        "startColumnNumber" : 1,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @Nullable public Object resolveArgument(MethodParameter parameter,Message<?> message) throws Exception {\n  Class<?> paramType=parameter.getParameterType();\n  if (Map.class.isAssignableFrom(paramType)) {\n    return message.getHeaders();\n  }\n else   if (MessageHeaderAccessor.class == paramType) {\n    MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n    return (accessor != null ? accessor : new MessageHeaderAccessor(message));\n  }\n else   if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) {\n    MessageHeaderAccessor accessor=MessageHeaderAccessor.getAccessor(message,MessageHeaderAccessor.class);\n    if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) {\n      return accessor;\n    }\n else {\n      Method method=ReflectionUtils.findMethod(paramType,\"wrap\",Message.class);\n      if (method == null) {\n        throw new IllegalStateException(\"Cannot create accessor of type \" + paramType + \" for message \"+ message);\n      }\n      return ReflectionUtils.invokeMethod(method,null,message);\n    }\n  }\n else {\n    throw new IllegalStateException(\"Unexpected method parameter type \" + paramType + \"in method \"+ parameter.getMethod()+ \". \"+ \"@Headers method arguments must be assignable to java.util.Map.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 63
      },
      "nodeContext" : "return ReflectionUtils.invokeMethod(method,null,message);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.Method"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 70,
    "startColumnNumber" : 8,
    "endLineNumber" : 70,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 74,
    "startColumnNumber" : 40,
    "endLineNumber" : 74,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}