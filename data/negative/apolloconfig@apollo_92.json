{
  "id" : 92,
  "expression" : "keys.size()",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/txtresolver/PropertyResolver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "keys.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 91,
      "startColumnNumber" : 22,
      "endLineNumber" : 91,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 91,
        "startColumnNumber" : 11,
        "endLineNumber" : 91,
        "endColumnNumber" : 33
      },
      "nodeContext" : "keyCount > keys.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 34
      },
      "nodeContext" : "return keyCount > keys.size();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 74,
        "startColumnNumber" : 51,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Set<String> keys=new HashSet<>();\n  int lineCounter=1;\n  int keyCount=0;\n  for (  String item : newItems) {\n    if (!isCommentItem(item) && !isBlankItem(item)) {\n      keyCount++;\n      String[] kv=parseKeyValueFromItem(item);\n      if (kv != null) {\n        keys.add(kv[0]);\n      }\n else {\n        throw new BadRequestException(\"line:\" + lineCounter + \" key value must separate by '='\");\n      }\n    }\n    lineCounter++;\n  }\n  return keyCount > keys.size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 551,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean isHasRepeatKey(String[] newItems){\n  Set<String> keys=new HashSet<>();\n  int lineCounter=1;\n  int keyCount=0;\n  for (  String item : newItems) {\n    if (!isCommentItem(item) && !isBlankItem(item)) {\n      keyCount++;\n      String[] kv=parseKeyValueFromItem(item);\n      if (kv != null) {\n        keys.add(kv[0]);\n      }\n else {\n        throw new BadRequestException(\"line:\" + lineCounter + \" key value must separate by '='\");\n      }\n    }\n    lineCounter++;\n  }\n  return keyCount > keys.size();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 94,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 34
      },
      "nodeContext" : "return keyCount > keys.size();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 91,
    "startColumnNumber" : 22,
    "endLineNumber" : 91,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}