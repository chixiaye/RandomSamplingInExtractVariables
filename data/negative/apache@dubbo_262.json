{
  "id" : 262,
  "expression" : "selectorExtensionLoader.getSupportedExtensions()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/ConsumerContextFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "selectorExtensionLoader.getSupportedExtensions()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 65,
      "startColumnNumber" : 41,
      "endLineNumber" : 65,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 65,
        "startColumnNumber" : 20,
        "endLineNumber" : 65,
        "endColumnNumber" : 89
      },
      "nodeContext" : "supportedSelectors=selectorExtensionLoader.getSupportedExtensions()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Set<String> supportedSelectors=selectorExtensionLoader.getSupportedExtensions();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2982,
        "startLineNumber" : 53,
        "startColumnNumber" : 88,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RpcContext.getServiceContext().setInvocation(invocation).setLocalAddress(NetUtils.getLocalHost(),0);\n  RpcContext context=RpcContext.getClientAttachment();\n  context.setAttachment(REMOTE_APPLICATION_KEY,invoker.getUrl().getApplication());\n  if (invocation instanceof RpcInvocation) {\n    ((RpcInvocation)invocation).setInvoker(invoker);\n  }\n  ExtensionLoader<PenetrateAttachmentSelector> selectorExtensionLoader=ExtensionLoader.getExtensionLoader(PenetrateAttachmentSelector.class);\n  Set<String> supportedSelectors=selectorExtensionLoader.getSupportedExtensions();\n  if (CollectionUtils.isNotEmpty(supportedSelectors)) {\n    for (    String supportedSelector : supportedSelectors) {\n      Map<String,Object> selected=selectorExtensionLoader.getExtension(supportedSelector).select();\n      if (CollectionUtils.isNotEmptyMap(selected)) {\n        ((RpcInvocation)invocation).addObjectAttachmentsIfAbsent(selected);\n      }\n    }\n  }\n else {\n    ((RpcInvocation)invocation).addObjectAttachmentsIfAbsent(RpcContext.getServerAttachment().getObjectAttachments());\n  }\n  Map<String,Object> contextAttachments=RpcContext.getClientAttachment().getObjectAttachments();\n  if (CollectionUtils.isNotEmptyMap(contextAttachments)) {\n    ((RpcInvocation)invocation).addObjectAttachments(contextAttachments);\n  }\n  try {\n    Object countDown=context.getObjectAttachment(TIME_COUNTDOWN_KEY);\n    if (countDown != null) {\n      TimeoutCountDown timeoutCountDown=(TimeoutCountDown)countDown;\n      if (timeoutCountDown.isExpired()) {\n        return AsyncRpcResult.newDefaultAsyncResult(new RpcException(RpcException.TIMEOUT_TERMINATE,\"No time left for making the following call: \" + invocation.getServiceName() + \".\"+ invocation.getMethodName()+ \", terminate directly.\"),invocation);\n      }\n    }\n    RpcContext.removeServerContext();\n    return invoker.invoke(invocation);\n  }\n  finally {\n    RpcContext.removeServiceContext();\n    RpcContext.removeClientAttachment();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3080,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {\n  RpcContext.getServiceContext().setInvocation(invocation).setLocalAddress(NetUtils.getLocalHost(),0);\n  RpcContext context=RpcContext.getClientAttachment();\n  context.setAttachment(REMOTE_APPLICATION_KEY,invoker.getUrl().getApplication());\n  if (invocation instanceof RpcInvocation) {\n    ((RpcInvocation)invocation).setInvoker(invoker);\n  }\n  ExtensionLoader<PenetrateAttachmentSelector> selectorExtensionLoader=ExtensionLoader.getExtensionLoader(PenetrateAttachmentSelector.class);\n  Set<String> supportedSelectors=selectorExtensionLoader.getSupportedExtensions();\n  if (CollectionUtils.isNotEmpty(supportedSelectors)) {\n    for (    String supportedSelector : supportedSelectors) {\n      Map<String,Object> selected=selectorExtensionLoader.getExtension(supportedSelector).select();\n      if (CollectionUtils.isNotEmptyMap(selected)) {\n        ((RpcInvocation)invocation).addObjectAttachmentsIfAbsent(selected);\n      }\n    }\n  }\n else {\n    ((RpcInvocation)invocation).addObjectAttachmentsIfAbsent(RpcContext.getServerAttachment().getObjectAttachments());\n  }\n  Map<String,Object> contextAttachments=RpcContext.getClientAttachment().getObjectAttachments();\n  if (CollectionUtils.isNotEmptyMap(contextAttachments)) {\n    ((RpcInvocation)invocation).addObjectAttachments(contextAttachments);\n  }\n  try {\n    Object countDown=context.getObjectAttachment(TIME_COUNTDOWN_KEY);\n    if (countDown != null) {\n      TimeoutCountDown timeoutCountDown=(TimeoutCountDown)countDown;\n      if (timeoutCountDown.isExpired()) {\n        return AsyncRpcResult.newDefaultAsyncResult(new RpcException(RpcException.TIMEOUT_TERMINATE,\"No time left for making the following call: \" + invocation.getServiceName() + \".\"+ invocation.getMethodName()+ \", terminate directly.\"),invocation);\n      }\n    }\n    RpcContext.removeServerContext();\n    return invoker.invoke(invocation);\n  }\n  finally {\n    RpcContext.removeServiceContext();\n    RpcContext.removeClientAttachment();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Set<String> supportedSelectors=selectorExtensionLoader.getSupportedExtensions();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.Set<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 65,
    "startColumnNumber" : 41,
    "endLineNumber" : 65,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}