{
  "id" : 226,
  "expression" : "edges - nodes + exits",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/util/CyclomaticComplexity.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "edges - nodes + exits",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 76,
      "startColumnNumber" : 19,
      "endLineNumber" : 76,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 40
      },
      "nodeContext" : "complexity=edges - nodes + exits",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int complexity=edges - nodes + exits;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1291,
        "startLineNumber" : 39,
        "startColumnNumber" : 29,
        "endLineNumber" : 78,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BasicBlockModel basicBlockModel=new BasicBlockModel(function.getProgram());\n  CodeBlockIterator codeBlockIterator=basicBlockModel.getCodeBlocksContaining(function.getBody(),monitor);\n  Address entryPoint=function.getEntryPoint();\n  int nodes=0;\n  int edges=0;\n  int exits=0;\n  while (codeBlockIterator.hasNext()) {\n    if (monitor.isCancelled()) {\n      break;\n    }\n    CodeBlock codeBlock=codeBlockIterator.next();\n    ++nodes;\n    if (codeBlock.getFlowType().isTerminal()) {\n      ++exits;\n      ++edges;\n    }\n    CodeBlockReferenceIterator destinations=codeBlock.getDestinations(monitor);\n    while (destinations.hasNext()) {\n      if (monitor.isCancelled()) {\n        break;\n      }\n      CodeBlockReference reference=destinations.next();\n      FlowType flowType=reference.getFlowType();\n      if (flowType.isIndirect() || flowType.isCall()) {\n        continue;\n      }\n      ++edges;\n      if (codeBlock.getFlowType().isTerminal() && reference.getDestinationAddress().equals(entryPoint)) {\n        --edges;\n      }\n    }\n  }\n  int complexity=edges - nodes + exits;\n  return complexity < 0 ? 0 : complexity;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 30,
        "startColumnNumber" : 1,
        "endLineNumber" : 78,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Calculates the cyclomatic complexity of a function by decomposing it into a flow graph using a BasicBlockModel.\n * @param function the function\n * @param monitor a monitor\n * @return the cyclomatic complexity\n * @throws CancelledException\n */\npublic int calculateCyclomaticComplexity(Function function,TaskMonitor monitor) throws CancelledException {\n  BasicBlockModel basicBlockModel=new BasicBlockModel(function.getProgram());\n  CodeBlockIterator codeBlockIterator=basicBlockModel.getCodeBlocksContaining(function.getBody(),monitor);\n  Address entryPoint=function.getEntryPoint();\n  int nodes=0;\n  int edges=0;\n  int exits=0;\n  while (codeBlockIterator.hasNext()) {\n    if (monitor.isCancelled()) {\n      break;\n    }\n    CodeBlock codeBlock=codeBlockIterator.next();\n    ++nodes;\n    if (codeBlock.getFlowType().isTerminal()) {\n      ++exits;\n      ++edges;\n    }\n    CodeBlockReferenceIterator destinations=codeBlock.getDestinations(monitor);\n    while (destinations.hasNext()) {\n      if (monitor.isCancelled()) {\n        break;\n      }\n      CodeBlockReference reference=destinations.next();\n      FlowType flowType=reference.getFlowType();\n      if (flowType.isIndirect() || flowType.isCall()) {\n        continue;\n      }\n      ++edges;\n      if (codeBlock.getFlowType().isTerminal() && reference.getDestinationAddress().equals(entryPoint)) {\n        --edges;\n      }\n    }\n  }\n  int complexity=edges - nodes + exits;\n  return complexity < 0 ? 0 : complexity;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int complexity=edges - nodes + exits;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 76,
    "startColumnNumber" : 19,
    "endLineNumber" : 76,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}