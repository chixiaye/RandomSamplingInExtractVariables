{
  "id" : 230,
  "expression" : "LogUtil",
  "projectName" : "alibaba@nacos",
  "commitID" : "6eeeb764736f3aedcf1857f2ce9f53f923795a5b",
  "filePath" : "config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "LogUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 139,
      "startColumnNumber" : 12,
      "endLineNumber" : 139,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 31
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 57
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.warn(\"DumpService start\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 58
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5060,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n  finally {\n  TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 433,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5186,
        "startLineNumber" : 135,
        "startColumnNumber" : 118,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5391,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void dumpOperate(DumpProcessor processor,DumpAllProcessor dumpAllProcessor,DumpAllBetaProcessor dumpAllBetaProcessor,DumpAllTagProcessor dumpAllTagProcessor) throws NacosException {\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 467,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 58
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.config.server.utils.LogUtil"
  }, {
    "nodeContext" : "LogUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 175,
      "startColumnNumber" : 16,
      "endLineNumber" : 175,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 175,
        "startColumnNumber" : 16,
        "endLineNumber" : 175,
        "endColumnNumber" : 35
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 175,
        "startColumnNumber" : 16,
        "endLineNumber" : 175,
        "endColumnNumber" : 77
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 175,
        "startColumnNumber" : 16,
        "endLineNumber" : 175,
        "endColumnNumber" : 78
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1364,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 198,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  dumpConfigInfo(dumpAllProcessor);\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n  DiskUtil.clearAllBeta();\n  if (persistService.isExistTable(BETA_TABLE_NAME)) {\n    dumpAllBetaProcessor.process(new DumpAllBetaTask());\n  }\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n  DiskUtil.clearAllTag();\n  if (persistService.isExistTable(TAG_TABLE_NAME)) {\n    dumpAllTagProcessor.process(new DumpAllTagTask());\n  }\n  List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n  if (configList != null && !configList.isEmpty()) {\n    total=configList.size();\n    List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n    for (    List<ConfigInfoChanged> list : splitList) {\n      MergeAllDataWorker work=new MergeAllDataWorker(list);\n      work.start();\n    }\n    LOGGER.info(\"server start, schedule merge end.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  dumpConfigInfo(dumpAllProcessor);\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n  DiskUtil.clearAllBeta();\n  if (persistService.isExistTable(BETA_TABLE_NAME)) {\n    dumpAllBetaProcessor.process(new DumpAllBetaTask());\n  }\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n  DiskUtil.clearAllTag();\n  if (persistService.isExistTable(TAG_TABLE_NAME)) {\n    dumpAllTagProcessor.process(new DumpAllTagTask());\n  }\n  List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n  if (configList != null && !configList.isEmpty()) {\n    total=configList.size();\n    List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n    for (    List<ConfigInfoChanged> list : splitList) {\n      MergeAllDataWorker work=new MergeAllDataWorker(list);\n      work.start();\n    }\n    LOGGER.info(\"server start, schedule merge end.\");\n  }\n}\n catch (Exception e) {\n  LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n  throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 154,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5060,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n  finally {\n  TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 433,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5186,
        "startLineNumber" : 135,
        "startColumnNumber" : 118,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5391,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void dumpOperate(DumpProcessor processor,DumpAllProcessor dumpAllProcessor,DumpAllBetaProcessor dumpAllBetaProcessor,DumpAllTagProcessor dumpAllTagProcessor) throws NacosException {\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 467,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 175,
        "startColumnNumber" : 16,
        "endLineNumber" : 175,
        "endColumnNumber" : 78
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.config.server.utils.LogUtil"
  }, {
    "nodeContext" : "LogUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 181,
      "startColumnNumber" : 16,
      "endLineNumber" : 181,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 181,
        "endColumnNumber" : 35
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 181,
        "endColumnNumber" : 76
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 181,
        "endColumnNumber" : 77
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1364,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 198,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  dumpConfigInfo(dumpAllProcessor);\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n  DiskUtil.clearAllBeta();\n  if (persistService.isExistTable(BETA_TABLE_NAME)) {\n    dumpAllBetaProcessor.process(new DumpAllBetaTask());\n  }\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n  DiskUtil.clearAllTag();\n  if (persistService.isExistTable(TAG_TABLE_NAME)) {\n    dumpAllTagProcessor.process(new DumpAllTagTask());\n  }\n  List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n  if (configList != null && !configList.isEmpty()) {\n    total=configList.size();\n    List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n    for (    List<ConfigInfoChanged> list : splitList) {\n      MergeAllDataWorker work=new MergeAllDataWorker(list);\n      work.start();\n    }\n    LOGGER.info(\"server start, schedule merge end.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  dumpConfigInfo(dumpAllProcessor);\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n  DiskUtil.clearAllBeta();\n  if (persistService.isExistTable(BETA_TABLE_NAME)) {\n    dumpAllBetaProcessor.process(new DumpAllBetaTask());\n  }\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n  DiskUtil.clearAllTag();\n  if (persistService.isExistTable(TAG_TABLE_NAME)) {\n    dumpAllTagProcessor.process(new DumpAllTagTask());\n  }\n  List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n  if (configList != null && !configList.isEmpty()) {\n    total=configList.size();\n    List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n    for (    List<ConfigInfoChanged> list : splitList) {\n      MergeAllDataWorker work=new MergeAllDataWorker(list);\n      work.start();\n    }\n    LOGGER.info(\"server start, schedule merge end.\");\n  }\n}\n catch (Exception e) {\n  LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n  throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 154,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5060,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n  finally {\n  TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 433,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5186,
        "startLineNumber" : 135,
        "startColumnNumber" : 118,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5391,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void dumpOperate(DumpProcessor processor,DumpAllProcessor dumpAllProcessor,DumpAllBetaProcessor dumpAllBetaProcessor,DumpAllTagProcessor dumpAllTagProcessor) throws NacosException {\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 467,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 181,
        "endColumnNumber" : 77
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.config.server.utils.LogUtil"
  }, {
    "nodeContext" : "LogUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 199,
      "startColumnNumber" : 16,
      "endLineNumber" : 199,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 33
      },
      "nodeContext" : "LogUtil.FATAL_LOG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 201,
        "endColumnNumber" : 44
      },
      "nodeContext" : "LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 201,
        "endColumnNumber" : 45
      },
      "nodeContext" : "LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 428,
        "startLineNumber" : 198,
        "startColumnNumber" : 34,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n  throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 198,
        "startColumnNumber" : 14,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n  throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  dumpConfigInfo(dumpAllProcessor);\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n  DiskUtil.clearAllBeta();\n  if (persistService.isExistTable(BETA_TABLE_NAME)) {\n    dumpAllBetaProcessor.process(new DumpAllBetaTask());\n  }\n  LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n  DiskUtil.clearAllTag();\n  if (persistService.isExistTable(TAG_TABLE_NAME)) {\n    dumpAllTagProcessor.process(new DumpAllTagTask());\n  }\n  List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n  if (configList != null && !configList.isEmpty()) {\n    total=configList.size();\n    List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n    for (    List<ConfigInfoChanged> list : splitList) {\n      MergeAllDataWorker work=new MergeAllDataWorker(list);\n      work.start();\n    }\n    LOGGER.info(\"server start, schedule merge end.\");\n  }\n}\n catch (Exception e) {\n  LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n  throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 154,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5060,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n  finally {\n  TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 433,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5186,
        "startLineNumber" : 135,
        "startColumnNumber" : 118,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5391,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void dumpOperate(DumpProcessor processor,DumpAllProcessor dumpAllProcessor,DumpAllBetaProcessor dumpAllBetaProcessor,DumpAllTagProcessor dumpAllTagProcessor) throws NacosException {\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 467,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 33
      },
      "nodeContext" : "LogUtil.FATAL_LOG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.config.server.utils.LogUtil"
  }, {
    "nodeContext" : "LogUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 220,
      "startColumnNumber" : 16,
      "endLineNumber" : 220,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 220,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 35
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 220,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 73
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 220,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 74
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1202,
        "startLineNumber" : 206,
        "startColumnNumber" : 55,
        "endLineNumber" : 229,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Runnable heartbeat=() -> {\n    String heartBeatTime=TimeUtils.getCurrentTime().toString();\n    try {\n      DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n    }\n catch (    IOException e) {\n      LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n    }\n  }\n;\n  ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n  long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n  LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n  ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1245,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 229,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ApplicationUtils.getStandaloneMode()) {\n  Runnable heartbeat=() -> {\n    String heartBeatTime=TimeUtils.getCurrentTime().toString();\n    try {\n      DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n    }\n catch (    IOException e) {\n      LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n    }\n  }\n;\n  ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n  long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n  LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n  ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5060,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n  finally {\n  TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 433,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5186,
        "startLineNumber" : 135,
        "startColumnNumber" : 118,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5391,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void dumpOperate(DumpProcessor processor,DumpAllProcessor dumpAllProcessor,DumpAllBetaProcessor dumpAllBetaProcessor,DumpAllTagProcessor dumpAllTagProcessor) throws NacosException {\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 467,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 220,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 74
      },
      "nodeContext" : "LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.config.server.utils.LogUtil"
  }, {
    "nodeContext" : "LogUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 233,
      "startColumnNumber" : 46,
      "endLineNumber" : 233,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 233,
        "startColumnNumber" : 46,
        "endLineNumber" : 233,
        "endColumnNumber" : 62
      },
      "nodeContext" : "LogUtil.DUMP_LOG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 63
      },
      "nodeContext" : "TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 232,
        "startColumnNumber" : 18,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5060,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n  Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n  Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n  Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n  Runnable clearConfigHistory=() -> {\n    LOGGER.warn(\"clearConfigHistory start\");\n    if (canExecute()) {\n      try {\n        Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n        int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n        if (totalCount > 0) {\n          int pageSize=1000;\n          int removeTime=(totalCount + pageSize - 1) / pageSize;\n          LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n          while (removeTime > 0) {\n            persistService.removeConfigHistory(startTime,pageSize);\n            removeTime--;\n          }\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n      }\n    }\n  }\n;\n  try {\n    dumpConfigInfo(dumpAllProcessor);\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n    DiskUtil.clearAllBeta();\n    if (persistService.isExistTable(BETA_TABLE_NAME)) {\n      dumpAllBetaProcessor.process(new DumpAllBetaTask());\n    }\n    LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n    DiskUtil.clearAllTag();\n    if (persistService.isExistTable(TAG_TABLE_NAME)) {\n      dumpAllTagProcessor.process(new DumpAllTagTask());\n    }\n    List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n    if (configList != null && !configList.isEmpty()) {\n      total=configList.size();\n      List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n      for (      List<ConfigInfoChanged> list : splitList) {\n        MergeAllDataWorker work=new MergeAllDataWorker(list);\n        work.start();\n      }\n      LOGGER.info(\"server start, schedule merge end.\");\n    }\n  }\n catch (  Exception e) {\n    LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n    throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n  }\n  if (!ApplicationUtils.getStandaloneMode()) {\n    Runnable heartbeat=() -> {\n      String heartBeatTime=TimeUtils.getCurrentTime().toString();\n      try {\n        DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n      }\n catch (      IOException e) {\n        LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n      }\n    }\n;\n    ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n    long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n    LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n    ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n  }\n  ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n}\n  finally {\n  TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 433,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5186,
        "startLineNumber" : 135,
        "startColumnNumber" : 118,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5391,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void dumpOperate(DumpProcessor processor,DumpAllProcessor dumpAllProcessor,DumpAllBetaProcessor dumpAllBetaProcessor,DumpAllTagProcessor dumpAllTagProcessor) throws NacosException {\n  String dumpFileContext=\"CONFIG_DUMP_TO_FILE\";\n  TimerContext.start(dumpFileContext);\n  try {\n    LogUtil.DEFAULT_LOG.warn(\"DumpService start\");\n    Runnable dumpAll=() -> dumpAllTaskMgr.addTask(DumpAllTask.TASK_ID,new DumpAllTask());\n    Runnable dumpAllBeta=() -> dumpAllTaskMgr.addTask(DumpAllBetaTask.TASK_ID,new DumpAllBetaTask());\n    Runnable dumpAllTag=() -> dumpAllTaskMgr.addTask(DumpAllTagTask.TASK_ID,new DumpAllTagTask());\n    Runnable clearConfigHistory=() -> {\n      LOGGER.warn(\"clearConfigHistory start\");\n      if (canExecute()) {\n        try {\n          Timestamp startTime=getBeforeStamp(TimeUtils.getCurrentTime(),24 * getRetentionDays());\n          int totalCount=persistService.findConfigHistoryCountByTime(startTime);\n          if (totalCount > 0) {\n            int pageSize=1000;\n            int removeTime=(totalCount + pageSize - 1) / pageSize;\n            LOGGER.warn(\"clearConfigHistory, getBeforeStamp:{}, totalCount:{}, pageSize:{}, removeTime:{}\",startTime,totalCount,pageSize,removeTime);\n            while (removeTime > 0) {\n              persistService.removeConfigHistory(startTime,pageSize);\n              removeTime--;\n            }\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.error(\"clearConfigHistory error : {}\",e.toString());\n        }\n      }\n    }\n;\n    try {\n      dumpConfigInfo(dumpAllProcessor);\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-beta.\");\n      DiskUtil.clearAllBeta();\n      if (persistService.isExistTable(BETA_TABLE_NAME)) {\n        dumpAllBetaProcessor.process(new DumpAllBetaTask());\n      }\n      LogUtil.DEFAULT_LOG.info(\"start clear all config-info-tag.\");\n      DiskUtil.clearAllTag();\n      if (persistService.isExistTable(TAG_TABLE_NAME)) {\n        dumpAllTagProcessor.process(new DumpAllTagTask());\n      }\n      List<ConfigInfoChanged> configList=persistService.findAllAggrGroup();\n      if (configList != null && !configList.isEmpty()) {\n        total=configList.size();\n        List<List<ConfigInfoChanged>> splitList=splitList(configList,INIT_THREAD_COUNT);\n        for (        List<ConfigInfoChanged> list : splitList) {\n          MergeAllDataWorker work=new MergeAllDataWorker(list);\n          work.start();\n        }\n        LOGGER.info(\"server start, schedule merge end.\");\n      }\n    }\n catch (    Exception e) {\n      LogUtil.FATAL_LOG.error(\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.toString());\n      throw new NacosException(NacosException.SERVER_ERROR,\"Nacos Server did not start because dumpservice bean construction failure :\\n\" + e.getMessage(),e);\n    }\n    if (!ApplicationUtils.getStandaloneMode()) {\n      Runnable heartbeat=() -> {\n        String heartBeatTime=TimeUtils.getCurrentTime().toString();\n        try {\n          DiskUtil.saveHeartBeatToDisk(heartBeatTime);\n        }\n catch (        IOException e) {\n          LogUtil.FATAL_LOG.error(\"save heartbeat fail\" + e.getMessage());\n        }\n      }\n;\n      ConfigExecutor.scheduleConfigTask(heartbeat,0,10,TimeUnit.SECONDS);\n      long initialDelay=new Random().nextInt(INITIAL_DELAY_IN_MINUTE) + 10;\n      LogUtil.DEFAULT_LOG.warn(\"initialDelay:{}\",initialDelay);\n      ConfigExecutor.scheduleConfigTask(dumpAll,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllBeta,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n      ConfigExecutor.scheduleConfigTask(dumpAllTag,initialDelay,DUMP_ALL_INTERVAL_IN_MINUTE,TimeUnit.MINUTES);\n    }\n    ConfigExecutor.scheduleConfigTask(clearConfigHistory,10,10,TimeUnit.MINUTES);\n  }\n  finally {\n    TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 467,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TimerContext.end(dumpFileContext,LogUtil.DUMP_LOG);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.config.server.utils.LogUtil"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 139,
    "startColumnNumber" : 12,
    "endLineNumber" : 139,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 175,
    "startColumnNumber" : 16,
    "endLineNumber" : 175,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 181,
    "startColumnNumber" : 16,
    "endLineNumber" : 181,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 199,
    "startColumnNumber" : 16,
    "endLineNumber" : 199,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 220,
    "startColumnNumber" : 16,
    "endLineNumber" : 220,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 233,
    "startColumnNumber" : 46,
    "endLineNumber" : 233,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}