{
  "id" : 147,
  "expression" : "new AssertionError(\"file channel should not have been written to.\")",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/writeout/FileWriteOutBytesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AssertionError(\"file channel should not have been written to.\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 67,
      "startLineNumber" : 134,
      "startColumnNumber" : 22,
      "endLineNumber" : 134,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EasyMock.expect(mockFileChannel.write(EasyMock.anyObject(ByteBuffer.class))).andThrow(new AssertionError(\"file channel should not have been written to.\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 91
      },
      "nodeContext" : "EasyMock.expect(mockFileChannel.write(EasyMock.anyObject(ByteBuffer.class))).andThrow(new AssertionError(\"file channel should not have been written to.\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  EasyMock.expect(mockFileChannel.write(EasyMock.anyObject(ByteBuffer.class))).andThrow(new AssertionError(\"file channel should not have been written to.\"));\n  EasyMock.replay(mockFileChannel);\n  long size=fileWriteOutBytes.size();\n  Assert.assertEquals(0,size);\n  fileWriteOutBytes.writeInt(10);\n  size=fileWriteOutBytes.size();\n  Assert.assertEquals(4,size);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void sizeDoesNotFlush() throws IOException {\n  EasyMock.expect(mockFileChannel.write(EasyMock.anyObject(ByteBuffer.class))).andThrow(new AssertionError(\"file channel should not have been written to.\"));\n  EasyMock.replay(mockFileChannel);\n  long size=fileWriteOutBytes.size();\n  Assert.assertEquals(0,size);\n  fileWriteOutBytes.writeInt(10);\n  size=fileWriteOutBytes.size();\n  Assert.assertEquals(4,size);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EasyMock.expect(mockFileChannel.write(EasyMock.anyObject(ByteBuffer.class))).andThrow(new AssertionError(\"file channel should not have been written to.\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 9,
    "type" : "java.lang.AssertionError"
  } ],
  "positionList" : [ {
    "charLength" : 67,
    "startLineNumber" : 134,
    "startColumnNumber" : 22,
    "endLineNumber" : 134,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}