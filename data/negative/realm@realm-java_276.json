{
  "id" : 276,
  "expression" : "Utils",
  "projectName" : "realm@realm-java",
  "commitID" : "f089a8789312e0cacad5621a4de6677936635d57",
  "filePath" : "realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Utils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 515,
      "startColumnNumber" : 12,
      "endLineNumber" : 515,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 515,
        "startColumnNumber" : 12,
        "endLineNumber" : 515,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Utils.isRealmList(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1758,
        "startLineNumber" : 515,
        "startColumnNumber" : 8,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isRealmList(field)) {\n  boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n  final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n  boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n  if (hasRequiredAnnotation && containsRealmModelClasses) {\n    Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n    return false;\n  }\n  if (!hasRequiredAnnotation) {\n    if (!containsRealmModelClasses) {\n      nullableValueListFields.add(field);\n    }\n  }\n}\n else if (isRequiredField(field)) {\n  if (!checkBasicRequiredAnnotationUsage(element,field)) {\n    return false;\n  }\n}\n else {\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3394,
        "startLineNumber" : 495,
        "startColumnNumber" : 53,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 495,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean categorizeField(Element element){\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 515,
        "startColumnNumber" : 12,
        "endLineNumber" : 515,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Utils.isRealmList(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Utils"
  }, {
    "nodeContext" : "Utils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 518,
      "startColumnNumber" : 79,
      "endLineNumber" : 518,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 518,
        "startColumnNumber" : 79,
        "endLineNumber" : 518,
        "endColumnNumber" : 121
      },
      "nodeContext" : "Utils.isRealmModel(listGenericType.get(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 518,
        "startColumnNumber" : 49,
        "endLineNumber" : 518,
        "endColumnNumber" : 121
      },
      "nodeContext" : "!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 518,
        "startColumnNumber" : 48,
        "endLineNumber" : 518,
        "endColumnNumber" : 122
      },
      "nodeContext" : "(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 518,
        "startColumnNumber" : 20,
        "endLineNumber" : 518,
        "endColumnNumber" : 122
      },
      "nodeContext" : "containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 518,
        "startColumnNumber" : 12,
        "endLineNumber" : 518,
        "endColumnNumber" : 123
      },
      "nodeContext" : "boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 515,
        "startColumnNumber" : 38,
        "endLineNumber" : 533,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n  final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n  boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n  if (hasRequiredAnnotation && containsRealmModelClasses) {\n    Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n    return false;\n  }\n  if (!hasRequiredAnnotation) {\n    if (!containsRealmModelClasses) {\n      nullableValueListFields.add(field);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1758,
        "startLineNumber" : 515,
        "startColumnNumber" : 8,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isRealmList(field)) {\n  boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n  final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n  boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n  if (hasRequiredAnnotation && containsRealmModelClasses) {\n    Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n    return false;\n  }\n  if (!hasRequiredAnnotation) {\n    if (!containsRealmModelClasses) {\n      nullableValueListFields.add(field);\n    }\n  }\n}\n else if (isRequiredField(field)) {\n  if (!checkBasicRequiredAnnotationUsage(element,field)) {\n    return false;\n  }\n}\n else {\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3394,
        "startLineNumber" : 495,
        "startColumnNumber" : 53,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 495,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean categorizeField(Element element){\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 518,
        "startColumnNumber" : 12,
        "endLineNumber" : 518,
        "endColumnNumber" : 123
      },
      "nodeContext" : "boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Utils"
  }, {
    "nodeContext" : "Utils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 522,
      "startColumnNumber" : 16,
      "endLineNumber" : 522,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 522,
        "startColumnNumber" : 16,
        "endLineNumber" : 522,
        "endColumnNumber" : 107
      },
      "nodeContext" : "Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 522,
        "startColumnNumber" : 16,
        "endLineNumber" : 522,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 521,
        "startColumnNumber" : 68,
        "endLineNumber" : 524,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 521,
        "startColumnNumber" : 12,
        "endLineNumber" : 524,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasRequiredAnnotation && containsRealmModelClasses) {\n  Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 515,
        "startColumnNumber" : 38,
        "endLineNumber" : 533,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n  final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n  boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n  if (hasRequiredAnnotation && containsRealmModelClasses) {\n    Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n    return false;\n  }\n  if (!hasRequiredAnnotation) {\n    if (!containsRealmModelClasses) {\n      nullableValueListFields.add(field);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1758,
        "startLineNumber" : 515,
        "startColumnNumber" : 8,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isRealmList(field)) {\n  boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n  final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n  boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n  if (hasRequiredAnnotation && containsRealmModelClasses) {\n    Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n    return false;\n  }\n  if (!hasRequiredAnnotation) {\n    if (!containsRealmModelClasses) {\n      nullableValueListFields.add(field);\n    }\n  }\n}\n else if (isRequiredField(field)) {\n  if (!checkBasicRequiredAnnotationUsage(element,field)) {\n    return false;\n  }\n}\n else {\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3394,
        "startLineNumber" : 495,
        "startColumnNumber" : 53,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 495,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean categorizeField(Element element){\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 522,
        "startColumnNumber" : 16,
        "endLineNumber" : 522,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Utils"
  }, {
    "nodeContext" : "Utils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 542,
      "startColumnNumber" : 17,
      "endLineNumber" : 542,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 542,
        "startColumnNumber" : 17,
        "endLineNumber" : 542,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Utils.isPrimitiveType(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 542,
        "startColumnNumber" : 16,
        "endLineNumber" : 542,
        "endColumnNumber" : 45
      },
      "nodeContext" : "!Utils.isPrimitiveType(field)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 542,
        "startColumnNumber" : 16,
        "endLineNumber" : 542,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 542,
        "startColumnNumber" : 12,
        "endLineNumber" : 544,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n  nullableFields.add(field);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 537,
        "startColumnNumber" : 15,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 685,
        "startLineNumber" : 533,
        "startColumnNumber" : 15,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isRequiredField(field)) {\n  if (!checkBasicRequiredAnnotationUsage(element,field)) {\n    return false;\n  }\n}\n else {\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1758,
        "startLineNumber" : 515,
        "startColumnNumber" : 8,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isRealmList(field)) {\n  boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n  final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n  boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n  if (hasRequiredAnnotation && containsRealmModelClasses) {\n    Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n    return false;\n  }\n  if (!hasRequiredAnnotation) {\n    if (!containsRealmModelClasses) {\n      nullableValueListFields.add(field);\n    }\n  }\n}\n else if (isRequiredField(field)) {\n  if (!checkBasicRequiredAnnotationUsage(element,field)) {\n    return false;\n  }\n}\n else {\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3394,
        "startLineNumber" : 495,
        "startColumnNumber" : 53,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 495,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean categorizeField(Element element){\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 542,
        "startColumnNumber" : 16,
        "endLineNumber" : 542,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Utils"
  }, {
    "nodeContext" : "Utils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 542,
      "startColumnNumber" : 50,
      "endLineNumber" : 542,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 542,
        "startColumnNumber" : 50,
        "endLineNumber" : 542,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Utils.isRealmResults(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 542,
        "startColumnNumber" : 49,
        "endLineNumber" : 542,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!Utils.isRealmResults(field)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 542,
        "startColumnNumber" : 16,
        "endLineNumber" : 542,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 542,
        "startColumnNumber" : 12,
        "endLineNumber" : 544,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n  nullableFields.add(field);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 537,
        "startColumnNumber" : 15,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 685,
        "startLineNumber" : 533,
        "startColumnNumber" : 15,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isRequiredField(field)) {\n  if (!checkBasicRequiredAnnotationUsage(element,field)) {\n    return false;\n  }\n}\n else {\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1758,
        "startLineNumber" : 515,
        "startColumnNumber" : 8,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isRealmList(field)) {\n  boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n  final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n  boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n  if (hasRequiredAnnotation && containsRealmModelClasses) {\n    Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n    return false;\n  }\n  if (!hasRequiredAnnotation) {\n    if (!containsRealmModelClasses) {\n      nullableValueListFields.add(field);\n    }\n  }\n}\n else if (isRequiredField(field)) {\n  if (!checkBasicRequiredAnnotationUsage(element,field)) {\n    return false;\n  }\n}\n else {\n  if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n    nullableFields.add(field);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3394,
        "startLineNumber" : 495,
        "startColumnNumber" : 53,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 495,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean categorizeField(Element element){\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 542,
        "startColumnNumber" : 16,
        "endLineNumber" : 542,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Utils"
  }, {
    "nodeContext" : "Utils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 558,
      "startColumnNumber" : 12,
      "endLineNumber" : 558,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 558,
        "startColumnNumber" : 12,
        "endLineNumber" : 558,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Utils.isMutableRealmInteger(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 558,
        "startColumnNumber" : 8,
        "endLineNumber" : 560,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isMutableRealmInteger(field)) {\n  if (!categorizeMutableRealmIntegerField(field)) {\n    return false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3394,
        "startLineNumber" : 495,
        "startColumnNumber" : 53,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 495,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean categorizeField(Element element){\n  VariableElement fieldRef=(VariableElement)element;\n  if (fieldRef.getModifiers().contains(Modifier.STATIC)) {\n    return true;\n  }\n  if (fieldRef.getAnnotation(Ignore.class) != null || fieldRef.getModifiers().contains(Modifier.TRANSIENT)) {\n    return true;\n  }\n  String internalFieldName=getInternalFieldName(fieldRef,defaultFieldNameFormatter);\n  RealmFieldElement field=new RealmFieldElement(fieldRef,internalFieldName);\n  if (field.getAnnotation(Index.class) != null) {\n    if (!categorizeIndexField(element,field)) {\n      return false;\n    }\n  }\n  if (Utils.isRealmList(field)) {\n    boolean hasRequiredAnnotation=hasRequiredAnnotation(field);\n    final List<? extends TypeMirror> listGenericType=((DeclaredType)field.asType()).getTypeArguments();\n    boolean containsRealmModelClasses=(!listGenericType.isEmpty() && Utils.isRealmModel(listGenericType.get(0)));\n    if (hasRequiredAnnotation && containsRealmModelClasses) {\n      Utils.error(\"@Required not allowed on RealmList's that contain other Realm model classes.\");\n      return false;\n    }\n    if (!hasRequiredAnnotation) {\n      if (!containsRealmModelClasses) {\n        nullableValueListFields.add(field);\n      }\n    }\n  }\n else   if (isRequiredField(field)) {\n    if (!checkBasicRequiredAnnotationUsage(element,field)) {\n      return false;\n    }\n  }\n else {\n    if (!Utils.isPrimitiveType(field) && !Utils.isRealmResults(field)) {\n      nullableFields.add(field);\n    }\n  }\n  if (field.getAnnotation(PrimaryKey.class) != null) {\n    if (!categorizePrimaryKeyField(field)) {\n      return false;\n    }\n  }\n  if (field.getAnnotation(LinkingObjects.class) != null) {\n    return categorizeBacklinkField(field);\n  }\n  if (Utils.isMutableRealmInteger(field)) {\n    if (!categorizeMutableRealmIntegerField(field)) {\n      return false;\n    }\n  }\n  fields.add(field);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 558,
        "startColumnNumber" : 12,
        "endLineNumber" : 558,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Utils.isMutableRealmInteger(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Utils"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 515,
    "startColumnNumber" : 12,
    "endLineNumber" : 515,
    "endColumnNumber" : 17
  }, {
    "charLength" : 5,
    "startLineNumber" : 518,
    "startColumnNumber" : 79,
    "endLineNumber" : 518,
    "endColumnNumber" : 84
  }, {
    "charLength" : 5,
    "startLineNumber" : 522,
    "startColumnNumber" : 16,
    "endLineNumber" : 522,
    "endColumnNumber" : 21
  }, {
    "charLength" : 5,
    "startLineNumber" : 542,
    "startColumnNumber" : 17,
    "endLineNumber" : 542,
    "endColumnNumber" : 22
  }, {
    "charLength" : 5,
    "startLineNumber" : 542,
    "startColumnNumber" : 50,
    "endLineNumber" : 542,
    "endColumnNumber" : 55
  }, {
    "charLength" : 5,
    "startLineNumber" : 558,
    "startColumnNumber" : 12,
    "endLineNumber" : 558,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}