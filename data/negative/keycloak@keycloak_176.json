{
  "id" : 176,
  "expression" : "60",
  "projectName" : "keycloak@keycloak",
  "commitID" : "ebfc24d6c105971f00f86d1c96fc0dc2aed45bf9",
  "filePath" : "testsuite/model/src/test/java/org/keycloak/testsuite/model/infinispan/CacheExpirationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "60",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 85,
      "startColumnNumber" : 56,
      "endLineNumber" : 85,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 85,
        "startColumnNumber" : 52,
        "endLineNumber" : 85,
        "endColumnNumber" : 58
      },
      "nodeContext" : "2 * 60",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 2487,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 10
      },
      "nodeContext" : "inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n  log.debug(\"Joining the cluster\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    log.debug(\"Waiting for caches to join the cluster\");\n    do {\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ex);\n      }\n    }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n    String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n    log.debug(\"Cluster joined \" + site);\n    log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n    do {\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ex);\n      }\n    }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n    assertThat(cache.get(\"1-2\"),notNullValue());\n    assertThat(cache.get(\"1-2-3\"),notNullValue());\n    log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n    do {\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ex);\n      }\n    }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n    log.debug(\"Test completed\");\n  }\n);\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 218,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2488,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 11
      },
      "nodeContext" : "inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n  log.debug(\"Joining the cluster\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    log.debug(\"Waiting for caches to join the cluster\");\n    do {\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ex);\n      }\n    }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n    String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n    log.debug(\"Cluster joined \" + site);\n    log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n    do {\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ex);\n      }\n    }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n    assertThat(cache.get(\"1-2\"),notNullValue());\n    assertThat(cache.get(\"1-2-3\"),notNullValue());\n    log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n    do {\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ex);\n      }\n    }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n    log.debug(\"Test completed\");\n  }\n);\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 219,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4636,
        "startLineNumber" : 54,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n  log.debug(\"Put two events to the main cache\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).forEach((c,me) -> c.remove(me.getKey()));\n    cache.put(\"1-2\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g1\",\"p1\",\"r1\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n    cache.put(\"1-2-3\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g2\",\"p2\",\"r2\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n  }\n);\n  assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n  Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n  assertThat(instancesAfterInsertion,greaterThanOrEqualTo(2));\n  int previousInstancesOfClass=instancesAfterInsertion - 2;\n  log.debug(\"Expecting instance count to go down to \" + previousInstancesOfClass);\n  log.debug(\"Starting other nodes and see that they join, receive the data and have their data expired\");\n  inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n    log.debug(\"Joining the cluster\");\n    inComittedTransaction(session -> {\n      InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n      Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n      log.debug(\"Waiting for caches to join the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n      String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n      log.debug(\"Cluster joined \" + site);\n      log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n      assertThat(cache.get(\"1-2\"),notNullValue());\n      assertThat(cache.get(\"1-2-3\"),notNullValue());\n      log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n      log.debug(\"Test completed\");\n    }\n);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 382,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4697,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCacheExpiration() throws Exception {\n  log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n  log.debug(\"Put two events to the main cache\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).forEach((c,me) -> c.remove(me.getKey()));\n    cache.put(\"1-2\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g1\",\"p1\",\"r1\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n    cache.put(\"1-2-3\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g2\",\"p2\",\"r2\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n  }\n);\n  assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n  Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n  assertThat(instancesAfterInsertion,greaterThanOrEqualTo(2));\n  int previousInstancesOfClass=instancesAfterInsertion - 2;\n  log.debug(\"Expecting instance count to go down to \" + previousInstancesOfClass);\n  log.debug(\"Starting other nodes and see that they join, receive the data and have their data expired\");\n  inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n    log.debug(\"Joining the cluster\");\n    inComittedTransaction(session -> {\n      InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n      Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n      log.debug(\"Waiting for caches to join the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n      String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n      log.debug(\"Cluster joined \" + site);\n      log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n      assertThat(cache.get(\"1-2\"),notNullValue());\n      assertThat(cache.get(\"1-2-3\"),notNullValue());\n      log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n      log.debug(\"Test completed\");\n    }\n);\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 390,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 85,
        "startColumnNumber" : 52,
        "endLineNumber" : 85,
        "endColumnNumber" : 58
      },
      "nodeContext" : "2 * 60",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 85,
    "startColumnNumber" : 56,
    "endLineNumber" : 85,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}