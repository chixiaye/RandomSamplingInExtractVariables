{
  "id" : 473,
  "expression" : "PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/bytecode/PostCompilerApp.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 86,
      "startLineNumber" : 100,
      "startColumnNumber" : 24,
      "endLineNumber" : 100,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 10,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 100,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 110
      },
      "nodeContext" : "transformed=PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 100,
        "startColumnNumber" : 3,
        "endLineNumber" : 100,
        "endColumnNumber" : 111
      },
      "nodeContext" : "byte[] transformed=PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 91,
        "startColumnNumber" : 52,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!file.exists() || !file.isFile()) {\n    System.out.printf(\"Cannot find file '%s'\\n\",file);\n    continue;\n  }\n  filesVisited++;\n  if (args.verbose)   System.out.println(\"Processing \" + file.getAbsolutePath());\n  byte[] original=readFile(file);\n  byte[] clone=original.clone();\n  byte[] transformed=PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE);\n  if (clone != transformed && !Arrays.equals(clone,transformed)) {\n    filesTouched++;\n    if (args.verbose)     System.out.println(\"Rewriting \" + file.getAbsolutePath());\n    writeFile(file,transformed);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 667,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (File file : cmdArgsToFiles(args.classFiles)) {\n  if (!file.exists() || !file.isFile()) {\n    System.out.printf(\"Cannot find file '%s'\\n\",file);\n    continue;\n  }\n  filesVisited++;\n  if (args.verbose)   System.out.println(\"Processing \" + file.getAbsolutePath());\n  byte[] original=readFile(file);\n  byte[] clone=original.clone();\n  byte[] transformed=PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE);\n  if (clone != transformed && !Arrays.equals(clone,transformed)) {\n    filesTouched++;\n    if (args.verbose)     System.out.println(\"Rewriting \" + file.getAbsolutePath());\n    writeFile(file,transformed);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1348,
        "startLineNumber" : 75,
        "startColumnNumber" : 64,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  CmdReader<CmdArgs> reader=CmdReader.of(CmdArgs.class);\n  CmdArgs args;\n  try {\n    args=reader.make(raw.toArray(new String[0]));\n    if (args.help) {\n      System.out.println(reader.generateCommandLineHelp(\"java -jar lombok.jar post-compile\"));\n      return 0;\n    }\n  }\n catch (  InvalidCommandLineException e) {\n    System.err.println(e.getMessage());\n    System.err.println(reader.generateCommandLineHelp(\"java -jar lombok.jar post-compile\"));\n    return 1;\n  }\n  int filesVisited=0, filesTouched=0;\n  for (  File file : cmdArgsToFiles(args.classFiles)) {\n    if (!file.exists() || !file.isFile()) {\n      System.out.printf(\"Cannot find file '%s'\\n\",file);\n      continue;\n    }\n    filesVisited++;\n    if (args.verbose)     System.out.println(\"Processing \" + file.getAbsolutePath());\n    byte[] original=readFile(file);\n    byte[] clone=original.clone();\n    byte[] transformed=PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE);\n    if (clone != transformed && !Arrays.equals(clone,transformed)) {\n      filesTouched++;\n      if (args.verbose)       System.out.println(\"Rewriting \" + file.getAbsolutePath());\n      writeFile(file,transformed);\n    }\n  }\n  if (args.verbose) {\n    System.out.printf(\"Total files visited: %d total files changed: %d\\n\",filesVisited,filesTouched);\n  }\n  return filesVisited == 0 ? 1 : 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1411,
        "startLineNumber" : 75,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public int runApp(List<String> raw) throws Exception {\n  CmdReader<CmdArgs> reader=CmdReader.of(CmdArgs.class);\n  CmdArgs args;\n  try {\n    args=reader.make(raw.toArray(new String[0]));\n    if (args.help) {\n      System.out.println(reader.generateCommandLineHelp(\"java -jar lombok.jar post-compile\"));\n      return 0;\n    }\n  }\n catch (  InvalidCommandLineException e) {\n    System.err.println(e.getMessage());\n    System.err.println(reader.generateCommandLineHelp(\"java -jar lombok.jar post-compile\"));\n    return 1;\n  }\n  int filesVisited=0, filesTouched=0;\n  for (  File file : cmdArgsToFiles(args.classFiles)) {\n    if (!file.exists() || !file.isFile()) {\n      System.out.printf(\"Cannot find file '%s'\\n\",file);\n      continue;\n    }\n    filesVisited++;\n    if (args.verbose)     System.out.println(\"Processing \" + file.getAbsolutePath());\n    byte[] original=readFile(file);\n    byte[] clone=original.clone();\n    byte[] transformed=PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE);\n    if (clone != transformed && !Arrays.equals(clone,transformed)) {\n      filesTouched++;\n      if (args.verbose)       System.out.println(\"Rewriting \" + file.getAbsolutePath());\n      writeFile(file,transformed);\n    }\n  }\n  if (args.verbose) {\n    System.out.printf(\"Total files visited: %d total files changed: %d\\n\",filesVisited,filesTouched);\n  }\n  return filesVisited == 0 ? 1 : 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 100,
        "startColumnNumber" : 3,
        "endLineNumber" : 100,
        "endColumnNumber" : 111
      },
      "nodeContext" : "byte[] transformed=PostCompiler.applyTransformations(clone,file.toString(),DiagnosticsReceiver.CONSOLE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 86,
    "startLineNumber" : 100,
    "startColumnNumber" : 24,
    "endLineNumber" : 100,
    "endColumnNumber" : 110
  } ],
  "layoutRelationDataList" : [ ]
}