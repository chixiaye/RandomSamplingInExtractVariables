{
  "id" : 471,
  "expression" : "atn.getExpectedTokens(afterID,callStackFrom_expr)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/java/api/TestExpectedTokens.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "atn.getExpectedTokens(afterID,callStackFrom_expr)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 147,
      "startColumnNumber" : 23,
      "endLineNumber" : 147,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 147,
        "startColumnNumber" : 14,
        "endLineNumber" : 147,
        "endColumnNumber" : 73
      },
      "nodeContext" : "tokens=atn.getExpectedTokens(afterID,callStackFrom_expr)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 74
      },
      "nodeContext" : "IntervalSet tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 103,
        "startColumnNumber" : 76,
        "endLineNumber" : 154,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String gtext=\"grammar T;\\n\" + \"s : expr EOF ;\\n\" + \"expr : L expr R\\n\"+ \"     | expr PLUS expr\\n\"+ \"     | ID\\n\"+ \"     ;\\n\";\n  Grammar g=new Grammar(gtext);\n  String atnText=\"RuleStart_expr_2->BlockStart_13\\n\" + \"BlockStart_13->s7\\n\" + \"BlockStart_13->s12\\n\"+ \"s7-action_1:-1->s8\\n\"+ \"s12-ID->BlockEnd_14\\n\"+ \"s8-L->s9\\n\"+ \"BlockEnd_14->StarLoopEntry_20\\n\"+ \"s9-expr->RuleStart_expr_2\\n\"+ \"StarLoopEntry_20->StarBlockStart_18\\n\"+ \"StarLoopEntry_20->s21\\n\"+ \"s10-R->s11\\n\"+ \"StarBlockStart_18->s15\\n\"+ \"s21->RuleStop_expr_3\\n\"+ \"s11->BlockEnd_14\\n\"+ \"s15-2 >= _p->s16\\n\"+ \"RuleStop_expr_3->s5\\n\"+ \"RuleStop_expr_3->s10\\n\"+ \"RuleStop_expr_3->BlockEnd_19\\n\"+ \"s16-PLUS->s17\\n\"+ \"s17-expr->RuleStart_expr_2\\n\"+ \"BlockEnd_19->StarLoopBack_22\\n\"+ \"StarLoopBack_22->StarLoopEntry_20\\n\";\n  checkRuleATN(g,\"expr\",atnText);\n  ATN atn=g.getATN();\n  ParserRuleContext callStackFrom_s=new ParserRuleContext(null,4);\n  ParserRuleContext callStackFrom_expr=new ParserRuleContext(callStackFrom_s,9);\n  int afterID=14;\n  IntervalSet tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n  assertEquals(\"{R, PLUS}\",tokens.toString(g.getTokenNames()));\n  callStackFrom_expr=new ParserRuleContext(null,9);\n  tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n  assertEquals(\"{R, PLUS}\",tokens.toString(g.getTokenNames()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 103,
        "startColumnNumber" : 1,
        "endLineNumber" : 154,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testFollowIncludedInLeftRecursiveRule() throws Exception {\n  String gtext=\"grammar T;\\n\" + \"s : expr EOF ;\\n\" + \"expr : L expr R\\n\"+ \"     | expr PLUS expr\\n\"+ \"     | ID\\n\"+ \"     ;\\n\";\n  Grammar g=new Grammar(gtext);\n  String atnText=\"RuleStart_expr_2->BlockStart_13\\n\" + \"BlockStart_13->s7\\n\" + \"BlockStart_13->s12\\n\"+ \"s7-action_1:-1->s8\\n\"+ \"s12-ID->BlockEnd_14\\n\"+ \"s8-L->s9\\n\"+ \"BlockEnd_14->StarLoopEntry_20\\n\"+ \"s9-expr->RuleStart_expr_2\\n\"+ \"StarLoopEntry_20->StarBlockStart_18\\n\"+ \"StarLoopEntry_20->s21\\n\"+ \"s10-R->s11\\n\"+ \"StarBlockStart_18->s15\\n\"+ \"s21->RuleStop_expr_3\\n\"+ \"s11->BlockEnd_14\\n\"+ \"s15-2 >= _p->s16\\n\"+ \"RuleStop_expr_3->s5\\n\"+ \"RuleStop_expr_3->s10\\n\"+ \"RuleStop_expr_3->BlockEnd_19\\n\"+ \"s16-PLUS->s17\\n\"+ \"s17-expr->RuleStart_expr_2\\n\"+ \"BlockEnd_19->StarLoopBack_22\\n\"+ \"StarLoopBack_22->StarLoopEntry_20\\n\";\n  checkRuleATN(g,\"expr\",atnText);\n  ATN atn=g.getATN();\n  ParserRuleContext callStackFrom_s=new ParserRuleContext(null,4);\n  ParserRuleContext callStackFrom_expr=new ParserRuleContext(callStackFrom_s,9);\n  int afterID=14;\n  IntervalSet tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n  assertEquals(\"{R, PLUS}\",tokens.toString(g.getTokenNames()));\n  callStackFrom_expr=new ParserRuleContext(null,9);\n  tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n  assertEquals(\"{R, PLUS}\",tokens.toString(g.getTokenNames()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 74
      },
      "nodeContext" : "IntervalSet tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "org.antlr.v4.runtime.misc.IntervalSet"
  }, {
    "nodeContext" : "atn.getExpectedTokens(afterID,callStackFrom_expr)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 152,
      "startColumnNumber" : 11,
      "endLineNumber" : 152,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 152,
        "startColumnNumber" : 2,
        "endLineNumber" : 152,
        "endColumnNumber" : 61
      },
      "nodeContext" : "tokens=atn.getExpectedTokens(afterID,callStackFrom_expr)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 152,
        "startColumnNumber" : 2,
        "endLineNumber" : 152,
        "endColumnNumber" : 62
      },
      "nodeContext" : "tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 103,
        "startColumnNumber" : 76,
        "endLineNumber" : 154,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String gtext=\"grammar T;\\n\" + \"s : expr EOF ;\\n\" + \"expr : L expr R\\n\"+ \"     | expr PLUS expr\\n\"+ \"     | ID\\n\"+ \"     ;\\n\";\n  Grammar g=new Grammar(gtext);\n  String atnText=\"RuleStart_expr_2->BlockStart_13\\n\" + \"BlockStart_13->s7\\n\" + \"BlockStart_13->s12\\n\"+ \"s7-action_1:-1->s8\\n\"+ \"s12-ID->BlockEnd_14\\n\"+ \"s8-L->s9\\n\"+ \"BlockEnd_14->StarLoopEntry_20\\n\"+ \"s9-expr->RuleStart_expr_2\\n\"+ \"StarLoopEntry_20->StarBlockStart_18\\n\"+ \"StarLoopEntry_20->s21\\n\"+ \"s10-R->s11\\n\"+ \"StarBlockStart_18->s15\\n\"+ \"s21->RuleStop_expr_3\\n\"+ \"s11->BlockEnd_14\\n\"+ \"s15-2 >= _p->s16\\n\"+ \"RuleStop_expr_3->s5\\n\"+ \"RuleStop_expr_3->s10\\n\"+ \"RuleStop_expr_3->BlockEnd_19\\n\"+ \"s16-PLUS->s17\\n\"+ \"s17-expr->RuleStart_expr_2\\n\"+ \"BlockEnd_19->StarLoopBack_22\\n\"+ \"StarLoopBack_22->StarLoopEntry_20\\n\";\n  checkRuleATN(g,\"expr\",atnText);\n  ATN atn=g.getATN();\n  ParserRuleContext callStackFrom_s=new ParserRuleContext(null,4);\n  ParserRuleContext callStackFrom_expr=new ParserRuleContext(callStackFrom_s,9);\n  int afterID=14;\n  IntervalSet tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n  assertEquals(\"{R, PLUS}\",tokens.toString(g.getTokenNames()));\n  callStackFrom_expr=new ParserRuleContext(null,9);\n  tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n  assertEquals(\"{R, PLUS}\",tokens.toString(g.getTokenNames()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 103,
        "startColumnNumber" : 1,
        "endLineNumber" : 154,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testFollowIncludedInLeftRecursiveRule() throws Exception {\n  String gtext=\"grammar T;\\n\" + \"s : expr EOF ;\\n\" + \"expr : L expr R\\n\"+ \"     | expr PLUS expr\\n\"+ \"     | ID\\n\"+ \"     ;\\n\";\n  Grammar g=new Grammar(gtext);\n  String atnText=\"RuleStart_expr_2->BlockStart_13\\n\" + \"BlockStart_13->s7\\n\" + \"BlockStart_13->s12\\n\"+ \"s7-action_1:-1->s8\\n\"+ \"s12-ID->BlockEnd_14\\n\"+ \"s8-L->s9\\n\"+ \"BlockEnd_14->StarLoopEntry_20\\n\"+ \"s9-expr->RuleStart_expr_2\\n\"+ \"StarLoopEntry_20->StarBlockStart_18\\n\"+ \"StarLoopEntry_20->s21\\n\"+ \"s10-R->s11\\n\"+ \"StarBlockStart_18->s15\\n\"+ \"s21->RuleStop_expr_3\\n\"+ \"s11->BlockEnd_14\\n\"+ \"s15-2 >= _p->s16\\n\"+ \"RuleStop_expr_3->s5\\n\"+ \"RuleStop_expr_3->s10\\n\"+ \"RuleStop_expr_3->BlockEnd_19\\n\"+ \"s16-PLUS->s17\\n\"+ \"s17-expr->RuleStart_expr_2\\n\"+ \"BlockEnd_19->StarLoopBack_22\\n\"+ \"StarLoopBack_22->StarLoopEntry_20\\n\";\n  checkRuleATN(g,\"expr\",atnText);\n  ATN atn=g.getATN();\n  ParserRuleContext callStackFrom_s=new ParserRuleContext(null,4);\n  ParserRuleContext callStackFrom_expr=new ParserRuleContext(callStackFrom_s,9);\n  int afterID=14;\n  IntervalSet tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n  assertEquals(\"{R, PLUS}\",tokens.toString(g.getTokenNames()));\n  callStackFrom_expr=new ParserRuleContext(null,9);\n  tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n  assertEquals(\"{R, PLUS}\",tokens.toString(g.getTokenNames()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 152,
        "startColumnNumber" : 2,
        "endLineNumber" : 152,
        "endColumnNumber" : 62
      },
      "nodeContext" : "tokens=atn.getExpectedTokens(afterID,callStackFrom_expr);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "org.antlr.v4.runtime.misc.IntervalSet"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 147,
    "startColumnNumber" : 23,
    "endLineNumber" : 147,
    "endColumnNumber" : 73
  }, {
    "charLength" : 50,
    "startLineNumber" : 152,
    "startColumnNumber" : 11,
    "endLineNumber" : 152,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}