{
  "id" : 497,
  "expression" : "new Stack<Entry>()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Stack<Entry>()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 289,
      "startColumnNumber" : 29,
      "endLineNumber" : 289,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 289,
        "startColumnNumber" : 21,
        "endLineNumber" : 289,
        "endColumnNumber" : 47
      },
      "nodeContext" : "stack=new Stack<Entry>()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 289,
        "startColumnNumber" : 8,
        "endLineNumber" : 289,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Stack<Entry> stack=new Stack<Entry>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7513,
        "startLineNumber" : 283,
        "startColumnNumber" : 94,
        "endLineNumber" : 453,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JSONReader jr=new JSONReader(reader);\n  JSONToken token=jr.nextToken(expect);\n  byte state=START;\n  Object value=null, tmp;\n  Stack<Entry> stack=new Stack<Entry>();\n  do {\nswitch (state) {\ncase END:      throw new ParseException(\"JSON source format error.\");\ncase START:{\nswitch (token.type) {\ncase JSONToken.NULL:case JSONToken.BOOL:case JSONToken.INT:case JSONToken.FLOAT:case JSONToken.STRING:{\n          state=END;\n          value=token.value;\n          break;\n        }\ncase JSONToken.LSQUARE:{\n        state=ARRAY_ITEM;\n        value=new JSONArray();\n        break;\n      }\ncase JSONToken.LBRACE:{\n      state=OBJECT_ITEM;\n      value=new JSONObject();\n      break;\n    }\ndefault:  throw new ParseException(\"Unexcepted token expect [ VALUE or '[' or '{' ] get '\" + JSONToken.token2string(token.type) + \"'\");\n}\nbreak;\n}\ncase ARRAY_ITEM:{\nswitch (token.type) {\ncase JSONToken.COMMA:break;\ncase JSONToken.NULL:case JSONToken.BOOL:case JSONToken.INT:case JSONToken.FLOAT:case JSONToken.STRING:{\n((JSONArray)value).add(token.value);\nbreak;\n}\ncase JSONToken.RSQUARE:{\nif (stack.isEmpty()) {\nstate=END;\n}\n else {\nEntry entry=stack.pop();\nstate=entry.state;\nvalue=entry.value;\n}\nbreak;\n}\ncase JSONToken.LSQUARE:{\ntmp=new JSONArray();\n((JSONArray)value).add(tmp);\nstack.push(new Entry(state,value));\nstate=ARRAY_ITEM;\nvalue=tmp;\nbreak;\n}\ncase JSONToken.LBRACE:{\ntmp=new JSONObject();\n((JSONArray)value).add(tmp);\nstack.push(new Entry(state,value));\nstate=OBJECT_ITEM;\nvalue=tmp;\nbreak;\n}\ndefault:throw new ParseException(\"Unexcepted token expect [ VALUE or ',' or ']' or '[' or '{' ] get '\" + JSONToken.token2string(token.type) + \"'\");\n}\nbreak;\n}\ncase OBJECT_ITEM:{\nswitch (token.type) {\ncase JSONToken.COMMA:break;\ncase JSONToken.IDENT:{\nstack.push(new Entry(OBJECT_ITEM,(String)token.value));\nstate=OBJECT_VALUE;\nbreak;\n}\ncase JSONToken.NULL:{\nstack.push(new Entry(OBJECT_ITEM,\"null\"));\nstate=OBJECT_VALUE;\nbreak;\n}\ncase JSONToken.BOOL:case JSONToken.INT:case JSONToken.FLOAT:case JSONToken.STRING:{\nstack.push(new Entry(OBJECT_ITEM,token.value.toString()));\nstate=OBJECT_VALUE;\nbreak;\n}\ncase JSONToken.RBRACE:{\nif (stack.isEmpty()) {\nstate=END;\n}\n else {\nEntry entry=stack.pop();\nstate=entry.state;\nvalue=entry.value;\n}\nbreak;\n}\ndefault:throw new ParseException(\"Unexcepted token expect [ IDENT or VALUE or ',' or '}' ] get '\" + JSONToken.token2string(token.type) + \"'\");\n}\nbreak;\n}\ncase OBJECT_VALUE:{\nswitch (token.type) {\ncase JSONToken.COLON:break;\ncase JSONToken.NULL:case JSONToken.BOOL:case JSONToken.INT:case JSONToken.FLOAT:case JSONToken.STRING:{\n((JSONObject)value).put((String)stack.pop().value,token.value);\nstate=OBJECT_ITEM;\nbreak;\n}\ncase JSONToken.LSQUARE:{\ntmp=new JSONArray();\n((JSONObject)value).put((String)stack.pop().value,tmp);\nstack.push(new Entry(OBJECT_ITEM,value));\nstate=ARRAY_ITEM;\nvalue=tmp;\nbreak;\n}\ncase JSONToken.LBRACE:{\ntmp=new JSONObject();\n((JSONObject)value).put((String)stack.pop().value,tmp);\nstack.push(new Entry(OBJECT_ITEM,value));\nstate=OBJECT_ITEM;\nvalue=tmp;\nbreak;\n}\ndefault:throw new ParseException(\"Unexcepted token expect [ VALUE or '[' or '{' ] get '\" + JSONToken.token2string(token.type) + \"'\");\n}\nbreak;\n}\ndefault:throw new ParseException(\"Unexcepted state.\");\n}\n}\n while ((token=jr.nextToken()) != null);\nstack.clear();\nreturn value;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 640,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7603,
        "startLineNumber" : 283,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Object parse(Reader reader,int expect) throws IOException, ParseException {\n  JSONReader jr=new JSONReader(reader);\n  JSONToken token=jr.nextToken(expect);\n  byte state=START;\n  Object value=null, tmp;\n  Stack<Entry> stack=new Stack<Entry>();\n  do {\nswitch (state) {\ncase END:      throw new ParseException(\"JSON source format error.\");\ncase START:{\nswitch (token.type) {\ncase JSONToken.NULL:case JSONToken.BOOL:case JSONToken.INT:case JSONToken.FLOAT:case JSONToken.STRING:{\n          state=END;\n          value=token.value;\n          break;\n        }\ncase JSONToken.LSQUARE:{\n        state=ARRAY_ITEM;\n        value=new JSONArray();\n        break;\n      }\ncase JSONToken.LBRACE:{\n      state=OBJECT_ITEM;\n      value=new JSONObject();\n      break;\n    }\ndefault:  throw new ParseException(\"Unexcepted token expect [ VALUE or '[' or '{' ] get '\" + JSONToken.token2string(token.type) + \"'\");\n}\nbreak;\n}\ncase ARRAY_ITEM:{\nswitch (token.type) {\ncase JSONToken.COMMA:break;\ncase JSONToken.NULL:case JSONToken.BOOL:case JSONToken.INT:case JSONToken.FLOAT:case JSONToken.STRING:{\n((JSONArray)value).add(token.value);\nbreak;\n}\ncase JSONToken.RSQUARE:{\nif (stack.isEmpty()) {\nstate=END;\n}\n else {\nEntry entry=stack.pop();\nstate=entry.state;\nvalue=entry.value;\n}\nbreak;\n}\ncase JSONToken.LSQUARE:{\ntmp=new JSONArray();\n((JSONArray)value).add(tmp);\nstack.push(new Entry(state,value));\nstate=ARRAY_ITEM;\nvalue=tmp;\nbreak;\n}\ncase JSONToken.LBRACE:{\ntmp=new JSONObject();\n((JSONArray)value).add(tmp);\nstack.push(new Entry(state,value));\nstate=OBJECT_ITEM;\nvalue=tmp;\nbreak;\n}\ndefault:throw new ParseException(\"Unexcepted token expect [ VALUE or ',' or ']' or '[' or '{' ] get '\" + JSONToken.token2string(token.type) + \"'\");\n}\nbreak;\n}\ncase OBJECT_ITEM:{\nswitch (token.type) {\ncase JSONToken.COMMA:break;\ncase JSONToken.IDENT:{\nstack.push(new Entry(OBJECT_ITEM,(String)token.value));\nstate=OBJECT_VALUE;\nbreak;\n}\ncase JSONToken.NULL:{\nstack.push(new Entry(OBJECT_ITEM,\"null\"));\nstate=OBJECT_VALUE;\nbreak;\n}\ncase JSONToken.BOOL:case JSONToken.INT:case JSONToken.FLOAT:case JSONToken.STRING:{\nstack.push(new Entry(OBJECT_ITEM,token.value.toString()));\nstate=OBJECT_VALUE;\nbreak;\n}\ncase JSONToken.RBRACE:{\nif (stack.isEmpty()) {\nstate=END;\n}\n else {\nEntry entry=stack.pop();\nstate=entry.state;\nvalue=entry.value;\n}\nbreak;\n}\ndefault:throw new ParseException(\"Unexcepted token expect [ IDENT or VALUE or ',' or '}' ] get '\" + JSONToken.token2string(token.type) + \"'\");\n}\nbreak;\n}\ncase OBJECT_VALUE:{\nswitch (token.type) {\ncase JSONToken.COLON:break;\ncase JSONToken.NULL:case JSONToken.BOOL:case JSONToken.INT:case JSONToken.FLOAT:case JSONToken.STRING:{\n((JSONObject)value).put((String)stack.pop().value,token.value);\nstate=OBJECT_ITEM;\nbreak;\n}\ncase JSONToken.LSQUARE:{\ntmp=new JSONArray();\n((JSONObject)value).put((String)stack.pop().value,tmp);\nstack.push(new Entry(OBJECT_ITEM,value));\nstate=ARRAY_ITEM;\nvalue=tmp;\nbreak;\n}\ncase JSONToken.LBRACE:{\ntmp=new JSONObject();\n((JSONObject)value).put((String)stack.pop().value,tmp);\nstack.push(new Entry(OBJECT_ITEM,value));\nstate=OBJECT_ITEM;\nvalue=tmp;\nbreak;\n}\ndefault:throw new ParseException(\"Unexcepted token expect [ VALUE or '[' or '{' ] get '\" + JSONToken.token2string(token.type) + \"'\");\n}\nbreak;\n}\ndefault:throw new ParseException(\"Unexcepted state.\");\n}\n}\n while ((token=jr.nextToken()) != null);\nstack.clear();\nreturn value;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 657,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 289,
        "startColumnNumber" : 8,
        "endLineNumber" : 289,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Stack<Entry> stack=new Stack<Entry>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.common.utils.Stack<org.apache.dubbo.common.json.JSON.Entry>"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 289,
    "startColumnNumber" : 29,
    "endLineNumber" : 289,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}