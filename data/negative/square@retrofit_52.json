{
  "id" : 52,
  "expression" : "\"UTF-8\"",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 11,
      "startColumnNumber" : 88,
      "endLineNumber" : 11,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 11,
        "endColumnNumber" : 96
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 11,
        "endColumnNumber" : 97
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 11,
        "endColumnNumber" : 97
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 12,
      "startColumnNumber" : 89,
      "endLineNumber" : 12,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 12,
        "startColumnNumber" : 4,
        "endLineNumber" : 12,
        "endColumnNumber" : 97
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 12,
        "startColumnNumber" : 4,
        "endLineNumber" : 12,
        "endColumnNumber" : 98
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 12,
        "startColumnNumber" : 4,
        "endLineNumber" : 12,
        "endColumnNumber" : 98
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 13,
      "startColumnNumber" : 90,
      "endLineNumber" : 13,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 13,
        "endColumnNumber" : 98
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 13,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 13,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 14,
      "startColumnNumber" : 91,
      "endLineNumber" : 14,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 14,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 14,
        "endColumnNumber" : 100
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 14,
        "endColumnNumber" : 100
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 15,
      "startColumnNumber" : 95,
      "endLineNumber" : 15,
      "endColumnNumber" : 102
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 15,
        "endColumnNumber" : 103
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 15,
        "endColumnNumber" : 104
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 15,
        "endColumnNumber" : 104
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 16,
      "startColumnNumber" : 89,
      "endLineNumber" : 16,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 16,
        "endColumnNumber" : 97
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 16,
        "endColumnNumber" : 98
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 16,
        "endColumnNumber" : 98
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 17,
      "startColumnNumber" : 89,
      "endLineNumber" : 17,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 17,
        "endColumnNumber" : 97
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 17,
        "endColumnNumber" : 98
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 17,
        "endColumnNumber" : 98
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 18,
      "startColumnNumber" : 99,
      "endLineNumber" : 18,
      "endColumnNumber" : 106
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 18,
        "endColumnNumber" : 107
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 18,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 18,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 19,
      "startColumnNumber" : 93,
      "endLineNumber" : 19,
      "endColumnNumber" : 100
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 19,
        "endColumnNumber" : 101
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 19,
        "endColumnNumber" : 102
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 19,
        "endColumnNumber" : 102
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 20,
      "startColumnNumber" : 100,
      "endLineNumber" : 20,
      "endColumnNumber" : 107
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 20,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 20,
        "endColumnNumber" : 109
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 20,
        "endColumnNumber" : 109
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 21,
      "startColumnNumber" : 65,
      "endLineNumber" : 21,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 21,
        "startColumnNumber" : 15,
        "endLineNumber" : 21,
        "endColumnNumber" : 73
      },
      "nodeContext" : "parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 105
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 106
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 106
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 21,
      "startColumnNumber" : 97,
      "endLineNumber" : 21,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 105
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 106
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 10,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 22,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void charsetParsing(){\n  assertThat(parseCharset(\"text/plain;charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;  charset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; \\r\\n\\tcharset=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; CHARSET=utf-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=UTF-8\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"\\\\u\\\\tf-\\\\8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; charset=\\\"utf-8\\\"\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain;charset=utf-8;other=thing\",\"ERROR\")).isEqualToIgnoringCase(\"UTF-8\");\n  assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 106
      },
      "nodeContext" : "assertThat(parseCharset(\"text/plain; notthecharset=utf-16;\",\"UTF-8\")).isEqualToIgnoringCase(\"UTF-8\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 11,
    "startColumnNumber" : 88,
    "endLineNumber" : 11,
    "endColumnNumber" : 95
  }, {
    "charLength" : 7,
    "startLineNumber" : 12,
    "startColumnNumber" : 89,
    "endLineNumber" : 12,
    "endColumnNumber" : 96
  }, {
    "charLength" : 7,
    "startLineNumber" : 13,
    "startColumnNumber" : 90,
    "endLineNumber" : 13,
    "endColumnNumber" : 97
  }, {
    "charLength" : 7,
    "startLineNumber" : 14,
    "startColumnNumber" : 91,
    "endLineNumber" : 14,
    "endColumnNumber" : 98
  }, {
    "charLength" : 7,
    "startLineNumber" : 15,
    "startColumnNumber" : 95,
    "endLineNumber" : 15,
    "endColumnNumber" : 102
  }, {
    "charLength" : 7,
    "startLineNumber" : 16,
    "startColumnNumber" : 89,
    "endLineNumber" : 16,
    "endColumnNumber" : 96
  }, {
    "charLength" : 7,
    "startLineNumber" : 17,
    "startColumnNumber" : 89,
    "endLineNumber" : 17,
    "endColumnNumber" : 96
  }, {
    "charLength" : 7,
    "startLineNumber" : 18,
    "startColumnNumber" : 99,
    "endLineNumber" : 18,
    "endColumnNumber" : 106
  }, {
    "charLength" : 7,
    "startLineNumber" : 19,
    "startColumnNumber" : 93,
    "endLineNumber" : 19,
    "endColumnNumber" : 100
  }, {
    "charLength" : 7,
    "startLineNumber" : 20,
    "startColumnNumber" : 100,
    "endLineNumber" : 20,
    "endColumnNumber" : 107
  }, {
    "charLength" : 7,
    "startLineNumber" : 21,
    "startColumnNumber" : 65,
    "endLineNumber" : 21,
    "endColumnNumber" : 72
  }, {
    "charLength" : 7,
    "startLineNumber" : 21,
    "startColumnNumber" : 97,
    "endLineNumber" : 21,
    "endColumnNumber" : 104
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 0
  } ]
}