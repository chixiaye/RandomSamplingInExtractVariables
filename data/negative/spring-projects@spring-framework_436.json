{
  "id" : 436,
  "expression" : "rightNumeric",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-expression/src/main/java/org/springframework/expression/spel/ast/Operator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rightNumeric",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 291,
      "startColumnNumber" : 8,
      "endLineNumber" : 291,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 291,
        "startColumnNumber" : 7,
        "endLineNumber" : 291,
        "endColumnNumber" : 20
      },
      "nodeContext" : "!rightNumeric",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 291,
        "startColumnNumber" : 7,
        "endLineNumber" : 291,
        "endColumnNumber" : 78
      },
      "nodeContext" : "!rightNumeric && !ObjectUtils.nullSafeEquals(rd,rightActualDescriptor)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 291,
        "startColumnNumber" : 3,
        "endLineNumber" : 294,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!rightNumeric && !ObjectUtils.nullSafeEquals(rd,rightActualDescriptor)) {\n  rd=rightActualDescriptor;\n  rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1065,
        "startLineNumber" : 278,
        "startColumnNumber" : 83,
        "endLineNumber" : 307,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String ld=leftDeclaredDescriptor;\n  String rd=rightDeclaredDescriptor;\n  boolean leftNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(ld);\n  boolean rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n  if (!leftNumeric && !ObjectUtils.nullSafeEquals(ld,leftActualDescriptor)) {\n    ld=leftActualDescriptor;\n    leftNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(ld);\n  }\n  if (!rightNumeric && !ObjectUtils.nullSafeEquals(rd,rightActualDescriptor)) {\n    rd=rightActualDescriptor;\n    rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n  }\n  if (leftNumeric && rightNumeric) {\n    if (CodeFlow.areBoxingCompatible(ld,rd)) {\n      return new DescriptorComparison(true,true,CodeFlow.toPrimitiveTargetDesc(ld));\n    }\n else {\n      return DescriptorComparison.INCOMPATIBLE_NUMBERS;\n    }\n  }\n else {\n    return DescriptorComparison.NOT_NUMBERS;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2269,
        "startLineNumber" : 262,
        "startColumnNumber" : 2,
        "endLineNumber" : 307,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Return an object that indicates whether the input descriptors are compatible. <p>A declared descriptor is what could statically be determined (e.g. from looking at the return value of a property accessor method) whilst an actual descriptor is the type of an actual object that was returned, which may differ. <p>For generic types with unbound type variables, the declared descriptor discovered may be 'Object' but from the actual descriptor it is possible to observe that the objects are really numeric values (e.g. ints).\n * @param leftDeclaredDescriptor the statically determinable left descriptor\n * @param rightDeclaredDescriptor the statically determinable right descriptor\n * @param leftActualDescriptor the dynamic/runtime left object descriptor\n * @param rightActualDescriptor the dynamic/runtime right object descriptor\n * @return a DescriptorComparison object indicating the type of compatibility, if any\n */\npublic static DescriptorComparison checkNumericCompatibility(@Nullable String leftDeclaredDescriptor,@Nullable String rightDeclaredDescriptor,@Nullable String leftActualDescriptor,@Nullable String rightActualDescriptor){\n  String ld=leftDeclaredDescriptor;\n  String rd=rightDeclaredDescriptor;\n  boolean leftNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(ld);\n  boolean rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n  if (!leftNumeric && !ObjectUtils.nullSafeEquals(ld,leftActualDescriptor)) {\n    ld=leftActualDescriptor;\n    leftNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(ld);\n  }\n  if (!rightNumeric && !ObjectUtils.nullSafeEquals(rd,rightActualDescriptor)) {\n    rd=rightActualDescriptor;\n    rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n  }\n  if (leftNumeric && rightNumeric) {\n    if (CodeFlow.areBoxingCompatible(ld,rd)) {\n      return new DescriptorComparison(true,true,CodeFlow.toPrimitiveTargetDesc(ld));\n    }\n else {\n      return DescriptorComparison.INCOMPATIBLE_NUMBERS;\n    }\n  }\n else {\n    return DescriptorComparison.NOT_NUMBERS;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 291,
        "startColumnNumber" : 7,
        "endLineNumber" : 291,
        "endColumnNumber" : 78
      },
      "nodeContext" : "!rightNumeric && !ObjectUtils.nullSafeEquals(rd,rightActualDescriptor)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "rightNumeric",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 296,
      "startColumnNumber" : 22,
      "endLineNumber" : 296,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 296,
        "startColumnNumber" : 7,
        "endLineNumber" : 296,
        "endColumnNumber" : 34
      },
      "nodeContext" : "leftNumeric && rightNumeric",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 296,
        "startColumnNumber" : 3,
        "endLineNumber" : 306,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (leftNumeric && rightNumeric) {\n  if (CodeFlow.areBoxingCompatible(ld,rd)) {\n    return new DescriptorComparison(true,true,CodeFlow.toPrimitiveTargetDesc(ld));\n  }\n else {\n    return DescriptorComparison.INCOMPATIBLE_NUMBERS;\n  }\n}\n else {\n  return DescriptorComparison.NOT_NUMBERS;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1065,
        "startLineNumber" : 278,
        "startColumnNumber" : 83,
        "endLineNumber" : 307,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String ld=leftDeclaredDescriptor;\n  String rd=rightDeclaredDescriptor;\n  boolean leftNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(ld);\n  boolean rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n  if (!leftNumeric && !ObjectUtils.nullSafeEquals(ld,leftActualDescriptor)) {\n    ld=leftActualDescriptor;\n    leftNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(ld);\n  }\n  if (!rightNumeric && !ObjectUtils.nullSafeEquals(rd,rightActualDescriptor)) {\n    rd=rightActualDescriptor;\n    rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n  }\n  if (leftNumeric && rightNumeric) {\n    if (CodeFlow.areBoxingCompatible(ld,rd)) {\n      return new DescriptorComparison(true,true,CodeFlow.toPrimitiveTargetDesc(ld));\n    }\n else {\n      return DescriptorComparison.INCOMPATIBLE_NUMBERS;\n    }\n  }\n else {\n    return DescriptorComparison.NOT_NUMBERS;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2269,
        "startLineNumber" : 262,
        "startColumnNumber" : 2,
        "endLineNumber" : 307,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Return an object that indicates whether the input descriptors are compatible. <p>A declared descriptor is what could statically be determined (e.g. from looking at the return value of a property accessor method) whilst an actual descriptor is the type of an actual object that was returned, which may differ. <p>For generic types with unbound type variables, the declared descriptor discovered may be 'Object' but from the actual descriptor it is possible to observe that the objects are really numeric values (e.g. ints).\n * @param leftDeclaredDescriptor the statically determinable left descriptor\n * @param rightDeclaredDescriptor the statically determinable right descriptor\n * @param leftActualDescriptor the dynamic/runtime left object descriptor\n * @param rightActualDescriptor the dynamic/runtime right object descriptor\n * @return a DescriptorComparison object indicating the type of compatibility, if any\n */\npublic static DescriptorComparison checkNumericCompatibility(@Nullable String leftDeclaredDescriptor,@Nullable String rightDeclaredDescriptor,@Nullable String leftActualDescriptor,@Nullable String rightActualDescriptor){\n  String ld=leftDeclaredDescriptor;\n  String rd=rightDeclaredDescriptor;\n  boolean leftNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(ld);\n  boolean rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n  if (!leftNumeric && !ObjectUtils.nullSafeEquals(ld,leftActualDescriptor)) {\n    ld=leftActualDescriptor;\n    leftNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(ld);\n  }\n  if (!rightNumeric && !ObjectUtils.nullSafeEquals(rd,rightActualDescriptor)) {\n    rd=rightActualDescriptor;\n    rightNumeric=CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rd);\n  }\n  if (leftNumeric && rightNumeric) {\n    if (CodeFlow.areBoxingCompatible(ld,rd)) {\n      return new DescriptorComparison(true,true,CodeFlow.toPrimitiveTargetDesc(ld));\n    }\n else {\n      return DescriptorComparison.INCOMPATIBLE_NUMBERS;\n    }\n  }\n else {\n    return DescriptorComparison.NOT_NUMBERS;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 296,
        "startColumnNumber" : 7,
        "endLineNumber" : 296,
        "endColumnNumber" : 34
      },
      "nodeContext" : "leftNumeric && rightNumeric",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 291,
    "startColumnNumber" : 8,
    "endLineNumber" : 291,
    "endColumnNumber" : 20
  }, {
    "charLength" : 12,
    "startLineNumber" : 296,
    "startColumnNumber" : 22,
    "endLineNumber" : 296,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}