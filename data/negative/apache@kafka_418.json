{
  "id" : 418,
  "expression" : "topicNames()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/TableSourceNode.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "topicNames()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 87,
      "startColumnNumber" : 12,
      "endLineNumber" : 87,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 36
      },
      "nodeContext" : "topicNames().isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (topicNames().isPresent()) {\n  final Iterator<String> topicNames=topicNames().get().iterator();\n  topicName=topicNames.next();\n  if (topicNames.hasNext()) {\n    throw new IllegalStateException(\"A table source node must have a single topic as input\");\n  }\n}\n else {\n  throw new IllegalStateException(\"A table source node must have a single topic as input\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2474,
        "startLineNumber" : 85,
        "startColumnNumber" : 79,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topicName;\n  if (topicNames().isPresent()) {\n    final Iterator<String> topicNames=topicNames().get().iterator();\n    topicName=topicNames.next();\n    if (topicNames.hasNext()) {\n      throw new IllegalStateException(\"A table source node must have a single topic as input\");\n    }\n  }\n else {\n    throw new IllegalStateException(\"A table source node must have a single topic as input\");\n  }\n  final StoreBuilder<TimestampedKeyValueStore<K,V>> storeBuilder=new TimestampedKeyValueStoreMaterializer<>((MaterializedInternal<K,V,KeyValueStore<Bytes,byte[]>>)materializedInternal).materialize();\n  if (isGlobalKTable) {\n    topologyBuilder.addGlobalStore(storeBuilder,sourceName,consumedInternal().timestampExtractor(),consumedInternal().keyDeserializer(),consumedInternal().valueDeserializer(),topicName,processorParameters.processorName(),(ProcessorSupplier<K,V,Void,Void>)processorParameters.processorSupplier());\n  }\n else {\n    topologyBuilder.addSource(consumedInternal().offsetResetPolicy(),sourceName,consumedInternal().timestampExtractor(),consumedInternal().keyDeserializer(),consumedInternal().valueDeserializer(),topicName);\n    topologyBuilder.addProcessor(processorParameters.processorName(),processorParameters.processorSupplier(),sourceName);\n    final KTableSource<K,V> ktableSource=processorParameters.kTableSourceSupplier();\n    if (ktableSource.materialized()) {\n      topologyBuilder.addStateStore(storeBuilder,nodeName());\n      if (shouldReuseSourceTopicForChangelog) {\n        storeBuilder.withLoggingDisabled();\n        topologyBuilder.connectSourceStoreAndTopic(storeBuilder.name(),topicName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2598,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public void writeToTopology(final InternalTopologyBuilder topologyBuilder){\n  final String topicName;\n  if (topicNames().isPresent()) {\n    final Iterator<String> topicNames=topicNames().get().iterator();\n    topicName=topicNames.next();\n    if (topicNames.hasNext()) {\n      throw new IllegalStateException(\"A table source node must have a single topic as input\");\n    }\n  }\n else {\n    throw new IllegalStateException(\"A table source node must have a single topic as input\");\n  }\n  final StoreBuilder<TimestampedKeyValueStore<K,V>> storeBuilder=new TimestampedKeyValueStoreMaterializer<>((MaterializedInternal<K,V,KeyValueStore<Bytes,byte[]>>)materializedInternal).materialize();\n  if (isGlobalKTable) {\n    topologyBuilder.addGlobalStore(storeBuilder,sourceName,consumedInternal().timestampExtractor(),consumedInternal().keyDeserializer(),consumedInternal().valueDeserializer(),topicName,processorParameters.processorName(),(ProcessorSupplier<K,V,Void,Void>)processorParameters.processorSupplier());\n  }\n else {\n    topologyBuilder.addSource(consumedInternal().offsetResetPolicy(),sourceName,consumedInternal().timestampExtractor(),consumedInternal().keyDeserializer(),consumedInternal().valueDeserializer(),topicName);\n    topologyBuilder.addProcessor(processorParameters.processorName(),processorParameters.processorSupplier(),sourceName);\n    final KTableSource<K,V> ktableSource=processorParameters.kTableSourceSupplier();\n    if (ktableSource.materialized()) {\n      topologyBuilder.addStateStore(storeBuilder,nodeName());\n      if (shouldReuseSourceTopicForChangelog) {\n        storeBuilder.withLoggingDisabled();\n        topologyBuilder.connectSourceStoreAndTopic(storeBuilder.name(),topicName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 36
      },
      "nodeContext" : "topicNames().isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<java.util.Set<java.lang.String>>"
  }, {
    "nodeContext" : "topicNames()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 88,
      "startColumnNumber" : 48,
      "endLineNumber" : 88,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 88,
        "startColumnNumber" : 48,
        "endLineNumber" : 88,
        "endColumnNumber" : 66
      },
      "nodeContext" : "topicNames().get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 88,
        "startColumnNumber" : 48,
        "endLineNumber" : 88,
        "endColumnNumber" : 77
      },
      "nodeContext" : "topicNames().get().iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 88,
        "startColumnNumber" : 35,
        "endLineNumber" : 88,
        "endColumnNumber" : 77
      },
      "nodeContext" : "topicNames=topicNames().get().iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 78
      },
      "nodeContext" : "final Iterator<String> topicNames=topicNames().get().iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 87,
        "startColumnNumber" : 38,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Iterator<String> topicNames=topicNames().get().iterator();\n  topicName=topicNames.next();\n  if (topicNames.hasNext()) {\n    throw new IllegalStateException(\"A table source node must have a single topic as input\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (topicNames().isPresent()) {\n  final Iterator<String> topicNames=topicNames().get().iterator();\n  topicName=topicNames.next();\n  if (topicNames.hasNext()) {\n    throw new IllegalStateException(\"A table source node must have a single topic as input\");\n  }\n}\n else {\n  throw new IllegalStateException(\"A table source node must have a single topic as input\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2474,
        "startLineNumber" : 85,
        "startColumnNumber" : 79,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topicName;\n  if (topicNames().isPresent()) {\n    final Iterator<String> topicNames=topicNames().get().iterator();\n    topicName=topicNames.next();\n    if (topicNames.hasNext()) {\n      throw new IllegalStateException(\"A table source node must have a single topic as input\");\n    }\n  }\n else {\n    throw new IllegalStateException(\"A table source node must have a single topic as input\");\n  }\n  final StoreBuilder<TimestampedKeyValueStore<K,V>> storeBuilder=new TimestampedKeyValueStoreMaterializer<>((MaterializedInternal<K,V,KeyValueStore<Bytes,byte[]>>)materializedInternal).materialize();\n  if (isGlobalKTable) {\n    topologyBuilder.addGlobalStore(storeBuilder,sourceName,consumedInternal().timestampExtractor(),consumedInternal().keyDeserializer(),consumedInternal().valueDeserializer(),topicName,processorParameters.processorName(),(ProcessorSupplier<K,V,Void,Void>)processorParameters.processorSupplier());\n  }\n else {\n    topologyBuilder.addSource(consumedInternal().offsetResetPolicy(),sourceName,consumedInternal().timestampExtractor(),consumedInternal().keyDeserializer(),consumedInternal().valueDeserializer(),topicName);\n    topologyBuilder.addProcessor(processorParameters.processorName(),processorParameters.processorSupplier(),sourceName);\n    final KTableSource<K,V> ktableSource=processorParameters.kTableSourceSupplier();\n    if (ktableSource.materialized()) {\n      topologyBuilder.addStateStore(storeBuilder,nodeName());\n      if (shouldReuseSourceTopicForChangelog) {\n        storeBuilder.withLoggingDisabled();\n        topologyBuilder.connectSourceStoreAndTopic(storeBuilder.name(),topicName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2598,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public void writeToTopology(final InternalTopologyBuilder topologyBuilder){\n  final String topicName;\n  if (topicNames().isPresent()) {\n    final Iterator<String> topicNames=topicNames().get().iterator();\n    topicName=topicNames.next();\n    if (topicNames.hasNext()) {\n      throw new IllegalStateException(\"A table source node must have a single topic as input\");\n    }\n  }\n else {\n    throw new IllegalStateException(\"A table source node must have a single topic as input\");\n  }\n  final StoreBuilder<TimestampedKeyValueStore<K,V>> storeBuilder=new TimestampedKeyValueStoreMaterializer<>((MaterializedInternal<K,V,KeyValueStore<Bytes,byte[]>>)materializedInternal).materialize();\n  if (isGlobalKTable) {\n    topologyBuilder.addGlobalStore(storeBuilder,sourceName,consumedInternal().timestampExtractor(),consumedInternal().keyDeserializer(),consumedInternal().valueDeserializer(),topicName,processorParameters.processorName(),(ProcessorSupplier<K,V,Void,Void>)processorParameters.processorSupplier());\n  }\n else {\n    topologyBuilder.addSource(consumedInternal().offsetResetPolicy(),sourceName,consumedInternal().timestampExtractor(),consumedInternal().keyDeserializer(),consumedInternal().valueDeserializer(),topicName);\n    topologyBuilder.addProcessor(processorParameters.processorName(),processorParameters.processorSupplier(),sourceName);\n    final KTableSource<K,V> ktableSource=processorParameters.kTableSourceSupplier();\n    if (ktableSource.materialized()) {\n      topologyBuilder.addStateStore(storeBuilder,nodeName());\n      if (shouldReuseSourceTopicForChangelog) {\n        storeBuilder.withLoggingDisabled();\n        topologyBuilder.connectSourceStoreAndTopic(storeBuilder.name(),topicName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 78
      },
      "nodeContext" : "final Iterator<String> topicNames=topicNames().get().iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<java.util.Set<java.lang.String>>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 87,
    "startColumnNumber" : 12,
    "endLineNumber" : 87,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 88,
    "startColumnNumber" : 48,
    "endLineNumber" : 88,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}