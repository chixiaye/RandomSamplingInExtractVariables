{
  "id" : 127,
  "expression" : "false",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "aae9cc788bb4d307c3feb18ccfb4d428ae7d3788",
  "filePath" : "spring-boot-starter-admin-client/src/main/java/de/codecentric/boot/admin/services/SpringBootAdminRegistrator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 75,
      "startColumnNumber" : 9,
      "endLineNumber" : 75,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 15
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 52,
        "startColumnNumber" : 27,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Application app=createApplication();\n  String adminUrl=adminProps.getUrl() + '/' + adminProps.getContextPath();\n  try {\n    ResponseEntity<Application> response=template.postForEntity(adminUrl,app,Application.class);\n    if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n      LOGGER.info(\"Application registered itself as {}\",response.getBody());\n      return true;\n    }\n else     if (response.getStatusCode().equals(HttpStatus.CONFLICT)) {\n      LOGGER.warn(\"Application failed to registered itself as {} because of conflict in registry.\",app);\n    }\n else {\n      LOGGER.warn(\"Application failed to registered itself as {}. Response: {}\",app,response.toString());\n    }\n  }\n catch (  Exception ex) {\n    LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}\",app,adminUrl,ex.getMessage());\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Registers the client application at spring-boot-admin-server.\n * @return true if successful\n */\npublic boolean register(){\n  Application app=createApplication();\n  String adminUrl=adminProps.getUrl() + '/' + adminProps.getContextPath();\n  try {\n    ResponseEntity<Application> response=template.postForEntity(adminUrl,app,Application.class);\n    if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n      LOGGER.info(\"Application registered itself as {}\",response.getBody());\n      return true;\n    }\n else     if (response.getStatusCode().equals(HttpStatus.CONFLICT)) {\n      LOGGER.warn(\"Application failed to registered itself as {} because of conflict in registry.\",app);\n    }\n else {\n      LOGGER.warn(\"Application failed to registered itself as {}. Response: {}\",app,response.toString());\n    }\n  }\n catch (  Exception ex) {\n    LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}\",app,adminUrl,ex.getMessage());\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 15
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 75,
    "startColumnNumber" : 9,
    "endLineNumber" : 75,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}