{
  "id" : 58,
  "expression" : "new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(HEADERS_AND_ARGS).build()",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/test/java/retrofit/RestAdapterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(HEADERS_AND_ARGS).build()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 244,
      "startLineNumber" : 187,
      "startColumnNumber" : 22,
      "endLineNumber" : 193,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 23,
    "astHeight" : 10,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 187,
        "startColumnNumber" : 22,
        "endLineNumber" : 194,
        "endColumnNumber" : 30
      },
      "nodeContext" : "new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(HEADERS_AND_ARGS).build().create(Example.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 30
      },
      "nodeContext" : "example=new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(HEADERS_AND_ARGS).build().create(Example.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 30,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Example example=new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(HEADERS_AND_ARGS).build().create(Example.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 33,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 179,
        "startColumnNumber" : 72,
        "endLineNumber" : 210,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<String> logMessages=new ArrayList<String>();\n  RestAdapter.Log log=new RestAdapter.Log(){\n    @Override public void log(    String message){\n      logMessages.add(message);\n    }\n  }\n;\n  Example example=new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(HEADERS_AND_ARGS).build().create(Example.class);\n  when(mockClient.execute(any(Request.class))).thenReturn(new Response(\"http://example.com/\",200,\"OK\",TWO_HEADERS,new TypedString(\"Hi\")));\n  example.something();\n  assertThat(logMessages).hasSize(9);\n  assertThat(logMessages.get(0)).isEqualTo(\"---> HTTP GET http://example.com/\");\n  assertThat(logMessages.get(1)).isEqualTo(\"Foo: Bar\");\n  assertThat(logMessages.get(2)).isEqualTo(\"---> END HTTP (no body)\");\n  assertThat(logMessages.get(3)).matches(\"<--- HTTP 200 http://example.com/ \\\\([0-9]+ms\\\\)\");\n  assertThat(logMessages.get(4)).isEqualTo(\"Content-Type: application/json\");\n  assertThat(logMessages.get(5)).isEqualTo(\"Content-Length: 42\");\n  assertThat(logMessages.get(6)).isEqualTo(\"<--- END HTTP (2-byte body)\");\n  assertThat(logMessages.get(7)).isEqualTo(\"<--- BODY:\");\n  assertThat(logMessages.get(8)).isEqualTo(\"Hi\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 179,
        "startColumnNumber" : 2,
        "endLineNumber" : 210,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void logRequestResponseHeadersAndArgs() throws Exception {\n  final List<String> logMessages=new ArrayList<String>();\n  RestAdapter.Log log=new RestAdapter.Log(){\n    @Override public void log(    String message){\n      logMessages.add(message);\n    }\n  }\n;\n  Example example=new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(HEADERS_AND_ARGS).build().create(Example.class);\n  when(mockClient.execute(any(Request.class))).thenReturn(new Response(\"http://example.com/\",200,\"OK\",TWO_HEADERS,new TypedString(\"Hi\")));\n  example.something();\n  assertThat(logMessages).hasSize(9);\n  assertThat(logMessages.get(0)).isEqualTo(\"---> HTTP GET http://example.com/\");\n  assertThat(logMessages.get(1)).isEqualTo(\"Foo: Bar\");\n  assertThat(logMessages.get(2)).isEqualTo(\"---> END HTTP (no body)\");\n  assertThat(logMessages.get(3)).matches(\"<--- HTTP 200 http://example.com/ \\\\([0-9]+ms\\\\)\");\n  assertThat(logMessages.get(4)).isEqualTo(\"Content-Type: application/json\");\n  assertThat(logMessages.get(5)).isEqualTo(\"Content-Length: 42\");\n  assertThat(logMessages.get(6)).isEqualTo(\"<--- END HTTP (2-byte body)\");\n  assertThat(logMessages.get(7)).isEqualTo(\"<--- BODY:\");\n  assertThat(logMessages.get(8)).isEqualTo(\"Hi\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 211,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 187,
        "startColumnNumber" : 22,
        "endLineNumber" : 194,
        "endColumnNumber" : 30
      },
      "nodeContext" : "new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(HEADERS_AND_ARGS).build().create(Example.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 11
    },
    "tokenLength" : 18,
    "type" : "retrofit.RestAdapter"
  } ],
  "positionList" : [ {
    "charLength" : 244,
    "startLineNumber" : 187,
    "startColumnNumber" : 22,
    "endLineNumber" : 193,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ ]
}