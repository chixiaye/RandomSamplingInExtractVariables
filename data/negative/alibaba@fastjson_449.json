{
  "id" : 449,
  "expression" : "values2",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/bug/Issue215_long_array.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "values2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 31,
      "startColumnNumber" : 33,
      "endLineNumber" : 31,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertArrayEquals(values2,values)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertArrayEquals(values2,values);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 601,
        "startLineNumber" : 16,
        "startColumnNumber" : 50,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long[] values=new long[128];\n  Random random=new Random();\n  for (int i=0; i < values.length; ++i) {\n    values[i]=random.nextLong();\n  }\n  Map<String,long[]> map=new HashMap<String,long[]>();\n  map.put(\"val\",values);\n  String text=JSON.toJSONString(map);\n  System.out.println(text);\n  Map<String,long[]> map2=JSON.parseObject(text,new TypeReference<HashMap<String,long[]>>(){\n  }\n);\n  long[] values2=(long[])map2.get(\"val\");\n  Assert.assertArrayEquals(values2,values);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_for_issue() throws Exception {\n  long[] values=new long[128];\n  Random random=new Random();\n  for (int i=0; i < values.length; ++i) {\n    values[i]=random.nextLong();\n  }\n  Map<String,long[]> map=new HashMap<String,long[]>();\n  map.put(\"val\",values);\n  String text=JSON.toJSONString(map);\n  System.out.println(text);\n  Map<String,long[]> map2=JSON.parseObject(text,new TypeReference<HashMap<String,long[]>>(){\n  }\n);\n  long[] values2=(long[])map2.get(\"val\");\n  Assert.assertArrayEquals(values2,values);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 138,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertArrayEquals(values2,values);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long[]"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 31,
    "startColumnNumber" : 33,
    "endLineNumber" : 31,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}