{
  "id" : 49,
  "expression" : "\"-h\".equals(a)",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Debug/Debugger-agent-lldb/src/main/java/agent/lldb/gadp/LldbGadpServer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"-h\".equals(a)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 95,
      "startColumnNumber" : 8,
      "endLineNumber" : 95,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 44
      },
      "nodeContext" : "\"-h\".equals(a) || \"--help\".equals(a)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (\"-h\".equals(a) || \"--help\".equals(a)) {\n  printUsage();\n  System.exit(0);\n}\n else if (\"-p\".equals(a) || \"--port\".equals(a)) {\n  if (!ait.hasNext()) {\n    System.err.println(\"Expected PORT\");\n    printUsage();\n    System.exit(-1);\n  }\n  String portStr=ait.next();\n  try {\n    port=Integer.parseInt(portStr);\n  }\n catch (  NumberFormatException e) {\n    System.err.println(\"Integer required. Got \" + portStr);\n    printUsage();\n    System.exit(-1);\n  }\n}\n else if (\"-H\".equals(a) || \"--host\".equals(a)) {\n  if (!ait.hasNext()) {\n    System.err.println(\"Expected HOST/ADDR\");\n    printUsage();\n    System.exit(-1);\n  }\n  iface=ait.next();\n}\n else {\n  System.err.println(\"Unknown option: \" + a);\n  printUsage();\n  System.exit(-1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 900,
        "startLineNumber" : 93,
        "startColumnNumber" : 25,
        "endLineNumber" : 128,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  String a=ait.next();\n  if (\"-h\".equals(a) || \"--help\".equals(a)) {\n    printUsage();\n    System.exit(0);\n  }\n else   if (\"-p\".equals(a) || \"--port\".equals(a)) {\n    if (!ait.hasNext()) {\n      System.err.println(\"Expected PORT\");\n      printUsage();\n      System.exit(-1);\n    }\n    String portStr=ait.next();\n    try {\n      port=Integer.parseInt(portStr);\n    }\n catch (    NumberFormatException e) {\n      System.err.println(\"Integer required. Got \" + portStr);\n      printUsage();\n      System.exit(-1);\n    }\n  }\n else   if (\"-H\".equals(a) || \"--host\".equals(a)) {\n    if (!ait.hasNext()) {\n      System.err.println(\"Expected HOST/ADDR\");\n      printUsage();\n      System.exit(-1);\n    }\n    iface=ait.next();\n  }\n else {\n    System.err.println(\"Unknown option: \" + a);\n    printUsage();\n    System.exit(-1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 922,
        "startLineNumber" : 93,
        "startColumnNumber" : 3,
        "endLineNumber" : 128,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while (ait.hasNext()) {\n  String a=ait.next();\n  if (\"-h\".equals(a) || \"--help\".equals(a)) {\n    printUsage();\n    System.exit(0);\n  }\n else   if (\"-p\".equals(a) || \"--port\".equals(a)) {\n    if (!ait.hasNext()) {\n      System.err.println(\"Expected PORT\");\n      printUsage();\n      System.exit(-1);\n    }\n    String portStr=ait.next();\n    try {\n      port=Integer.parseInt(portStr);\n    }\n catch (    NumberFormatException e) {\n      System.err.println(\"Integer required. Got \" + portStr);\n      printUsage();\n      System.exit(-1);\n    }\n  }\n else   if (\"-H\".equals(a) || \"--host\".equals(a)) {\n    if (!ait.hasNext()) {\n      System.err.println(\"Expected HOST/ADDR\");\n      printUsage();\n      System.exit(-1);\n    }\n    iface=ait.next();\n  }\n else {\n    System.err.println(\"Unknown option: \" + a);\n    printUsage();\n    System.exit(-1);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 164,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1143,
        "startLineNumber" : 88,
        "startColumnNumber" : 47,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String iface=\"localhost\";\n  int port=12345;\n  Iterator<String> ait=Arrays.asList(args).iterator();\n  while (ait.hasNext()) {\n    String a=ait.next();\n    if (\"-h\".equals(a) || \"--help\".equals(a)) {\n      printUsage();\n      System.exit(0);\n    }\n else     if (\"-p\".equals(a) || \"--port\".equals(a)) {\n      if (!ait.hasNext()) {\n        System.err.println(\"Expected PORT\");\n        printUsage();\n        System.exit(-1);\n      }\n      String portStr=ait.next();\n      try {\n        port=Integer.parseInt(portStr);\n      }\n catch (      NumberFormatException e) {\n        System.err.println(\"Integer required. Got \" + portStr);\n        printUsage();\n        System.exit(-1);\n      }\n    }\n else     if (\"-H\".equals(a) || \"--host\".equals(a)) {\n      if (!ait.hasNext()) {\n        System.err.println(\"Expected HOST/ADDR\");\n        printUsage();\n        System.exit(-1);\n      }\n      iface=ait.next();\n    }\n else {\n      System.err.println(\"Unknown option: \" + a);\n      printUsage();\n      System.exit(-1);\n    }\n  }\n  bindTo=new InetSocketAddress(iface,port);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1188,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "protected void parseArguments(String[] args){\n  String iface=\"localhost\";\n  int port=12345;\n  Iterator<String> ait=Arrays.asList(args).iterator();\n  while (ait.hasNext()) {\n    String a=ait.next();\n    if (\"-h\".equals(a) || \"--help\".equals(a)) {\n      printUsage();\n      System.exit(0);\n    }\n else     if (\"-p\".equals(a) || \"--port\".equals(a)) {\n      if (!ait.hasNext()) {\n        System.err.println(\"Expected PORT\");\n        printUsage();\n        System.exit(-1);\n      }\n      String portStr=ait.next();\n      try {\n        port=Integer.parseInt(portStr);\n      }\n catch (      NumberFormatException e) {\n        System.err.println(\"Integer required. Got \" + portStr);\n        printUsage();\n        System.exit(-1);\n      }\n    }\n else     if (\"-H\".equals(a) || \"--host\".equals(a)) {\n      if (!ait.hasNext()) {\n        System.err.println(\"Expected HOST/ADDR\");\n        printUsage();\n        System.exit(-1);\n      }\n      iface=ait.next();\n    }\n else {\n      System.err.println(\"Unknown option: \" + a);\n      printUsage();\n      System.exit(-1);\n    }\n  }\n  bindTo=new InetSocketAddress(iface,port);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 208,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 44
      },
      "nodeContext" : "\"-h\".equals(a) || \"--help\".equals(a)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 95,
    "startColumnNumber" : 8,
    "endLineNumber" : 95,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}