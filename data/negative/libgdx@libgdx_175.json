{
  "id" : 175,
  "expression" : "connection",
  "projectName" : "libgdx@libgdx",
  "commitID" : "a5a87fdf07d60ed0ad72e32150c88bbd9877474e",
  "filePath" : "gdx/src/com/badlogic/gdx/net/NetJavaImpl.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "connection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 180,
      "startColumnNumber" : 3,
      "endLineNumber" : 180,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 180,
        "startColumnNumber" : 3,
        "endLineNumber" : 180,
        "endColumnNumber" : 38
      },
      "nodeContext" : "connection.setDoOutput(doingOutPut)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 180,
        "startColumnNumber" : 3,
        "endLineNumber" : 180,
        "endColumnNumber" : 39
      },
      "nodeContext" : "connection.setDoOutput(doingOutPut);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n catch (Exception e) {\n  try {\n    httpResponseListener.failed(e);\n  }\n  finally {\n    removeFromConnectionsAndListeners(httpRequest);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3414,
        "startLineNumber" : 154,
        "startColumnNumber" : 110,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3523,
        "startLineNumber" : 154,
        "startColumnNumber" : 1,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void sendHttpRequest(final HttpRequest httpRequest,final HttpResponseListener httpResponseListener){\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 180,
        "startColumnNumber" : 3,
        "endLineNumber" : 180,
        "endColumnNumber" : 39
      },
      "nodeContext" : "connection.setDoOutput(doingOutPut);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.net.HttpURLConnection"
  }, {
    "nodeContext" : "connection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 181,
      "startColumnNumber" : 3,
      "endLineNumber" : 181,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 181,
        "startColumnNumber" : 3,
        "endLineNumber" : 181,
        "endColumnNumber" : 33
      },
      "nodeContext" : "connection.setDoInput(doInput)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 181,
        "startColumnNumber" : 3,
        "endLineNumber" : 181,
        "endColumnNumber" : 34
      },
      "nodeContext" : "connection.setDoInput(doInput);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n catch (Exception e) {\n  try {\n    httpResponseListener.failed(e);\n  }\n  finally {\n    removeFromConnectionsAndListeners(httpRequest);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3414,
        "startLineNumber" : 154,
        "startColumnNumber" : 110,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3523,
        "startLineNumber" : 154,
        "startColumnNumber" : 1,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void sendHttpRequest(final HttpRequest httpRequest,final HttpResponseListener httpResponseListener){\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 181,
        "startColumnNumber" : 3,
        "endLineNumber" : 181,
        "endColumnNumber" : 34
      },
      "nodeContext" : "connection.setDoInput(doInput);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.net.HttpURLConnection"
  }, {
    "nodeContext" : "connection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 182,
      "startColumnNumber" : 3,
      "endLineNumber" : 182,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 182,
        "startColumnNumber" : 3,
        "endLineNumber" : 182,
        "endColumnNumber" : 38
      },
      "nodeContext" : "connection.setRequestMethod(method)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 182,
        "startColumnNumber" : 3,
        "endLineNumber" : 182,
        "endColumnNumber" : 39
      },
      "nodeContext" : "connection.setRequestMethod(method);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n catch (Exception e) {\n  try {\n    httpResponseListener.failed(e);\n  }\n  finally {\n    removeFromConnectionsAndListeners(httpRequest);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3414,
        "startLineNumber" : 154,
        "startColumnNumber" : 110,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3523,
        "startLineNumber" : 154,
        "startColumnNumber" : 1,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void sendHttpRequest(final HttpRequest httpRequest,final HttpResponseListener httpResponseListener){\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 182,
        "startColumnNumber" : 3,
        "endLineNumber" : 182,
        "endColumnNumber" : 39
      },
      "nodeContext" : "connection.setRequestMethod(method);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.net.HttpURLConnection"
  }, {
    "nodeContext" : "connection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 185,
      "startColumnNumber" : 69,
      "endLineNumber" : 185,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 185,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 80
      },
      "nodeContext" : "putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 185,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 81
      },
      "nodeContext" : "putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n catch (Exception e) {\n  try {\n    httpResponseListener.failed(e);\n  }\n  finally {\n    removeFromConnectionsAndListeners(httpRequest);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3414,
        "startLineNumber" : 154,
        "startColumnNumber" : 110,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3523,
        "startLineNumber" : 154,
        "startColumnNumber" : 1,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void sendHttpRequest(final HttpRequest httpRequest,final HttpResponseListener httpResponseListener){\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 185,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 81
      },
      "nodeContext" : "putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.net.HttpURLConnection"
  }, {
    "nodeContext" : "connection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 189,
      "startColumnNumber" : 4,
      "endLineNumber" : 189,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 69
      },
      "nodeContext" : "connection.addRequestProperty(header.getKey(),header.getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 70
      },
      "nodeContext" : "connection.addRequestProperty(header.getKey(),header.getValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 188,
        "startColumnNumber" : 3,
        "endLineNumber" : 189,
        "endColumnNumber" : 70
      },
      "nodeContext" : "for (Map.Entry<String,String> header : httpRequest.getHeaders().entrySet()) connection.addRequestProperty(header.getKey(),header.getValue());\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n catch (Exception e) {\n  try {\n    httpResponseListener.failed(e);\n  }\n  finally {\n    removeFromConnectionsAndListeners(httpRequest);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3414,
        "startLineNumber" : 154,
        "startColumnNumber" : 110,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3523,
        "startLineNumber" : 154,
        "startColumnNumber" : 1,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void sendHttpRequest(final HttpRequest httpRequest,final HttpResponseListener httpResponseListener){\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 70
      },
      "nodeContext" : "connection.addRequestProperty(header.getKey(),header.getValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.net.HttpURLConnection"
  }, {
    "nodeContext" : "connection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 192,
      "startColumnNumber" : 3,
      "endLineNumber" : 192,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 192,
        "startColumnNumber" : 3,
        "endLineNumber" : 192,
        "endColumnNumber" : 57
      },
      "nodeContext" : "connection.setConnectTimeout(httpRequest.getTimeOut())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 192,
        "startColumnNumber" : 3,
        "endLineNumber" : 192,
        "endColumnNumber" : 58
      },
      "nodeContext" : "connection.setConnectTimeout(httpRequest.getTimeOut());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n catch (Exception e) {\n  try {\n    httpResponseListener.failed(e);\n  }\n  finally {\n    removeFromConnectionsAndListeners(httpRequest);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3414,
        "startLineNumber" : 154,
        "startColumnNumber" : 110,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3523,
        "startLineNumber" : 154,
        "startColumnNumber" : 1,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void sendHttpRequest(final HttpRequest httpRequest,final HttpResponseListener httpResponseListener){\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 192,
        "startColumnNumber" : 3,
        "endLineNumber" : 192,
        "endColumnNumber" : 58
      },
      "nodeContext" : "connection.setConnectTimeout(httpRequest.getTimeOut());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.net.HttpURLConnection"
  }, {
    "nodeContext" : "connection",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 193,
      "startColumnNumber" : 3,
      "endLineNumber" : 193,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 193,
        "startColumnNumber" : 3,
        "endLineNumber" : 193,
        "endColumnNumber" : 54
      },
      "nodeContext" : "connection.setReadTimeout(httpRequest.getTimeOut())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 193,
        "startColumnNumber" : 3,
        "endLineNumber" : 193,
        "endColumnNumber" : 55
      },
      "nodeContext" : "connection.setReadTimeout(httpRequest.getTimeOut());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  final String method=httpRequest.getMethod();\n  URL url;\n  final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n  final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n  if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n    String queryString=\"\";\n    String value=httpRequest.getContent();\n    if (value != null && !\"\".equals(value))     queryString=\"?\" + value;\n    url=new URL(httpRequest.getUrl() + queryString);\n  }\n else {\n    url=new URL(httpRequest.getUrl());\n  }\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setDoOutput(doingOutPut);\n  connection.setDoInput(doInput);\n  connection.setRequestMethod(method);\n  HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n  putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n  for (  Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())   connection.addRequestProperty(header.getKey(),header.getValue());\n  connection.setConnectTimeout(httpRequest.getTimeOut());\n  connection.setReadTimeout(httpRequest.getTimeOut());\n  executorService.submit(new Runnable(){\n    @Override public void run(){\n      try {\n        if (doingOutPut) {\n          String contentAsString=httpRequest.getContent();\n          if (contentAsString != null) {\n            OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n            try {\n              writer.write(contentAsString);\n            }\n  finally {\n              StreamUtils.closeQuietly(writer);\n            }\n          }\n else {\n            InputStream contentAsStream=httpRequest.getContentStream();\n            if (contentAsStream != null) {\n              OutputStream os=connection.getOutputStream();\n              try {\n                StreamUtils.copyStream(contentAsStream,os);\n              }\n  finally {\n                StreamUtils.closeQuietly(os);\n              }\n            }\n          }\n        }\n        connection.connect();\n        final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n        try {\n          HttpResponseListener listener=getFromListeners(httpRequest);\n          if (listener != null) {\n            listener.handleHttpResponse(clientResponse);\n          }\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n  finally {\n          connection.disconnect();\n        }\n      }\n catch (      final Exception e) {\n        connection.disconnect();\n        try {\n          httpResponseListener.failed(e);\n        }\n  finally {\n          removeFromConnectionsAndListeners(httpRequest);\n        }\n      }\n    }\n  }\n);\n}\n catch (Exception e) {\n  try {\n    httpResponseListener.failed(e);\n  }\n  finally {\n    removeFromConnectionsAndListeners(httpRequest);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 378,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3414,
        "startLineNumber" : 154,
        "startColumnNumber" : 110,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3523,
        "startLineNumber" : 154,
        "startColumnNumber" : 1,
        "endLineNumber" : 254,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void sendHttpRequest(final HttpRequest httpRequest,final HttpResponseListener httpResponseListener){\n  if (httpRequest.getUrl() == null) {\n    httpResponseListener.failed(new GdxRuntimeException(\"can't process a HTTP request without URL set\"));\n    return;\n  }\n  try {\n    final String method=httpRequest.getMethod();\n    URL url;\n    final boolean doInput=!method.equalsIgnoreCase(HttpMethods.HEAD);\n    final boolean doingOutPut=method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT) || method.equalsIgnoreCase(HttpMethods.PATCH);\n    if (method.equalsIgnoreCase(HttpMethods.GET) || method.equalsIgnoreCase(HttpMethods.HEAD)) {\n      String queryString=\"\";\n      String value=httpRequest.getContent();\n      if (value != null && !\"\".equals(value))       queryString=\"?\" + value;\n      url=new URL(httpRequest.getUrl() + queryString);\n    }\n else {\n      url=new URL(httpRequest.getUrl());\n    }\n    final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setDoOutput(doingOutPut);\n    connection.setDoInput(doInput);\n    connection.setRequestMethod(method);\n    HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\n    putIntoConnectionsAndListeners(httpRequest,httpResponseListener,connection);\n    for (    Map.Entry<String,String> header : httpRequest.getHeaders().entrySet())     connection.addRequestProperty(header.getKey(),header.getValue());\n    connection.setConnectTimeout(httpRequest.getTimeOut());\n    connection.setReadTimeout(httpRequest.getTimeOut());\n    executorService.submit(new Runnable(){\n      @Override public void run(){\n        try {\n          if (doingOutPut) {\n            String contentAsString=httpRequest.getContent();\n            if (contentAsString != null) {\n              OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF8\");\n              try {\n                writer.write(contentAsString);\n              }\n  finally {\n                StreamUtils.closeQuietly(writer);\n              }\n            }\n else {\n              InputStream contentAsStream=httpRequest.getContentStream();\n              if (contentAsStream != null) {\n                OutputStream os=connection.getOutputStream();\n                try {\n                  StreamUtils.copyStream(contentAsStream,os);\n                }\n  finally {\n                  StreamUtils.closeQuietly(os);\n                }\n              }\n            }\n          }\n          connection.connect();\n          final HttpClientResponse clientResponse=new HttpClientResponse(connection);\n          try {\n            HttpResponseListener listener=getFromListeners(httpRequest);\n            if (listener != null) {\n              listener.handleHttpResponse(clientResponse);\n            }\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n  finally {\n            connection.disconnect();\n          }\n        }\n catch (        final Exception e) {\n          connection.disconnect();\n          try {\n            httpResponseListener.failed(e);\n          }\n  finally {\n            removeFromConnectionsAndListeners(httpRequest);\n          }\n        }\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    try {\n      httpResponseListener.failed(e);\n    }\n  finally {\n      removeFromConnectionsAndListeners(httpRequest);\n    }\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 193,
        "startColumnNumber" : 3,
        "endLineNumber" : 193,
        "endColumnNumber" : 55
      },
      "nodeContext" : "connection.setReadTimeout(httpRequest.getTimeOut());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.net.HttpURLConnection"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 180,
    "startColumnNumber" : 3,
    "endLineNumber" : 180,
    "endColumnNumber" : 13
  }, {
    "charLength" : 10,
    "startLineNumber" : 181,
    "startColumnNumber" : 3,
    "endLineNumber" : 181,
    "endColumnNumber" : 13
  }, {
    "charLength" : 10,
    "startLineNumber" : 182,
    "startColumnNumber" : 3,
    "endLineNumber" : 182,
    "endColumnNumber" : 13
  }, {
    "charLength" : 10,
    "startLineNumber" : 185,
    "startColumnNumber" : 69,
    "endLineNumber" : 185,
    "endColumnNumber" : 79
  }, {
    "charLength" : 10,
    "startLineNumber" : 189,
    "startColumnNumber" : 4,
    "endLineNumber" : 189,
    "endColumnNumber" : 14
  }, {
    "charLength" : 10,
    "startLineNumber" : 192,
    "startColumnNumber" : 3,
    "endLineNumber" : 192,
    "endColumnNumber" : 13
  }, {
    "charLength" : 10,
    "startLineNumber" : 193,
    "startColumnNumber" : 3,
    "endLineNumber" : 193,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  } ]
}