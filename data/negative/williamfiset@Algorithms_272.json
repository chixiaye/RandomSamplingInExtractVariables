{
  "id" : 272,
  "expression" : "V[i - 1]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/dp/KnapsackUnbounded.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "V[i - 1]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 40,
      "startColumnNumber" : 28,
      "endLineNumber" : 40,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 40,
        "startColumnNumber" : 24,
        "endLineNumber" : 40,
        "endColumnNumber" : 36
      },
      "nodeContext" : "v=V[i - 1]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "int w=W[i - 1], v=V[i - 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 430,
        "startLineNumber" : 37,
        "startColumnNumber" : 33,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= maxWeight; sz++) {\n    if (sz >= w)     DP[i][sz]=DP[i][sz - w] + v;\n    if (DP[i - 1][sz] > DP[i][sz])     DP[i][sz]=DP[i - 1][sz];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= maxWeight; sz++) {\n    if (sz >= w)     DP[i][sz]=DP[i][sz - w] + v;\n    if (DP[i - 1][sz] > DP[i][sz])     DP[i][sz]=DP[i - 1][sz];\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 25,
        "startColumnNumber" : 71,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || maxWeight < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][maxWeight + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= maxWeight; sz++) {\n      if (sz >= w)       DP[i][sz]=DP[i][sz - w] + v;\n      if (DP[i - 1][sz] > DP[i][sz])       DP[i][sz]=DP[i - 1][sz];\n    }\n  }\n  return DP[N][maxWeight];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1263,
        "startLineNumber" : 18,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param maxWeight - The maximum weight of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int unboundedKnapsack(int maxWeight,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || maxWeight < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][maxWeight + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= maxWeight; sz++) {\n      if (sz >= w)       DP[i][sz]=DP[i][sz - w] + v;\n      if (DP[i - 1][sz] > DP[i][sz])       DP[i][sz]=DP[i - 1][sz];\n    }\n  }\n  return DP[N][maxWeight];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "int w=W[i - 1], v=V[i - 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 40,
    "startColumnNumber" : 28,
    "endLineNumber" : 40,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}