{
  "id" : 27,
  "expression" : "PlatformSpecific",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "643d68089b7ee3ccf6ddca883e4f80362cf16c9d",
  "filePath" : "hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PlatformSpecific",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 79,
      "startColumnNumber" : 13,
      "endLineNumber" : 79,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 79,
        "startColumnNumber" : 13,
        "endLineNumber" : 79,
        "endColumnNumber" : 62
      },
      "nodeContext" : "PlatformSpecific.isAppEngineStandardEnvironment()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 62
      },
      "nodeContext" : "!PlatformSpecific.isAppEngineStandardEnvironment()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 610,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n  threadFactory=new ThreadFactory(){\n    protected final AtomicInteger threadNumber=new AtomicInteger(0);\n    @Override public Thread newThread(    Runnable r){\n      Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n      thread.setDaemon(true);\n      return thread;\n    }\n  }\n;\n}\n else {\n  threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1513,
        "startLineNumber" : 77,
        "startColumnNumber" : 257,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int dynamicCoreSize=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (dynamicCoreSize > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ dynamicCoreSize+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ dynamicCoreSize+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicCoreSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3168,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int dynamicCoreSize=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (dynamicCoreSize > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ dynamicCoreSize+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ dynamicCoreSize+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicCoreSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 62
      },
      "nodeContext" : "!PlatformSpecific.isAppEngineStandardEnvironment()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.util.PlatformSpecific"
  }, {
    "nodeContext" : "PlatformSpecific",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 92,
      "startColumnNumber" : 28,
      "endLineNumber" : 92,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 92,
        "endColumnNumber" : 72
      },
      "nodeContext" : "PlatformSpecific.getAppEngineThreadFactory()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 72
      },
      "nodeContext" : "threadFactory=PlatformSpecific.getAppEngineThreadFactory()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 73
      },
      "nodeContext" : "threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 610,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n  threadFactory=new ThreadFactory(){\n    protected final AtomicInteger threadNumber=new AtomicInteger(0);\n    @Override public Thread newThread(    Runnable r){\n      Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n      thread.setDaemon(true);\n      return thread;\n    }\n  }\n;\n}\n else {\n  threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1513,
        "startLineNumber" : 77,
        "startColumnNumber" : 257,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int dynamicCoreSize=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (dynamicCoreSize > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ dynamicCoreSize+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ dynamicCoreSize+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicCoreSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3168,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int dynamicCoreSize=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (dynamicCoreSize > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ dynamicCoreSize+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ dynamicCoreSize+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicCoreSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 73
      },
      "nodeContext" : "threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.util.PlatformSpecific"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 79,
    "startColumnNumber" : 13,
    "endLineNumber" : 79,
    "endColumnNumber" : 29
  }, {
    "charLength" : 16,
    "startLineNumber" : 92,
    "startColumnNumber" : 28,
    "endLineNumber" : 92,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}