{
  "id" : 106,
  "expression" : "TestKey.TEST",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandPropertiesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TestKey.TEST",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 68,
      "startColumnNumber" : 44,
      "endLineNumber" : 68,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 5463,
        "startLineNumber" : 68,
        "startColumnNumber" : 15,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new HystrixCommandProperties(TestKey.TEST){\n  @Override public HystrixProperty<Boolean> circuitBreakerEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerEnabled());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerErrorThresholdPercentage(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerErrorThresholdPercentage());\n  }\n  @Override public HystrixProperty<Boolean> circuitBreakerForceClosed(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceClosed());\n  }\n  @Override public HystrixProperty<Boolean> circuitBreakerForceOpen(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceOpen());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerRequestVolumeThreshold(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerRequestVolumeThreshold());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerSleepWindowInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerSleepWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> executionIsolationSemaphoreMaxConcurrentRequests(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationSemaphoreMaxConcurrentRequests());\n  }\n  @Override public HystrixProperty<ExecutionIsolationStrategy> executionIsolationStrategy(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationStrategy());\n  }\n  @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnTimeout(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnTimeout());\n  }\n  @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnFutureCancel(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnFutureCancel());\n  }\n  @Override public HystrixProperty<String> executionIsolationThreadPoolKeyOverride(){\n    return HystrixProperty.Factory.nullProperty();\n  }\n  @Override public HystrixProperty<Integer> executionTimeoutInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutInMilliseconds());\n  }\n  @Override public HystrixProperty<Boolean> executionTimeoutEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutEnabled());\n  }\n  @Override public HystrixProperty<Integer> fallbackIsolationSemaphoreMaxConcurrentRequests(){\n    return HystrixProperty.Factory.asProperty(builder.getFallbackIsolationSemaphoreMaxConcurrentRequests());\n  }\n  @Override public HystrixProperty<Boolean> fallbackEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getFallbackEnabled());\n  }\n  @Override public HystrixProperty<Integer> metricsHealthSnapshotIntervalInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsHealthSnapshotIntervalInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileBucketSize(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileBucketSize());\n  }\n  @Override public HystrixProperty<Boolean> metricsRollingPercentileEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileEnabled());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileWindow(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileWindowBuckets(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowBuckets());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowBuckets(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowBuckets());\n  }\n  @Override public HystrixProperty<Boolean> requestCacheEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getRequestCacheEnabled());\n  }\n  @Override public HystrixProperty<Boolean> requestLogEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getRequestLogEnabled());\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 484,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5471,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 10
      },
      "nodeContext" : "return new HystrixCommandProperties(TestKey.TEST){\n  @Override public HystrixProperty<Boolean> circuitBreakerEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerEnabled());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerErrorThresholdPercentage(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerErrorThresholdPercentage());\n  }\n  @Override public HystrixProperty<Boolean> circuitBreakerForceClosed(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceClosed());\n  }\n  @Override public HystrixProperty<Boolean> circuitBreakerForceOpen(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceOpen());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerRequestVolumeThreshold(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerRequestVolumeThreshold());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerSleepWindowInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerSleepWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> executionIsolationSemaphoreMaxConcurrentRequests(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationSemaphoreMaxConcurrentRequests());\n  }\n  @Override public HystrixProperty<ExecutionIsolationStrategy> executionIsolationStrategy(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationStrategy());\n  }\n  @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnTimeout(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnTimeout());\n  }\n  @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnFutureCancel(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnFutureCancel());\n  }\n  @Override public HystrixProperty<String> executionIsolationThreadPoolKeyOverride(){\n    return HystrixProperty.Factory.nullProperty();\n  }\n  @Override public HystrixProperty<Integer> executionTimeoutInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutInMilliseconds());\n  }\n  @Override public HystrixProperty<Boolean> executionTimeoutEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutEnabled());\n  }\n  @Override public HystrixProperty<Integer> fallbackIsolationSemaphoreMaxConcurrentRequests(){\n    return HystrixProperty.Factory.asProperty(builder.getFallbackIsolationSemaphoreMaxConcurrentRequests());\n  }\n  @Override public HystrixProperty<Boolean> fallbackEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getFallbackEnabled());\n  }\n  @Override public HystrixProperty<Integer> metricsHealthSnapshotIntervalInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsHealthSnapshotIntervalInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileBucketSize(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileBucketSize());\n  }\n  @Override public HystrixProperty<Boolean> metricsRollingPercentileEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileEnabled());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileWindow(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileWindowBuckets(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowBuckets());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowBuckets(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowBuckets());\n  }\n  @Override public HystrixProperty<Boolean> requestCacheEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getRequestCacheEnabled());\n  }\n  @Override public HystrixProperty<Boolean> requestLogEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getRequestLogEnabled());\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 485,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5487,
        "startLineNumber" : 67,
        "startColumnNumber" : 78,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return new HystrixCommandProperties(TestKey.TEST){\n    @Override public HystrixProperty<Boolean> circuitBreakerEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerEnabled());\n    }\n    @Override public HystrixProperty<Integer> circuitBreakerErrorThresholdPercentage(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerErrorThresholdPercentage());\n    }\n    @Override public HystrixProperty<Boolean> circuitBreakerForceClosed(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceClosed());\n    }\n    @Override public HystrixProperty<Boolean> circuitBreakerForceOpen(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceOpen());\n    }\n    @Override public HystrixProperty<Integer> circuitBreakerRequestVolumeThreshold(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerRequestVolumeThreshold());\n    }\n    @Override public HystrixProperty<Integer> circuitBreakerSleepWindowInMilliseconds(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerSleepWindowInMilliseconds());\n    }\n    @Override public HystrixProperty<Integer> executionIsolationSemaphoreMaxConcurrentRequests(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationSemaphoreMaxConcurrentRequests());\n    }\n    @Override public HystrixProperty<ExecutionIsolationStrategy> executionIsolationStrategy(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationStrategy());\n    }\n    @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnTimeout(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnTimeout());\n    }\n    @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnFutureCancel(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnFutureCancel());\n    }\n    @Override public HystrixProperty<String> executionIsolationThreadPoolKeyOverride(){\n      return HystrixProperty.Factory.nullProperty();\n    }\n    @Override public HystrixProperty<Integer> executionTimeoutInMilliseconds(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutInMilliseconds());\n    }\n    @Override public HystrixProperty<Boolean> executionTimeoutEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutEnabled());\n    }\n    @Override public HystrixProperty<Integer> fallbackIsolationSemaphoreMaxConcurrentRequests(){\n      return HystrixProperty.Factory.asProperty(builder.getFallbackIsolationSemaphoreMaxConcurrentRequests());\n    }\n    @Override public HystrixProperty<Boolean> fallbackEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getFallbackEnabled());\n    }\n    @Override public HystrixProperty<Integer> metricsHealthSnapshotIntervalInMilliseconds(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsHealthSnapshotIntervalInMilliseconds());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingPercentileBucketSize(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileBucketSize());\n    }\n    @Override public HystrixProperty<Boolean> metricsRollingPercentileEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileEnabled());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingPercentileWindow(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowInMilliseconds());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingPercentileWindowBuckets(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowBuckets());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowInMilliseconds(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowInMilliseconds());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowBuckets(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowBuckets());\n    }\n    @Override public HystrixProperty<Boolean> requestCacheEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getRequestCacheEnabled());\n    }\n    @Override public HystrixProperty<Boolean> requestLogEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getRequestLogEnabled());\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 486,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5898,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Return a static representation of the properties with values from the Builder so that UnitTests can create properties that are not affected by the actual implementations which pick up their values dynamically.\n * @param builder command properties builder\n * @return HystrixCommandProperties\n */\nstatic HystrixCommandProperties asMock(final Setter builder){\n  return new HystrixCommandProperties(TestKey.TEST){\n    @Override public HystrixProperty<Boolean> circuitBreakerEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerEnabled());\n    }\n    @Override public HystrixProperty<Integer> circuitBreakerErrorThresholdPercentage(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerErrorThresholdPercentage());\n    }\n    @Override public HystrixProperty<Boolean> circuitBreakerForceClosed(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceClosed());\n    }\n    @Override public HystrixProperty<Boolean> circuitBreakerForceOpen(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceOpen());\n    }\n    @Override public HystrixProperty<Integer> circuitBreakerRequestVolumeThreshold(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerRequestVolumeThreshold());\n    }\n    @Override public HystrixProperty<Integer> circuitBreakerSleepWindowInMilliseconds(){\n      return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerSleepWindowInMilliseconds());\n    }\n    @Override public HystrixProperty<Integer> executionIsolationSemaphoreMaxConcurrentRequests(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationSemaphoreMaxConcurrentRequests());\n    }\n    @Override public HystrixProperty<ExecutionIsolationStrategy> executionIsolationStrategy(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationStrategy());\n    }\n    @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnTimeout(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnTimeout());\n    }\n    @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnFutureCancel(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnFutureCancel());\n    }\n    @Override public HystrixProperty<String> executionIsolationThreadPoolKeyOverride(){\n      return HystrixProperty.Factory.nullProperty();\n    }\n    @Override public HystrixProperty<Integer> executionTimeoutInMilliseconds(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutInMilliseconds());\n    }\n    @Override public HystrixProperty<Boolean> executionTimeoutEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutEnabled());\n    }\n    @Override public HystrixProperty<Integer> fallbackIsolationSemaphoreMaxConcurrentRequests(){\n      return HystrixProperty.Factory.asProperty(builder.getFallbackIsolationSemaphoreMaxConcurrentRequests());\n    }\n    @Override public HystrixProperty<Boolean> fallbackEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getFallbackEnabled());\n    }\n    @Override public HystrixProperty<Integer> metricsHealthSnapshotIntervalInMilliseconds(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsHealthSnapshotIntervalInMilliseconds());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingPercentileBucketSize(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileBucketSize());\n    }\n    @Override public HystrixProperty<Boolean> metricsRollingPercentileEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileEnabled());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingPercentileWindow(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowInMilliseconds());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingPercentileWindowBuckets(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowBuckets());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowInMilliseconds(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowInMilliseconds());\n    }\n    @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowBuckets(){\n      return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowBuckets());\n    }\n    @Override public HystrixProperty<Boolean> requestCacheEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getRequestCacheEnabled());\n    }\n    @Override public HystrixProperty<Boolean> requestLogEnabled(){\n      return HystrixProperty.Factory.asProperty(builder.getRequestLogEnabled());\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 497,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 5463,
        "startLineNumber" : 68,
        "startColumnNumber" : 15,
        "endLineNumber" : 190,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new HystrixCommandProperties(TestKey.TEST){\n  @Override public HystrixProperty<Boolean> circuitBreakerEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerEnabled());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerErrorThresholdPercentage(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerErrorThresholdPercentage());\n  }\n  @Override public HystrixProperty<Boolean> circuitBreakerForceClosed(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceClosed());\n  }\n  @Override public HystrixProperty<Boolean> circuitBreakerForceOpen(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerForceOpen());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerRequestVolumeThreshold(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerRequestVolumeThreshold());\n  }\n  @Override public HystrixProperty<Integer> circuitBreakerSleepWindowInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getCircuitBreakerSleepWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> executionIsolationSemaphoreMaxConcurrentRequests(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationSemaphoreMaxConcurrentRequests());\n  }\n  @Override public HystrixProperty<ExecutionIsolationStrategy> executionIsolationStrategy(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationStrategy());\n  }\n  @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnTimeout(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnTimeout());\n  }\n  @Override public HystrixProperty<Boolean> executionIsolationThreadInterruptOnFutureCancel(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionIsolationThreadInterruptOnFutureCancel());\n  }\n  @Override public HystrixProperty<String> executionIsolationThreadPoolKeyOverride(){\n    return HystrixProperty.Factory.nullProperty();\n  }\n  @Override public HystrixProperty<Integer> executionTimeoutInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutInMilliseconds());\n  }\n  @Override public HystrixProperty<Boolean> executionTimeoutEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getExecutionTimeoutEnabled());\n  }\n  @Override public HystrixProperty<Integer> fallbackIsolationSemaphoreMaxConcurrentRequests(){\n    return HystrixProperty.Factory.asProperty(builder.getFallbackIsolationSemaphoreMaxConcurrentRequests());\n  }\n  @Override public HystrixProperty<Boolean> fallbackEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getFallbackEnabled());\n  }\n  @Override public HystrixProperty<Integer> metricsHealthSnapshotIntervalInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsHealthSnapshotIntervalInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileBucketSize(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileBucketSize());\n  }\n  @Override public HystrixProperty<Boolean> metricsRollingPercentileEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileEnabled());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileWindow(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingPercentileWindowBuckets(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingPercentileWindowBuckets());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowInMilliseconds(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowInMilliseconds());\n  }\n  @Override public HystrixProperty<Integer> metricsRollingStatisticalWindowBuckets(){\n    return HystrixProperty.Factory.asProperty(builder.getMetricsRollingStatisticalWindowBuckets());\n  }\n  @Override public HystrixProperty<Boolean> requestCacheEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getRequestCacheEnabled());\n  }\n  @Override public HystrixProperty<Boolean> requestLogEnabled(){\n    return HystrixProperty.Factory.asProperty(builder.getRequestLogEnabled());\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 484,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "com.netflix.hystrix.HystrixCommandPropertiesTest.TestKey"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 68,
    "startColumnNumber" : 44,
    "endLineNumber" : 68,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}