{
  "id" : 209,
  "expression" : "\"k2\"",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-raptor/src/test/java/com/facebook/presto/raptor/storage/TestOrcFileRewriter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"k2\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 143,
      "startColumnNumber" : 108,
      "endLineNumber" : 143,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 143,
        "startColumnNumber" : 66,
        "endLineNumber" : 143,
        "endColumnNumber" : 120
      },
      "nodeContext" : "mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 141,
        "startColumnNumber" : 31,
        "endLineNumber" : 143,
        "endColumnNumber" : 194
      },
      "nodeContext" : "rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 59,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 613,
        "startLineNumber" : 141,
        "startColumnNumber" : 31,
        "endLineNumber" : 144,
        "endColumnNumber" : 193
      },
      "nodeContext" : "rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 87,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 821,
        "startLineNumber" : 141,
        "startColumnNumber" : 31,
        "endLineNumber" : 145,
        "endColumnNumber" : 207
      },
      "nodeContext" : "rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 117,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 141,
        "startColumnNumber" : 31,
        "endLineNumber" : 146,
        "endColumnNumber" : 199
      },
      "nodeContext" : "rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 146,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1050,
        "startLineNumber" : 141,
        "startColumnNumber" : 31,
        "endLineNumber" : 147,
        "endColumnNumber" : 28
      },
      "nodeContext" : "rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 148,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 141,
        "startColumnNumber" : 23,
        "endLineNumber" : 147,
        "endColumnNumber" : 28
      },
      "nodeContext" : "pages=rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1070,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 29
      },
      "nodeContext" : "List<Page> pages=rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 156,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 140,
        "startColumnNumber" : 96,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Page> pages=rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build();\n  writer.appendPages(pages);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1221,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (FileWriter writer=OrcTestingUtil.createFileWriter(columnIds,columnTypes,file)){\n  List<Page> pages=rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build();\n  writer.appendPages(pages);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 174,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10967,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 300,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionAndTypeManager functionAndTypeManager=createTestFunctionAndTypeManager();\n  ArrayType arrayType=new ArrayType(BIGINT);\n  ArrayType arrayOfArrayType=new ArrayType(arrayType);\n  Type mapType=functionAndTypeManager.getParameterizedType(StandardTypes.MAP,ImmutableList.of(TypeSignatureParameter.of(createVarcharType(5).getTypeSignature()),TypeSignatureParameter.of(BOOLEAN.getTypeSignature())));\n  List<Long> columnIds=ImmutableList.of(3L,7L,9L,10L,11L,12L);\n  DecimalType decimalType=DecimalType.createDecimalType(4,4);\n  List<Type> columnTypes=ImmutableList.of(BIGINT,createVarcharType(20),arrayType,mapType,arrayOfArrayType,decimalType);\n  File file=new File(temporary,randomUUID().toString());\n  try (FileWriter writer=OrcTestingUtil.createFileWriter(columnIds,columnTypes,file)){\n    List<Page> pages=rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build();\n    writer.appendPages(pages);\n  }\n   try (OrcDataSource dataSource=fileOrcDataSource(file)){\n    OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n    assertEquals(reader.getReaderRowCount(),5);\n    assertEquals(reader.getFileRowCount(),5);\n    assertEquals(reader.getSplitLength(),file.length());\n    assertEquals(reader.nextBatch(),5);\n    Block column0=reader.readBlock(0);\n    assertEquals(column0.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column0.isNull(i),false);\n    }\n    assertEquals(BIGINT.getLong(column0,0),123L);\n    assertEquals(BIGINT.getLong(column0,1),777L);\n    assertEquals(BIGINT.getLong(column0,2),456L);\n    assertEquals(BIGINT.getLong(column0,3),888L);\n    assertEquals(BIGINT.getLong(column0,4),999L);\n    Block column1=reader.readBlock(1);\n    assertEquals(column1.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column1.isNull(i),false);\n    }\n    assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n    assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"sky\"));\n    assertEquals(createVarcharType(20).getSlice(column1,2),utf8Slice(\"bye\"));\n    assertEquals(createVarcharType(20).getSlice(column1,3),utf8Slice(\"world\"));\n    assertEquals(createVarcharType(20).getSlice(column1,4),utf8Slice(\"done\"));\n    Block column2=reader.readBlock(2);\n    assertEquals(column2.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column2.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,3,4)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,2),arrayBlockOf(BIGINT,5,6)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,3),arrayBlockOf(BIGINT,7,8)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,4),arrayBlockOf(BIGINT,9,10)));\n    Block column3=reader.readBlock(3);\n    assertEquals(column3.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column3.isNull(i),false);\n    }\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,3),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true)));\n    Block column4=reader.readBlock(4);\n    assertEquals(column4.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column4.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,2),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,3),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null)));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,4),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10))));\n    assertEquals(reader.nextBatch(),-1);\n    OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n    assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n  }\n   BitSet rowsToDelete=new BitSet(5);\n  rowsToDelete.set(1);\n  rowsToDelete.set(3);\n  rowsToDelete.set(4);\n  File newFile=new File(temporary,randomUUID().toString());\n  FileSystem fileSystem=new LocalOrcDataEnvironment().getFileSystem(DEFAULT_RAPTOR_CONTEXT);\n  OrcFileInfo info=createFileRewriter().rewrite(fileSystem,getColumnTypes(columnIds,columnTypes),path(file),path(newFile),rowsToDelete);\n  assertEquals(info.getRowCount(),2);\n  assertBetweenInclusive(info.getUncompressedSize(),94L,118L * 2);\n  try (OrcDataSource dataSource=fileOrcDataSource(newFile)){\n    OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n    assertEquals(reader.getReaderRowCount(),2);\n    assertEquals(reader.getFileRowCount(),2);\n    assertEquals(reader.getSplitLength(),newFile.length());\n    assertEquals(reader.nextBatch(),2);\n    Block column0=reader.readBlock(0);\n    assertEquals(column0.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column0.isNull(i),false);\n    }\n    assertEquals(BIGINT.getLong(column0,0),123L);\n    assertEquals(BIGINT.getLong(column0,1),456L);\n    Block column1=reader.readBlock(1);\n    assertEquals(column1.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column1.isNull(i),false);\n    }\n    assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n    assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"bye\"));\n    Block column2=reader.readBlock(2);\n    assertEquals(column2.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column2.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,5,6)));\n    Block column3=reader.readBlock(3);\n    assertEquals(column3.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column3.isNull(i),false);\n    }\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n    Block column4=reader.readBlock(4);\n    assertEquals(column4.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column4.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n    assertEquals(reader.nextBatch(),-1);\n    OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n    assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1542,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11036,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 300,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRewrite() throws Exception {\n  FunctionAndTypeManager functionAndTypeManager=createTestFunctionAndTypeManager();\n  ArrayType arrayType=new ArrayType(BIGINT);\n  ArrayType arrayOfArrayType=new ArrayType(arrayType);\n  Type mapType=functionAndTypeManager.getParameterizedType(StandardTypes.MAP,ImmutableList.of(TypeSignatureParameter.of(createVarcharType(5).getTypeSignature()),TypeSignatureParameter.of(BOOLEAN.getTypeSignature())));\n  List<Long> columnIds=ImmutableList.of(3L,7L,9L,10L,11L,12L);\n  DecimalType decimalType=DecimalType.createDecimalType(4,4);\n  List<Type> columnTypes=ImmutableList.of(BIGINT,createVarcharType(20),arrayType,mapType,arrayOfArrayType,decimalType);\n  File file=new File(temporary,randomUUID().toString());\n  try (FileWriter writer=OrcTestingUtil.createFileWriter(columnIds,columnTypes,file)){\n    List<Page> pages=rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build();\n    writer.appendPages(pages);\n  }\n   try (OrcDataSource dataSource=fileOrcDataSource(file)){\n    OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n    assertEquals(reader.getReaderRowCount(),5);\n    assertEquals(reader.getFileRowCount(),5);\n    assertEquals(reader.getSplitLength(),file.length());\n    assertEquals(reader.nextBatch(),5);\n    Block column0=reader.readBlock(0);\n    assertEquals(column0.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column0.isNull(i),false);\n    }\n    assertEquals(BIGINT.getLong(column0,0),123L);\n    assertEquals(BIGINT.getLong(column0,1),777L);\n    assertEquals(BIGINT.getLong(column0,2),456L);\n    assertEquals(BIGINT.getLong(column0,3),888L);\n    assertEquals(BIGINT.getLong(column0,4),999L);\n    Block column1=reader.readBlock(1);\n    assertEquals(column1.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column1.isNull(i),false);\n    }\n    assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n    assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"sky\"));\n    assertEquals(createVarcharType(20).getSlice(column1,2),utf8Slice(\"bye\"));\n    assertEquals(createVarcharType(20).getSlice(column1,3),utf8Slice(\"world\"));\n    assertEquals(createVarcharType(20).getSlice(column1,4),utf8Slice(\"done\"));\n    Block column2=reader.readBlock(2);\n    assertEquals(column2.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column2.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,3,4)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,2),arrayBlockOf(BIGINT,5,6)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,3),arrayBlockOf(BIGINT,7,8)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,4),arrayBlockOf(BIGINT,9,10)));\n    Block column3=reader.readBlock(3);\n    assertEquals(column3.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column3.isNull(i),false);\n    }\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,3),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true)));\n    Block column4=reader.readBlock(4);\n    assertEquals(column4.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column4.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,2),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,3),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null)));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,4),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10))));\n    assertEquals(reader.nextBatch(),-1);\n    OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n    assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n  }\n   BitSet rowsToDelete=new BitSet(5);\n  rowsToDelete.set(1);\n  rowsToDelete.set(3);\n  rowsToDelete.set(4);\n  File newFile=new File(temporary,randomUUID().toString());\n  FileSystem fileSystem=new LocalOrcDataEnvironment().getFileSystem(DEFAULT_RAPTOR_CONTEXT);\n  OrcFileInfo info=createFileRewriter().rewrite(fileSystem,getColumnTypes(columnIds,columnTypes),path(file),path(newFile),rowsToDelete);\n  assertEquals(info.getRowCount(),2);\n  assertBetweenInclusive(info.getUncompressedSize(),94L,118L * 2);\n  try (OrcDataSource dataSource=fileOrcDataSource(newFile)){\n    OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n    assertEquals(reader.getReaderRowCount(),2);\n    assertEquals(reader.getFileRowCount(),2);\n    assertEquals(reader.getSplitLength(),newFile.length());\n    assertEquals(reader.nextBatch(),2);\n    Block column0=reader.readBlock(0);\n    assertEquals(column0.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column0.isNull(i),false);\n    }\n    assertEquals(BIGINT.getLong(column0,0),123L);\n    assertEquals(BIGINT.getLong(column0,1),456L);\n    Block column1=reader.readBlock(1);\n    assertEquals(column1.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column1.isNull(i),false);\n    }\n    assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n    assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"bye\"));\n    Block column2=reader.readBlock(2);\n    assertEquals(column2.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column2.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,5,6)));\n    Block column3=reader.readBlock(3);\n    assertEquals(column3.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column3.isNull(i),false);\n    }\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n    Block column4=reader.readBlock(4);\n    assertEquals(column4.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column4.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n    assertEquals(reader.nextBatch(),-1);\n    OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n    assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1550,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 143,
        "startColumnNumber" : 66,
        "endLineNumber" : 143,
        "endColumnNumber" : 120
      },
      "nodeContext" : "mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"k2\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 199,
      "startColumnNumber" : 144,
      "endLineNumber" : 199,
      "endColumnNumber" : 148
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 199,
        "startColumnNumber" : 102,
        "endLineNumber" : 199,
        "endColumnNumber" : 156
      },
      "nodeContext" : "mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 199,
        "startColumnNumber" : 23,
        "endLineNumber" : 199,
        "endColumnNumber" : 157
      },
      "nodeContext" : "mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 199,
        "startColumnNumber" : 12,
        "endLineNumber" : 199,
        "endColumnNumber" : 158
      },
      "nodeContext" : "assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 199,
        "startColumnNumber" : 12,
        "endLineNumber" : 199,
        "endColumnNumber" : 159
      },
      "nodeContext" : "assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4951,
        "startLineNumber" : 151,
        "startColumnNumber" : 65,
        "endLineNumber" : 226,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n  assertEquals(reader.getReaderRowCount(),5);\n  assertEquals(reader.getFileRowCount(),5);\n  assertEquals(reader.getSplitLength(),file.length());\n  assertEquals(reader.nextBatch(),5);\n  Block column0=reader.readBlock(0);\n  assertEquals(column0.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column0.isNull(i),false);\n  }\n  assertEquals(BIGINT.getLong(column0,0),123L);\n  assertEquals(BIGINT.getLong(column0,1),777L);\n  assertEquals(BIGINT.getLong(column0,2),456L);\n  assertEquals(BIGINT.getLong(column0,3),888L);\n  assertEquals(BIGINT.getLong(column0,4),999L);\n  Block column1=reader.readBlock(1);\n  assertEquals(column1.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column1.isNull(i),false);\n  }\n  assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n  assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"sky\"));\n  assertEquals(createVarcharType(20).getSlice(column1,2),utf8Slice(\"bye\"));\n  assertEquals(createVarcharType(20).getSlice(column1,3),utf8Slice(\"world\"));\n  assertEquals(createVarcharType(20).getSlice(column1,4),utf8Slice(\"done\"));\n  Block column2=reader.readBlock(2);\n  assertEquals(column2.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column2.isNull(i),false);\n  }\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,3,4)));\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,2),arrayBlockOf(BIGINT,5,6)));\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,3),arrayBlockOf(BIGINT,7,8)));\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,4),arrayBlockOf(BIGINT,9,10)));\n  Block column3=reader.readBlock(3);\n  assertEquals(column3.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column3.isNull(i),false);\n  }\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)));\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,3),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true)));\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true)));\n  Block column4=reader.readBlock(4);\n  assertEquals(column4.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column4.isNull(i),false);\n  }\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6))));\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,2),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,3),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null)));\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,4),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10))));\n  assertEquals(reader.nextBatch(),-1);\n  OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n  assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5008,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 226,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (OrcDataSource dataSource=fileOrcDataSource(file)){\n  OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n  assertEquals(reader.getReaderRowCount(),5);\n  assertEquals(reader.getFileRowCount(),5);\n  assertEquals(reader.getSplitLength(),file.length());\n  assertEquals(reader.nextBatch(),5);\n  Block column0=reader.readBlock(0);\n  assertEquals(column0.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column0.isNull(i),false);\n  }\n  assertEquals(BIGINT.getLong(column0,0),123L);\n  assertEquals(BIGINT.getLong(column0,1),777L);\n  assertEquals(BIGINT.getLong(column0,2),456L);\n  assertEquals(BIGINT.getLong(column0,3),888L);\n  assertEquals(BIGINT.getLong(column0,4),999L);\n  Block column1=reader.readBlock(1);\n  assertEquals(column1.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column1.isNull(i),false);\n  }\n  assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n  assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"sky\"));\n  assertEquals(createVarcharType(20).getSlice(column1,2),utf8Slice(\"bye\"));\n  assertEquals(createVarcharType(20).getSlice(column1,3),utf8Slice(\"world\"));\n  assertEquals(createVarcharType(20).getSlice(column1,4),utf8Slice(\"done\"));\n  Block column2=reader.readBlock(2);\n  assertEquals(column2.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column2.isNull(i),false);\n  }\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,3,4)));\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,2),arrayBlockOf(BIGINT,5,6)));\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,3),arrayBlockOf(BIGINT,7,8)));\n  assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,4),arrayBlockOf(BIGINT,9,10)));\n  Block column3=reader.readBlock(3);\n  assertEquals(column3.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column3.isNull(i),false);\n  }\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)));\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,3),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true)));\n  assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true)));\n  Block column4=reader.readBlock(4);\n  assertEquals(column4.getPositionCount(),5);\n  for (int i=0; i < 5; i++) {\n    assertEquals(column4.isNull(i),false);\n  }\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6))));\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,2),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,3),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null)));\n  assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,4),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10))));\n  assertEquals(reader.nextBatch(),-1);\n  OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n  assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 703,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10967,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 300,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionAndTypeManager functionAndTypeManager=createTestFunctionAndTypeManager();\n  ArrayType arrayType=new ArrayType(BIGINT);\n  ArrayType arrayOfArrayType=new ArrayType(arrayType);\n  Type mapType=functionAndTypeManager.getParameterizedType(StandardTypes.MAP,ImmutableList.of(TypeSignatureParameter.of(createVarcharType(5).getTypeSignature()),TypeSignatureParameter.of(BOOLEAN.getTypeSignature())));\n  List<Long> columnIds=ImmutableList.of(3L,7L,9L,10L,11L,12L);\n  DecimalType decimalType=DecimalType.createDecimalType(4,4);\n  List<Type> columnTypes=ImmutableList.of(BIGINT,createVarcharType(20),arrayType,mapType,arrayOfArrayType,decimalType);\n  File file=new File(temporary,randomUUID().toString());\n  try (FileWriter writer=OrcTestingUtil.createFileWriter(columnIds,columnTypes,file)){\n    List<Page> pages=rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build();\n    writer.appendPages(pages);\n  }\n   try (OrcDataSource dataSource=fileOrcDataSource(file)){\n    OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n    assertEquals(reader.getReaderRowCount(),5);\n    assertEquals(reader.getFileRowCount(),5);\n    assertEquals(reader.getSplitLength(),file.length());\n    assertEquals(reader.nextBatch(),5);\n    Block column0=reader.readBlock(0);\n    assertEquals(column0.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column0.isNull(i),false);\n    }\n    assertEquals(BIGINT.getLong(column0,0),123L);\n    assertEquals(BIGINT.getLong(column0,1),777L);\n    assertEquals(BIGINT.getLong(column0,2),456L);\n    assertEquals(BIGINT.getLong(column0,3),888L);\n    assertEquals(BIGINT.getLong(column0,4),999L);\n    Block column1=reader.readBlock(1);\n    assertEquals(column1.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column1.isNull(i),false);\n    }\n    assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n    assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"sky\"));\n    assertEquals(createVarcharType(20).getSlice(column1,2),utf8Slice(\"bye\"));\n    assertEquals(createVarcharType(20).getSlice(column1,3),utf8Slice(\"world\"));\n    assertEquals(createVarcharType(20).getSlice(column1,4),utf8Slice(\"done\"));\n    Block column2=reader.readBlock(2);\n    assertEquals(column2.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column2.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,3,4)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,2),arrayBlockOf(BIGINT,5,6)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,3),arrayBlockOf(BIGINT,7,8)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,4),arrayBlockOf(BIGINT,9,10)));\n    Block column3=reader.readBlock(3);\n    assertEquals(column3.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column3.isNull(i),false);\n    }\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,3),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true)));\n    Block column4=reader.readBlock(4);\n    assertEquals(column4.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column4.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,2),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,3),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null)));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,4),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10))));\n    assertEquals(reader.nextBatch(),-1);\n    OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n    assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n  }\n   BitSet rowsToDelete=new BitSet(5);\n  rowsToDelete.set(1);\n  rowsToDelete.set(3);\n  rowsToDelete.set(4);\n  File newFile=new File(temporary,randomUUID().toString());\n  FileSystem fileSystem=new LocalOrcDataEnvironment().getFileSystem(DEFAULT_RAPTOR_CONTEXT);\n  OrcFileInfo info=createFileRewriter().rewrite(fileSystem,getColumnTypes(columnIds,columnTypes),path(file),path(newFile),rowsToDelete);\n  assertEquals(info.getRowCount(),2);\n  assertBetweenInclusive(info.getUncompressedSize(),94L,118L * 2);\n  try (OrcDataSource dataSource=fileOrcDataSource(newFile)){\n    OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n    assertEquals(reader.getReaderRowCount(),2);\n    assertEquals(reader.getFileRowCount(),2);\n    assertEquals(reader.getSplitLength(),newFile.length());\n    assertEquals(reader.nextBatch(),2);\n    Block column0=reader.readBlock(0);\n    assertEquals(column0.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column0.isNull(i),false);\n    }\n    assertEquals(BIGINT.getLong(column0,0),123L);\n    assertEquals(BIGINT.getLong(column0,1),456L);\n    Block column1=reader.readBlock(1);\n    assertEquals(column1.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column1.isNull(i),false);\n    }\n    assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n    assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"bye\"));\n    Block column2=reader.readBlock(2);\n    assertEquals(column2.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column2.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,5,6)));\n    Block column3=reader.readBlock(3);\n    assertEquals(column3.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column3.isNull(i),false);\n    }\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n    Block column4=reader.readBlock(4);\n    assertEquals(column4.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column4.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n    assertEquals(reader.nextBatch(),-1);\n    OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n    assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1542,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11036,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 300,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRewrite() throws Exception {\n  FunctionAndTypeManager functionAndTypeManager=createTestFunctionAndTypeManager();\n  ArrayType arrayType=new ArrayType(BIGINT);\n  ArrayType arrayOfArrayType=new ArrayType(arrayType);\n  Type mapType=functionAndTypeManager.getParameterizedType(StandardTypes.MAP,ImmutableList.of(TypeSignatureParameter.of(createVarcharType(5).getTypeSignature()),TypeSignatureParameter.of(BOOLEAN.getTypeSignature())));\n  List<Long> columnIds=ImmutableList.of(3L,7L,9L,10L,11L,12L);\n  DecimalType decimalType=DecimalType.createDecimalType(4,4);\n  List<Type> columnTypes=ImmutableList.of(BIGINT,createVarcharType(20),arrayType,mapType,arrayOfArrayType,decimalType);\n  File file=new File(temporary,randomUUID().toString());\n  try (FileWriter writer=OrcTestingUtil.createFileWriter(columnIds,columnTypes,file)){\n    List<Page> pages=rowPagesBuilder(columnTypes).row(123L,\"hello\",arrayBlockOf(BIGINT,1,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5)),new BigDecimal(\"2.3\")).row(777L,\"sky\",arrayBlockOf(BIGINT,3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6)),new BigDecimal(\"2.3\")).row(456L,\"bye\",arrayBlockOf(BIGINT,5,6),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7)),new BigDecimal(\"2.3\")).row(888L,\"world\",arrayBlockOf(BIGINT,7,8),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null),new BigDecimal(\"2.3\")).row(999L,\"done\",arrayBlockOf(BIGINT,9,10),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10)),new BigDecimal(\"2.3\")).build();\n    writer.appendPages(pages);\n  }\n   try (OrcDataSource dataSource=fileOrcDataSource(file)){\n    OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n    assertEquals(reader.getReaderRowCount(),5);\n    assertEquals(reader.getFileRowCount(),5);\n    assertEquals(reader.getSplitLength(),file.length());\n    assertEquals(reader.nextBatch(),5);\n    Block column0=reader.readBlock(0);\n    assertEquals(column0.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column0.isNull(i),false);\n    }\n    assertEquals(BIGINT.getLong(column0,0),123L);\n    assertEquals(BIGINT.getLong(column0,1),777L);\n    assertEquals(BIGINT.getLong(column0,2),456L);\n    assertEquals(BIGINT.getLong(column0,3),888L);\n    assertEquals(BIGINT.getLong(column0,4),999L);\n    Block column1=reader.readBlock(1);\n    assertEquals(column1.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column1.isNull(i),false);\n    }\n    assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n    assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"sky\"));\n    assertEquals(createVarcharType(20).getSlice(column1,2),utf8Slice(\"bye\"));\n    assertEquals(createVarcharType(20).getSlice(column1,3),utf8Slice(\"world\"));\n    assertEquals(createVarcharType(20).getSlice(column1,4),utf8Slice(\"done\"));\n    Block column2=reader.readBlock(2);\n    assertEquals(column2.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column2.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,3,4)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,2),arrayBlockOf(BIGINT,5,6)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,3),arrayBlockOf(BIGINT,7,8)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,4),arrayBlockOf(BIGINT,9,10)));\n    Block column3=reader.readBlock(3);\n    assertEquals(column3.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column3.isNull(i),false);\n    }\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,2),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,3),mapBlockOf(createVarcharType(5),BOOLEAN,\"k4\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,4),mapBlockOf(createVarcharType(5),BOOLEAN,\"k5\",true)));\n    Block column4=reader.readBlock(4);\n    assertEquals(column4.getPositionCount(),5);\n    for (int i=0; i < 5; i++) {\n      assertEquals(column4.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,2),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,3),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null)));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,4),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10))));\n    assertEquals(reader.nextBatch(),-1);\n    OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n    assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n  }\n   BitSet rowsToDelete=new BitSet(5);\n  rowsToDelete.set(1);\n  rowsToDelete.set(3);\n  rowsToDelete.set(4);\n  File newFile=new File(temporary,randomUUID().toString());\n  FileSystem fileSystem=new LocalOrcDataEnvironment().getFileSystem(DEFAULT_RAPTOR_CONTEXT);\n  OrcFileInfo info=createFileRewriter().rewrite(fileSystem,getColumnTypes(columnIds,columnTypes),path(file),path(newFile),rowsToDelete);\n  assertEquals(info.getRowCount(),2);\n  assertBetweenInclusive(info.getUncompressedSize(),94L,118L * 2);\n  try (OrcDataSource dataSource=fileOrcDataSource(newFile)){\n    OrcBatchRecordReader reader=createReader(dataSource,columnIds,columnTypes);\n    assertEquals(reader.getReaderRowCount(),2);\n    assertEquals(reader.getFileRowCount(),2);\n    assertEquals(reader.getSplitLength(),newFile.length());\n    assertEquals(reader.nextBatch(),2);\n    Block column0=reader.readBlock(0);\n    assertEquals(column0.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column0.isNull(i),false);\n    }\n    assertEquals(BIGINT.getLong(column0,0),123L);\n    assertEquals(BIGINT.getLong(column0,1),456L);\n    Block column1=reader.readBlock(1);\n    assertEquals(column1.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column1.isNull(i),false);\n    }\n    assertEquals(createVarcharType(20).getSlice(column1,0),utf8Slice(\"hello\"));\n    assertEquals(createVarcharType(20).getSlice(column1,1),utf8Slice(\"bye\"));\n    Block column2=reader.readBlock(2);\n    assertEquals(column2.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column2.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,0),arrayBlockOf(BIGINT,1,2)));\n    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(column2,1),arrayBlockOf(BIGINT,5,6)));\n    Block column3=reader.readBlock(3);\n    assertEquals(column3.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column3.isNull(i),false);\n    }\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,0),mapBlockOf(createVarcharType(5),BOOLEAN,\"k1\",true)));\n    assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k3\",true)));\n    Block column4=reader.readBlock(4);\n    assertEquals(column4.getPositionCount(),2);\n    for (int i=0; i < 2; i++) {\n      assertEquals(column4.isNull(i),false);\n    }\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));\n    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(column4,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));\n    assertEquals(reader.nextBatch(),-1);\n    OrcFileMetadata orcFileMetadata=METADATA_CODEC.fromJson(reader.getUserMetadata().get(OrcFileMetadata.KEY).getBytes());\n    assertEquals(orcFileMetadata,new OrcFileMetadata(ImmutableMap.<Long,TypeSignature>builder().put(3L,BIGINT.getTypeSignature()).put(7L,createVarcharType(20).getTypeSignature()).put(9L,arrayType.getTypeSignature()).put(10L,mapType.getTypeSignature()).put(11L,arrayOfArrayType.getTypeSignature()).put(12L,decimalType.getTypeSignature()).build()));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1550,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 199,
        "startColumnNumber" : 12,
        "endLineNumber" : 199,
        "endColumnNumber" : 159
      },
      "nodeContext" : "assertTrue(mapBlocksEqual(createVarcharType(5),BOOLEAN,arrayType.getObject(column3,1),mapBlockOf(createVarcharType(5),BOOLEAN,\"k2\",false)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 143,
    "startColumnNumber" : 108,
    "endLineNumber" : 143,
    "endColumnNumber" : 112
  }, {
    "charLength" : 4,
    "startLineNumber" : 199,
    "startColumnNumber" : 144,
    "endLineNumber" : 199,
    "endColumnNumber" : 148
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}