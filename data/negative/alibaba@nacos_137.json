{
  "id" : 137,
  "expression" : "entry.getValue()",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/naming/src/main/java/com/alibaba/nacos/naming/controllers/ServiceController.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 302,
      "startColumnNumber" : 96,
      "endLineNumber" : 302,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 302,
        "startColumnNumber" : 76,
        "endLineNumber" : 302,
        "endColumnNumber" : 113
      },
      "nodeContext" : "StringUtils.isEmpty(entry.getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 302,
        "startColumnNumber" : 20,
        "endLineNumber" : 302,
        "endColumnNumber" : 113
      },
      "nodeContext" : "entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 302,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1055,
        "startLineNumber" : 301,
        "startColumnNumber" : 94,
        "endLineNumber" : 322,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n    continue;\n  }\n  String serviceName=entry.getKey();\n  String checksum=entry.getValue();\n  Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n  if (service == null) {\n    continue;\n  }\n  service.recalculateChecksum();\n  if (!checksum.equals(service.getChecksum())) {\n    if (Loggers.SRV_LOG.isDebugEnabled()) {\n      Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n    }\n    serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 322,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n  if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n    continue;\n  }\n  String serviceName=entry.getKey();\n  String checksum=entry.getValue();\n  Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n  if (service == null) {\n    continue;\n  }\n  service.recalculateChecksum();\n  if (!checksum.equals(service.getChecksum())) {\n    if (Loggers.SRV_LOG.isDebugEnabled()) {\n      Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n    }\n    serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1486,
        "startLineNumber" : 293,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ServiceManager.ServiceChecksum checksums=JacksonUtils.toObj(statuses,ServiceManager.ServiceChecksum.class);\n  if (checksums == null) {\n    Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: null\");\n    return \"fail\";\n  }\n  for (  Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n    if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n      continue;\n    }\n    String serviceName=entry.getKey();\n    String checksum=entry.getValue();\n    Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n    if (service == null) {\n      continue;\n    }\n    service.recalculateChecksum();\n    if (!checksum.equals(service.getChecksum())) {\n      if (Loggers.SRV_LOG.isDebugEnabled()) {\n        Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n      }\n      serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1614,
        "startLineNumber" : 293,
        "startColumnNumber" : 8,
        "endLineNumber" : 325,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ServiceManager.ServiceChecksum checksums=JacksonUtils.toObj(statuses,ServiceManager.ServiceChecksum.class);\n  if (checksums == null) {\n    Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: null\");\n    return \"fail\";\n  }\n  for (  Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n    if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n      continue;\n    }\n    String serviceName=entry.getKey();\n    String checksum=entry.getValue();\n    Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n    if (service == null) {\n      continue;\n    }\n    service.recalculateChecksum();\n    if (!checksum.equals(service.getChecksum())) {\n      if (Loggers.SRV_LOG.isDebugEnabled()) {\n        Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n      }\n      serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n    }\n  }\n}\n catch (Exception e) {\n  Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: \" + statuses,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2228,
        "startLineNumber" : 279,
        "startColumnNumber" : 77,
        "endLineNumber" : 328,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String entity=IoUtils.toString(request.getInputStream(),\"UTF-8\");\n  String value=URLDecoder.decode(entity,\"UTF-8\");\n  JsonNode json=JacksonUtils.toObj(value);\n  String statuses=json.get(\"statuses\").asText();\n  String serverIp=json.get(\"clientIP\").asText();\n  if (!memberManager.hasMember(serverIp)) {\n    throw new NacosException(NacosException.INVALID_PARAM,\"ip: \" + serverIp + \" is not in serverlist\");\n  }\n  try {\n    ServiceManager.ServiceChecksum checksums=JacksonUtils.toObj(statuses,ServiceManager.ServiceChecksum.class);\n    if (checksums == null) {\n      Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: null\");\n      return \"fail\";\n    }\n    for (    Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n      if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n        continue;\n      }\n      String serviceName=entry.getKey();\n      String checksum=entry.getValue();\n      Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n      if (service == null) {\n        continue;\n      }\n      service.recalculateChecksum();\n      if (!checksum.equals(service.getChecksum())) {\n        if (Loggers.SRV_LOG.isDebugEnabled()) {\n          Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n        }\n        serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n      }\n    }\n  }\n catch (  Exception e) {\n    Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: \" + statuses,e);\n  }\n  return \"ok\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2545,
        "startLineNumber" : 271,
        "startColumnNumber" : 4,
        "endLineNumber" : 328,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Check service status whether latest.\n * @param request http request\n * @return 'ok' if service status if latest, otherwise 'fail' or exception\n * @throws Exception exception\n */\n@PostMapping(\"/status\") public String serviceStatus(HttpServletRequest request) throws Exception {\n  String entity=IoUtils.toString(request.getInputStream(),\"UTF-8\");\n  String value=URLDecoder.decode(entity,\"UTF-8\");\n  JsonNode json=JacksonUtils.toObj(value);\n  String statuses=json.get(\"statuses\").asText();\n  String serverIp=json.get(\"clientIP\").asText();\n  if (!memberManager.hasMember(serverIp)) {\n    throw new NacosException(NacosException.INVALID_PARAM,\"ip: \" + serverIp + \" is not in serverlist\");\n  }\n  try {\n    ServiceManager.ServiceChecksum checksums=JacksonUtils.toObj(statuses,ServiceManager.ServiceChecksum.class);\n    if (checksums == null) {\n      Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: null\");\n      return \"fail\";\n    }\n    for (    Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n      if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n        continue;\n      }\n      String serviceName=entry.getKey();\n      String checksum=entry.getValue();\n      Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n      if (service == null) {\n        continue;\n      }\n      service.recalculateChecksum();\n      if (!checksum.equals(service.getChecksum())) {\n        if (Loggers.SRV_LOG.isDebugEnabled()) {\n          Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n        }\n        serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n      }\n    }\n  }\n catch (  Exception e) {\n    Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: \" + statuses,e);\n  }\n  return \"ok\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 252,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 302,
        "startColumnNumber" : 20,
        "endLineNumber" : 302,
        "endColumnNumber" : 113
      },
      "nodeContext" : "entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 306,
      "startColumnNumber" : 34,
      "endLineNumber" : 306,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 306,
        "startColumnNumber" : 23,
        "endLineNumber" : 306,
        "endColumnNumber" : 50
      },
      "nodeContext" : "checksum=entry.getValue()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 306,
        "startColumnNumber" : 16,
        "endLineNumber" : 306,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String checksum=entry.getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1055,
        "startLineNumber" : 301,
        "startColumnNumber" : 94,
        "endLineNumber" : 322,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n    continue;\n  }\n  String serviceName=entry.getKey();\n  String checksum=entry.getValue();\n  Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n  if (service == null) {\n    continue;\n  }\n  service.recalculateChecksum();\n  if (!checksum.equals(service.getChecksum())) {\n    if (Loggers.SRV_LOG.isDebugEnabled()) {\n      Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n    }\n    serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 322,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n  if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n    continue;\n  }\n  String serviceName=entry.getKey();\n  String checksum=entry.getValue();\n  Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n  if (service == null) {\n    continue;\n  }\n  service.recalculateChecksum();\n  if (!checksum.equals(service.getChecksum())) {\n    if (Loggers.SRV_LOG.isDebugEnabled()) {\n      Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n    }\n    serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1486,
        "startLineNumber" : 293,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ServiceManager.ServiceChecksum checksums=JacksonUtils.toObj(statuses,ServiceManager.ServiceChecksum.class);\n  if (checksums == null) {\n    Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: null\");\n    return \"fail\";\n  }\n  for (  Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n    if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n      continue;\n    }\n    String serviceName=entry.getKey();\n    String checksum=entry.getValue();\n    Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n    if (service == null) {\n      continue;\n    }\n    service.recalculateChecksum();\n    if (!checksum.equals(service.getChecksum())) {\n      if (Loggers.SRV_LOG.isDebugEnabled()) {\n        Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n      }\n      serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1614,
        "startLineNumber" : 293,
        "startColumnNumber" : 8,
        "endLineNumber" : 325,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ServiceManager.ServiceChecksum checksums=JacksonUtils.toObj(statuses,ServiceManager.ServiceChecksum.class);\n  if (checksums == null) {\n    Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: null\");\n    return \"fail\";\n  }\n  for (  Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n    if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n      continue;\n    }\n    String serviceName=entry.getKey();\n    String checksum=entry.getValue();\n    Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n    if (service == null) {\n      continue;\n    }\n    service.recalculateChecksum();\n    if (!checksum.equals(service.getChecksum())) {\n      if (Loggers.SRV_LOG.isDebugEnabled()) {\n        Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n      }\n      serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n    }\n  }\n}\n catch (Exception e) {\n  Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: \" + statuses,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2228,
        "startLineNumber" : 279,
        "startColumnNumber" : 77,
        "endLineNumber" : 328,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String entity=IoUtils.toString(request.getInputStream(),\"UTF-8\");\n  String value=URLDecoder.decode(entity,\"UTF-8\");\n  JsonNode json=JacksonUtils.toObj(value);\n  String statuses=json.get(\"statuses\").asText();\n  String serverIp=json.get(\"clientIP\").asText();\n  if (!memberManager.hasMember(serverIp)) {\n    throw new NacosException(NacosException.INVALID_PARAM,\"ip: \" + serverIp + \" is not in serverlist\");\n  }\n  try {\n    ServiceManager.ServiceChecksum checksums=JacksonUtils.toObj(statuses,ServiceManager.ServiceChecksum.class);\n    if (checksums == null) {\n      Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: null\");\n      return \"fail\";\n    }\n    for (    Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n      if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n        continue;\n      }\n      String serviceName=entry.getKey();\n      String checksum=entry.getValue();\n      Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n      if (service == null) {\n        continue;\n      }\n      service.recalculateChecksum();\n      if (!checksum.equals(service.getChecksum())) {\n        if (Loggers.SRV_LOG.isDebugEnabled()) {\n          Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n        }\n        serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n      }\n    }\n  }\n catch (  Exception e) {\n    Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: \" + statuses,e);\n  }\n  return \"ok\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2545,
        "startLineNumber" : 271,
        "startColumnNumber" : 4,
        "endLineNumber" : 328,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Check service status whether latest.\n * @param request http request\n * @return 'ok' if service status if latest, otherwise 'fail' or exception\n * @throws Exception exception\n */\n@PostMapping(\"/status\") public String serviceStatus(HttpServletRequest request) throws Exception {\n  String entity=IoUtils.toString(request.getInputStream(),\"UTF-8\");\n  String value=URLDecoder.decode(entity,\"UTF-8\");\n  JsonNode json=JacksonUtils.toObj(value);\n  String statuses=json.get(\"statuses\").asText();\n  String serverIp=json.get(\"clientIP\").asText();\n  if (!memberManager.hasMember(serverIp)) {\n    throw new NacosException(NacosException.INVALID_PARAM,\"ip: \" + serverIp + \" is not in serverlist\");\n  }\n  try {\n    ServiceManager.ServiceChecksum checksums=JacksonUtils.toObj(statuses,ServiceManager.ServiceChecksum.class);\n    if (checksums == null) {\n      Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: null\");\n      return \"fail\";\n    }\n    for (    Map.Entry<String,String> entry : checksums.serviceName2Checksum.entrySet()) {\n      if (entry == null || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) {\n        continue;\n      }\n      String serviceName=entry.getKey();\n      String checksum=entry.getValue();\n      Service service=serviceManager.getService(checksums.namespaceId,serviceName);\n      if (service == null) {\n        continue;\n      }\n      service.recalculateChecksum();\n      if (!checksum.equals(service.getChecksum())) {\n        if (Loggers.SRV_LOG.isDebugEnabled()) {\n          Loggers.SRV_LOG.debug(\"checksum of {} is not consistent, remote: {}, checksum: {}, local: {}\",serviceName,serverIp,checksum,service.getChecksum());\n        }\n        serviceManager.addUpdatedServiceToQueue(checksums.namespaceId,serviceName,serverIp,checksum);\n      }\n    }\n  }\n catch (  Exception e) {\n    Loggers.SRV_LOG.warn(\"[DOMAIN-STATUS] receive malformed data: \" + statuses,e);\n  }\n  return \"ok\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 252,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 306,
        "startColumnNumber" : 16,
        "endLineNumber" : 306,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String checksum=entry.getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 302,
    "startColumnNumber" : 96,
    "endLineNumber" : 302,
    "endColumnNumber" : 112
  }, {
    "charLength" : 16,
    "startLineNumber" : 306,
    "startColumnNumber" : 34,
    "endLineNumber" : 306,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}