{
  "id" : 20,
  "expression" : "results",
  "projectName" : "apache@flink",
  "commitID" : "0e6f33b1ad9607faefd2f8fd7fdf4d62f612f6df",
  "filePath" : "flink-connectors/flink-connector-pulsar/src/main/java/org/apache/flink/connector/pulsar/sink/writer/topic/TopicMetadataListener.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 123,
      "startColumnNumber" : 20,
      "endLineNumber" : 123,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 123,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 74
      },
      "nodeContext" : "results.add(topicNameWithNonPartition(entry.getKey()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 123,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 75
      },
      "nodeContext" : "results.add(topicNameWithNonPartition(entry.getKey()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 122,
        "startColumnNumber" : 54,
        "endLineNumber" : 124,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  results.add(topicNameWithNonPartition(entry.getKey()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (partitionNums == NON_PARTITIONED) {\n  results.add(topicNameWithNonPartition(entry.getKey()));\n}\n else {\n  for (int i=0; i < partitionNums; i++) {\n    results.add(topicNameWithPartition(entry.getKey(),i));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 491,
        "startLineNumber" : 119,
        "startColumnNumber" : 78,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int partitionNums=entry.getValue();\n  if (partitionNums == NON_PARTITIONED) {\n    results.add(topicNameWithNonPartition(entry.getKey()));\n  }\n else {\n    for (int i=0; i < partitionNums; i++) {\n      results.add(topicNameWithPartition(entry.getKey(),i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n  int partitionNums=entry.getValue();\n  if (partitionNums == NON_PARTITIONED) {\n    results.add(topicNameWithNonPartition(entry.getKey()));\n  }\n else {\n    for (int i=0; i < partitionNums; i++) {\n      results.add(topicNameWithPartition(entry.getKey(),i));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 749,
        "startLineNumber" : 117,
        "startColumnNumber" : 79,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 858,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 115,
        "startColumnNumber" : 42,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Return all the available topic partitions. We would recalculate the partitions if the topic metadata has been changed. Otherwise, we would return the cached result for better performance.\n */\npublic List<String> availableTopics(){\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 123,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 75
      },
      "nodeContext" : "results.add(topicNameWithNonPartition(entry.getKey()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 126,
      "startColumnNumber" : 24,
      "endLineNumber" : 126,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 126,
        "startColumnNumber" : 24,
        "endLineNumber" : 126,
        "endColumnNumber" : 78
      },
      "nodeContext" : "results.add(topicNameWithPartition(entry.getKey(),i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 126,
        "startColumnNumber" : 24,
        "endLineNumber" : 126,
        "endColumnNumber" : 79
      },
      "nodeContext" : "results.add(topicNameWithPartition(entry.getKey(),i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 125,
        "startColumnNumber" : 60,
        "endLineNumber" : 127,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  results.add(topicNameWithPartition(entry.getKey(),i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 125,
        "startColumnNumber" : 20,
        "endLineNumber" : 127,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < partitionNums; i++) {\n  results.add(topicNameWithPartition(entry.getKey(),i));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 124,
        "startColumnNumber" : 23,
        "endLineNumber" : 128,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (int i=0; i < partitionNums; i++) {\n    results.add(topicNameWithPartition(entry.getKey(),i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (partitionNums == NON_PARTITIONED) {\n  results.add(topicNameWithNonPartition(entry.getKey()));\n}\n else {\n  for (int i=0; i < partitionNums; i++) {\n    results.add(topicNameWithPartition(entry.getKey(),i));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 491,
        "startLineNumber" : 119,
        "startColumnNumber" : 78,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int partitionNums=entry.getValue();\n  if (partitionNums == NON_PARTITIONED) {\n    results.add(topicNameWithNonPartition(entry.getKey()));\n  }\n else {\n    for (int i=0; i < partitionNums; i++) {\n      results.add(topicNameWithPartition(entry.getKey(),i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n  int partitionNums=entry.getValue();\n  if (partitionNums == NON_PARTITIONED) {\n    results.add(topicNameWithNonPartition(entry.getKey()));\n  }\n else {\n    for (int i=0; i < partitionNums; i++) {\n      results.add(topicNameWithPartition(entry.getKey(),i));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 749,
        "startLineNumber" : 117,
        "startColumnNumber" : 79,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 858,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 115,
        "startColumnNumber" : 42,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Return all the available topic partitions. We would recalculate the partitions if the topic metadata has been changed. Otherwise, we would return the cached result for better performance.\n */\npublic List<String> availableTopics(){\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 126,
        "startColumnNumber" : 24,
        "endLineNumber" : 126,
        "endColumnNumber" : 79
      },
      "nodeContext" : "results.add(topicNameWithPartition(entry.getKey(),i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 131,
      "startColumnNumber" : 12,
      "endLineNumber" : 131,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 45
      },
      "nodeContext" : "results.addAll(partitionedTopics)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 46
      },
      "nodeContext" : "results.addAll(partitionedTopics);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 749,
        "startLineNumber" : 117,
        "startColumnNumber" : 79,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 858,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 115,
        "startColumnNumber" : 42,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Return all the available topic partitions. We would recalculate the partitions if the topic metadata has been changed. Otherwise, we would return the cached result for better performance.\n */\npublic List<String> availableTopics(){\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 46
      },
      "nodeContext" : "results.addAll(partitionedTopics);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 132,
      "startColumnNumber" : 56,
      "endLineNumber" : 132,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 132,
        "startColumnNumber" : 35,
        "endLineNumber" : 132,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ImmutableList.copyOf(results)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 64
      },
      "nodeContext" : "this.availableTopics=ImmutableList.copyOf(results)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 65
      },
      "nodeContext" : "this.availableTopics=ImmutableList.copyOf(results);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 749,
        "startLineNumber" : 117,
        "startColumnNumber" : 79,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 858,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 115,
        "startColumnNumber" : 42,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Return all the available topic partitions. We would recalculate the partitions if the topic metadata has been changed. Otherwise, we would return the cached result for better performance.\n */\npublic List<String> availableTopics(){\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 65
      },
      "nodeContext" : "this.availableTopics=ImmutableList.copyOf(results);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 123,
    "startColumnNumber" : 20,
    "endLineNumber" : 123,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 126,
    "startColumnNumber" : 24,
    "endLineNumber" : 126,
    "endColumnNumber" : 31
  }, {
    "charLength" : 7,
    "startLineNumber" : 131,
    "startColumnNumber" : 12,
    "endLineNumber" : 131,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 132,
    "startColumnNumber" : 56,
    "endLineNumber" : 132,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}