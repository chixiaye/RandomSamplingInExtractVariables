{
  "id" : 48,
  "expression" : "task",
  "projectName" : "ben-manes@caffeine",
  "commitID" : "30ca3d80d9dc7aa20adceacfc5fff1659bbadb8e",
  "filePath" : "src/main/java/com/github/benmanes/caffeine/cache/BoundedLocalCache.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "task",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1004,
      "startColumnNumber" : 8,
      "endLineNumber" : 1004,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1004,
        "startColumnNumber" : 8,
        "endLineNumber" : 1004,
        "endColumnNumber" : 15
      },
      "nodeContext" : "task[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 1004,
        "startColumnNumber" : 8,
        "endLineNumber" : 1004,
        "endColumnNumber" : 46
      },
      "nodeContext" : "task[0]=new AddTask(newNode,weight)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 1004,
        "startColumnNumber" : 8,
        "endLineNumber" : 1004,
        "endColumnNumber" : 47
      },
      "nodeContext" : "task[0]=new AddTask(newNode,weight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 996,
        "startColumnNumber" : 25,
        "endLineNumber" : 1006,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  newValue[0]=remappingFunction.apply(k,null);\n  if (newValue[0] == null) {\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n  task[0]=new AddTask(newNode,weight);\n  return newNode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 996,
        "startColumnNumber" : 6,
        "endLineNumber" : 1006,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (prior == null) {\n  newValue[0]=remappingFunction.apply(k,null);\n  if (newValue[0] == null) {\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n  task[0]=new AddTask(newNode,weight);\n  return newNode;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 995,
        "startColumnNumber" : 36,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 995,
        "startColumnNumber" : 22,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(k,prior) -> {\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 1004,
        "startColumnNumber" : 8,
        "endLineNumber" : 1004,
        "endColumnNumber" : 47
      },
      "nodeContext" : "task[0]=new AddTask(newNode,weight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable[]"
  }, {
    "nodeContext" : "task",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1015,
      "startColumnNumber" : 10,
      "endLineNumber" : 1015,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1015,
        "startColumnNumber" : 10,
        "endLineNumber" : 1015,
        "endColumnNumber" : 17
      },
      "nodeContext" : "task[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 1015,
        "startColumnNumber" : 10,
        "endLineNumber" : 1015,
        "endColumnNumber" : 42
      },
      "nodeContext" : "task[1]=new RemovalTask(prior)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1015,
        "startColumnNumber" : 10,
        "endLineNumber" : 1015,
        "endColumnNumber" : 43
      },
      "nodeContext" : "task[1]=new RemovalTask(prior);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 1012,
        "startColumnNumber" : 15,
        "endLineNumber" : 1020,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  task[1]=new RemovalTask(prior);\n  if (hasRemovalListener()) {\n    notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n  }\n  oldValue=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 460,
        "startLineNumber" : 1010,
        "startColumnNumber" : 8,
        "endLineNumber" : 1020,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldWeightedValue.isAlive()) {\n  oldValue=oldWeightedValue.value;\n}\n else {\n  task[1]=new RemovalTask(prior);\n  if (hasRemovalListener()) {\n    notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n  }\n  oldValue=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 1007,
        "startColumnNumber" : 27,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 1007,
        "startColumnNumber" : 6,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "synchronized (prior) {\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 224,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 995,
        "startColumnNumber" : 36,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 995,
        "startColumnNumber" : 22,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(k,prior) -> {\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1015,
        "startColumnNumber" : 10,
        "endLineNumber" : 1015,
        "endColumnNumber" : 43
      },
      "nodeContext" : "task[1]=new RemovalTask(prior);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable[]"
  }, {
    "nodeContext" : "task",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1023,
      "startColumnNumber" : 10,
      "endLineNumber" : 1023,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1023,
        "startColumnNumber" : 10,
        "endLineNumber" : 1023,
        "endColumnNumber" : 17
      },
      "nodeContext" : "task[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 1023,
        "startColumnNumber" : 10,
        "endLineNumber" : 1023,
        "endColumnNumber" : 42
      },
      "nodeContext" : "task[0]=new RemovalTask(prior)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1023,
        "startColumnNumber" : 10,
        "endLineNumber" : 1023,
        "endColumnNumber" : 43
      },
      "nodeContext" : "task[0]=new RemovalTask(prior);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 1022,
        "startColumnNumber" : 57,
        "endLineNumber" : 1028,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  task[0]=new RemovalTask(prior);\n  if (hasRemovalListener()) {\n    notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 1022,
        "startColumnNumber" : 8,
        "endLineNumber" : 1028,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((newValue[0] == null) && (oldValue != null)) {\n  task[0]=new RemovalTask(prior);\n  if (hasRemovalListener()) {\n    notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n  }\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 1007,
        "startColumnNumber" : 27,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 1007,
        "startColumnNumber" : 6,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "synchronized (prior) {\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 224,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 995,
        "startColumnNumber" : 36,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 995,
        "startColumnNumber" : 22,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(k,prior) -> {\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1023,
        "startColumnNumber" : 10,
        "endLineNumber" : 1023,
        "endColumnNumber" : 43
      },
      "nodeContext" : "task[0]=new RemovalTask(prior);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable[]"
  }, {
    "nodeContext" : "task",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1032,
      "startColumnNumber" : 12,
      "endLineNumber" : 1032,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1032,
        "startColumnNumber" : 12,
        "endLineNumber" : 1032,
        "endColumnNumber" : 19
      },
      "nodeContext" : "task[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1032,
        "startColumnNumber" : 12,
        "endLineNumber" : 1032,
        "endColumnNumber" : 27
      },
      "nodeContext" : "task[1] == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 1032,
        "startColumnNumber" : 8,
        "endLineNumber" : 1045,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (task[1] == null) {\n  newNode=prior;\n  prior.lazySet(weightedValue);\n  final int weightedDifference=weight - oldWeightedValue.weight;\n  if (weightedDifference != 0) {\n    task[0]=new UpdateTask(prior,weightedDifference);\n  }\n  if (hasRemovalListener()) {\n    notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n  }\n}\n else {\n  newNode=new Node<>(key,weightedValue);\n  task[0]=new AddTask(newNode,weight);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 1007,
        "startColumnNumber" : 27,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 1007,
        "startColumnNumber" : 6,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "synchronized (prior) {\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 224,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 995,
        "startColumnNumber" : 36,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 995,
        "startColumnNumber" : 22,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(k,prior) -> {\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1032,
        "startColumnNumber" : 12,
        "endLineNumber" : 1032,
        "endColumnNumber" : 27
      },
      "nodeContext" : "task[1] == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable[]"
  }, {
    "nodeContext" : "task",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1037,
      "startColumnNumber" : 12,
      "endLineNumber" : 1037,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1037,
        "startColumnNumber" : 12,
        "endLineNumber" : 1037,
        "endColumnNumber" : 19
      },
      "nodeContext" : "task[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 1037,
        "startColumnNumber" : 12,
        "endLineNumber" : 1037,
        "endColumnNumber" : 63
      },
      "nodeContext" : "task[0]=new UpdateTask(prior,weightedDifference)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 1037,
        "startColumnNumber" : 12,
        "endLineNumber" : 1037,
        "endColumnNumber" : 64
      },
      "nodeContext" : "task[0]=new UpdateTask(prior,weightedDifference);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 1036,
        "startColumnNumber" : 39,
        "endLineNumber" : 1038,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  task[0]=new UpdateTask(prior,weightedDifference);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1036,
        "startColumnNumber" : 10,
        "endLineNumber" : 1038,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (weightedDifference != 0) {\n  task[0]=new UpdateTask(prior,weightedDifference);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 1032,
        "startColumnNumber" : 29,
        "endLineNumber" : 1042,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  newNode=prior;\n  prior.lazySet(weightedValue);\n  final int weightedDifference=weight - oldWeightedValue.weight;\n  if (weightedDifference != 0) {\n    task[0]=new UpdateTask(prior,weightedDifference);\n  }\n  if (hasRemovalListener()) {\n    notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 1032,
        "startColumnNumber" : 8,
        "endLineNumber" : 1045,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (task[1] == null) {\n  newNode=prior;\n  prior.lazySet(weightedValue);\n  final int weightedDifference=weight - oldWeightedValue.weight;\n  if (weightedDifference != 0) {\n    task[0]=new UpdateTask(prior,weightedDifference);\n  }\n  if (hasRemovalListener()) {\n    notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n  }\n}\n else {\n  newNode=new Node<>(key,weightedValue);\n  task[0]=new AddTask(newNode,weight);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 1007,
        "startColumnNumber" : 27,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 1007,
        "startColumnNumber" : 6,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "synchronized (prior) {\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 224,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 995,
        "startColumnNumber" : 36,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 995,
        "startColumnNumber" : 22,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(k,prior) -> {\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 1037,
        "startColumnNumber" : 12,
        "endLineNumber" : 1037,
        "endColumnNumber" : 64
      },
      "nodeContext" : "task[0]=new UpdateTask(prior,weightedDifference);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable[]"
  }, {
    "nodeContext" : "task",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1044,
      "startColumnNumber" : 10,
      "endLineNumber" : 1044,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1044,
        "startColumnNumber" : 10,
        "endLineNumber" : 1044,
        "endColumnNumber" : 17
      },
      "nodeContext" : "task[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 1044,
        "startColumnNumber" : 10,
        "endLineNumber" : 1044,
        "endColumnNumber" : 48
      },
      "nodeContext" : "task[0]=new AddTask(newNode,weight)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 1044,
        "startColumnNumber" : 10,
        "endLineNumber" : 1044,
        "endColumnNumber" : 49
      },
      "nodeContext" : "task[0]=new AddTask(newNode,weight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 1042,
        "startColumnNumber" : 15,
        "endLineNumber" : 1045,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  newNode=new Node<>(key,weightedValue);\n  task[0]=new AddTask(newNode,weight);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 1032,
        "startColumnNumber" : 8,
        "endLineNumber" : 1045,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (task[1] == null) {\n  newNode=prior;\n  prior.lazySet(weightedValue);\n  final int weightedDifference=weight - oldWeightedValue.weight;\n  if (weightedDifference != 0) {\n    task[0]=new UpdateTask(prior,weightedDifference);\n  }\n  if (hasRemovalListener()) {\n    notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n  }\n}\n else {\n  newNode=new Node<>(key,weightedValue);\n  task[0]=new AddTask(newNode,weight);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 1007,
        "startColumnNumber" : 27,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 1007,
        "startColumnNumber" : 6,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "synchronized (prior) {\n  WeightedValue<V> oldWeightedValue=prior.get();\n  V oldValue;\n  if (oldWeightedValue.isAlive()) {\n    oldValue=oldWeightedValue.value;\n  }\n else {\n    task[1]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    oldValue=null;\n  }\n  newValue[0]=remappingFunction.apply(k,oldValue);\n  if ((newValue[0] == null) && (oldValue != null)) {\n    task[0]=new RemovalTask(prior);\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n    }\n    return null;\n  }\n  final int weight=weigher.weigh(key,newValue[0]);\n  final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n  Node<K,V> newNode;\n  if (task[1] == null) {\n    newNode=prior;\n    prior.lazySet(weightedValue);\n    final int weightedDifference=weight - oldWeightedValue.weight;\n    if (weightedDifference != 0) {\n      task[0]=new UpdateTask(prior,weightedDifference);\n    }\n    if (hasRemovalListener()) {\n      notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n    }\n  }\n else {\n    newNode=new Node<>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n  }\n  return prior;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 224,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2159,
        "startLineNumber" : 995,
        "startColumnNumber" : 36,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 995,
        "startColumnNumber" : 22,
        "endLineNumber" : 1048,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(k,prior) -> {\n  if (prior == null) {\n    newValue[0]=remappingFunction.apply(k,null);\n    if (newValue[0] == null) {\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    final Node<K,V> newNode=new Node<K,V>(key,weightedValue);\n    task[0]=new AddTask(newNode,weight);\n    return newNode;\n  }\nsynchronized (prior) {\n    WeightedValue<V> oldWeightedValue=prior.get();\n    V oldValue;\n    if (oldWeightedValue.isAlive()) {\n      oldValue=oldWeightedValue.value;\n    }\n else {\n      task[1]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      oldValue=null;\n    }\n    newValue[0]=remappingFunction.apply(k,oldValue);\n    if ((newValue[0] == null) && (oldValue != null)) {\n      task[0]=new RemovalTask(prior);\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.EXPLICIT);\n      }\n      return null;\n    }\n    final int weight=weigher.weigh(key,newValue[0]);\n    final WeightedValue<V> weightedValue=new WeightedValue<V>(newValue[0],weight);\n    Node<K,V> newNode;\n    if (task[1] == null) {\n      newNode=prior;\n      prior.lazySet(weightedValue);\n      final int weightedDifference=weight - oldWeightedValue.weight;\n      if (weightedDifference != 0) {\n        task[0]=new UpdateTask(prior,weightedDifference);\n      }\n      if (hasRemovalListener()) {\n        notifyRemoval(key,oldWeightedValue.value,RemovalCause.REPLACED);\n      }\n    }\n else {\n      newNode=new Node<>(key,weightedValue);\n      task[0]=new AddTask(newNode,weight);\n    }\n    return prior;\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 1044,
        "startColumnNumber" : 10,
        "endLineNumber" : 1044,
        "endColumnNumber" : 49
      },
      "nodeContext" : "task[0]=new AddTask(newNode,weight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable[]"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 1004,
    "startColumnNumber" : 8,
    "endLineNumber" : 1004,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 1015,
    "startColumnNumber" : 10,
    "endLineNumber" : 1015,
    "endColumnNumber" : 14
  }, {
    "charLength" : 4,
    "startLineNumber" : 1023,
    "startColumnNumber" : 10,
    "endLineNumber" : 1023,
    "endColumnNumber" : 14
  }, {
    "charLength" : 4,
    "startLineNumber" : 1032,
    "startColumnNumber" : 12,
    "endLineNumber" : 1032,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 1037,
    "startColumnNumber" : 12,
    "endLineNumber" : 1037,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 1044,
    "startColumnNumber" : 10,
    "endLineNumber" : 1044,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}