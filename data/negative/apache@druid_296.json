{
  "id" : 296,
  "expression" : "implName",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/main/java/org/apache/druid/guice/PolyBind.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "implName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 185,
      "startColumnNumber" : 10,
      "endLineNumber" : 185,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 185,
        "startColumnNumber" : 10,
        "endLineNumber" : 185,
        "endColumnNumber" : 26
      },
      "nodeContext" : "implName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 185,
        "startColumnNumber" : 6,
        "endLineNumber" : 193,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (implName == null) {\n  if (defaultPropertyValue == null) {\n    if (defaultKey == null) {\n      throw new ProvisionException(StringUtils.format(\"Some value must be configured for [%s]\",key));\n    }\n    return injector.getInstance(defaultKey);\n  }\n  implName=defaultPropertyValue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ParameterizedType mapType=Types.mapOf(String.class,Types.newParameterizedType(Provider.class,key.getTypeLiteral().getType()));\n  final Map<String,Provider<T>> implsMap;\n  if (key.getAnnotation() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotation()));\n  }\n else   if (key.getAnnotationType() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotationType()));\n  }\n else {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType));\n  }\n  String implName=props.getProperty(property);\n  if (implName == null) {\n    if (defaultPropertyValue == null) {\n      if (defaultKey == null) {\n        throw new ProvisionException(StringUtils.format(\"Some value must be configured for [%s]\",key));\n      }\n      return injector.getInstance(defaultKey);\n    }\n    implName=defaultPropertyValue;\n  }\n  final Provider<T> provider=implsMap.get(implName);\n  if (provider == null) {\n    throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n  }\n  return provider.get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1390,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T get(){\n  final ParameterizedType mapType=Types.mapOf(String.class,Types.newParameterizedType(Provider.class,key.getTypeLiteral().getType()));\n  final Map<String,Provider<T>> implsMap;\n  if (key.getAnnotation() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotation()));\n  }\n else   if (key.getAnnotationType() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotationType()));\n  }\n else {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType));\n  }\n  String implName=props.getProperty(property);\n  if (implName == null) {\n    if (defaultPropertyValue == null) {\n      if (defaultKey == null) {\n        throw new ProvisionException(StringUtils.format(\"Some value must be configured for [%s]\",key));\n      }\n      return injector.getInstance(defaultKey);\n    }\n    implName=defaultPropertyValue;\n  }\n  final Provider<T> provider=implsMap.get(implName);\n  if (provider == null) {\n    throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n  }\n  return provider.get();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 185,
        "startColumnNumber" : 10,
        "endLineNumber" : 185,
        "endColumnNumber" : 26
      },
      "nodeContext" : "implName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "implName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 194,
      "startColumnNumber" : 48,
      "endLineNumber" : 194,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 194,
        "startColumnNumber" : 35,
        "endLineNumber" : 194,
        "endColumnNumber" : 57
      },
      "nodeContext" : "implsMap.get(implName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 194,
        "startColumnNumber" : 24,
        "endLineNumber" : 194,
        "endColumnNumber" : 57
      },
      "nodeContext" : "provider=implsMap.get(implName)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 194,
        "startColumnNumber" : 6,
        "endLineNumber" : 194,
        "endColumnNumber" : 58
      },
      "nodeContext" : "final Provider<T> provider=implsMap.get(implName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ParameterizedType mapType=Types.mapOf(String.class,Types.newParameterizedType(Provider.class,key.getTypeLiteral().getType()));\n  final Map<String,Provider<T>> implsMap;\n  if (key.getAnnotation() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotation()));\n  }\n else   if (key.getAnnotationType() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotationType()));\n  }\n else {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType));\n  }\n  String implName=props.getProperty(property);\n  if (implName == null) {\n    if (defaultPropertyValue == null) {\n      if (defaultKey == null) {\n        throw new ProvisionException(StringUtils.format(\"Some value must be configured for [%s]\",key));\n      }\n      return injector.getInstance(defaultKey);\n    }\n    implName=defaultPropertyValue;\n  }\n  final Provider<T> provider=implsMap.get(implName);\n  if (provider == null) {\n    throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n  }\n  return provider.get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1390,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T get(){\n  final ParameterizedType mapType=Types.mapOf(String.class,Types.newParameterizedType(Provider.class,key.getTypeLiteral().getType()));\n  final Map<String,Provider<T>> implsMap;\n  if (key.getAnnotation() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotation()));\n  }\n else   if (key.getAnnotationType() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotationType()));\n  }\n else {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType));\n  }\n  String implName=props.getProperty(property);\n  if (implName == null) {\n    if (defaultPropertyValue == null) {\n      if (defaultKey == null) {\n        throw new ProvisionException(StringUtils.format(\"Some value must be configured for [%s]\",key));\n      }\n      return injector.getInstance(defaultKey);\n    }\n    implName=defaultPropertyValue;\n  }\n  final Provider<T> provider=implsMap.get(implName);\n  if (provider == null) {\n    throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n  }\n  return provider.get();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 194,
        "startColumnNumber" : 6,
        "endLineNumber" : 194,
        "endColumnNumber" : 58
      },
      "nodeContext" : "final Provider<T> provider=implsMap.get(implName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "implName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 198,
      "startColumnNumber" : 80,
      "endLineNumber" : 198,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 198,
        "startColumnNumber" : 12,
        "endLineNumber" : 198,
        "endColumnNumber" : 113
      },
      "nodeContext" : "StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 197,
        "startColumnNumber" : 14,
        "endLineNumber" : 199,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 199,
        "endColumnNumber" : 10
      },
      "nodeContext" : "throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 196,
        "startColumnNumber" : 28,
        "endLineNumber" : 200,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 196,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (provider == null) {\n  throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ParameterizedType mapType=Types.mapOf(String.class,Types.newParameterizedType(Provider.class,key.getTypeLiteral().getType()));\n  final Map<String,Provider<T>> implsMap;\n  if (key.getAnnotation() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotation()));\n  }\n else   if (key.getAnnotationType() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotationType()));\n  }\n else {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType));\n  }\n  String implName=props.getProperty(property);\n  if (implName == null) {\n    if (defaultPropertyValue == null) {\n      if (defaultKey == null) {\n        throw new ProvisionException(StringUtils.format(\"Some value must be configured for [%s]\",key));\n      }\n      return injector.getInstance(defaultKey);\n    }\n    implName=defaultPropertyValue;\n  }\n  final Provider<T> provider=implsMap.get(implName);\n  if (provider == null) {\n    throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n  }\n  return provider.get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1390,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public T get(){\n  final ParameterizedType mapType=Types.mapOf(String.class,Types.newParameterizedType(Provider.class,key.getTypeLiteral().getType()));\n  final Map<String,Provider<T>> implsMap;\n  if (key.getAnnotation() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotation()));\n  }\n else   if (key.getAnnotationType() != null) {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType,key.getAnnotationType()));\n  }\n else {\n    implsMap=(Map<String,Provider<T>>)injector.getInstance(Key.get(mapType));\n  }\n  String implName=props.getProperty(property);\n  if (implName == null) {\n    if (defaultPropertyValue == null) {\n      if (defaultKey == null) {\n        throw new ProvisionException(StringUtils.format(\"Some value must be configured for [%s]\",key));\n      }\n      return injector.getInstance(defaultKey);\n    }\n    implName=defaultPropertyValue;\n  }\n  final Provider<T> provider=implsMap.get(implName);\n  if (provider == null) {\n    throw new ProvisionException(StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet()));\n  }\n  return provider.get();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 198,
        "startColumnNumber" : 12,
        "endLineNumber" : 198,
        "endColumnNumber" : 113
      },
      "nodeContext" : "StringUtils.format(\"Unknown provider[%s] of %s, known options[%s]\",implName,key,implsMap.keySet())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 185,
    "startColumnNumber" : 10,
    "endLineNumber" : 185,
    "endColumnNumber" : 18
  }, {
    "charLength" : 8,
    "startLineNumber" : 194,
    "startColumnNumber" : 48,
    "endLineNumber" : 194,
    "endColumnNumber" : 56
  }, {
    "charLength" : 8,
    "startLineNumber" : 198,
    "startColumnNumber" : 80,
    "endLineNumber" : 198,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}