{
  "id" : 286,
  "expression" : "historicFailing",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/TestRunResults.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "historicFailing",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 80,
      "startColumnNumber" : 20,
      "endLineNumber" : 80,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 80,
        "startColumnNumber" : 20,
        "endLineNumber" : 80,
        "endColumnNumber" : 65
      },
      "nodeContext" : "historicFailing.put(i.getKey(),i.getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 80,
        "startColumnNumber" : 20,
        "endLineNumber" : 80,
        "endColumnNumber" : 66
      },
      "nodeContext" : "historicFailing.put(i.getKey(),i.getValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 79,
        "startColumnNumber" : 58,
        "endLineNumber" : 82,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  historicFailing.put(i.getKey(),i.getValue());\n  failing.add(i.getValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 428,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!i.getValue().getFailing().isEmpty()) {\n  historicFailing.put(i.getKey(),i.getValue());\n  failing.add(i.getValue());\n}\n else if (!i.getValue().getPassing().isEmpty()) {\n  historicPassing.put(i.getKey(),i.getValue());\n  passing.add(i.getValue());\n}\n else {\n  skipped.add(i.getValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 460,
        "startLineNumber" : 78,
        "startColumnNumber" : 19,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!i.getValue().getFailing().isEmpty()) {\n    historicFailing.put(i.getKey(),i.getValue());\n    failing.add(i.getValue());\n  }\n else   if (!i.getValue().getPassing().isEmpty()) {\n    historicPassing.put(i.getKey(),i.getValue());\n    passing.add(i.getValue());\n  }\n else {\n    skipped.add(i.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 937,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (current) {\n  if (!i.getValue().getFailing().isEmpty()) {\n    currentFailing.put(i.getKey(),i.getValue());\n    failing.add(i.getValue());\n  }\n else   if (!i.getValue().getPassing().isEmpty()) {\n    currentPassing.put(i.getKey(),i.getValue());\n    passing.add(i.getValue());\n  }\n else {\n    skipped.add(i.getValue());\n  }\n}\n else {\n  if (!i.getValue().getFailing().isEmpty()) {\n    historicFailing.put(i.getKey(),i.getValue());\n    failing.add(i.getValue());\n  }\n else   if (!i.getValue().getPassing().isEmpty()) {\n    historicPassing.put(i.getKey(),i.getValue());\n    passing.add(i.getValue());\n  }\n else {\n    skipped.add(i.getValue());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1696,
        "startLineNumber" : 60,
        "startColumnNumber" : 72,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  passedCount+=i.getValue().getPassing().stream().filter(TestResult::isTest).count();\n  failedCount+=i.getValue().getFailing().stream().filter(TestResult::isTest).count();\n  skippedCount+=i.getValue().getSkipped().stream().filter(TestResult::isTest).count();\n  currentPassedCount+=i.getValue().getPassing().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n  currentFailedCount+=i.getValue().getFailing().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n  currentSkippedCount+=i.getValue().getSkipped().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n  boolean current=i.getValue().getLatestRunId() == id;\n  if (current) {\n    if (!i.getValue().getFailing().isEmpty()) {\n      currentFailing.put(i.getKey(),i.getValue());\n      failing.add(i.getValue());\n    }\n else     if (!i.getValue().getPassing().isEmpty()) {\n      currentPassing.put(i.getKey(),i.getValue());\n      passing.add(i.getValue());\n    }\n else {\n      skipped.add(i.getValue());\n    }\n  }\n else {\n    if (!i.getValue().getFailing().isEmpty()) {\n      historicFailing.put(i.getKey(),i.getValue());\n      failing.add(i.getValue());\n    }\n else     if (!i.getValue().getPassing().isEmpty()) {\n      historicPassing.put(i.getKey(),i.getValue());\n      passing.add(i.getValue());\n    }\n else {\n      skipped.add(i.getValue());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1760,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,TestClassResult> i : results.entrySet()) {\n  passedCount+=i.getValue().getPassing().stream().filter(TestResult::isTest).count();\n  failedCount+=i.getValue().getFailing().stream().filter(TestResult::isTest).count();\n  skippedCount+=i.getValue().getSkipped().stream().filter(TestResult::isTest).count();\n  currentPassedCount+=i.getValue().getPassing().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n  currentFailedCount+=i.getValue().getFailing().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n  currentSkippedCount+=i.getValue().getSkipped().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n  boolean current=i.getValue().getLatestRunId() == id;\n  if (current) {\n    if (!i.getValue().getFailing().isEmpty()) {\n      currentFailing.put(i.getKey(),i.getValue());\n      failing.add(i.getValue());\n    }\n else     if (!i.getValue().getPassing().isEmpty()) {\n      currentPassing.put(i.getKey(),i.getValue());\n      passing.add(i.getValue());\n    }\n else {\n      skipped.add(i.getValue());\n    }\n  }\n else {\n    if (!i.getValue().getFailing().isEmpty()) {\n      historicFailing.put(i.getKey(),i.getValue());\n      failing.add(i.getValue());\n    }\n else     if (!i.getValue().getPassing().isEmpty()) {\n      historicPassing.put(i.getKey(),i.getValue());\n      passing.add(i.getValue());\n    }\n else {\n      skipped.add(i.getValue());\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 284,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2565,
        "startLineNumber" : 47,
        "startColumnNumber" : 50,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.id=id;\n  this.trigger=trigger;\n  this.full=full;\n  this.started=started;\n  this.completed=completed;\n  this.results=new HashMap<>(results);\n  long passedCount=0;\n  long failedCount=0;\n  long skippedCount=0;\n  long currentPassedCount=0;\n  long currentFailedCount=0;\n  long currentSkippedCount=0;\n  for (  Map.Entry<String,TestClassResult> i : results.entrySet()) {\n    passedCount+=i.getValue().getPassing().stream().filter(TestResult::isTest).count();\n    failedCount+=i.getValue().getFailing().stream().filter(TestResult::isTest).count();\n    skippedCount+=i.getValue().getSkipped().stream().filter(TestResult::isTest).count();\n    currentPassedCount+=i.getValue().getPassing().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n    currentFailedCount+=i.getValue().getFailing().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n    currentSkippedCount+=i.getValue().getSkipped().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n    boolean current=i.getValue().getLatestRunId() == id;\n    if (current) {\n      if (!i.getValue().getFailing().isEmpty()) {\n        currentFailing.put(i.getKey(),i.getValue());\n        failing.add(i.getValue());\n      }\n else       if (!i.getValue().getPassing().isEmpty()) {\n        currentPassing.put(i.getKey(),i.getValue());\n        passing.add(i.getValue());\n      }\n else {\n        skipped.add(i.getValue());\n      }\n    }\n else {\n      if (!i.getValue().getFailing().isEmpty()) {\n        historicFailing.put(i.getKey(),i.getValue());\n        failing.add(i.getValue());\n      }\n else       if (!i.getValue().getPassing().isEmpty()) {\n        historicPassing.put(i.getKey(),i.getValue());\n        passing.add(i.getValue());\n      }\n else {\n        skipped.add(i.getValue());\n      }\n    }\n  }\n  Collections.sort(passing);\n  Collections.sort(failing);\n  Collections.sort(skipped);\n  this.failedCount=failedCount;\n  this.passedCount=passedCount;\n  this.skippedCount=skippedCount;\n  this.currentFailedCount=currentFailedCount;\n  this.currentPassedCount=currentPassedCount;\n  this.currentSkippedCount=currentSkippedCount;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 406,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2715,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public TestRunResults(long id,ClassScanResult trigger,boolean full,long started,long completed,Map<String,TestClassResult> results){\n  this.id=id;\n  this.trigger=trigger;\n  this.full=full;\n  this.started=started;\n  this.completed=completed;\n  this.results=new HashMap<>(results);\n  long passedCount=0;\n  long failedCount=0;\n  long skippedCount=0;\n  long currentPassedCount=0;\n  long currentFailedCount=0;\n  long currentSkippedCount=0;\n  for (  Map.Entry<String,TestClassResult> i : results.entrySet()) {\n    passedCount+=i.getValue().getPassing().stream().filter(TestResult::isTest).count();\n    failedCount+=i.getValue().getFailing().stream().filter(TestResult::isTest).count();\n    skippedCount+=i.getValue().getSkipped().stream().filter(TestResult::isTest).count();\n    currentPassedCount+=i.getValue().getPassing().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n    currentFailedCount+=i.getValue().getFailing().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n    currentSkippedCount+=i.getValue().getSkipped().stream().filter(s -> s.isTest() && s.getRunId() == id).count();\n    boolean current=i.getValue().getLatestRunId() == id;\n    if (current) {\n      if (!i.getValue().getFailing().isEmpty()) {\n        currentFailing.put(i.getKey(),i.getValue());\n        failing.add(i.getValue());\n      }\n else       if (!i.getValue().getPassing().isEmpty()) {\n        currentPassing.put(i.getKey(),i.getValue());\n        passing.add(i.getValue());\n      }\n else {\n        skipped.add(i.getValue());\n      }\n    }\n else {\n      if (!i.getValue().getFailing().isEmpty()) {\n        historicFailing.put(i.getKey(),i.getValue());\n        failing.add(i.getValue());\n      }\n else       if (!i.getValue().getPassing().isEmpty()) {\n        historicPassing.put(i.getKey(),i.getValue());\n        passing.add(i.getValue());\n      }\n else {\n        skipped.add(i.getValue());\n      }\n    }\n  }\n  Collections.sort(passing);\n  Collections.sort(failing);\n  Collections.sort(skipped);\n  this.failedCount=failedCount;\n  this.passedCount=passedCount;\n  this.skippedCount=skippedCount;\n  this.currentFailedCount=currentFailedCount;\n  this.currentPassedCount=currentPassedCount;\n  this.currentSkippedCount=currentSkippedCount;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 434,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 80,
        "startColumnNumber" : 20,
        "endLineNumber" : 80,
        "endColumnNumber" : 66
      },
      "nodeContext" : "historicFailing.put(i.getKey(),i.getValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,io.quarkus.deployment.dev.testing.TestClassResult>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 80,
    "startColumnNumber" : 20,
    "endLineNumber" : 80,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}