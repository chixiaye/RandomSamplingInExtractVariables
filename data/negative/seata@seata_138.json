{
  "id" : 138,
  "expression" : "true",
  "projectName" : "seata@seata",
  "commitID" : "f35b292094e873c4112423fe51a1102ee4f8f917",
  "filePath" : "rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/SelectForUpdateExecutor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 84,
      "startColumnNumber" : 19,
      "endLineNumber" : 84,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1570,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  Statement stPK=null;\n  PreparedStatement pstPK=null;\n  ResultSet rsPK=null;\n  try {\n    if (paramAppender.isEmpty()) {\n      stPK=statementProxy.getConnection().createStatement();\n      rsPK=stPK.executeQuery(selectPKSQL);\n    }\n else {\n      pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n      for (int i=0; i < paramAppender.size(); i++) {\n        pstPK.setObject(i + 1,paramAppender.get(i));\n      }\n      rsPK=pstPK.executeQuery();\n    }\n    TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n    String lockKeys=buildLockKey(selectPKRows);\n    statementProxy.getConnectionProxy().checkLock(lockKeys);\n    break;\n  }\n catch (  LockConflictException lce) {\n    conn.rollback(sp);\n    lockRetryController.sleep(lce);\n  }\n finally {\n    if (rsPK != null) {\n      rsPK.close();\n    }\n    if (stPK != null) {\n      stPK.close();\n    }\n    if (pstPK != null) {\n      pstPK.close();\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1816,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (originalAutoCommit) {\n    conn.setAutoCommit(false);\n  }\n  sp=conn.setSavepoint();\n  rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n  while (true) {\n    Statement stPK=null;\n    PreparedStatement pstPK=null;\n    ResultSet rsPK=null;\n    try {\n      if (paramAppender.isEmpty()) {\n        stPK=statementProxy.getConnection().createStatement();\n        rsPK=stPK.executeQuery(selectPKSQL);\n      }\n else {\n        pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n        for (int i=0; i < paramAppender.size(); i++) {\n          pstPK.setObject(i + 1,paramAppender.get(i));\n        }\n        rsPK=pstPK.executeQuery();\n      }\n      TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n      String lockKeys=buildLockKey(selectPKRows);\n      statementProxy.getConnectionProxy().checkLock(lockKeys);\n      break;\n    }\n catch (    LockConflictException lce) {\n      conn.rollback(sp);\n      lockRetryController.sleep(lce);\n    }\n finally {\n      if (rsPK != null) {\n        rsPK.close();\n      }\n      if (stPK != null) {\n        stPK.close();\n      }\n      if (pstPK != null) {\n        pstPK.close();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2021,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (originalAutoCommit) {\n    conn.setAutoCommit(false);\n  }\n  sp=conn.setSavepoint();\n  rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n  while (true) {\n    Statement stPK=null;\n    PreparedStatement pstPK=null;\n    ResultSet rsPK=null;\n    try {\n      if (paramAppender.isEmpty()) {\n        stPK=statementProxy.getConnection().createStatement();\n        rsPK=stPK.executeQuery(selectPKSQL);\n      }\n else {\n        pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n        for (int i=0; i < paramAppender.size(); i++) {\n          pstPK.setObject(i + 1,paramAppender.get(i));\n        }\n        rsPK=pstPK.executeQuery();\n      }\n      TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n      String lockKeys=buildLockKey(selectPKRows);\n      statementProxy.getConnectionProxy().checkLock(lockKeys);\n      break;\n    }\n catch (    LockConflictException lce) {\n      conn.rollback(sp);\n      lockRetryController.sleep(lce);\n    }\n finally {\n      if (rsPK != null) {\n        rsPK.close();\n      }\n      if (stPK != null) {\n        stPK.close();\n      }\n      if (pstPK != null) {\n        pstPK.close();\n      }\n    }\n  }\n}\n  finally {\n  if (sp != null) {\n    conn.releaseSavepoint(sp);\n  }\n  if (originalAutoCommit) {\n    conn.setAutoCommit(true);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 200,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3197,
        "startLineNumber" : 52,
        "startColumnNumber" : 61,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SQLSelectRecognizer recognizer=(SQLSelectRecognizer)sqlRecognizer;\n  Connection conn=statementProxy.getConnection();\n  ResultSet rs=null;\n  Savepoint sp=null;\n  LockRetryController lockRetryController=new LockRetryController();\n  boolean originalAutoCommit=conn.getAutoCommit();\n  StringBuffer selectSQLAppender=new StringBuffer(\"SELECT \");\n  selectSQLAppender.append(getColumnNameInSQL(getTableMeta().getPkName()));\n  selectSQLAppender.append(\" FROM \" + getFromTableInSQL());\n  String whereCondition=null;\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  if (statementProxy instanceof ParametersHolder) {\n    whereCondition=recognizer.getWhereCondition((ParametersHolder)statementProxy,paramAppender);\n  }\n else {\n    whereCondition=recognizer.getWhereCondition();\n  }\n  if (!StringUtils.isEmpty(whereCondition)) {\n    selectSQLAppender.append(\" WHERE \" + whereCondition);\n  }\n  selectSQLAppender.append(\" FOR UPDATE\");\n  String selectPKSQL=selectSQLAppender.toString();\n  try {\n    if (originalAutoCommit) {\n      conn.setAutoCommit(false);\n    }\n    sp=conn.setSavepoint();\n    rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n    while (true) {\n      Statement stPK=null;\n      PreparedStatement pstPK=null;\n      ResultSet rsPK=null;\n      try {\n        if (paramAppender.isEmpty()) {\n          stPK=statementProxy.getConnection().createStatement();\n          rsPK=stPK.executeQuery(selectPKSQL);\n        }\n else {\n          pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n          for (int i=0; i < paramAppender.size(); i++) {\n            pstPK.setObject(i + 1,paramAppender.get(i));\n          }\n          rsPK=pstPK.executeQuery();\n        }\n        TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n        String lockKeys=buildLockKey(selectPKRows);\n        statementProxy.getConnectionProxy().checkLock(lockKeys);\n        break;\n      }\n catch (      LockConflictException lce) {\n        conn.rollback(sp);\n        lockRetryController.sleep(lce);\n      }\n finally {\n        if (rsPK != null) {\n          rsPK.close();\n        }\n        if (stPK != null) {\n          stPK.close();\n        }\n        if (pstPK != null) {\n          pstPK.close();\n        }\n      }\n    }\n  }\n  finally {\n    if (sp != null) {\n      conn.releaseSavepoint(sp);\n    }\n    if (originalAutoCommit) {\n      conn.setAutoCommit(true);\n    }\n  }\n  return rs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3268,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object doExecute(Object... args) throws Throwable {\n  SQLSelectRecognizer recognizer=(SQLSelectRecognizer)sqlRecognizer;\n  Connection conn=statementProxy.getConnection();\n  ResultSet rs=null;\n  Savepoint sp=null;\n  LockRetryController lockRetryController=new LockRetryController();\n  boolean originalAutoCommit=conn.getAutoCommit();\n  StringBuffer selectSQLAppender=new StringBuffer(\"SELECT \");\n  selectSQLAppender.append(getColumnNameInSQL(getTableMeta().getPkName()));\n  selectSQLAppender.append(\" FROM \" + getFromTableInSQL());\n  String whereCondition=null;\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  if (statementProxy instanceof ParametersHolder) {\n    whereCondition=recognizer.getWhereCondition((ParametersHolder)statementProxy,paramAppender);\n  }\n else {\n    whereCondition=recognizer.getWhereCondition();\n  }\n  if (!StringUtils.isEmpty(whereCondition)) {\n    selectSQLAppender.append(\" WHERE \" + whereCondition);\n  }\n  selectSQLAppender.append(\" FOR UPDATE\");\n  String selectPKSQL=selectSQLAppender.toString();\n  try {\n    if (originalAutoCommit) {\n      conn.setAutoCommit(false);\n    }\n    sp=conn.setSavepoint();\n    rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n    while (true) {\n      Statement stPK=null;\n      PreparedStatement pstPK=null;\n      ResultSet rsPK=null;\n      try {\n        if (paramAppender.isEmpty()) {\n          stPK=statementProxy.getConnection().createStatement();\n          rsPK=stPK.executeQuery(selectPKSQL);\n        }\n else {\n          pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n          for (int i=0; i < paramAppender.size(); i++) {\n            pstPK.setObject(i + 1,paramAppender.get(i));\n          }\n          rsPK=pstPK.executeQuery();\n        }\n        TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n        String lockKeys=buildLockKey(selectPKRows);\n        statementProxy.getConnectionProxy().checkLock(lockKeys);\n        break;\n      }\n catch (      LockConflictException lce) {\n        conn.rollback(sp);\n        lockRetryController.sleep(lce);\n      }\n finally {\n        if (rsPK != null) {\n          rsPK.close();\n        }\n        if (stPK != null) {\n          stPK.close();\n        }\n        if (pstPK != null) {\n          pstPK.close();\n        }\n      }\n    }\n  }\n  finally {\n    if (sp != null) {\n      conn.releaseSavepoint(sp);\n    }\n    if (originalAutoCommit) {\n      conn.setAutoCommit(true);\n    }\n  }\n  return rs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1570,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  Statement stPK=null;\n  PreparedStatement pstPK=null;\n  ResultSet rsPK=null;\n  try {\n    if (paramAppender.isEmpty()) {\n      stPK=statementProxy.getConnection().createStatement();\n      rsPK=stPK.executeQuery(selectPKSQL);\n    }\n else {\n      pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n      for (int i=0; i < paramAppender.size(); i++) {\n        pstPK.setObject(i + 1,paramAppender.get(i));\n      }\n      rsPK=pstPK.executeQuery();\n    }\n    TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n    String lockKeys=buildLockKey(selectPKRows);\n    statementProxy.getConnectionProxy().checkLock(lockKeys);\n    break;\n  }\n catch (  LockConflictException lce) {\n    conn.rollback(sp);\n    lockRetryController.sleep(lce);\n  }\n finally {\n    if (rsPK != null) {\n      rsPK.close();\n    }\n    if (stPK != null) {\n      stPK.close();\n    }\n    if (pstPK != null) {\n      pstPK.close();\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 128,
      "startColumnNumber" : 35,
      "endLineNumber" : 128,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 40
      },
      "nodeContext" : "conn.setAutoCommit(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 41
      },
      "nodeContext" : "conn.setAutoCommit(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 127,
        "startColumnNumber" : 36,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  conn.setAutoCommit(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (originalAutoCommit) {\n  conn.setAutoCommit(true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 123,
        "startColumnNumber" : 18,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (sp != null) {\n    conn.releaseSavepoint(sp);\n  }\n  if (originalAutoCommit) {\n    conn.setAutoCommit(true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2021,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (originalAutoCommit) {\n    conn.setAutoCommit(false);\n  }\n  sp=conn.setSavepoint();\n  rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n  while (true) {\n    Statement stPK=null;\n    PreparedStatement pstPK=null;\n    ResultSet rsPK=null;\n    try {\n      if (paramAppender.isEmpty()) {\n        stPK=statementProxy.getConnection().createStatement();\n        rsPK=stPK.executeQuery(selectPKSQL);\n      }\n else {\n        pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n        for (int i=0; i < paramAppender.size(); i++) {\n          pstPK.setObject(i + 1,paramAppender.get(i));\n        }\n        rsPK=pstPK.executeQuery();\n      }\n      TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n      String lockKeys=buildLockKey(selectPKRows);\n      statementProxy.getConnectionProxy().checkLock(lockKeys);\n      break;\n    }\n catch (    LockConflictException lce) {\n      conn.rollback(sp);\n      lockRetryController.sleep(lce);\n    }\n finally {\n      if (rsPK != null) {\n        rsPK.close();\n      }\n      if (stPK != null) {\n        stPK.close();\n      }\n      if (pstPK != null) {\n        pstPK.close();\n      }\n    }\n  }\n}\n  finally {\n  if (sp != null) {\n    conn.releaseSavepoint(sp);\n  }\n  if (originalAutoCommit) {\n    conn.setAutoCommit(true);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 200,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3197,
        "startLineNumber" : 52,
        "startColumnNumber" : 61,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SQLSelectRecognizer recognizer=(SQLSelectRecognizer)sqlRecognizer;\n  Connection conn=statementProxy.getConnection();\n  ResultSet rs=null;\n  Savepoint sp=null;\n  LockRetryController lockRetryController=new LockRetryController();\n  boolean originalAutoCommit=conn.getAutoCommit();\n  StringBuffer selectSQLAppender=new StringBuffer(\"SELECT \");\n  selectSQLAppender.append(getColumnNameInSQL(getTableMeta().getPkName()));\n  selectSQLAppender.append(\" FROM \" + getFromTableInSQL());\n  String whereCondition=null;\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  if (statementProxy instanceof ParametersHolder) {\n    whereCondition=recognizer.getWhereCondition((ParametersHolder)statementProxy,paramAppender);\n  }\n else {\n    whereCondition=recognizer.getWhereCondition();\n  }\n  if (!StringUtils.isEmpty(whereCondition)) {\n    selectSQLAppender.append(\" WHERE \" + whereCondition);\n  }\n  selectSQLAppender.append(\" FOR UPDATE\");\n  String selectPKSQL=selectSQLAppender.toString();\n  try {\n    if (originalAutoCommit) {\n      conn.setAutoCommit(false);\n    }\n    sp=conn.setSavepoint();\n    rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n    while (true) {\n      Statement stPK=null;\n      PreparedStatement pstPK=null;\n      ResultSet rsPK=null;\n      try {\n        if (paramAppender.isEmpty()) {\n          stPK=statementProxy.getConnection().createStatement();\n          rsPK=stPK.executeQuery(selectPKSQL);\n        }\n else {\n          pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n          for (int i=0; i < paramAppender.size(); i++) {\n            pstPK.setObject(i + 1,paramAppender.get(i));\n          }\n          rsPK=pstPK.executeQuery();\n        }\n        TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n        String lockKeys=buildLockKey(selectPKRows);\n        statementProxy.getConnectionProxy().checkLock(lockKeys);\n        break;\n      }\n catch (      LockConflictException lce) {\n        conn.rollback(sp);\n        lockRetryController.sleep(lce);\n      }\n finally {\n        if (rsPK != null) {\n          rsPK.close();\n        }\n        if (stPK != null) {\n          stPK.close();\n        }\n        if (pstPK != null) {\n          pstPK.close();\n        }\n      }\n    }\n  }\n  finally {\n    if (sp != null) {\n      conn.releaseSavepoint(sp);\n    }\n    if (originalAutoCommit) {\n      conn.setAutoCommit(true);\n    }\n  }\n  return rs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3268,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object doExecute(Object... args) throws Throwable {\n  SQLSelectRecognizer recognizer=(SQLSelectRecognizer)sqlRecognizer;\n  Connection conn=statementProxy.getConnection();\n  ResultSet rs=null;\n  Savepoint sp=null;\n  LockRetryController lockRetryController=new LockRetryController();\n  boolean originalAutoCommit=conn.getAutoCommit();\n  StringBuffer selectSQLAppender=new StringBuffer(\"SELECT \");\n  selectSQLAppender.append(getColumnNameInSQL(getTableMeta().getPkName()));\n  selectSQLAppender.append(\" FROM \" + getFromTableInSQL());\n  String whereCondition=null;\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  if (statementProxy instanceof ParametersHolder) {\n    whereCondition=recognizer.getWhereCondition((ParametersHolder)statementProxy,paramAppender);\n  }\n else {\n    whereCondition=recognizer.getWhereCondition();\n  }\n  if (!StringUtils.isEmpty(whereCondition)) {\n    selectSQLAppender.append(\" WHERE \" + whereCondition);\n  }\n  selectSQLAppender.append(\" FOR UPDATE\");\n  String selectPKSQL=selectSQLAppender.toString();\n  try {\n    if (originalAutoCommit) {\n      conn.setAutoCommit(false);\n    }\n    sp=conn.setSavepoint();\n    rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n    while (true) {\n      Statement stPK=null;\n      PreparedStatement pstPK=null;\n      ResultSet rsPK=null;\n      try {\n        if (paramAppender.isEmpty()) {\n          stPK=statementProxy.getConnection().createStatement();\n          rsPK=stPK.executeQuery(selectPKSQL);\n        }\n else {\n          pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n          for (int i=0; i < paramAppender.size(); i++) {\n            pstPK.setObject(i + 1,paramAppender.get(i));\n          }\n          rsPK=pstPK.executeQuery();\n        }\n        TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n        String lockKeys=buildLockKey(selectPKRows);\n        statementProxy.getConnectionProxy().checkLock(lockKeys);\n        break;\n      }\n catch (      LockConflictException lce) {\n        conn.rollback(sp);\n        lockRetryController.sleep(lce);\n      }\n finally {\n        if (rsPK != null) {\n          rsPK.close();\n        }\n        if (stPK != null) {\n          stPK.close();\n        }\n        if (pstPK != null) {\n          pstPK.close();\n        }\n      }\n    }\n  }\n  finally {\n    if (sp != null) {\n      conn.releaseSavepoint(sp);\n    }\n    if (originalAutoCommit) {\n      conn.setAutoCommit(true);\n    }\n  }\n  return rs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 41
      },
      "nodeContext" : "conn.setAutoCommit(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 84,
    "startColumnNumber" : 19,
    "endLineNumber" : 84,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 128,
    "startColumnNumber" : 35,
    "endLineNumber" : 128,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}