{
  "id" : 345,
  "expression" : "bridgeChannel",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-bridge/src/test/java/com/netflix/eureka2/server/channel/BridgeChannelTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bridgeChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 91,
      "startColumnNumber" : 8,
      "endLineNumber" : 91,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 31
      },
      "nodeContext" : "bridgeChannel.connect()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 32
      },
      "nodeContext" : "bridgeChannel.connect();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 964,
        "startLineNumber" : 86,
        "startColumnNumber" : 36,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddThenUpdate(){\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 32
      },
      "nodeContext" : "bridgeChannel.connect();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.channel.BridgeChannel"
  }, {
    "nodeContext" : "bridgeChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 95,
      "startColumnNumber" : 56,
      "endLineNumber" : 95,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 95,
        "startColumnNumber" : 56,
        "endLineNumber" : 95,
        "endColumnNumber" : 81
      },
      "nodeContext" : "bridgeChannel.getSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 82
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 83
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 964,
        "startLineNumber" : 86,
        "startColumnNumber" : 36,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddThenUpdate(){\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 83
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.channel.BridgeChannel"
  }, {
    "nodeContext" : "bridgeChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 96,
      "startColumnNumber" : 73,
      "endLineNumber" : 96,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 96,
        "startColumnNumber" : 73,
        "endLineNumber" : 96,
        "endColumnNumber" : 98
      },
      "nodeContext" : "bridgeChannel.getSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 96,
        "startColumnNumber" : 70,
        "endLineNumber" : 96,
        "endColumnNumber" : 99
      },
      "nodeContext" : "eq(bridgeChannel.getSource())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 100
      },
      "nodeContext" : "verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 101
      },
      "nodeContext" : "verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 964,
        "startLineNumber" : 86,
        "startColumnNumber" : 36,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddThenUpdate(){\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 101
      },
      "nodeContext" : "verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.channel.BridgeChannel"
  }, {
    "nodeContext" : "bridgeChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 101,
      "startColumnNumber" : 56,
      "endLineNumber" : 101,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 101,
        "startColumnNumber" : 56,
        "endLineNumber" : 101,
        "endColumnNumber" : 81
      },
      "nodeContext" : "bridgeChannel.getSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 82
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 83
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 964,
        "startLineNumber" : 86,
        "startColumnNumber" : 36,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddThenUpdate(){\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 83
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.channel.BridgeChannel"
  }, {
    "nodeContext" : "bridgeChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 102,
      "startColumnNumber" : 56,
      "endLineNumber" : 102,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 102,
        "startColumnNumber" : 56,
        "endLineNumber" : 102,
        "endColumnNumber" : 81
      },
      "nodeContext" : "bridgeChannel.getSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 82
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 83
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 964,
        "startLineNumber" : 86,
        "startColumnNumber" : 36,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddThenUpdate(){\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 83
      },
      "nodeContext" : "verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.channel.BridgeChannel"
  }, {
    "nodeContext" : "bridgeChannel",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 103,
      "startColumnNumber" : 73,
      "endLineNumber" : 103,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 103,
        "startColumnNumber" : 73,
        "endLineNumber" : 103,
        "endColumnNumber" : 98
      },
      "nodeContext" : "bridgeChannel.getSource()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 103,
        "startColumnNumber" : 70,
        "endLineNumber" : 103,
        "endColumnNumber" : 99
      },
      "nodeContext" : "eq(bridgeChannel.getSource())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 100
      },
      "nodeContext" : "verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 101
      },
      "nodeContext" : "verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 964,
        "startLineNumber" : 86,
        "startColumnNumber" : 36,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddThenUpdate(){\n  when(mockApplications.getRegisteredApplications()).thenReturn(Arrays.asList(app1t0)).thenReturn(Arrays.asList(app1t1));\n  bridgeChannel.connect();\n  testScheduler.advanceTimeTo(period - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t0Info=converter.fromV1(app1t0.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n  testScheduler.advanceTimeTo(period * 2 - 1,TimeUnit.SECONDS);\n  InstanceInfo app1t1Info=converter.fromV1(app1t1.getInstances().get(0));\n  verify(registry,times(1)).register(app1t0Info,bridgeChannel.getSource());\n  verify(registry,times(1)).register(app1t1Info,bridgeChannel.getSource());\n  verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 101
      },
      "nodeContext" : "verify(registry,never()).unregister(any(InstanceInfo.class),eq(bridgeChannel.getSource()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.channel.BridgeChannel"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 91,
    "startColumnNumber" : 8,
    "endLineNumber" : 91,
    "endColumnNumber" : 21
  }, {
    "charLength" : 13,
    "startLineNumber" : 95,
    "startColumnNumber" : 56,
    "endLineNumber" : 95,
    "endColumnNumber" : 69
  }, {
    "charLength" : 13,
    "startLineNumber" : 96,
    "startColumnNumber" : 73,
    "endLineNumber" : 96,
    "endColumnNumber" : 86
  }, {
    "charLength" : 13,
    "startLineNumber" : 101,
    "startColumnNumber" : 56,
    "endLineNumber" : 101,
    "endColumnNumber" : 69
  }, {
    "charLength" : 13,
    "startLineNumber" : 102,
    "startColumnNumber" : 56,
    "endLineNumber" : 102,
    "endColumnNumber" : 69
  }, {
    "charLength" : 13,
    "startLineNumber" : 103,
    "startColumnNumber" : 73,
    "endLineNumber" : 103,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}