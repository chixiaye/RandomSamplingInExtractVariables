{
  "id" : 897,
  "expression" : "new NodeRejectedEvent(status.getUri())",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "55273655c3d71590e7590a5c7e3f210b3576f617",
  "filePath" : "java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new NodeRejectedEvent(status.getUri())",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 140,
      "startColumnNumber" : 15,
      "endLineNumber" : 140,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 140,
        "startColumnNumber" : 6,
        "endLineNumber" : 140,
        "endColumnNumber" : 54
      },
      "nodeContext" : "bus.fire(new NodeRejectedEvent(status.getUri()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 140,
        "startColumnNumber" : 6,
        "endLineNumber" : 140,
        "endColumnNumber" : 55
      },
      "nodeContext" : "bus.fire(new NodeRejectedEvent(status.getUri()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 138,
        "startColumnNumber" : 57,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n  bus.fire(new NodeRejectedEvent(status.getUri()));\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!Objects.equals(registrationSecret,nodeSecret)) {\n  LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n  bus.fire(new NodeRejectedEvent(status.getUri()));\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1080,
        "startLineNumber" : 134,
        "startColumnNumber" : 70,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Node\",status);\n  Secret nodeSecret=status.getRegistrationSecret() == null ? null : new Secret(status.getRegistrationSecret());\n  if (!Objects.equals(registrationSecret,nodeSecret)) {\n    LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n    bus.fire(new NodeRejectedEvent(status.getUri()));\n    return;\n  }\n  Lock writeLock=lock.writeLock();\n  writeLock.lock();\n  try {\n    if (nodes.containsKey(status.getId())) {\n      return;\n    }\n    Set<Capabilities> capabilities=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n    RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,capabilities);\n    add(remoteNode);\n  }\n  finally {\n    writeLock.unlock();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1148,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void register(Secret registrationSecret,NodeStatus status){\n  Require.nonNull(\"Node\",status);\n  Secret nodeSecret=status.getRegistrationSecret() == null ? null : new Secret(status.getRegistrationSecret());\n  if (!Objects.equals(registrationSecret,nodeSecret)) {\n    LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n    bus.fire(new NodeRejectedEvent(status.getUri()));\n    return;\n  }\n  Lock writeLock=lock.writeLock();\n  writeLock.lock();\n  try {\n    if (nodes.containsKey(status.getId())) {\n      return;\n    }\n    Set<Capabilities> capabilities=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n    RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,capabilities);\n    add(remoteNode);\n  }\n  finally {\n    writeLock.unlock();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 140,
        "startColumnNumber" : 6,
        "endLineNumber" : 140,
        "endColumnNumber" : 55
      },
      "nodeContext" : "bus.fire(new NodeRejectedEvent(status.getUri()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.openqa.selenium.grid.data.NodeRejectedEvent"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 140,
    "startColumnNumber" : 15,
    "endLineNumber" : 140,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}