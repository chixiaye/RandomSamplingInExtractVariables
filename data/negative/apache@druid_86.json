{
  "id" : 86,
  "expression" : "inputQuery.withId(UUID.randomUUID().toString())",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "inputQuery.withId(UUID.randomUUID().toString())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 254,
      "startColumnNumber" : 25,
      "endLineNumber" : 254,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 254,
        "startColumnNumber" : 12,
        "endLineNumber" : 254,
        "endColumnNumber" : 72
      },
      "nodeContext" : "inputQuery=inputQuery.withId(UUID.randomUUID().toString())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 254,
        "startColumnNumber" : 12,
        "endLineNumber" : 254,
        "endColumnNumber" : 73
      },
      "nodeContext" : "inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 253,
        "startColumnNumber" : 42,
        "endLineNumber" : 255,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 253,
        "startColumnNumber" : 10,
        "endLineNumber" : 255,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (inputQuery.getId() == null) {\n  inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 251,
        "startColumnNumber" : 32,
        "endLineNumber" : 256,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  targetServer=hostFinder.pickServer(inputQuery);\n  if (inputQuery.getId() == null) {\n    inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 258,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (inputQuery != null) {\n  targetServer=hostFinder.pickServer(inputQuery);\n  if (inputQuery.getId() == null) {\n    inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n  }\n}\n else {\n  targetServer=hostFinder.pickDefaultServer();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 260,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n  if (inputQuery != null) {\n    targetServer=hostFinder.pickServer(inputQuery);\n    if (inputQuery.getId() == null) {\n      inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n    }\n  }\n else {\n    targetServer=hostFinder.pickDefaultServer();\n  }\n  request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1328,
        "startLineNumber" : 249,
        "startColumnNumber" : 6,
        "endLineNumber" : 284,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n  if (inputQuery != null) {\n    targetServer=hostFinder.pickServer(inputQuery);\n    if (inputQuery.getId() == null) {\n      inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n    }\n  }\n else {\n    targetServer=hostFinder.pickDefaultServer();\n  }\n  request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n}\n catch (IOException e) {\n  log.warn(e,\"Exception parsing query\");\n  final String errorMessage=e.getMessage() == null ? \"no error message\" : e.getMessage();\n  requestLogger.logNativeQuery(RequestLogLine.forNative(null,DateTimes.nowUtc(),request.getRemoteAddr(),new QueryStats(ImmutableMap.of(\"success\",false,\"exception\",errorMessage))));\n  response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n  response.setContentType(MediaType.APPLICATION_JSON);\n  objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of(\"error\",errorMessage));\n  return;\n}\ncatch (Exception e) {\n  handleException(response,objectMapper,e);\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1365,
        "startLineNumber" : 247,
        "startColumnNumber" : 62,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n    if (inputQuery != null) {\n      targetServer=hostFinder.pickServer(inputQuery);\n      if (inputQuery.getId() == null) {\n        inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n      }\n    }\n else {\n      targetServer=hostFinder.pickDefaultServer();\n    }\n    request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n  }\n catch (  IOException e) {\n    log.warn(e,\"Exception parsing query\");\n    final String errorMessage=e.getMessage() == null ? \"no error message\" : e.getMessage();\n    requestLogger.logNativeQuery(RequestLogLine.forNative(null,DateTimes.nowUtc(),request.getRemoteAddr(),new QueryStats(ImmutableMap.of(\"success\",false,\"exception\",errorMessage))));\n    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    response.setContentType(MediaType.APPLICATION_JSON);\n    objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of(\"error\",errorMessage));\n    return;\n  }\ncatch (  Exception e) {\n    handleException(response,objectMapper,e);\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1482,
        "startLineNumber" : 247,
        "startColumnNumber" : 11,
        "endLineNumber" : 287,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isQueryEndpoint && HttpMethod.POST.is(method)) {\n  try {\n    Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n    if (inputQuery != null) {\n      targetServer=hostFinder.pickServer(inputQuery);\n      if (inputQuery.getId() == null) {\n        inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n      }\n    }\n else {\n      targetServer=hostFinder.pickDefaultServer();\n    }\n    request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n  }\n catch (  IOException e) {\n    log.warn(e,\"Exception parsing query\");\n    final String errorMessage=e.getMessage() == null ? \"no error message\" : e.getMessage();\n    requestLogger.logNativeQuery(RequestLogLine.forNative(null,DateTimes.nowUtc(),request.getRemoteAddr(),new QueryStats(ImmutableMap.of(\"success\",false,\"exception\",errorMessage))));\n    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    response.setContentType(MediaType.APPLICATION_JSON);\n    objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of(\"error\",errorMessage));\n    return;\n  }\ncatch (  Exception e) {\n    handleException(response,objectMapper,e);\n    return;\n  }\n}\n else {\n  targetServer=hostFinder.pickDefaultServer();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2719,
        "startLineNumber" : 218,
        "startColumnNumber" : 11,
        "endLineNumber" : 287,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isQueryEndpoint && HttpMethod.DELETE.is(method)) {\n  targetServer=hostFinder.pickDefaultServer();\n  for (  final Server server : hostFinder.getAllServers()) {\n    if (!server.getHost().equals(targetServer.getHost())) {\n      Response.CompleteListener completeListener=result -> {\n        if (result.isFailed()) {\n          log.warn(result.getFailure(),\"Failed to forward cancellation request to [%s]\",server.getHost());\n        }\n      }\n;\n      Request broadcastReq=broadcastClient.newRequest(rewriteURI(request,server.getScheme(),server.getHost())).method(HttpMethod.DELETE).timeout(CANCELLATION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS);\n      copyRequestHeaders(request,broadcastReq);\n      broadcastReq.send(completeListener);\n    }\n    interruptedQueryCount.incrementAndGet();\n  }\n}\n else if (isQueryEndpoint && HttpMethod.POST.is(method)) {\n  try {\n    Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n    if (inputQuery != null) {\n      targetServer=hostFinder.pickServer(inputQuery);\n      if (inputQuery.getId() == null) {\n        inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n      }\n    }\n else {\n      targetServer=hostFinder.pickDefaultServer();\n    }\n    request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n  }\n catch (  IOException e) {\n    log.warn(e,\"Exception parsing query\");\n    final String errorMessage=e.getMessage() == null ? \"no error message\" : e.getMessage();\n    requestLogger.logNativeQuery(RequestLogLine.forNative(null,DateTimes.nowUtc(),request.getRemoteAddr(),new QueryStats(ImmutableMap.of(\"success\",false,\"exception\",errorMessage))));\n    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    response.setContentType(MediaType.APPLICATION_JSON);\n    objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of(\"error\",errorMessage));\n    return;\n  }\ncatch (  Exception e) {\n    handleException(response,objectMapper,e);\n    return;\n  }\n}\n else {\n  targetServer=hostFinder.pickDefaultServer();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3183,
        "startLineNumber" : 209,
        "startColumnNumber" : 11,
        "endLineNumber" : 287,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isAvaticaJson) {\n  Map<String,Object> requestMap=objectMapper.readValue(request.getInputStream(),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT);\n  String connectionId=getAvaticaConnectionId(requestMap);\n  targetServer=hostFinder.findServerAvatica(connectionId);\n  byte[] requestBytes=objectMapper.writeValueAsBytes(requestMap);\n  request.setAttribute(AVATICA_QUERY_ATTRIBUTE,requestBytes);\n}\n else if (isQueryEndpoint && HttpMethod.DELETE.is(method)) {\n  targetServer=hostFinder.pickDefaultServer();\n  for (  final Server server : hostFinder.getAllServers()) {\n    if (!server.getHost().equals(targetServer.getHost())) {\n      Response.CompleteListener completeListener=result -> {\n        if (result.isFailed()) {\n          log.warn(result.getFailure(),\"Failed to forward cancellation request to [%s]\",server.getHost());\n        }\n      }\n;\n      Request broadcastReq=broadcastClient.newRequest(rewriteURI(request,server.getScheme(),server.getHost())).method(HttpMethod.DELETE).timeout(CANCELLATION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS);\n      copyRequestHeaders(request,broadcastReq);\n      broadcastReq.send(completeListener);\n    }\n    interruptedQueryCount.incrementAndGet();\n  }\n}\n else if (isQueryEndpoint && HttpMethod.POST.is(method)) {\n  try {\n    Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n    if (inputQuery != null) {\n      targetServer=hostFinder.pickServer(inputQuery);\n      if (inputQuery.getId() == null) {\n        inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n      }\n    }\n else {\n      targetServer=hostFinder.pickDefaultServer();\n    }\n    request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n  }\n catch (  IOException e) {\n    log.warn(e,\"Exception parsing query\");\n    final String errorMessage=e.getMessage() == null ? \"no error message\" : e.getMessage();\n    requestLogger.logNativeQuery(RequestLogLine.forNative(null,DateTimes.nowUtc(),request.getRemoteAddr(),new QueryStats(ImmutableMap.of(\"success\",false,\"exception\",errorMessage))));\n    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    response.setContentType(MediaType.APPLICATION_JSON);\n    objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of(\"error\",errorMessage));\n    return;\n  }\ncatch (  Exception e) {\n    handleException(response,objectMapper,e);\n    return;\n  }\n}\n else {\n  targetServer=hostFinder.pickDefaultServer();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 327,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3590,
        "startLineNumber" : 203,
        "startColumnNumber" : 4,
        "endLineNumber" : 287,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isAvaticaPb) {\n  byte[] requestBytes=IOUtils.toByteArray(request.getInputStream());\n  Service.Request protobufRequest=this.protobufTranslation.parseRequest(requestBytes);\n  String connectionId=getAvaticaProtobufConnectionId(protobufRequest);\n  targetServer=hostFinder.findServerAvatica(connectionId);\n  request.setAttribute(AVATICA_QUERY_ATTRIBUTE,requestBytes);\n}\n else if (isAvaticaJson) {\n  Map<String,Object> requestMap=objectMapper.readValue(request.getInputStream(),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT);\n  String connectionId=getAvaticaConnectionId(requestMap);\n  targetServer=hostFinder.findServerAvatica(connectionId);\n  byte[] requestBytes=objectMapper.writeValueAsBytes(requestMap);\n  request.setAttribute(AVATICA_QUERY_ATTRIBUTE,requestBytes);\n}\n else if (isQueryEndpoint && HttpMethod.DELETE.is(method)) {\n  targetServer=hostFinder.pickDefaultServer();\n  for (  final Server server : hostFinder.getAllServers()) {\n    if (!server.getHost().equals(targetServer.getHost())) {\n      Response.CompleteListener completeListener=result -> {\n        if (result.isFailed()) {\n          log.warn(result.getFailure(),\"Failed to forward cancellation request to [%s]\",server.getHost());\n        }\n      }\n;\n      Request broadcastReq=broadcastClient.newRequest(rewriteURI(request,server.getScheme(),server.getHost())).method(HttpMethod.DELETE).timeout(CANCELLATION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS);\n      copyRequestHeaders(request,broadcastReq);\n      broadcastReq.send(completeListener);\n    }\n    interruptedQueryCount.incrementAndGet();\n  }\n}\n else if (isQueryEndpoint && HttpMethod.POST.is(method)) {\n  try {\n    Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n    if (inputQuery != null) {\n      targetServer=hostFinder.pickServer(inputQuery);\n      if (inputQuery.getId() == null) {\n        inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n      }\n    }\n else {\n      targetServer=hostFinder.pickDefaultServer();\n    }\n    request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n  }\n catch (  IOException e) {\n    log.warn(e,\"Exception parsing query\");\n    final String errorMessage=e.getMessage() == null ? \"no error message\" : e.getMessage();\n    requestLogger.logNativeQuery(RequestLogLine.forNative(null,DateTimes.nowUtc(),request.getRemoteAddr(),new QueryStats(ImmutableMap.of(\"success\",false,\"exception\",errorMessage))));\n    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    response.setContentType(MediaType.APPLICATION_JSON);\n    objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of(\"error\",errorMessage));\n    return;\n  }\ncatch (  Exception e) {\n    handleException(response,objectMapper,e);\n    return;\n  }\n}\n else {\n  targetServer=hostFinder.pickDefaultServer();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 376,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4668,
        "startLineNumber" : 186,
        "startColumnNumber" : 2,
        "endLineNumber" : 293,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean isSmile=SmileMediaTypes.APPLICATION_JACKSON_SMILE.equals(request.getContentType()) || APPLICATION_SMILE.equals(request.getContentType());\n  final ObjectMapper objectMapper=isSmile ? smileMapper : jsonMapper;\n  request.setAttribute(OBJECTMAPPER_ATTRIBUTE,objectMapper);\n  final String requestURI=request.getRequestURI();\n  final String method=request.getMethod();\n  final Server targetServer;\n  final boolean isQueryEndpoint=requestURI.startsWith(\"/druid/v2\") && !requestURI.startsWith(\"/druid/v2/sql\");\n  final boolean isAvaticaJson=requestURI.startsWith(\"/druid/v2/sql/avatica\");\n  final boolean isAvaticaPb=requestURI.startsWith(\"/druid/v2/sql/avatica-protobuf\");\n  if (isAvaticaPb) {\n    byte[] requestBytes=IOUtils.toByteArray(request.getInputStream());\n    Service.Request protobufRequest=this.protobufTranslation.parseRequest(requestBytes);\n    String connectionId=getAvaticaProtobufConnectionId(protobufRequest);\n    targetServer=hostFinder.findServerAvatica(connectionId);\n    request.setAttribute(AVATICA_QUERY_ATTRIBUTE,requestBytes);\n  }\n else   if (isAvaticaJson) {\n    Map<String,Object> requestMap=objectMapper.readValue(request.getInputStream(),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT);\n    String connectionId=getAvaticaConnectionId(requestMap);\n    targetServer=hostFinder.findServerAvatica(connectionId);\n    byte[] requestBytes=objectMapper.writeValueAsBytes(requestMap);\n    request.setAttribute(AVATICA_QUERY_ATTRIBUTE,requestBytes);\n  }\n else   if (isQueryEndpoint && HttpMethod.DELETE.is(method)) {\n    targetServer=hostFinder.pickDefaultServer();\n    for (    final Server server : hostFinder.getAllServers()) {\n      if (!server.getHost().equals(targetServer.getHost())) {\n        Response.CompleteListener completeListener=result -> {\n          if (result.isFailed()) {\n            log.warn(result.getFailure(),\"Failed to forward cancellation request to [%s]\",server.getHost());\n          }\n        }\n;\n        Request broadcastReq=broadcastClient.newRequest(rewriteURI(request,server.getScheme(),server.getHost())).method(HttpMethod.DELETE).timeout(CANCELLATION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS);\n        copyRequestHeaders(request,broadcastReq);\n        broadcastReq.send(completeListener);\n      }\n      interruptedQueryCount.incrementAndGet();\n    }\n  }\n else   if (isQueryEndpoint && HttpMethod.POST.is(method)) {\n    try {\n      Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n      if (inputQuery != null) {\n        targetServer=hostFinder.pickServer(inputQuery);\n        if (inputQuery.getId() == null) {\n          inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n        }\n      }\n else {\n        targetServer=hostFinder.pickDefaultServer();\n      }\n      request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n    }\n catch (    IOException e) {\n      log.warn(e,\"Exception parsing query\");\n      final String errorMessage=e.getMessage() == null ? \"no error message\" : e.getMessage();\n      requestLogger.logNativeQuery(RequestLogLine.forNative(null,DateTimes.nowUtc(),request.getRemoteAddr(),new QueryStats(ImmutableMap.of(\"success\",false,\"exception\",errorMessage))));\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n      response.setContentType(MediaType.APPLICATION_JSON);\n      objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of(\"error\",errorMessage));\n      return;\n    }\ncatch (    Exception e) {\n      handleException(response,objectMapper,e);\n      return;\n    }\n  }\n else {\n    targetServer=hostFinder.pickDefaultServer();\n  }\n  request.setAttribute(HOST_ATTRIBUTE,targetServer.getHost());\n  request.setAttribute(SCHEME_ATTRIBUTE,targetServer.getScheme());\n  doService(request,response);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 491,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4800,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 293,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  final boolean isSmile=SmileMediaTypes.APPLICATION_JACKSON_SMILE.equals(request.getContentType()) || APPLICATION_SMILE.equals(request.getContentType());\n  final ObjectMapper objectMapper=isSmile ? smileMapper : jsonMapper;\n  request.setAttribute(OBJECTMAPPER_ATTRIBUTE,objectMapper);\n  final String requestURI=request.getRequestURI();\n  final String method=request.getMethod();\n  final Server targetServer;\n  final boolean isQueryEndpoint=requestURI.startsWith(\"/druid/v2\") && !requestURI.startsWith(\"/druid/v2/sql\");\n  final boolean isAvaticaJson=requestURI.startsWith(\"/druid/v2/sql/avatica\");\n  final boolean isAvaticaPb=requestURI.startsWith(\"/druid/v2/sql/avatica-protobuf\");\n  if (isAvaticaPb) {\n    byte[] requestBytes=IOUtils.toByteArray(request.getInputStream());\n    Service.Request protobufRequest=this.protobufTranslation.parseRequest(requestBytes);\n    String connectionId=getAvaticaProtobufConnectionId(protobufRequest);\n    targetServer=hostFinder.findServerAvatica(connectionId);\n    request.setAttribute(AVATICA_QUERY_ATTRIBUTE,requestBytes);\n  }\n else   if (isAvaticaJson) {\n    Map<String,Object> requestMap=objectMapper.readValue(request.getInputStream(),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT);\n    String connectionId=getAvaticaConnectionId(requestMap);\n    targetServer=hostFinder.findServerAvatica(connectionId);\n    byte[] requestBytes=objectMapper.writeValueAsBytes(requestMap);\n    request.setAttribute(AVATICA_QUERY_ATTRIBUTE,requestBytes);\n  }\n else   if (isQueryEndpoint && HttpMethod.DELETE.is(method)) {\n    targetServer=hostFinder.pickDefaultServer();\n    for (    final Server server : hostFinder.getAllServers()) {\n      if (!server.getHost().equals(targetServer.getHost())) {\n        Response.CompleteListener completeListener=result -> {\n          if (result.isFailed()) {\n            log.warn(result.getFailure(),\"Failed to forward cancellation request to [%s]\",server.getHost());\n          }\n        }\n;\n        Request broadcastReq=broadcastClient.newRequest(rewriteURI(request,server.getScheme(),server.getHost())).method(HttpMethod.DELETE).timeout(CANCELLATION_TIMEOUT_MILLIS,TimeUnit.MILLISECONDS);\n        copyRequestHeaders(request,broadcastReq);\n        broadcastReq.send(completeListener);\n      }\n      interruptedQueryCount.incrementAndGet();\n    }\n  }\n else   if (isQueryEndpoint && HttpMethod.POST.is(method)) {\n    try {\n      Query inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);\n      if (inputQuery != null) {\n        targetServer=hostFinder.pickServer(inputQuery);\n        if (inputQuery.getId() == null) {\n          inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n        }\n      }\n else {\n        targetServer=hostFinder.pickDefaultServer();\n      }\n      request.setAttribute(QUERY_ATTRIBUTE,inputQuery);\n    }\n catch (    IOException e) {\n      log.warn(e,\"Exception parsing query\");\n      final String errorMessage=e.getMessage() == null ? \"no error message\" : e.getMessage();\n      requestLogger.logNativeQuery(RequestLogLine.forNative(null,DateTimes.nowUtc(),request.getRemoteAddr(),new QueryStats(ImmutableMap.of(\"success\",false,\"exception\",errorMessage))));\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n      response.setContentType(MediaType.APPLICATION_JSON);\n      objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of(\"error\",errorMessage));\n      return;\n    }\ncatch (    Exception e) {\n      handleException(response,objectMapper,e);\n      return;\n    }\n  }\n else {\n    targetServer=hostFinder.pickDefaultServer();\n  }\n  request.setAttribute(HOST_ATTRIBUTE,targetServer.getHost());\n  request.setAttribute(SCHEME_ATTRIBUTE,targetServer.getScheme());\n  doService(request,response);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 254,
        "startColumnNumber" : 12,
        "endLineNumber" : 254,
        "endColumnNumber" : 73
      },
      "nodeContext" : "inputQuery=inputQuery.withId(UUID.randomUUID().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "org.apache.druid.query.Query"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 254,
    "startColumnNumber" : 25,
    "endLineNumber" : 254,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}