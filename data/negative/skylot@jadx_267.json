{
  "id" : 267,
  "expression" : "hasNextCall == null",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hasNextCall == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 231,
      "startColumnNumber" : 6,
      "endLineNumber" : 231,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 231,
        "startColumnNumber" : 6,
        "endLineNumber" : 231,
        "endColumnNumber" : 45
      },
      "nodeContext" : "hasNextCall == null || nextCall == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 231,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 71
      },
      "nodeContext" : "hasNextCall == null || nextCall == null || !checkInvoke(hasNextCall,\"java.util.Iterator\",\"hasNext()Z\",0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 231,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 82
      },
      "nodeContext" : "hasNextCall == null || nextCall == null || !checkInvoke(hasNextCall,\"java.util.Iterator\",\"hasNext()Z\",0) || !checkInvoke(nextCall,\"java.util.Iterator\",\"next()Ljava/lang/Object;\",0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 231,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (hasNextCall == null || nextCall == null || !checkInvoke(hasNextCall,\"java.util.Iterator\",\"hasNext()Z\",0) || !checkInvoke(nextCall,\"java.util.Iterator\",\"next()Ljava/lang/Object;\",0)) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2226,
        "startLineNumber" : 211,
        "startColumnNumber" : 107,
        "endLineNumber" : 277,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<RegisterArg> condArgs=condition.getRegisterArgs();\n  if (condArgs.size() != 1) {\n    return false;\n  }\n  RegisterArg iteratorArg=condArgs.get(0);\n  SSAVar sVar=iteratorArg.getSVar();\n  if (sVar == null || sVar.isUsedInPhi()) {\n    return false;\n  }\n  List<RegisterArg> useList=sVar.getUseList();\n  InsnNode assignInsn=iteratorArg.getAssignInsn();\n  if (useList.size() != 2 || assignInsn == null || !checkInvoke(assignInsn,null,\"iterator()Ljava/util/Iterator;\",0)) {\n    return false;\n  }\n  InsnArg iterableArg=assignInsn.getArg(0);\n  InsnNode hasNextCall=useList.get(0).getParentInsn();\n  InsnNode nextCall=useList.get(1).getParentInsn();\n  if (hasNextCall == null || nextCall == null || !checkInvoke(hasNextCall,\"java.util.Iterator\",\"hasNext()Z\",0) || !checkInvoke(nextCall,\"java.util.Iterator\",\"next()Ljava/lang/Object;\",0)) {\n    return false;\n  }\n  List<InsnNode> toSkip=new LinkedList<>();\n  RegisterArg iterVar=nextCall.getResult();\n  if (iterVar == null) {\n    return false;\n  }\n  if (nextCall.contains(AFlag.WRAPPED)) {\n    InsnArg wrapArg=BlockUtils.searchWrappedInsnParent(mth,nextCall);\n    if (wrapArg != null && wrapArg.getParentInsn() != null) {\n      InsnNode parentInsn=wrapArg.getParentInsn();\n      if (parentInsn.getType() != InsnType.CHECK_CAST) {\n        if (!fixIterableType(mth,iterableArg,iterVar)) {\n          return false;\n        }\n        parentInsn.replaceArg(wrapArg,iterVar);\n      }\n else {\n        iterVar=parentInsn.getResult();\n        if (iterVar == null || !fixIterableType(mth,iterableArg,iterVar)) {\n          return false;\n        }\n        InsnArg castArg=BlockUtils.searchWrappedInsnParent(mth,parentInsn);\n        if (castArg != null && castArg.getParentInsn() != null) {\n          castArg.getParentInsn().replaceArg(castArg,iterVar);\n        }\n else {\n          toSkip.add(parentInsn);\n        }\n      }\n    }\n else {\n      LOG.warn(\" checkIterableForEach: Wrapped insn not found: {}, mth: {}\",nextCall,mth);\n      return false;\n    }\n  }\n else {\n    toSkip.add(nextCall);\n  }\n  assignInsn.add(AFlag.SKIP);\n  for (  InsnNode insnNode : toSkip) {\n    insnNode.add(AFlag.SKIP);\n  }\n  loopRegion.setType(new ForEachLoop(iterVar,iterableArg));\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 340,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2332,
        "startLineNumber" : 211,
        "startColumnNumber" : 1,
        "endLineNumber" : 277,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static boolean checkIterableForEach(MethodNode mth,LoopRegion loopRegion,IfCondition condition){\n  List<RegisterArg> condArgs=condition.getRegisterArgs();\n  if (condArgs.size() != 1) {\n    return false;\n  }\n  RegisterArg iteratorArg=condArgs.get(0);\n  SSAVar sVar=iteratorArg.getSVar();\n  if (sVar == null || sVar.isUsedInPhi()) {\n    return false;\n  }\n  List<RegisterArg> useList=sVar.getUseList();\n  InsnNode assignInsn=iteratorArg.getAssignInsn();\n  if (useList.size() != 2 || assignInsn == null || !checkInvoke(assignInsn,null,\"iterator()Ljava/util/Iterator;\",0)) {\n    return false;\n  }\n  InsnArg iterableArg=assignInsn.getArg(0);\n  InsnNode hasNextCall=useList.get(0).getParentInsn();\n  InsnNode nextCall=useList.get(1).getParentInsn();\n  if (hasNextCall == null || nextCall == null || !checkInvoke(hasNextCall,\"java.util.Iterator\",\"hasNext()Z\",0) || !checkInvoke(nextCall,\"java.util.Iterator\",\"next()Ljava/lang/Object;\",0)) {\n    return false;\n  }\n  List<InsnNode> toSkip=new LinkedList<>();\n  RegisterArg iterVar=nextCall.getResult();\n  if (iterVar == null) {\n    return false;\n  }\n  if (nextCall.contains(AFlag.WRAPPED)) {\n    InsnArg wrapArg=BlockUtils.searchWrappedInsnParent(mth,nextCall);\n    if (wrapArg != null && wrapArg.getParentInsn() != null) {\n      InsnNode parentInsn=wrapArg.getParentInsn();\n      if (parentInsn.getType() != InsnType.CHECK_CAST) {\n        if (!fixIterableType(mth,iterableArg,iterVar)) {\n          return false;\n        }\n        parentInsn.replaceArg(wrapArg,iterVar);\n      }\n else {\n        iterVar=parentInsn.getResult();\n        if (iterVar == null || !fixIterableType(mth,iterableArg,iterVar)) {\n          return false;\n        }\n        InsnArg castArg=BlockUtils.searchWrappedInsnParent(mth,parentInsn);\n        if (castArg != null && castArg.getParentInsn() != null) {\n          castArg.getParentInsn().replaceArg(castArg,iterVar);\n        }\n else {\n          toSkip.add(parentInsn);\n        }\n      }\n    }\n else {\n      LOG.warn(\" checkIterableForEach: Wrapped insn not found: {}, mth: {}\",nextCall,mth);\n      return false;\n    }\n  }\n else {\n    toSkip.add(nextCall);\n  }\n  assignInsn.add(AFlag.SKIP);\n  for (  InsnNode insnNode : toSkip) {\n    insnNode.add(AFlag.SKIP);\n  }\n  loopRegion.setType(new ForEachLoop(iterVar,iterableArg));\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 357,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 231,
        "startColumnNumber" : 6,
        "endLineNumber" : 231,
        "endColumnNumber" : 45
      },
      "nodeContext" : "hasNextCall == null || nextCall == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 231,
    "startColumnNumber" : 6,
    "endLineNumber" : 231,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}