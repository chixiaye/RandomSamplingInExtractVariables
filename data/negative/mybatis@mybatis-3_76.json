{
  "id" : 76,
  "expression" : "\"HAVING\"",
  "projectName" : "mybatis@mybatis-3",
  "commitID" : "a84ece4f08bb04fa6a5babd800113fe7338a9880",
  "filePath" : "/src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"HAVING\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 97,
      "startColumnNumber" : 28,
      "endLineNumber" : 97,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 70
      },
      "nodeContext" : "selectClause(builder,\"HAVING\",sql().having,\"(\",\")\",\" AND \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 71
      },
      "nodeContext" : "selectClause(builder,\"HAVING\",sql().having,\"(\",\")\",\" AND \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1103,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  if (sql().distinct) {\n    selectClause(builder,\"SELECT DISTINCT\",sql().select,\"\",\"\",\", \");\n  }\n else {\n    selectClause(builder,\"SELECT\",sql().select,\"\",\"\",\", \");\n  }\n  selectClause(builder,\"FROM\",sql().from,\"\",\"\",\", \");\n  selectClause(builder,\"JOIN\",sql().join,\"\",\"\",\"\\nJOIN \");\n  selectClause(builder,\"INNER JOIN\",sql().innerJoin,\"\",\"\",\"\\nINNER JOIN \");\n  selectClause(builder,\"OUTER JOIN\",sql().outerJoin,\"\",\"\",\"\\nOUTER JOIN \");\n  selectClause(builder,\"LEFT OUTER JOIN\",sql().leftOuterJoin,\"\",\"\",\"\\nLEFT OUTER JOIN \");\n  selectClause(builder,\"RIGHT OUTER JOIN\",sql().rightOuterJoin,\"\",\"\",\"\\nRIGHT OUTER JOIN \");\n  selectClause(builder,\"WHERE\",sql().where,\"(\",\")\",\" AND \");\n  selectClause(builder,\"GROUP BY\",sql().groupBy,\"\",\"\",\", \");\n  selectClause(builder,\"HAVING\",sql().having,\"(\",\")\",\" AND \");\n  selectClause(builder,\"ORDER BY\",sql().orderBy,\"\",\"\",\", \");\n  return builder.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  StringBuilder builder=new StringBuilder();\n  if (sql().distinct) {\n    selectClause(builder,\"SELECT DISTINCT\",sql().select,\"\",\"\",\", \");\n  }\n else {\n    selectClause(builder,\"SELECT\",sql().select,\"\",\"\",\", \");\n  }\n  selectClause(builder,\"FROM\",sql().from,\"\",\"\",\", \");\n  selectClause(builder,\"JOIN\",sql().join,\"\",\"\",\"\\nJOIN \");\n  selectClause(builder,\"INNER JOIN\",sql().innerJoin,\"\",\"\",\"\\nINNER JOIN \");\n  selectClause(builder,\"OUTER JOIN\",sql().outerJoin,\"\",\"\",\"\\nOUTER JOIN \");\n  selectClause(builder,\"LEFT OUTER JOIN\",sql().leftOuterJoin,\"\",\"\",\"\\nLEFT OUTER JOIN \");\n  selectClause(builder,\"RIGHT OUTER JOIN\",sql().rightOuterJoin,\"\",\"\",\"\\nRIGHT OUTER JOIN \");\n  selectClause(builder,\"WHERE\",sql().where,\"(\",\")\",\" AND \");\n  selectClause(builder,\"GROUP BY\",sql().groupBy,\"\",\"\",\", \");\n  selectClause(builder,\"HAVING\",sql().having,\"(\",\")\",\" AND \");\n  selectClause(builder,\"ORDER BY\",sql().orderBy,\"\",\"\",\", \");\n  return builder.toString();\n}\n  finally {\n  RESET();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 169,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1152,
        "startLineNumber" : 80,
        "startColumnNumber" : 29,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    StringBuilder builder=new StringBuilder();\n    if (sql().distinct) {\n      selectClause(builder,\"SELECT DISTINCT\",sql().select,\"\",\"\",\", \");\n    }\n else {\n      selectClause(builder,\"SELECT\",sql().select,\"\",\"\",\", \");\n    }\n    selectClause(builder,\"FROM\",sql().from,\"\",\"\",\", \");\n    selectClause(builder,\"JOIN\",sql().join,\"\",\"\",\"\\nJOIN \");\n    selectClause(builder,\"INNER JOIN\",sql().innerJoin,\"\",\"\",\"\\nINNER JOIN \");\n    selectClause(builder,\"OUTER JOIN\",sql().outerJoin,\"\",\"\",\"\\nOUTER JOIN \");\n    selectClause(builder,\"LEFT OUTER JOIN\",sql().leftOuterJoin,\"\",\"\",\"\\nLEFT OUTER JOIN \");\n    selectClause(builder,\"RIGHT OUTER JOIN\",sql().rightOuterJoin,\"\",\"\",\"\\nRIGHT OUTER JOIN \");\n    selectClause(builder,\"WHERE\",sql().where,\"(\",\")\",\" AND \");\n    selectClause(builder,\"GROUP BY\",sql().groupBy,\"\",\"\",\", \");\n    selectClause(builder,\"HAVING\",sql().having,\"(\",\")\",\" AND \");\n    selectClause(builder,\"ORDER BY\",sql().orderBy,\"\",\"\",\", \");\n    return builder.toString();\n  }\n  finally {\n    RESET();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String SQL(){\n  try {\n    StringBuilder builder=new StringBuilder();\n    if (sql().distinct) {\n      selectClause(builder,\"SELECT DISTINCT\",sql().select,\"\",\"\",\", \");\n    }\n else {\n      selectClause(builder,\"SELECT\",sql().select,\"\",\"\",\", \");\n    }\n    selectClause(builder,\"FROM\",sql().from,\"\",\"\",\", \");\n    selectClause(builder,\"JOIN\",sql().join,\"\",\"\",\"\\nJOIN \");\n    selectClause(builder,\"INNER JOIN\",sql().innerJoin,\"\",\"\",\"\\nINNER JOIN \");\n    selectClause(builder,\"OUTER JOIN\",sql().outerJoin,\"\",\"\",\"\\nOUTER JOIN \");\n    selectClause(builder,\"LEFT OUTER JOIN\",sql().leftOuterJoin,\"\",\"\",\"\\nLEFT OUTER JOIN \");\n    selectClause(builder,\"RIGHT OUTER JOIN\",sql().rightOuterJoin,\"\",\"\",\"\\nRIGHT OUTER JOIN \");\n    selectClause(builder,\"WHERE\",sql().where,\"(\",\")\",\" AND \");\n    selectClause(builder,\"GROUP BY\",sql().groupBy,\"\",\"\",\", \");\n    selectClause(builder,\"HAVING\",sql().having,\"(\",\")\",\" AND \");\n    selectClause(builder,\"ORDER BY\",sql().orderBy,\"\",\"\",\", \");\n    return builder.toString();\n  }\n  finally {\n    RESET();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 71
      },
      "nodeContext" : "selectClause(builder,\"HAVING\",sql().having,\"(\",\")\",\" AND \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 97,
    "startColumnNumber" : 28,
    "endLineNumber" : 97,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}