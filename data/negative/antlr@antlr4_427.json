{
  "id" : 427,
  "expression" : "\"    }\\n\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/BaseNodeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"    }\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 242,
      "startColumnNumber" : 6,
      "endLineNumber" : 242,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 1666,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 259,
        "endColumnNumber" : 53
      },
      "nodeContext" : "\"import antlr4 from 'file://<runtimeDir>/src/antlr4/index.js'\\n\" + \"import <lexerName> from './<lexerName>.js';\\n\" + \"import <parserName> from './<parserName>.js';\\n\"+ \"import <listenerName> from './<listenerName>.js';\\n\"+ \"import <visitorName> from './<visitorName>.js';\\n\"+ \"\\n\"+ \"class TreeShapeListener extends antlr4.tree.ParseTreeListener {\\n\"+ \"    enterEveryRule(ctx) {\\n\"+ \"        for (let i = 0; i \\\\< ctx.getChildCount; i++) {\\n\"+ \"            const child = ctx.getChild(i)\\n\"+ \"            const parent = child.parentCtx\\n\"+ \"            if (parent.getRuleContext() !== ctx || !(parent instanceof antlr4.tree.RuleNode)) {\\n\"+ \"                throw `Invalid parse tree shape detected.`\\n\"+ \"            }\\n\"+ \"        }\\n\"+ \"    }\\n\"+ \"}\\n\"+ \"\\n\"+ \"function main(argv) {\\n\"+ \"    var input = new antlr4.FileStream(argv[2], true);\\n\"+ \"    var lexer = new <lexerName>(input);\\n\"+ \"    var stream = new antlr4.CommonTokenStream(lexer);\\n\"+ \"<createParser>\"+ \"    parser.buildParseTrees = true;\\n\"+ \"\t   const printer = function() {\\n\"+ \"\t\tthis.println = function(s) { console.log(s); }\\n\"+ \"\t\tthis.print = function(s) { process.stdout.write(s); }\\n\"+ \"\t\treturn this;\\n\"+ \"\t };\\n\"+ \"    parser.printer = new printer();\\n\"+ \"    var tree = parser.<parserStartRuleName>();\\n\"+ \"    antlr4.tree.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);\\n\"+ \"}\\n\"+ \"\\n\"+ \"main(process.argv);\\n\"+ \"\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 37,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 226,
        "startColumnNumber" : 20,
        "endLineNumber" : 259,
        "endColumnNumber" : 54
      },
      "nodeContext" : "new ST(\"import antlr4 from 'file://<runtimeDir>/src/antlr4/index.js'\\n\" + \"import <lexerName> from './<lexerName>.js';\\n\" + \"import <parserName> from './<parserName>.js';\\n\"+ \"import <listenerName> from './<listenerName>.js';\\n\"+ \"import <visitorName> from './<visitorName>.js';\\n\"+ \"\\n\"+ \"class TreeShapeListener extends antlr4.tree.ParseTreeListener {\\n\"+ \"    enterEveryRule(ctx) {\\n\"+ \"        for (let i = 0; i \\\\< ctx.getChildCount; i++) {\\n\"+ \"            const child = ctx.getChild(i)\\n\"+ \"            const parent = child.parentCtx\\n\"+ \"            if (parent.getRuleContext() !== ctx || !(parent instanceof antlr4.tree.RuleNode)) {\\n\"+ \"                throw `Invalid parse tree shape detected.`\\n\"+ \"            }\\n\"+ \"        }\\n\"+ \"    }\\n\"+ \"}\\n\"+ \"\\n\"+ \"function main(argv) {\\n\"+ \"    var input = new antlr4.FileStream(argv[2], true);\\n\"+ \"    var lexer = new <lexerName>(input);\\n\"+ \"    var stream = new antlr4.CommonTokenStream(lexer);\\n\"+ \"<createParser>\"+ \"    parser.buildParseTrees = true;\\n\"+ \"\t   const printer = function() {\\n\"+ \"\t\tthis.println = function(s) { console.log(s); }\\n\"+ \"\t\tthis.print = function(s) { process.stdout.write(s); }\\n\"+ \"\t\treturn this;\\n\"+ \"\t };\\n\"+ \"    parser.printer = new printer();\\n\"+ \"    var tree = parser.<parserStartRuleName>();\\n\"+ \"    antlr4.tree.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);\\n\"+ \"}\\n\"+ \"\\n\"+ \"main(process.argv);\\n\"+ \"\\n\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 40,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 226,
        "startColumnNumber" : 5,
        "endLineNumber" : 259,
        "endColumnNumber" : 54
      },
      "nodeContext" : "outputFileST=new ST(\"import antlr4 from 'file://<runtimeDir>/src/antlr4/index.js'\\n\" + \"import <lexerName> from './<lexerName>.js';\\n\" + \"import <parserName> from './<parserName>.js';\\n\"+ \"import <listenerName> from './<listenerName>.js';\\n\"+ \"import <visitorName> from './<visitorName>.js';\\n\"+ \"\\n\"+ \"class TreeShapeListener extends antlr4.tree.ParseTreeListener {\\n\"+ \"    enterEveryRule(ctx) {\\n\"+ \"        for (let i = 0; i \\\\< ctx.getChildCount; i++) {\\n\"+ \"            const child = ctx.getChild(i)\\n\"+ \"            const parent = child.parentCtx\\n\"+ \"            if (parent.getRuleContext() !== ctx || !(parent instanceof antlr4.tree.RuleNode)) {\\n\"+ \"                throw `Invalid parse tree shape detected.`\\n\"+ \"            }\\n\"+ \"        }\\n\"+ \"    }\\n\"+ \"}\\n\"+ \"\\n\"+ \"function main(argv) {\\n\"+ \"    var input = new antlr4.FileStream(argv[2], true);\\n\"+ \"    var lexer = new <lexerName>(input);\\n\"+ \"    var stream = new antlr4.CommonTokenStream(lexer);\\n\"+ \"<createParser>\"+ \"    parser.buildParseTrees = true;\\n\"+ \"\t   const printer = function() {\\n\"+ \"\t\tthis.println = function(s) { console.log(s); }\\n\"+ \"\t\tthis.print = function(s) { process.stdout.write(s); }\\n\"+ \"\t\treturn this;\\n\"+ \"\t };\\n\"+ \"    parser.printer = new printer();\\n\"+ \"    var tree = parser.<parserStartRuleName>();\\n\"+ \"    antlr4.tree.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);\\n\"+ \"}\\n\"+ \"\\n\"+ \"main(process.argv);\\n\"+ \"\\n\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 42,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1699,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 259,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ST outputFileST=new ST(\"import antlr4 from 'file://<runtimeDir>/src/antlr4/index.js'\\n\" + \"import <lexerName> from './<lexerName>.js';\\n\" + \"import <parserName> from './<parserName>.js';\\n\"+ \"import <listenerName> from './<listenerName>.js';\\n\"+ \"import <visitorName> from './<visitorName>.js';\\n\"+ \"\\n\"+ \"class TreeShapeListener extends antlr4.tree.ParseTreeListener {\\n\"+ \"    enterEveryRule(ctx) {\\n\"+ \"        for (let i = 0; i \\\\< ctx.getChildCount; i++) {\\n\"+ \"            const child = ctx.getChild(i)\\n\"+ \"            const parent = child.parentCtx\\n\"+ \"            if (parent.getRuleContext() !== ctx || !(parent instanceof antlr4.tree.RuleNode)) {\\n\"+ \"                throw `Invalid parse tree shape detected.`\\n\"+ \"            }\\n\"+ \"        }\\n\"+ \"    }\\n\"+ \"}\\n\"+ \"\\n\"+ \"function main(argv) {\\n\"+ \"    var input = new antlr4.FileStream(argv[2], true);\\n\"+ \"    var lexer = new <lexerName>(input);\\n\"+ \"    var stream = new antlr4.CommonTokenStream(lexer);\\n\"+ \"<createParser>\"+ \"    parser.buildParseTrees = true;\\n\"+ \"\t   const printer = function() {\\n\"+ \"\t\tthis.println = function(s) { console.log(s); }\\n\"+ \"\t\tthis.print = function(s) { process.stdout.write(s); }\\n\"+ \"\t\treturn this;\\n\"+ \"\t };\\n\"+ \"    parser.printer = new printer();\\n\"+ \"    var tree = parser.<parserStartRuleName>();\\n\"+ \"    antlr4.tree.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);\\n\"+ \"}\\n\"+ \"\\n\"+ \"main(process.argv);\\n\"+ \"\\n\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 45,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2399,
        "startLineNumber" : 225,
        "startColumnNumber" : 46,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ST outputFileST=new ST(\"import antlr4 from 'file://<runtimeDir>/src/antlr4/index.js'\\n\" + \"import <lexerName> from './<lexerName>.js';\\n\" + \"import <parserName> from './<parserName>.js';\\n\"+ \"import <listenerName> from './<listenerName>.js';\\n\"+ \"import <visitorName> from './<visitorName>.js';\\n\"+ \"\\n\"+ \"class TreeShapeListener extends antlr4.tree.ParseTreeListener {\\n\"+ \"    enterEveryRule(ctx) {\\n\"+ \"        for (let i = 0; i \\\\< ctx.getChildCount; i++) {\\n\"+ \"            const child = ctx.getChild(i)\\n\"+ \"            const parent = child.parentCtx\\n\"+ \"            if (parent.getRuleContext() !== ctx || !(parent instanceof antlr4.tree.RuleNode)) {\\n\"+ \"                throw `Invalid parse tree shape detected.`\\n\"+ \"            }\\n\"+ \"        }\\n\"+ \"    }\\n\"+ \"}\\n\"+ \"\\n\"+ \"function main(argv) {\\n\"+ \"    var input = new antlr4.FileStream(argv[2], true);\\n\"+ \"    var lexer = new <lexerName>(input);\\n\"+ \"    var stream = new antlr4.CommonTokenStream(lexer);\\n\"+ \"<createParser>\"+ \"    parser.buildParseTrees = true;\\n\"+ \"\t   const printer = function() {\\n\"+ \"\t\tthis.println = function(s) { console.log(s); }\\n\"+ \"\t\tthis.print = function(s) { process.stdout.write(s); }\\n\"+ \"\t\treturn this;\\n\"+ \"\t };\\n\"+ \"    parser.printer = new printer();\\n\"+ \"    var tree = parser.<parserStartRuleName>();\\n\"+ \"    antlr4.tree.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);\\n\"+ \"}\\n\"+ \"\\n\"+ \"main(process.argv);\\n\"+ \"\\n\");\n  ST createParserST=new ST(\"\tvar parser = new <parserName>(stream);\\n\");\n  if (debug) {\n    createParserST=new ST(\"\tvar parser = new <parserName>(stream);\\n\" + \"\tparser.addErrorListener(new antlr4.error.DiagnosticErrorListener());\\n\");\n  }\n  outputFileST.add(\"createParser\",createParserST);\n  outputFileST.add(\"parserName\",parserName);\n  outputFileST.add(\"lexerName\",lexerName);\n  outputFileST.add(\"listenerName\",listenerName);\n  outputFileST.add(\"visitorName\",visitorName);\n  outputFileST.add(\"parserStartRuleName\",parserStartRuleName);\n  outputFileST.add(\"runtimeDir\",runtimeDir);\n  writeFile(getTempDirPath(),\"Test.js\",outputFileST.render());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2563,
        "startLineNumber" : 223,
        "startColumnNumber" : 1,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void writeParserTestFile(String parserName,String lexerName,String listenerName,String visitorName,String parserStartRuleName,boolean debug){\n  ST outputFileST=new ST(\"import antlr4 from 'file://<runtimeDir>/src/antlr4/index.js'\\n\" + \"import <lexerName> from './<lexerName>.js';\\n\" + \"import <parserName> from './<parserName>.js';\\n\"+ \"import <listenerName> from './<listenerName>.js';\\n\"+ \"import <visitorName> from './<visitorName>.js';\\n\"+ \"\\n\"+ \"class TreeShapeListener extends antlr4.tree.ParseTreeListener {\\n\"+ \"    enterEveryRule(ctx) {\\n\"+ \"        for (let i = 0; i \\\\< ctx.getChildCount; i++) {\\n\"+ \"            const child = ctx.getChild(i)\\n\"+ \"            const parent = child.parentCtx\\n\"+ \"            if (parent.getRuleContext() !== ctx || !(parent instanceof antlr4.tree.RuleNode)) {\\n\"+ \"                throw `Invalid parse tree shape detected.`\\n\"+ \"            }\\n\"+ \"        }\\n\"+ \"    }\\n\"+ \"}\\n\"+ \"\\n\"+ \"function main(argv) {\\n\"+ \"    var input = new antlr4.FileStream(argv[2], true);\\n\"+ \"    var lexer = new <lexerName>(input);\\n\"+ \"    var stream = new antlr4.CommonTokenStream(lexer);\\n\"+ \"<createParser>\"+ \"    parser.buildParseTrees = true;\\n\"+ \"\t   const printer = function() {\\n\"+ \"\t\tthis.println = function(s) { console.log(s); }\\n\"+ \"\t\tthis.print = function(s) { process.stdout.write(s); }\\n\"+ \"\t\treturn this;\\n\"+ \"\t };\\n\"+ \"    parser.printer = new printer();\\n\"+ \"    var tree = parser.<parserStartRuleName>();\\n\"+ \"    antlr4.tree.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);\\n\"+ \"}\\n\"+ \"\\n\"+ \"main(process.argv);\\n\"+ \"\\n\");\n  ST createParserST=new ST(\"\tvar parser = new <parserName>(stream);\\n\");\n  if (debug) {\n    createParserST=new ST(\"\tvar parser = new <parserName>(stream);\\n\" + \"\tparser.addErrorListener(new antlr4.error.DiagnosticErrorListener());\\n\");\n  }\n  outputFileST.add(\"createParser\",createParserST);\n  outputFileST.add(\"parserName\",parserName);\n  outputFileST.add(\"lexerName\",lexerName);\n  outputFileST.add(\"listenerName\",listenerName);\n  outputFileST.add(\"visitorName\",visitorName);\n  outputFileST.add(\"parserStartRuleName\",parserStartRuleName);\n  outputFileST.add(\"runtimeDir\",runtimeDir);\n  writeFile(getTempDirPath(),\"Test.js\",outputFileST.render());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 1666,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 259,
        "endColumnNumber" : 53
      },
      "nodeContext" : "\"import antlr4 from 'file://<runtimeDir>/src/antlr4/index.js'\\n\" + \"import <lexerName> from './<lexerName>.js';\\n\" + \"import <parserName> from './<parserName>.js';\\n\"+ \"import <listenerName> from './<listenerName>.js';\\n\"+ \"import <visitorName> from './<visitorName>.js';\\n\"+ \"\\n\"+ \"class TreeShapeListener extends antlr4.tree.ParseTreeListener {\\n\"+ \"    enterEveryRule(ctx) {\\n\"+ \"        for (let i = 0; i \\\\< ctx.getChildCount; i++) {\\n\"+ \"            const child = ctx.getChild(i)\\n\"+ \"            const parent = child.parentCtx\\n\"+ \"            if (parent.getRuleContext() !== ctx || !(parent instanceof antlr4.tree.RuleNode)) {\\n\"+ \"                throw `Invalid parse tree shape detected.`\\n\"+ \"            }\\n\"+ \"        }\\n\"+ \"    }\\n\"+ \"}\\n\"+ \"\\n\"+ \"function main(argv) {\\n\"+ \"    var input = new antlr4.FileStream(argv[2], true);\\n\"+ \"    var lexer = new <lexerName>(input);\\n\"+ \"    var stream = new antlr4.CommonTokenStream(lexer);\\n\"+ \"<createParser>\"+ \"    parser.buildParseTrees = true;\\n\"+ \"\t   const printer = function() {\\n\"+ \"\t\tthis.println = function(s) { console.log(s); }\\n\"+ \"\t\tthis.print = function(s) { process.stdout.write(s); }\\n\"+ \"\t\treturn this;\\n\"+ \"\t };\\n\"+ \"    parser.printer = new printer();\\n\"+ \"    var tree = parser.<parserStartRuleName>();\\n\"+ \"    antlr4.tree.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);\\n\"+ \"}\\n\"+ \"\\n\"+ \"main(process.argv);\\n\"+ \"\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 37,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 242,
    "startColumnNumber" : 6,
    "endLineNumber" : 242,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}