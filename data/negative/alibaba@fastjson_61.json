{
  "id" : 61,
  "expression" : "0xff",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/test/Base64.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0xff",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 110,
      "startColumnNumber" : 24,
      "endLineNumber" : 110,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 28
      },
      "nodeContext" : "sArr[s++] & 0xff",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 110,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 29
      },
      "nodeContext" : "(sArr[s++] & 0xff)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 110,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 35
      },
      "nodeContext" : "(sArr[s++] & 0xff) << 16",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 110,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 110,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 110,
        "startColumnNumber" : 7,
        "endLineNumber" : 110,
        "endColumnNumber" : 82
      },
      "nodeContext" : "i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 510,
        "startLineNumber" : 108,
        "startColumnNumber" : 44,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n  dArr[d++]=CA[(i >>> 18) & 0x3f];\n  dArr[d++]=CA[(i >>> 12) & 0x3f];\n  dArr[d++]=CA[(i >>> 6) & 0x3f];\n  dArr[d++]=CA[i & 0x3f];\n  if (lineSep && ++cc == 19 && d < dLen - 2) {\n    dArr[d++]='\\r';\n    dArr[d++]='\\n';\n    cc=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int s=0, d=0, cc=0; s < eLen; ) {\n  int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n  dArr[d++]=CA[(i >>> 18) & 0x3f];\n  dArr[d++]=CA[(i >>> 12) & 0x3f];\n  dArr[d++]=CA[(i >>> 6) & 0x3f];\n  dArr[d++]=CA[i & 0x3f];\n  if (lineSep && ++cc == 19 && d < dLen - 2) {\n    dArr[d++]='\\r';\n    dArr[d++]='\\n';\n    cc=0;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 132,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 96,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 88,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Encodes a raw byte array into a BASE64 <code>char[]</code> representation i accordance with RFC 2045.\n * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.\n * @param lineSep Optional \"\\r\\n\" after 76 characters, unless end of file.<br>No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a little faster.\n * @return A BASE64 encoded array. Never <code>null</code>.\n */\npublic final static char[] encodeToChar(byte[] sArr,boolean lineSep){\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0xff",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 110,
      "startColumnNumber" : 51,
      "endLineNumber" : 110,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 110,
        "startColumnNumber" : 39,
        "endLineNumber" : 110,
        "endColumnNumber" : 55
      },
      "nodeContext" : "sArr[s++] & 0xff",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 110,
        "startColumnNumber" : 38,
        "endLineNumber" : 110,
        "endColumnNumber" : 56
      },
      "nodeContext" : "(sArr[s++] & 0xff)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 110,
        "startColumnNumber" : 38,
        "endLineNumber" : 110,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(sArr[s++] & 0xff) << 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 110,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 110,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 110,
        "startColumnNumber" : 7,
        "endLineNumber" : 110,
        "endColumnNumber" : 82
      },
      "nodeContext" : "i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 510,
        "startLineNumber" : 108,
        "startColumnNumber" : 44,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n  dArr[d++]=CA[(i >>> 18) & 0x3f];\n  dArr[d++]=CA[(i >>> 12) & 0x3f];\n  dArr[d++]=CA[(i >>> 6) & 0x3f];\n  dArr[d++]=CA[i & 0x3f];\n  if (lineSep && ++cc == 19 && d < dLen - 2) {\n    dArr[d++]='\\r';\n    dArr[d++]='\\n';\n    cc=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int s=0, d=0, cc=0; s < eLen; ) {\n  int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n  dArr[d++]=CA[(i >>> 18) & 0x3f];\n  dArr[d++]=CA[(i >>> 12) & 0x3f];\n  dArr[d++]=CA[(i >>> 6) & 0x3f];\n  dArr[d++]=CA[i & 0x3f];\n  if (lineSep && ++cc == 19 && d < dLen - 2) {\n    dArr[d++]='\\r';\n    dArr[d++]='\\n';\n    cc=0;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 132,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 96,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 88,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Encodes a raw byte array into a BASE64 <code>char[]</code> representation i accordance with RFC 2045.\n * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.\n * @param lineSep Optional \"\\r\\n\" after 76 characters, unless end of file.<br>No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a little faster.\n * @return A BASE64 encoded array. Never <code>null</code>.\n */\npublic final static char[] encodeToChar(byte[] sArr,boolean lineSep){\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0xff",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 110,
      "startColumnNumber" : 77,
      "endLineNumber" : 110,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 110,
        "startColumnNumber" : 65,
        "endLineNumber" : 110,
        "endColumnNumber" : 81
      },
      "nodeContext" : "sArr[s++] & 0xff",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 110,
        "startColumnNumber" : 64,
        "endLineNumber" : 110,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(sArr[s++] & 0xff)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 110,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 110,
        "startColumnNumber" : 7,
        "endLineNumber" : 110,
        "endColumnNumber" : 82
      },
      "nodeContext" : "i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 510,
        "startLineNumber" : 108,
        "startColumnNumber" : 44,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n  dArr[d++]=CA[(i >>> 18) & 0x3f];\n  dArr[d++]=CA[(i >>> 12) & 0x3f];\n  dArr[d++]=CA[(i >>> 6) & 0x3f];\n  dArr[d++]=CA[i & 0x3f];\n  if (lineSep && ++cc == 19 && d < dLen - 2) {\n    dArr[d++]='\\r';\n    dArr[d++]='\\n';\n    cc=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int s=0, d=0, cc=0; s < eLen; ) {\n  int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n  dArr[d++]=CA[(i >>> 18) & 0x3f];\n  dArr[d++]=CA[(i >>> 12) & 0x3f];\n  dArr[d++]=CA[(i >>> 6) & 0x3f];\n  dArr[d++]=CA[i & 0x3f];\n  if (lineSep && ++cc == 19 && d < dLen - 2) {\n    dArr[d++]='\\r';\n    dArr[d++]='\\n';\n    cc=0;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 132,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 96,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 88,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Encodes a raw byte array into a BASE64 <code>char[]</code> representation i accordance with RFC 2045.\n * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.\n * @param lineSep Optional \"\\r\\n\" after 76 characters, unless end of file.<br>No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a little faster.\n * @return A BASE64 encoded array. Never <code>null</code>.\n */\npublic final static char[] encodeToChar(byte[] sArr,boolean lineSep){\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0xff",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 130,
      "startColumnNumber" : 26,
      "endLineNumber" : 130,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 130,
        "startColumnNumber" : 13,
        "endLineNumber" : 130,
        "endColumnNumber" : 30
      },
      "nodeContext" : "sArr[eLen] & 0xff",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 31
      },
      "nodeContext" : "(sArr[eLen] & 0xff)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 37
      },
      "nodeContext" : "(sArr[eLen] & 0xff) << 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 130,
        "startColumnNumber" : 11,
        "endLineNumber" : 130,
        "endColumnNumber" : 38
      },
      "nodeContext" : "((sArr[eLen] & 0xff) << 10)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 130,
        "startColumnNumber" : 11,
        "endLineNumber" : 130,
        "endColumnNumber" : 89
      },
      "nodeContext" : "((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 27,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 130,
        "startColumnNumber" : 7,
        "endLineNumber" : 130,
        "endColumnNumber" : 89
      },
      "nodeContext" : "i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 29,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 130,
        "startColumnNumber" : 3,
        "endLineNumber" : 130,
        "endColumnNumber" : 90
      },
      "nodeContext" : "int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 306,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n  dArr[dLen - 4]=CA[i >> 12];\n  dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n  dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n  dArr[dLen - 1]='=';\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (left > 0) {\n  int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n  dArr[dLen - 4]=CA[i >> 12];\n  dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n  dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n  dArr[dLen - 1]='=';\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 96,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 88,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Encodes a raw byte array into a BASE64 <code>char[]</code> representation i accordance with RFC 2045.\n * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.\n * @param lineSep Optional \"\\r\\n\" after 76 characters, unless end of file.<br>No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a little faster.\n * @return A BASE64 encoded array. Never <code>null</code>.\n */\npublic final static char[] encodeToChar(byte[] sArr,boolean lineSep){\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 130,
        "startColumnNumber" : 3,
        "endLineNumber" : 130,
        "endColumnNumber" : 90
      },
      "nodeContext" : "int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0xff",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 130,
      "startColumnNumber" : 73,
      "endLineNumber" : 130,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 130,
        "startColumnNumber" : 56,
        "endLineNumber" : 130,
        "endColumnNumber" : 77
      },
      "nodeContext" : "sArr[sLen - 1] & 0xff",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 130,
        "startColumnNumber" : 55,
        "endLineNumber" : 130,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(sArr[sLen - 1] & 0xff)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 130,
        "startColumnNumber" : 55,
        "endLineNumber" : 130,
        "endColumnNumber" : 83
      },
      "nodeContext" : "(sArr[sLen - 1] & 0xff) << 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 130,
        "startColumnNumber" : 54,
        "endLineNumber" : 130,
        "endColumnNumber" : 84
      },
      "nodeContext" : "((sArr[sLen - 1] & 0xff) << 2)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 130,
        "startColumnNumber" : 42,
        "endLineNumber" : 130,
        "endColumnNumber" : 88
      },
      "nodeContext" : "left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 130,
        "startColumnNumber" : 41,
        "endLineNumber" : 130,
        "endColumnNumber" : 89
      },
      "nodeContext" : "(left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 130,
        "startColumnNumber" : 11,
        "endLineNumber" : 130,
        "endColumnNumber" : 89
      },
      "nodeContext" : "((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 27,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 130,
        "startColumnNumber" : 7,
        "endLineNumber" : 130,
        "endColumnNumber" : 89
      },
      "nodeContext" : "i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 29,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 130,
        "startColumnNumber" : 3,
        "endLineNumber" : 130,
        "endColumnNumber" : 90
      },
      "nodeContext" : "int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 306,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n  dArr[dLen - 4]=CA[i >> 12];\n  dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n  dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n  dArr[dLen - 1]='=';\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (left > 0) {\n  int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n  dArr[dLen - 4]=CA[i >> 12];\n  dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n  dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n  dArr[dLen - 1]='=';\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 96,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 88,
        "startColumnNumber" : 1,
        "endLineNumber" : 139,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Encodes a raw byte array into a BASE64 <code>char[]</code> representation i accordance with RFC 2045.\n * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.\n * @param lineSep Optional \"\\r\\n\" after 76 characters, unless end of file.<br>No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a little faster.\n * @return A BASE64 encoded array. Never <code>null</code>.\n */\npublic final static char[] encodeToChar(byte[] sArr,boolean lineSep){\n  int sLen=sArr != null ? sArr.length : 0;\n  if (sLen == 0)   return new char[0];\n  int eLen=(sLen / 3) * 3;\n  int cCnt=((sLen - 1) / 3 + 1) << 2;\n  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);\n  char[] dArr=new char[dLen];\n  for (int s=0, d=0, cc=0; s < eLen; ) {\n    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n    dArr[d++]=CA[(i >>> 18) & 0x3f];\n    dArr[d++]=CA[(i >>> 12) & 0x3f];\n    dArr[d++]=CA[(i >>> 6) & 0x3f];\n    dArr[d++]=CA[i & 0x3f];\n    if (lineSep && ++cc == 19 && d < dLen - 2) {\n      dArr[d++]='\\r';\n      dArr[d++]='\\n';\n      cc=0;\n    }\n  }\n  int left=sLen - eLen;\n  if (left > 0) {\n    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n    dArr[dLen - 4]=CA[i >> 12];\n    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];\n    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';\n    dArr[dLen - 1]='=';\n  }\n  return dArr;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 130,
        "startColumnNumber" : 3,
        "endLineNumber" : 130,
        "endColumnNumber" : 90
      },
      "nodeContext" : "int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 110,
    "startColumnNumber" : 24,
    "endLineNumber" : 110,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 110,
    "startColumnNumber" : 51,
    "endLineNumber" : 110,
    "endColumnNumber" : 55
  }, {
    "charLength" : 4,
    "startLineNumber" : 110,
    "startColumnNumber" : 77,
    "endLineNumber" : 110,
    "endColumnNumber" : 81
  }, {
    "charLength" : 4,
    "startLineNumber" : 130,
    "startColumnNumber" : 26,
    "endLineNumber" : 130,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 130,
    "startColumnNumber" : 73,
    "endLineNumber" : 130,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  } ]
}