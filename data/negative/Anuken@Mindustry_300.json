{
  "id" : 300,
  "expression" : "sector.preset.localizedName",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/core/World.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sector.preset.localizedName",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 272,
      "startColumnNumber" : 129,
      "endLineNumber" : 272,
      "endColumnNumber" : 156
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 272,
        "startColumnNumber" : 49,
        "endLineNumber" : 272,
        "endColumnNumber" : 156
      },
      "nodeContext" : "sector.preset == null ? sector.planet.localizedName + \"; Sector \" + sector.id : sector.preset.localizedName",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 272,
        "startColumnNumber" : 28,
        "endLineNumber" : 272,
        "endColumnNumber" : 157
      },
      "nodeContext" : "StringMap.of(\"name\",sector.preset == null ? sector.planet.localizedName + \"; Sector \" + sector.id : sector.preset.localizedName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 272,
        "startColumnNumber" : 20,
        "endLineNumber" : 272,
        "endColumnNumber" : 158
      },
      "nodeContext" : "new Map(StringMap.of(\"name\",sector.preset == null ? sector.planet.localizedName + \"; Sector \" + sector.id : sector.preset.localizedName))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 272,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 158
      },
      "nodeContext" : "state.map=new Map(StringMap.of(\"name\",sector.preset == null ? sector.planet.localizedName + \"; Sector \" + sector.id : sector.preset.localizedName))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 272,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 159
      },
      "nodeContext" : "state.map=new Map(StringMap.of(\"name\",sector.preset == null ? sector.planet.localizedName + \"; Sector \" + sector.id : sector.preset.localizedName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2596,
        "startLineNumber" : 271,
        "startColumnNumber" : 46,
        "endLineNumber" : 336,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  state.map=new Map(StringMap.of(\"name\",sector.preset == null ? sector.planet.localizedName + \"; Sector \" + sector.id : sector.preset.localizedName));\n  state.rules.sector=sector;\n  state.rules.weather.clear();\n  ObjectIntMap<Block> floorc=new ObjectIntMap<>();\n  ObjectSet<UnlockableContent> content=new ObjectSet<>();\n  for (  Tile tile : world.tiles) {\n    if (world.getDarkness(tile.x,tile.y) >= 3) {\n      continue;\n    }\n    Liquid liquid=tile.floor().liquidDrop;\n    if (tile.floor().itemDrop != null)     content.add(tile.floor().itemDrop);\n    if (tile.overlay().itemDrop != null)     content.add(tile.overlay().itemDrop);\n    if (liquid != null)     content.add(liquid);\n    if (!tile.block().isStatic()) {\n      floorc.increment(tile.floor());\n      if (tile.overlay() != Blocks.air) {\n        floorc.increment(tile.overlay());\n      }\n    }\n  }\n  Seq<Entry<Block>> entries=floorc.entries().toArray();\n  entries.sort(e -> -e.value);\n  entries.removeAll(e -> e.value < 30);\n  Block[] floors=new Block[entries.size];\n  for (int i=0; i < entries.size; i++) {\n    floors[i]=entries.get(i).key;\n  }\n  boolean hasSnow=floors[0].name.contains(\"ice\") || floors[0].name.contains(\"snow\");\n  boolean hasRain=!hasSnow && content.contains(Liquids.water) && !floors[0].name.contains(\"sand\");\n  boolean hasDesert=!hasSnow && !hasRain && floors[0] == Blocks.sand;\n  boolean hasSpores=floors[0].name.contains(\"spore\") || floors[0].name.contains(\"moss\") || floors[0].name.contains(\"tainted\");\n  if (hasSnow) {\n    state.rules.weather.add(new WeatherEntry(Weathers.snow));\n  }\n  if (hasRain) {\n    state.rules.weather.add(new WeatherEntry(Weathers.rain));\n    state.rules.weather.add(new WeatherEntry(Weathers.fog));\n  }\n  if (hasDesert) {\n    state.rules.weather.add(new WeatherEntry(Weathers.sandstorm));\n  }\n  if (hasSpores) {\n    state.rules.weather.add(new WeatherEntry(Weathers.sporestorm));\n  }\n  sector.info.resources=content.asArray();\n  sector.info.resources.sort(Structs.comps(Structs.comparing(Content::getContentType),Structs.comparingInt(c -> c.id)));\n  sector.saveInfo();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 470,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2638,
        "startLineNumber" : 271,
        "startColumnNumber" : 4,
        "endLineNumber" : 336,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void setSectorRules(Sector sector){\n  state.map=new Map(StringMap.of(\"name\",sector.preset == null ? sector.planet.localizedName + \"; Sector \" + sector.id : sector.preset.localizedName));\n  state.rules.sector=sector;\n  state.rules.weather.clear();\n  ObjectIntMap<Block> floorc=new ObjectIntMap<>();\n  ObjectSet<UnlockableContent> content=new ObjectSet<>();\n  for (  Tile tile : world.tiles) {\n    if (world.getDarkness(tile.x,tile.y) >= 3) {\n      continue;\n    }\n    Liquid liquid=tile.floor().liquidDrop;\n    if (tile.floor().itemDrop != null)     content.add(tile.floor().itemDrop);\n    if (tile.overlay().itemDrop != null)     content.add(tile.overlay().itemDrop);\n    if (liquid != null)     content.add(liquid);\n    if (!tile.block().isStatic()) {\n      floorc.increment(tile.floor());\n      if (tile.overlay() != Blocks.air) {\n        floorc.increment(tile.overlay());\n      }\n    }\n  }\n  Seq<Entry<Block>> entries=floorc.entries().toArray();\n  entries.sort(e -> -e.value);\n  entries.removeAll(e -> e.value < 30);\n  Block[] floors=new Block[entries.size];\n  for (int i=0; i < entries.size; i++) {\n    floors[i]=entries.get(i).key;\n  }\n  boolean hasSnow=floors[0].name.contains(\"ice\") || floors[0].name.contains(\"snow\");\n  boolean hasRain=!hasSnow && content.contains(Liquids.water) && !floors[0].name.contains(\"sand\");\n  boolean hasDesert=!hasSnow && !hasRain && floors[0] == Blocks.sand;\n  boolean hasSpores=floors[0].name.contains(\"spore\") || floors[0].name.contains(\"moss\") || floors[0].name.contains(\"tainted\");\n  if (hasSnow) {\n    state.rules.weather.add(new WeatherEntry(Weathers.snow));\n  }\n  if (hasRain) {\n    state.rules.weather.add(new WeatherEntry(Weathers.rain));\n    state.rules.weather.add(new WeatherEntry(Weathers.fog));\n  }\n  if (hasDesert) {\n    state.rules.weather.add(new WeatherEntry(Weathers.sandstorm));\n  }\n  if (hasSpores) {\n    state.rules.weather.add(new WeatherEntry(Weathers.sporestorm));\n  }\n  sector.info.resources=content.asArray();\n  sector.info.resources.sort(Structs.comps(Structs.comparing(Content::getContentType),Structs.comparingInt(c -> c.id)));\n  sector.saveInfo();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 478,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 272,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 159
      },
      "nodeContext" : "state.map=new Map(StringMap.of(\"name\",sector.preset == null ? sector.planet.localizedName + \"; Sector \" + sector.id : sector.preset.localizedName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 33,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 272,
    "startColumnNumber" : 129,
    "endLineNumber" : 272,
    "endColumnNumber" : 156
  } ],
  "layoutRelationDataList" : [ ]
}