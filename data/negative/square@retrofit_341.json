{
  "id" : 341,
  "expression" : "new Runnable(){\n  @Override public void run(){\n    LogLevel logLevel=restAdapter.logLevel;\n    RestAdapter.Log log=restAdapter.log;\n    try {\n      methodInfo.method.invoke(mockService,args);\n      if (logLevel.log()) {\n        log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      }\n    }\n catch (    Throwable throwable) {\n      final Throwable innerEx=throwable.getCause();\n      if (!(innerEx instanceof MockHttpException)) {\n        if (innerEx instanceof RuntimeException) {\n          throw (RuntimeException)innerEx;\n        }\n        throw new RuntimeException(innerEx);\n      }\n      MockHttpException httpEx=(MockHttpException)innerEx;\n      Response response=httpEx.toResponse(restAdapter.converter);\n      if (logLevel.log()) {\n        log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n          log.log(String.valueOf(httpEx.responseBody));\n          log.log(\"<--- END MOCK\");\n        }\n      }\n      RetrofitError error=new MockHttpRetrofitError(httpEx.getMessage(),url,response,httpEx.responseBody,methodInfo.responseObjectType);\n      Throwable cause=restAdapter.errorHandler.handleError(error);\n      final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n      callback.failure(e);\n    }\n  }\n}\n",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Runnable(){\n  @Override public void run(){\n    LogLevel logLevel=restAdapter.logLevel;\n    RestAdapter.Log log=restAdapter.log;\n    try {\n      methodInfo.method.invoke(mockService,args);\n      if (logLevel.log()) {\n        log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      }\n    }\n catch (    Throwable throwable) {\n      final Throwable innerEx=throwable.getCause();\n      if (!(innerEx instanceof MockHttpException)) {\n        if (innerEx instanceof RuntimeException) {\n          throw (RuntimeException)innerEx;\n        }\n        throw new RuntimeException(innerEx);\n      }\n      MockHttpException httpEx=(MockHttpException)innerEx;\n      Response response=httpEx.toResponse(restAdapter.converter);\n      if (logLevel.log()) {\n        log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n          log.log(String.valueOf(httpEx.responseBody));\n          log.log(\"<--- END MOCK\");\n        }\n      }\n      RetrofitError error=new MockHttpRetrofitError(httpEx.getMessage(),url,response,httpEx.responseBody,methodInfo.responseObjectType);\n      Throwable cause=restAdapter.errorHandler.handleError(error);\n      final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n      callback.failure(e);\n    }\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 1585,
      "startLineNumber" : 394,
      "startColumnNumber" : 43,
      "endLineNumber" : 431,
      "endColumnNumber" : 7
    },
    "astNodeNumber" : 209,
    "astHeight" : 16,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1623,
        "startLineNumber" : 394,
        "startColumnNumber" : 6,
        "endLineNumber" : 431,
        "endColumnNumber" : 8
      },
      "nodeContext" : "restAdapter.callbackExecutor.execute(new Runnable(){\n  @Override public void run(){\n    LogLevel logLevel=restAdapter.logLevel;\n    RestAdapter.Log log=restAdapter.log;\n    try {\n      methodInfo.method.invoke(mockService,args);\n      if (logLevel.log()) {\n        log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      }\n    }\n catch (    Throwable throwable) {\n      final Throwable innerEx=throwable.getCause();\n      if (!(innerEx instanceof MockHttpException)) {\n        if (innerEx instanceof RuntimeException) {\n          throw (RuntimeException)innerEx;\n        }\n        throw new RuntimeException(innerEx);\n      }\n      MockHttpException httpEx=(MockHttpException)innerEx;\n      Response response=httpEx.toResponse(restAdapter.converter);\n      if (logLevel.log()) {\n        log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n          log.log(String.valueOf(httpEx.responseBody));\n          log.log(\"<--- END MOCK\");\n        }\n      }\n      RetrofitError error=new MockHttpRetrofitError(httpEx.getMessage(),url,response,httpEx.responseBody,methodInfo.responseObjectType);\n      Throwable cause=restAdapter.errorHandler.handleError(error);\n      final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n      callback.failure(e);\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 214,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1624,
        "startLineNumber" : 394,
        "startColumnNumber" : 6,
        "endLineNumber" : 431,
        "endColumnNumber" : 9
      },
      "nodeContext" : "restAdapter.callbackExecutor.execute(new Runnable(){\n  @Override public void run(){\n    LogLevel logLevel=restAdapter.logLevel;\n    RestAdapter.Log log=restAdapter.log;\n    try {\n      methodInfo.method.invoke(mockService,args);\n      if (logLevel.log()) {\n        log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      }\n    }\n catch (    Throwable throwable) {\n      final Throwable innerEx=throwable.getCause();\n      if (!(innerEx instanceof MockHttpException)) {\n        if (innerEx instanceof RuntimeException) {\n          throw (RuntimeException)innerEx;\n        }\n        throw new RuntimeException(innerEx);\n      }\n      MockHttpException httpEx=(MockHttpException)innerEx;\n      Response response=httpEx.toResponse(restAdapter.converter);\n      if (logLevel.log()) {\n        log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n          log.log(String.valueOf(httpEx.responseBody));\n          log.log(\"<--- END MOCK\");\n        }\n      }\n      RetrofitError error=new MockHttpRetrofitError(httpEx.getMessage(),url,response,httpEx.responseBody,methodInfo.responseObjectType);\n      Throwable cause=restAdapter.errorHandler.handleError(error);\n      final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n      callback.failure(e);\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 215,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2851,
        "startLineNumber" : 358,
        "startColumnNumber" : 29,
        "endLineNumber" : 432,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Request request;\n  try {\n    request=buildRequest(methodInfo,interceptorTape,args);\n  }\n catch (  final Throwable throwable) {\n    restAdapter.callbackExecutor.execute(new Runnable(){\n      @Override public void run(){\n        throw new RuntimeException(throwable);\n      }\n    }\n);\n    return;\n  }\n  final String url=request.getUrl();\n  final Callback callback=(Callback)args[args.length - 1];\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    RetrofitError error=RetrofitError.networkError(url,exception);\n    Throwable cause=restAdapter.errorHandler.handleError(error);\n    final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n    restAdapter.callbackExecutor.execute(new Runnable(){\n      @Override public void run(){\n        callback.failure(e);\n      }\n    }\n);\n    return;\n  }\n  final int callDelay=calculateDelayForCall();\n  sleep(callDelay);\n  restAdapter.callbackExecutor.execute(new Runnable(){\n    @Override public void run(){\n      LogLevel logLevel=restAdapter.logLevel;\n      RestAdapter.Log log=restAdapter.log;\n      try {\n        methodInfo.method.invoke(mockService,args);\n        if (logLevel.log()) {\n          log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n        }\n      }\n catch (      Throwable throwable) {\n        final Throwable innerEx=throwable.getCause();\n        if (!(innerEx instanceof MockHttpException)) {\n          if (innerEx instanceof RuntimeException) {\n            throw (RuntimeException)innerEx;\n          }\n          throw new RuntimeException(innerEx);\n        }\n        MockHttpException httpEx=(MockHttpException)innerEx;\n        Response response=httpEx.toResponse(restAdapter.converter);\n        if (logLevel.log()) {\n          log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n          if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n            log.log(String.valueOf(httpEx.responseBody));\n            log.log(\"<--- END MOCK\");\n          }\n        }\n        RetrofitError error=new MockHttpRetrofitError(httpEx.getMessage(),url,response,httpEx.responseBody,methodInfo.responseObjectType);\n        Throwable cause=restAdapter.errorHandler.handleError(error);\n        final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n        callback.failure(e);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 389,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2974,
        "startLineNumber" : 357,
        "startColumnNumber" : 4,
        "endLineNumber" : 432,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void invokeAsync(final RestMethodInfo methodInfo,RequestInterceptor interceptorTape,final Object[] args){\n  Request request;\n  try {\n    request=buildRequest(methodInfo,interceptorTape,args);\n  }\n catch (  final Throwable throwable) {\n    restAdapter.callbackExecutor.execute(new Runnable(){\n      @Override public void run(){\n        throw new RuntimeException(throwable);\n      }\n    }\n);\n    return;\n  }\n  final String url=request.getUrl();\n  final Callback callback=(Callback)args[args.length - 1];\n  if (calculateIsFailure()) {\n    sleep(calculateDelayForError());\n    IOException exception=new IOException(\"Mock network error!\");\n    if (restAdapter.logLevel.log()) {\n      restAdapter.logException(exception,url);\n    }\n    RetrofitError error=RetrofitError.networkError(url,exception);\n    Throwable cause=restAdapter.errorHandler.handleError(error);\n    final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n    restAdapter.callbackExecutor.execute(new Runnable(){\n      @Override public void run(){\n        callback.failure(e);\n      }\n    }\n);\n    return;\n  }\n  final int callDelay=calculateDelayForCall();\n  sleep(callDelay);\n  restAdapter.callbackExecutor.execute(new Runnable(){\n    @Override public void run(){\n      LogLevel logLevel=restAdapter.logLevel;\n      RestAdapter.Log log=restAdapter.log;\n      try {\n        methodInfo.method.invoke(mockService,args);\n        if (logLevel.log()) {\n          log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n        }\n      }\n catch (      Throwable throwable) {\n        final Throwable innerEx=throwable.getCause();\n        if (!(innerEx instanceof MockHttpException)) {\n          if (innerEx instanceof RuntimeException) {\n            throw (RuntimeException)innerEx;\n          }\n          throw new RuntimeException(innerEx);\n        }\n        MockHttpException httpEx=(MockHttpException)innerEx;\n        Response response=httpEx.toResponse(restAdapter.converter);\n        if (logLevel.log()) {\n          log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n          if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n            log.log(String.valueOf(httpEx.responseBody));\n            log.log(\"<--- END MOCK\");\n          }\n        }\n        RetrofitError error=new MockHttpRetrofitError(httpEx.getMessage(),url,response,httpEx.responseBody,methodInfo.responseObjectType);\n        Throwable cause=restAdapter.errorHandler.handleError(error);\n        final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n        callback.failure(e);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1624,
        "startLineNumber" : 394,
        "startColumnNumber" : 6,
        "endLineNumber" : 431,
        "endColumnNumber" : 9
      },
      "nodeContext" : "restAdapter.callbackExecutor.execute(new Runnable(){\n  @Override public void run(){\n    LogLevel logLevel=restAdapter.logLevel;\n    RestAdapter.Log log=restAdapter.log;\n    try {\n      methodInfo.method.invoke(mockService,args);\n      if (logLevel.log()) {\n        log.log(String.format(\"<--- MOCK 200 %s (%sms)\",url,callDelay));\n      }\n    }\n catch (    Throwable throwable) {\n      final Throwable innerEx=throwable.getCause();\n      if (!(innerEx instanceof MockHttpException)) {\n        if (innerEx instanceof RuntimeException) {\n          throw (RuntimeException)innerEx;\n        }\n        throw new RuntimeException(innerEx);\n      }\n      MockHttpException httpEx=(MockHttpException)innerEx;\n      Response response=httpEx.toResponse(restAdapter.converter);\n      if (logLevel.log()) {\n        log.log(String.format(\"<---- MOCK %s %s (%sms)\",httpEx.code,url,callDelay));\n        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n          log.log(String.valueOf(httpEx.responseBody));\n          log.log(\"<--- END MOCK\");\n        }\n      }\n      RetrofitError error=new MockHttpRetrofitError(httpEx.getMessage(),url,response,httpEx.responseBody,methodInfo.responseObjectType);\n      Throwable cause=restAdapter.errorHandler.handleError(error);\n      final RetrofitError e=cause == error ? error : unexpectedError(error.getUrl(),cause);\n      callback.failure(e);\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 215,
      "astHeight" : 18
    },
    "tokenLength" : 111,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 1585,
    "startLineNumber" : 394,
    "startColumnNumber" : 43,
    "endLineNumber" : 431,
    "endColumnNumber" : 7
  } ],
  "layoutRelationDataList" : [ ]
}