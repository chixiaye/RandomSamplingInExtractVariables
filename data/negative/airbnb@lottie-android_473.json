{
  "id" : 473,
  "expression" : "Color",
  "projectName" : "airbnb@lottie-android",
  "commitID" : "54c2775bf2c8b67c8d24840424c13968255caea7",
  "filePath" : "/lottie/src/main/java/com/airbnb/lottie/Layer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Color",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 251,
      "startColumnNumber" : 21,
      "endLineNumber" : 251,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 251,
        "startColumnNumber" : 21,
        "endLineNumber" : 251,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Color.parseColor(json.optString(\"sc\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 59
      },
      "nodeContext" : "solidColor=Color.parseColor(json.optString(\"sc\"))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 60
      },
      "nodeContext" : "solidColor=Color.parseColor(json.optString(\"sc\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 248,
        "startColumnNumber" : 40,
        "endLineNumber" : 256,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  solidWidth=(int)(json.optInt(\"sw\") * composition.getDpScale());\n  solidHeight=(int)(json.optInt(\"sh\") * composition.getDpScale());\n  solidColor=Color.parseColor(json.optString(\"sc\"));\n  if (L.DBG) {\n    Log.d(TAG,\"\\tSolid=\" + Integer.toHexString(solidColor) + \" \"+ solidWidth+ \"x\"+ solidHeight+ \" \"+ composition.getBounds());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 248,
        "startColumnNumber" : 6,
        "endLineNumber" : 256,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (layerType == LayerType.Solid) {\n  solidWidth=(int)(json.optInt(\"sw\") * composition.getDpScale());\n  solidHeight=(int)(json.optInt(\"sh\") * composition.getDpScale());\n  solidColor=Color.parseColor(json.optString(\"sc\"));\n  if (L.DBG) {\n    Log.d(TAG,\"\\tSolid=\" + Integer.toHexString(solidColor) + \" \"+ solidWidth+ \"x\"+ solidHeight+ \" \"+ composition.getBounds());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5113,
        "startLineNumber" : 219,
        "startColumnNumber" : 77,
        "endLineNumber" : 339,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String layerName=json.optString(\"nm\");\n  String refId=json.optString(\"refId\");\n  if (layerName.endsWith(\".ai\") || json.optString(\"cl\",\"\").equals(\"ai\")) {\n    composition.addWarning(\"Convert your Illustrator layers to shape layers.\");\n  }\n  long layerId=json.optLong(\"ind\");\n  int solidWidth=0;\n  int solidHeight=0;\n  int solidColor=0;\n  int preCompWidth=0;\n  int preCompHeight=0;\n  LayerType layerType;\n  int layerTypeInt=json.optInt(\"ty\",-1);\n  if (layerTypeInt < LayerType.Unknown.ordinal()) {\n    layerType=LayerType.values()[layerTypeInt];\n  }\n else {\n    layerType=LayerType.Unknown;\n  }\n  if (layerType == LayerType.Text && !Utils.isAtLeastVersion(composition,4,8,0)) {\n    layerType=LayerType.Unknown;\n    composition.addWarning(\"Text is only supported on bodymovin >= 4.8.0\");\n  }\n  long parentId=json.optLong(\"parent\",-1);\n  if (layerType == LayerType.Solid) {\n    solidWidth=(int)(json.optInt(\"sw\") * composition.getDpScale());\n    solidHeight=(int)(json.optInt(\"sh\") * composition.getDpScale());\n    solidColor=Color.parseColor(json.optString(\"sc\"));\n    if (L.DBG) {\n      Log.d(TAG,\"\\tSolid=\" + Integer.toHexString(solidColor) + \" \"+ solidWidth+ \"x\"+ solidHeight+ \" \"+ composition.getBounds());\n    }\n  }\n  AnimatableTransform transform=AnimatableTransform.Factory.newInstance(json.optJSONObject(\"ks\"),composition);\n  MatteType matteType=MatteType.values()[json.optInt(\"tt\")];\n  List<Mask> masks=new ArrayList<>();\n  List<Keyframe<Float>> inOutKeyframes=new ArrayList<>();\n  JSONArray jsonMasks=json.optJSONArray(\"masksProperties\");\n  if (jsonMasks != null) {\n    for (int i=0; i < jsonMasks.length(); i++) {\n      Mask mask=Mask.Factory.newMask(jsonMasks.optJSONObject(i),composition);\n      masks.add(mask);\n    }\n  }\n  List<ContentModel> shapes=new ArrayList<>();\n  JSONArray shapesJson=json.optJSONArray(\"shapes\");\n  if (shapesJson != null) {\n    for (int i=0; i < shapesJson.length(); i++) {\n      ContentModel shape=ShapeGroup.shapeItemWithJson(shapesJson.optJSONObject(i),composition);\n      if (shape != null) {\n        shapes.add(shape);\n      }\n    }\n  }\n  AnimatableTextFrame text=null;\n  AnimatableTextProperties textProperties=null;\n  JSONObject textJson=json.optJSONObject(\"t\");\n  if (textJson != null) {\n    text=AnimatableTextFrame.Factory.newInstance(textJson.optJSONObject(\"d\"),composition);\n    JSONObject propertiesJson=textJson.optJSONArray(\"a\").optJSONObject(0);\n    textProperties=AnimatableTextProperties.Factory.newInstance(propertiesJson,composition);\n  }\n  if (json.has(\"ef\")) {\n    composition.addWarning(\"Lottie doesn't support layer effects. If you are using them for \" + \" fills, strokes, trim paths etc. then try adding them directly as contents \" + \" in your shape.\");\n  }\n  float timeStretch=(float)json.optDouble(\"sr\",1.0);\n  float startFrame=(float)json.optDouble(\"st\");\n  float frames=composition.getDurationFrames();\n  float startProgress=startFrame / frames;\n  if (layerType == LayerType.PreComp) {\n    preCompWidth=(int)(json.optInt(\"w\") * composition.getDpScale());\n    preCompHeight=(int)(json.optInt(\"h\") * composition.getDpScale());\n  }\n  float inFrame=json.optLong(\"ip\") / timeStretch;\n  float outFrame=json.optLong(\"op\") / timeStretch;\n  if (inFrame > 0) {\n    Keyframe<Float> preKeyframe=new Keyframe<>(composition,0f,0f,null,0f,inFrame);\n    inOutKeyframes.add(preKeyframe);\n  }\n  outFrame=(outFrame > 0 ? outFrame : composition.getEndFrame() + 1);\n  Keyframe<Float> visibleKeyframe=new Keyframe<>(composition,1f,1f,null,inFrame,outFrame);\n  inOutKeyframes.add(visibleKeyframe);\n  Keyframe<Float> outKeyframe=new Keyframe<>(composition,0f,0f,null,outFrame,Float.MAX_VALUE);\n  inOutKeyframes.add(outKeyframe);\n  AnimatableFloatValue timeRemapping=null;\n  if (json.has(\"tm\")) {\n    timeRemapping=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"tm\"),composition,false);\n  }\n  return new Layer(shapes,composition,layerName,layerId,layerType,parentId,refId,masks,transform,solidWidth,solidHeight,solidColor,timeStretch,startProgress,preCompWidth,preCompHeight,text,textProperties,inOutKeyframes,matteType,timeRemapping);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 689,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5186,
        "startLineNumber" : 219,
        "startColumnNumber" : 4,
        "endLineNumber" : 339,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static Layer newInstance(JSONObject json,LottieComposition composition){\n  String layerName=json.optString(\"nm\");\n  String refId=json.optString(\"refId\");\n  if (layerName.endsWith(\".ai\") || json.optString(\"cl\",\"\").equals(\"ai\")) {\n    composition.addWarning(\"Convert your Illustrator layers to shape layers.\");\n  }\n  long layerId=json.optLong(\"ind\");\n  int solidWidth=0;\n  int solidHeight=0;\n  int solidColor=0;\n  int preCompWidth=0;\n  int preCompHeight=0;\n  LayerType layerType;\n  int layerTypeInt=json.optInt(\"ty\",-1);\n  if (layerTypeInt < LayerType.Unknown.ordinal()) {\n    layerType=LayerType.values()[layerTypeInt];\n  }\n else {\n    layerType=LayerType.Unknown;\n  }\n  if (layerType == LayerType.Text && !Utils.isAtLeastVersion(composition,4,8,0)) {\n    layerType=LayerType.Unknown;\n    composition.addWarning(\"Text is only supported on bodymovin >= 4.8.0\");\n  }\n  long parentId=json.optLong(\"parent\",-1);\n  if (layerType == LayerType.Solid) {\n    solidWidth=(int)(json.optInt(\"sw\") * composition.getDpScale());\n    solidHeight=(int)(json.optInt(\"sh\") * composition.getDpScale());\n    solidColor=Color.parseColor(json.optString(\"sc\"));\n    if (L.DBG) {\n      Log.d(TAG,\"\\tSolid=\" + Integer.toHexString(solidColor) + \" \"+ solidWidth+ \"x\"+ solidHeight+ \" \"+ composition.getBounds());\n    }\n  }\n  AnimatableTransform transform=AnimatableTransform.Factory.newInstance(json.optJSONObject(\"ks\"),composition);\n  MatteType matteType=MatteType.values()[json.optInt(\"tt\")];\n  List<Mask> masks=new ArrayList<>();\n  List<Keyframe<Float>> inOutKeyframes=new ArrayList<>();\n  JSONArray jsonMasks=json.optJSONArray(\"masksProperties\");\n  if (jsonMasks != null) {\n    for (int i=0; i < jsonMasks.length(); i++) {\n      Mask mask=Mask.Factory.newMask(jsonMasks.optJSONObject(i),composition);\n      masks.add(mask);\n    }\n  }\n  List<ContentModel> shapes=new ArrayList<>();\n  JSONArray shapesJson=json.optJSONArray(\"shapes\");\n  if (shapesJson != null) {\n    for (int i=0; i < shapesJson.length(); i++) {\n      ContentModel shape=ShapeGroup.shapeItemWithJson(shapesJson.optJSONObject(i),composition);\n      if (shape != null) {\n        shapes.add(shape);\n      }\n    }\n  }\n  AnimatableTextFrame text=null;\n  AnimatableTextProperties textProperties=null;\n  JSONObject textJson=json.optJSONObject(\"t\");\n  if (textJson != null) {\n    text=AnimatableTextFrame.Factory.newInstance(textJson.optJSONObject(\"d\"),composition);\n    JSONObject propertiesJson=textJson.optJSONArray(\"a\").optJSONObject(0);\n    textProperties=AnimatableTextProperties.Factory.newInstance(propertiesJson,composition);\n  }\n  if (json.has(\"ef\")) {\n    composition.addWarning(\"Lottie doesn't support layer effects. If you are using them for \" + \" fills, strokes, trim paths etc. then try adding them directly as contents \" + \" in your shape.\");\n  }\n  float timeStretch=(float)json.optDouble(\"sr\",1.0);\n  float startFrame=(float)json.optDouble(\"st\");\n  float frames=composition.getDurationFrames();\n  float startProgress=startFrame / frames;\n  if (layerType == LayerType.PreComp) {\n    preCompWidth=(int)(json.optInt(\"w\") * composition.getDpScale());\n    preCompHeight=(int)(json.optInt(\"h\") * composition.getDpScale());\n  }\n  float inFrame=json.optLong(\"ip\") / timeStretch;\n  float outFrame=json.optLong(\"op\") / timeStretch;\n  if (inFrame > 0) {\n    Keyframe<Float> preKeyframe=new Keyframe<>(composition,0f,0f,null,0f,inFrame);\n    inOutKeyframes.add(preKeyframe);\n  }\n  outFrame=(outFrame > 0 ? outFrame : composition.getEndFrame() + 1);\n  Keyframe<Float> visibleKeyframe=new Keyframe<>(composition,1f,1f,null,inFrame,outFrame);\n  inOutKeyframes.add(visibleKeyframe);\n  Keyframe<Float> outKeyframe=new Keyframe<>(composition,0f,0f,null,outFrame,Float.MAX_VALUE);\n  inOutKeyframes.add(outKeyframe);\n  AnimatableFloatValue timeRemapping=null;\n  if (json.has(\"tm\")) {\n    timeRemapping=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"tm\"),composition,false);\n  }\n  return new Layer(shapes,composition,layerName,layerId,layerType,parentId,refId,masks,transform,solidWidth,solidHeight,solidColor,timeStretch,startProgress,preCompWidth,preCompHeight,text,textProperties,inOutKeyframes,matteType,timeRemapping);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 702,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 60
      },
      "nodeContext" : "solidColor=Color.parseColor(json.optString(\"sc\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 251,
    "startColumnNumber" : 21,
    "endLineNumber" : 251,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}