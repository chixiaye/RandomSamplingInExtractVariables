{
  "id" : 15,
  "expression" : "fileSize",
  "projectName" : "Tencent@VasSonic",
  "commitID" : "a3e09c156adb93b4ebe6139def465c519069aa9e",
  "filePath" : "/sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicFileUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fileSize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 295,
      "startColumnNumber" : 49,
      "endLineNumber" : 295,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 295,
        "startColumnNumber" : 32,
        "endLineNumber" : 295,
        "endColumnNumber" : 57
      },
      "nodeContext" : "cacheFileSize-=fileSize",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 295,
        "startColumnNumber" : 32,
        "endLineNumber" : 295,
        "endColumnNumber" : 58
      },
      "nodeContext" : "cacheFileSize-=fileSize;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 294,
        "startColumnNumber" : 47,
        "endLineNumber" : 298,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  cacheFileSize-=fileSize;\n  SonicDataHelper.removeSessionData(fileName);\n  SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 294,
        "startColumnNumber" : 28,
        "endLineNumber" : 298,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (file.delete()) {\n  cacheFileSize-=fileSize;\n  SonicDataHelper.removeSessionData(fileName);\n  SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 450,
        "startLineNumber" : 291,
        "startColumnNumber" : 60,
        "endLineNumber" : 299,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  fileName=file.getName();\n  fileSize=file.length();\n  if (file.delete()) {\n    cacheFileSize-=fileSize;\n    SonicDataHelper.removeSessionData(fileName);\n    SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 291,
        "startColumnNumber" : 24,
        "endLineNumber" : 299,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (file.isFile() && file.exists()) {\n  fileName=file.getName();\n  fileSize=file.length();\n  if (file.delete()) {\n    cacheFileSize-=fileSize;\n    SonicDataHelper.removeSessionData(fileName);\n    SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 289,
        "startColumnNumber" : 59,
        "endLineNumber" : 303,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  file=files.get(i);\n  if (file.isFile() && file.exists()) {\n    fileName=file.getName();\n    fileSize=file.length();\n    if (file.delete()) {\n      cacheFileSize-=fileSize;\n      SonicDataHelper.removeSessionData(fileName);\n      SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n    }\n  }\n  if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 775,
        "startLineNumber" : 289,
        "startColumnNumber" : 20,
        "endLineNumber" : 303,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < files.size(); i++) {\n  file=files.get(i);\n  if (file.isFile() && file.exists()) {\n    fileName=file.getName();\n    fileSize=file.length();\n    if (file.delete()) {\n      cacheFileSize-=fileSize;\n      SonicDataHelper.removeSessionData(fileName);\n      SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n    }\n  }\n  if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 77,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1800,
        "startLineNumber" : 271,
        "startColumnNumber" : 87,
        "endLineNumber" : 307,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  SonicUtils.log(TAG,Log.INFO,\"now try clear cache, current cache size: \" + (cacheFileSize / 1024 / 1024) + \"m\");\n  List<File> files=Arrays.asList(childFiles);\n  Collections.sort(files,new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      long diff=f1.lastModified() - f2.lastModified();\n      if (diff > 0)       return 1;\n else       if (diff == 0)       return 0;\n else       return -1;\n    }\n  }\n);\n  long fileSize;\n  File file;\n  String fileName;\n  for (int i=0; i < files.size(); i++) {\n    file=files.get(i);\n    if (file.isFile() && file.exists()) {\n      fileName=file.getName();\n      fileSize=file.length();\n      if (file.delete()) {\n        cacheFileSize-=fileSize;\n        SonicDataHelper.removeSessionData(fileName);\n        SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n      }\n    }\n    if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n      break;\n    }\n  }\n  SonicUtils.log(TAG,Log.INFO,\"checkAndTrimCache: finish , cost \" + (System.currentTimeMillis() - startTime) + \"ms.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1871,
        "startLineNumber" : 271,
        "startColumnNumber" : 16,
        "endLineNumber" : 307,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (cacheFileSize > (MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MAX_PERCENT)) {\n  SonicUtils.log(TAG,Log.INFO,\"now try clear cache, current cache size: \" + (cacheFileSize / 1024 / 1024) + \"m\");\n  List<File> files=Arrays.asList(childFiles);\n  Collections.sort(files,new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      long diff=f1.lastModified() - f2.lastModified();\n      if (diff > 0)       return 1;\n else       if (diff == 0)       return 0;\n else       return -1;\n    }\n  }\n);\n  long fileSize;\n  File file;\n  String fileName;\n  for (int i=0; i < files.size(); i++) {\n    file=files.get(i);\n    if (file.isFile() && file.exists()) {\n      fileName=file.getName();\n      fileSize=file.length();\n      if (file.delete()) {\n        cacheFileSize-=fileSize;\n        SonicDataHelper.removeSessionData(fileName);\n        SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n      }\n    }\n    if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n      break;\n    }\n  }\n  SonicUtils.log(TAG,Log.INFO,\"checkAndTrimCache: finish , cost \" + (System.currentTimeMillis() - startTime) + \"ms.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 261,
        "startColumnNumber" : 61,
        "endLineNumber" : 309,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  long startTime=System.currentTimeMillis();\n  long cacheFileSize=0L;\n  final long MAX_CACHE_SIZE=SonicEngine.getInstance().getConfig().SONIC_CACHE_MAX_SIZE;\n  for (int i=0; i < childFiles.length; i++) {\n    cacheFileSize+=childFiles[i].length();\n  }\n  SonicDataHelper.setLastClearCacheTime(System.currentTimeMillis());\n  if (cacheFileSize > (MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MAX_PERCENT)) {\n    SonicUtils.log(TAG,Log.INFO,\"now try clear cache, current cache size: \" + (cacheFileSize / 1024 / 1024) + \"m\");\n    List<File> files=Arrays.asList(childFiles);\n    Collections.sort(files,new Comparator<File>(){\n      public int compare(      File f1,      File f2){\n        long diff=f1.lastModified() - f2.lastModified();\n        if (diff > 0)         return 1;\n else         if (diff == 0)         return 0;\n else         return -1;\n      }\n    }\n);\n    long fileSize;\n    File file;\n    String fileName;\n    for (int i=0; i < files.size(); i++) {\n      file=files.get(i);\n      if (file.isFile() && file.exists()) {\n        fileName=file.getName();\n        fileSize=file.length();\n        if (file.delete()) {\n          cacheFileSize-=fileSize;\n          SonicDataHelper.removeSessionData(fileName);\n          SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n        }\n      }\n      if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n        break;\n      }\n    }\n    SonicUtils.log(TAG,Log.INFO,\"checkAndTrimCache: finish , cost \" + (System.currentTimeMillis() - startTime) + \"ms.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2385,
        "startLineNumber" : 261,
        "startColumnNumber" : 12,
        "endLineNumber" : 309,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (childFiles != null && childFiles.length > 0) {\n  long startTime=System.currentTimeMillis();\n  long cacheFileSize=0L;\n  final long MAX_CACHE_SIZE=SonicEngine.getInstance().getConfig().SONIC_CACHE_MAX_SIZE;\n  for (int i=0; i < childFiles.length; i++) {\n    cacheFileSize+=childFiles[i].length();\n  }\n  SonicDataHelper.setLastClearCacheTime(System.currentTimeMillis());\n  if (cacheFileSize > (MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MAX_PERCENT)) {\n    SonicUtils.log(TAG,Log.INFO,\"now try clear cache, current cache size: \" + (cacheFileSize / 1024 / 1024) + \"m\");\n    List<File> files=Arrays.asList(childFiles);\n    Collections.sort(files,new Comparator<File>(){\n      public int compare(      File f1,      File f2){\n        long diff=f1.lastModified() - f2.lastModified();\n        if (diff > 0)         return 1;\n else         if (diff == 0)         return 0;\n else         return -1;\n      }\n    }\n);\n    long fileSize;\n    File file;\n    String fileName;\n    for (int i=0; i < files.size(); i++) {\n      file=files.get(i);\n      if (file.isFile() && file.exists()) {\n        fileName=file.getName();\n        fileSize=file.length();\n        if (file.delete()) {\n          cacheFileSize-=fileSize;\n          SonicDataHelper.removeSessionData(fileName);\n          SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n        }\n      }\n      if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n        break;\n      }\n    }\n    SonicUtils.log(TAG,Log.INFO,\"checkAndTrimCache: finish , cost \" + (System.currentTimeMillis() - startTime) + \"ms.\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 259,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2468,
        "startLineNumber" : 259,
        "startColumnNumber" : 65,
        "endLineNumber" : 311,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  File[] childFiles=cacheRootDir.listFiles();\n  if (childFiles != null && childFiles.length > 0) {\n    long startTime=System.currentTimeMillis();\n    long cacheFileSize=0L;\n    final long MAX_CACHE_SIZE=SonicEngine.getInstance().getConfig().SONIC_CACHE_MAX_SIZE;\n    for (int i=0; i < childFiles.length; i++) {\n      cacheFileSize+=childFiles[i].length();\n    }\n    SonicDataHelper.setLastClearCacheTime(System.currentTimeMillis());\n    if (cacheFileSize > (MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MAX_PERCENT)) {\n      SonicUtils.log(TAG,Log.INFO,\"now try clear cache, current cache size: \" + (cacheFileSize / 1024 / 1024) + \"m\");\n      List<File> files=Arrays.asList(childFiles);\n      Collections.sort(files,new Comparator<File>(){\n        public int compare(        File f1,        File f2){\n          long diff=f1.lastModified() - f2.lastModified();\n          if (diff > 0)           return 1;\n else           if (diff == 0)           return 0;\n else           return -1;\n        }\n      }\n);\n      long fileSize;\n      File file;\n      String fileName;\n      for (int i=0; i < files.size(); i++) {\n        file=files.get(i);\n        if (file.isFile() && file.exists()) {\n          fileName=file.getName();\n          fileSize=file.length();\n          if (file.delete()) {\n            cacheFileSize-=fileSize;\n            SonicDataHelper.removeSessionData(fileName);\n            SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n          }\n        }\n        if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n          break;\n        }\n      }\n      SonicUtils.log(TAG,Log.INFO,\"checkAndTrimCache: finish , cost \" + (System.currentTimeMillis() - startTime) + \"ms.\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2525,
        "startLineNumber" : 259,
        "startColumnNumber" : 8,
        "endLineNumber" : 311,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (cacheRootDir.exists() && cacheRootDir.isDirectory()) {\n  File[] childFiles=cacheRootDir.listFiles();\n  if (childFiles != null && childFiles.length > 0) {\n    long startTime=System.currentTimeMillis();\n    long cacheFileSize=0L;\n    final long MAX_CACHE_SIZE=SonicEngine.getInstance().getConfig().SONIC_CACHE_MAX_SIZE;\n    for (int i=0; i < childFiles.length; i++) {\n      cacheFileSize+=childFiles[i].length();\n    }\n    SonicDataHelper.setLastClearCacheTime(System.currentTimeMillis());\n    if (cacheFileSize > (MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MAX_PERCENT)) {\n      SonicUtils.log(TAG,Log.INFO,\"now try clear cache, current cache size: \" + (cacheFileSize / 1024 / 1024) + \"m\");\n      List<File> files=Arrays.asList(childFiles);\n      Collections.sort(files,new Comparator<File>(){\n        public int compare(        File f1,        File f2){\n          long diff=f1.lastModified() - f2.lastModified();\n          if (diff > 0)           return 1;\n else           if (diff == 0)           return 0;\n else           return -1;\n        }\n      }\n);\n      long fileSize;\n      File file;\n      String fileName;\n      for (int i=0; i < files.size(); i++) {\n        file=files.get(i);\n        if (file.isFile() && file.exists()) {\n          fileName=file.getName();\n          fileSize=file.length();\n          if (file.delete()) {\n            cacheFileSize-=fileSize;\n            SonicDataHelper.removeSessionData(fileName);\n            SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n          }\n        }\n        if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n          break;\n        }\n      }\n      SonicUtils.log(TAG,Log.INFO,\"checkAndTrimCache: finish , cost \" + (System.currentTimeMillis() - startTime) + \"ms.\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 278,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2603,
        "startLineNumber" : 257,
        "startColumnNumber" : 36,
        "endLineNumber" : 312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File cacheRootDir=new File(getSonicCacheDirPath());\n  if (cacheRootDir.exists() && cacheRootDir.isDirectory()) {\n    File[] childFiles=cacheRootDir.listFiles();\n    if (childFiles != null && childFiles.length > 0) {\n      long startTime=System.currentTimeMillis();\n      long cacheFileSize=0L;\n      final long MAX_CACHE_SIZE=SonicEngine.getInstance().getConfig().SONIC_CACHE_MAX_SIZE;\n      for (int i=0; i < childFiles.length; i++) {\n        cacheFileSize+=childFiles[i].length();\n      }\n      SonicDataHelper.setLastClearCacheTime(System.currentTimeMillis());\n      if (cacheFileSize > (MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MAX_PERCENT)) {\n        SonicUtils.log(TAG,Log.INFO,\"now try clear cache, current cache size: \" + (cacheFileSize / 1024 / 1024) + \"m\");\n        List<File> files=Arrays.asList(childFiles);\n        Collections.sort(files,new Comparator<File>(){\n          public int compare(          File f1,          File f2){\n            long diff=f1.lastModified() - f2.lastModified();\n            if (diff > 0)             return 1;\n else             if (diff == 0)             return 0;\n else             return -1;\n          }\n        }\n);\n        long fileSize;\n        File file;\n        String fileName;\n        for (int i=0; i < files.size(); i++) {\n          file=files.get(i);\n          if (file.isFile() && file.exists()) {\n            fileName=file.getName();\n            fileSize=file.length();\n            if (file.delete()) {\n              cacheFileSize-=fileSize;\n              SonicDataHelper.removeSessionData(fileName);\n              SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n            }\n          }\n          if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n            break;\n          }\n        }\n        SonicUtils.log(TAG,Log.INFO,\"checkAndTrimCache: finish , cost \" + (System.currentTimeMillis() - startTime) + \"ms.\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2935,
        "startLineNumber" : 252,
        "startColumnNumber" : 4,
        "endLineNumber" : 312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Check whether the sonic cache has been exceed the limit  {@link SonicConfig#SONIC_CACHE_MAX_SIZE}. If the size of sonic cache exceeds, then it will remove the elder cache until the size is less than threshold  {@link SonicFileUtils#THRESHOLD_OF_CACHE_MIN_PERCENT}.\n */\nstatic void checkAndTrimCache(){\n  File cacheRootDir=new File(getSonicCacheDirPath());\n  if (cacheRootDir.exists() && cacheRootDir.isDirectory()) {\n    File[] childFiles=cacheRootDir.listFiles();\n    if (childFiles != null && childFiles.length > 0) {\n      long startTime=System.currentTimeMillis();\n      long cacheFileSize=0L;\n      final long MAX_CACHE_SIZE=SonicEngine.getInstance().getConfig().SONIC_CACHE_MAX_SIZE;\n      for (int i=0; i < childFiles.length; i++) {\n        cacheFileSize+=childFiles[i].length();\n      }\n      SonicDataHelper.setLastClearCacheTime(System.currentTimeMillis());\n      if (cacheFileSize > (MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MAX_PERCENT)) {\n        SonicUtils.log(TAG,Log.INFO,\"now try clear cache, current cache size: \" + (cacheFileSize / 1024 / 1024) + \"m\");\n        List<File> files=Arrays.asList(childFiles);\n        Collections.sort(files,new Comparator<File>(){\n          public int compare(          File f1,          File f2){\n            long diff=f1.lastModified() - f2.lastModified();\n            if (diff > 0)             return 1;\n else             if (diff == 0)             return 0;\n else             return -1;\n          }\n        }\n);\n        long fileSize;\n        File file;\n        String fileName;\n        for (int i=0; i < files.size(); i++) {\n          file=files.get(i);\n          if (file.isFile() && file.exists()) {\n            fileName=file.getName();\n            fileSize=file.length();\n            if (file.delete()) {\n              cacheFileSize-=fileSize;\n              SonicDataHelper.removeSessionData(fileName);\n              SonicUtils.log(TAG,Log.INFO,\"delete \" + file.getAbsolutePath());\n            }\n          }\n          if (cacheFileSize <= MAX_CACHE_SIZE * THRESHOLD_OF_CACHE_MIN_PERCENT) {\n            break;\n          }\n        }\n        SonicUtils.log(TAG,Log.INFO,\"checkAndTrimCache: finish , cost \" + (System.currentTimeMillis() - startTime) + \"ms.\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 295,
        "startColumnNumber" : 32,
        "endLineNumber" : 295,
        "endColumnNumber" : 58
      },
      "nodeContext" : "cacheFileSize-=fileSize;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 295,
    "startColumnNumber" : 49,
    "endLineNumber" : 295,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}