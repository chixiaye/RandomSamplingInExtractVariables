{
  "id" : 142,
  "expression" : "new BufferedReader(new StringReader(output))",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/macosx/SystemProfilerParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new BufferedReader(new StringReader(output))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 35,
      "startColumnNumber" : 28,
      "endLineNumber" : 35,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 35,
        "startColumnNumber" : 19,
        "endLineNumber" : 35,
        "endColumnNumber" : 72
      },
      "nodeContext" : "reader=new BufferedReader(new StringReader(output))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 73
      },
      "nodeContext" : "BufferedReader reader=new BufferedReader(new StringReader(output));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2130,
        "startLineNumber" : 34,
        "startColumnNumber" : 82,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BufferedReader reader=new BufferedReader(new StringReader(output));\n  String devicePrefix;\n  if (serial.startsWith(DEV_TTY_USBSERIAL)) {\n    devicePrefix=DEV_TTY_USBSERIAL;\n  }\n else   if (serial.startsWith(DEV_CU_USBSERIAL)) {\n    devicePrefix=DEV_CU_USBSERIAL;\n  }\n else   if (serial.startsWith(DEV_TTY_USBMODEM)) {\n    devicePrefix=DEV_TTY_USBMODEM;\n  }\n else {\n    devicePrefix=DEV_CU_USBMODEM;\n  }\n  Map<String,String> device=new HashMap<String,String>();\n  String line;\n  Matcher matcher;\n  while ((line=reader.readLine()) != null) {\n    line=line.trim();\n    line=line.replaceAll(\"\\\\s+\",\" \");\n    if ((matcher=serialNumberRegex.matcher(line)).matches()) {\n      device.put(SERIAL_NUMBER,matcher.group(1));\n      if ((serial.startsWith(DEV_TTY_USBSERIAL) || serial.startsWith(DEV_CU_USBSERIAL))) {\n        String devicePath=devicePrefix + matcher.group(1);\n        device.put(DEVICE_PATH,devicePath);\n      }\n    }\n else     if ((serial.startsWith(DEV_TTY_USBMODEM) || serial.startsWith(DEV_CU_USBMODEM)) && (matcher=locationRegex.matcher(line)).matches()) {\n      String suffix=matcher.group(1).substring(2,6).replaceAll(\"0\",\"\");\n      String devicePath=devicePrefix + suffix + \"1\";\n      device.put(DEVICE_PATH,devicePath);\n    }\n else     if ((matcher=pidRegex.matcher(line)).matches()) {\n      String pid=matcher.group(1);\n      if (pid.indexOf(\" \") > 0)       pid=pid.substring(0,pid.indexOf(\" \"));\n      device.put(PID,pid);\n    }\n else     if ((matcher=vidRegex.matcher(line)).matches()) {\n      String vid=matcher.group(1);\n      if (vid.indexOf(\" \") > 0)       vid=vid.substring(0,vid.indexOf(\" \"));\n      device.put(VID,vid);\n    }\n else     if (line.equals(\"\")) {\n      if (device.containsKey(DEVICE_PATH) && device.get(DEVICE_PATH).equals(serial)) {\n        return (device.get(VID) + \"_\" + device.get(PID)).toUpperCase();\n      }\n      device=new HashMap<String,String>();\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2210,
        "startLineNumber" : 34,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public String extractVIDAndPID(String output,String serial) throws IOException {\n  BufferedReader reader=new BufferedReader(new StringReader(output));\n  String devicePrefix;\n  if (serial.startsWith(DEV_TTY_USBSERIAL)) {\n    devicePrefix=DEV_TTY_USBSERIAL;\n  }\n else   if (serial.startsWith(DEV_CU_USBSERIAL)) {\n    devicePrefix=DEV_CU_USBSERIAL;\n  }\n else   if (serial.startsWith(DEV_TTY_USBMODEM)) {\n    devicePrefix=DEV_TTY_USBMODEM;\n  }\n else {\n    devicePrefix=DEV_CU_USBMODEM;\n  }\n  Map<String,String> device=new HashMap<String,String>();\n  String line;\n  Matcher matcher;\n  while ((line=reader.readLine()) != null) {\n    line=line.trim();\n    line=line.replaceAll(\"\\\\s+\",\" \");\n    if ((matcher=serialNumberRegex.matcher(line)).matches()) {\n      device.put(SERIAL_NUMBER,matcher.group(1));\n      if ((serial.startsWith(DEV_TTY_USBSERIAL) || serial.startsWith(DEV_CU_USBSERIAL))) {\n        String devicePath=devicePrefix + matcher.group(1);\n        device.put(DEVICE_PATH,devicePath);\n      }\n    }\n else     if ((serial.startsWith(DEV_TTY_USBMODEM) || serial.startsWith(DEV_CU_USBMODEM)) && (matcher=locationRegex.matcher(line)).matches()) {\n      String suffix=matcher.group(1).substring(2,6).replaceAll(\"0\",\"\");\n      String devicePath=devicePrefix + suffix + \"1\";\n      device.put(DEVICE_PATH,devicePath);\n    }\n else     if ((matcher=pidRegex.matcher(line)).matches()) {\n      String pid=matcher.group(1);\n      if (pid.indexOf(\" \") > 0)       pid=pid.substring(0,pid.indexOf(\" \"));\n      device.put(PID,pid);\n    }\n else     if ((matcher=vidRegex.matcher(line)).matches()) {\n      String vid=matcher.group(1);\n      if (vid.indexOf(\" \") > 0)       vid=vid.substring(0,vid.indexOf(\" \"));\n      device.put(VID,vid);\n    }\n else     if (line.equals(\"\")) {\n      if (device.containsKey(DEVICE_PATH) && device.get(DEVICE_PATH).equals(serial)) {\n        return (device.get(VID) + \"_\" + device.get(PID)).toUpperCase();\n      }\n      device=new HashMap<String,String>();\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 358,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 73
      },
      "nodeContext" : "BufferedReader reader=new BufferedReader(new StringReader(output));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.io.BufferedReader"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 35,
    "startColumnNumber" : 28,
    "endLineNumber" : 35,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}