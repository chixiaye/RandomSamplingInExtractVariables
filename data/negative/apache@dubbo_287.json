{
  "id" : 287,
  "expression" : "interfaceClass.getName()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "interfaceClass.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 218,
      "startColumnNumber" : 38,
      "endLineNumber" : 218,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 218,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 63
      },
      "nodeContext" : "methodBean.setService(interfaceClass.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 218,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 64
      },
      "nodeContext" : "methodBean.setService(interfaceClass.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 217,
        "startColumnNumber" : 52,
        "endLineNumber" : 233,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  methodBean.setService(interfaceClass.getName());\n  methodBean.setServiceId(this.getId());\n  methodBean.refresh();\n  String methodName=methodBean.getName();\n  if (StringUtils.isEmpty(methodName)) {\n    throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n  }\n  boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n  if (!hasMethod) {\n    throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (MethodConfig methodBean : methods) {\n  methodBean.setService(interfaceClass.getName());\n  methodBean.setServiceId(this.getId());\n  methodBean.refresh();\n  String methodName=methodBean.getName();\n  if (StringUtils.isEmpty(methodName)) {\n    throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n  }\n  boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n  if (!hasMethod) {\n    throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 216,
        "startColumnNumber" : 49,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  MethodConfig methodBean : methods) {\n    methodBean.setService(interfaceClass.getName());\n    methodBean.setServiceId(this.getId());\n    methodBean.refresh();\n    String methodName=methodBean.getName();\n    if (StringUtils.isEmpty(methodName)) {\n      throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n    }\n    boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n    if (!hasMethod) {\n      throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1056,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (CollectionUtils.isNotEmpty(methods)) {\n  for (  MethodConfig methodBean : methods) {\n    methodBean.setService(interfaceClass.getName());\n    methodBean.setServiceId(this.getId());\n    methodBean.refresh();\n    String methodName=methodBean.getName();\n    if (StringUtils.isEmpty(methodName)) {\n      throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n    }\n    boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n    if (!hasMethod) {\n      throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 207,
        "startColumnNumber" : 94,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.notNull(interfaceClass,new IllegalStateException(\"interface not allow null!\"));\n  if (!interfaceClass.isInterface()) {\n    throw new IllegalStateException(\"The interface class \" + interfaceClass + \" is not a interface!\");\n  }\n  if (CollectionUtils.isNotEmpty(methods)) {\n    for (    MethodConfig methodBean : methods) {\n      methodBean.setService(interfaceClass.getName());\n      methodBean.setServiceId(this.getId());\n      methodBean.refresh();\n      String methodName=methodBean.getName();\n      if (StringUtils.isEmpty(methodName)) {\n        throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n      }\n      boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n      if (!hasMethod) {\n        throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Check whether the remote service interface and the methods meet with Dubbo's requirements.it mainly check, if the methods configured in the configuration file are included in the interface of remote service\n * @param interfaceClass the interface of remote service\n * @param methods        the methods configured\n */\npublic void checkInterfaceAndMethods(Class<?> interfaceClass,List<MethodConfig> methods){\n  Assert.notNull(interfaceClass,new IllegalStateException(\"interface not allow null!\"));\n  if (!interfaceClass.isInterface()) {\n    throw new IllegalStateException(\"The interface class \" + interfaceClass + \" is not a interface!\");\n  }\n  if (CollectionUtils.isNotEmpty(methods)) {\n    for (    MethodConfig methodBean : methods) {\n      methodBean.setService(interfaceClass.getName());\n      methodBean.setServiceId(this.getId());\n      methodBean.refresh();\n      String methodName=methodBean.getName();\n      if (StringUtils.isEmpty(methodName)) {\n        throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n      }\n      boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n      if (!hasMethod) {\n        throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 218,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 64
      },
      "nodeContext" : "methodBean.setService(interfaceClass.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "interfaceClass.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 224,
      "startColumnNumber" : 60,
      "endLineNumber" : 224,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 223,
        "startColumnNumber" : 52,
        "endLineNumber" : 225,
        "endColumnNumber" : 79
      },
      "nodeContext" : "\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 223,
        "startColumnNumber" : 26,
        "endLineNumber" : 225,
        "endColumnNumber" : 80
      },
      "nodeContext" : "new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 223,
        "startColumnNumber" : 20,
        "endLineNumber" : 225,
        "endColumnNumber" : 81
      },
      "nodeContext" : "throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 222,
        "startColumnNumber" : 53,
        "endLineNumber" : 226,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 222,
        "startColumnNumber" : 16,
        "endLineNumber" : 226,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (StringUtils.isEmpty(methodName)) {\n  throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 217,
        "startColumnNumber" : 52,
        "endLineNumber" : 233,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  methodBean.setService(interfaceClass.getName());\n  methodBean.setServiceId(this.getId());\n  methodBean.refresh();\n  String methodName=methodBean.getName();\n  if (StringUtils.isEmpty(methodName)) {\n    throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n  }\n  boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n  if (!hasMethod) {\n    throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (MethodConfig methodBean : methods) {\n  methodBean.setService(interfaceClass.getName());\n  methodBean.setServiceId(this.getId());\n  methodBean.refresh();\n  String methodName=methodBean.getName();\n  if (StringUtils.isEmpty(methodName)) {\n    throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n  }\n  boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n  if (!hasMethod) {\n    throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 216,
        "startColumnNumber" : 49,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  MethodConfig methodBean : methods) {\n    methodBean.setService(interfaceClass.getName());\n    methodBean.setServiceId(this.getId());\n    methodBean.refresh();\n    String methodName=methodBean.getName();\n    if (StringUtils.isEmpty(methodName)) {\n      throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n    }\n    boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n    if (!hasMethod) {\n      throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1056,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (CollectionUtils.isNotEmpty(methods)) {\n  for (  MethodConfig methodBean : methods) {\n    methodBean.setService(interfaceClass.getName());\n    methodBean.setServiceId(this.getId());\n    methodBean.refresh();\n    String methodName=methodBean.getName();\n    if (StringUtils.isEmpty(methodName)) {\n      throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n    }\n    boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n    if (!hasMethod) {\n      throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 207,
        "startColumnNumber" : 94,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.notNull(interfaceClass,new IllegalStateException(\"interface not allow null!\"));\n  if (!interfaceClass.isInterface()) {\n    throw new IllegalStateException(\"The interface class \" + interfaceClass + \" is not a interface!\");\n  }\n  if (CollectionUtils.isNotEmpty(methods)) {\n    for (    MethodConfig methodBean : methods) {\n      methodBean.setService(interfaceClass.getName());\n      methodBean.setServiceId(this.getId());\n      methodBean.refresh();\n      String methodName=methodBean.getName();\n      if (StringUtils.isEmpty(methodName)) {\n        throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n      }\n      boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n      if (!hasMethod) {\n        throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Check whether the remote service interface and the methods meet with Dubbo's requirements.it mainly check, if the methods configured in the configuration file are included in the interface of remote service\n * @param interfaceClass the interface of remote service\n * @param methods        the methods configured\n */\npublic void checkInterfaceAndMethods(Class<?> interfaceClass,List<MethodConfig> methods){\n  Assert.notNull(interfaceClass,new IllegalStateException(\"interface not allow null!\"));\n  if (!interfaceClass.isInterface()) {\n    throw new IllegalStateException(\"The interface class \" + interfaceClass + \" is not a interface!\");\n  }\n  if (CollectionUtils.isNotEmpty(methods)) {\n    for (    MethodConfig methodBean : methods) {\n      methodBean.setService(interfaceClass.getName());\n      methodBean.setServiceId(this.getId());\n      methodBean.refresh();\n      String methodName=methodBean.getName();\n      if (StringUtils.isEmpty(methodName)) {\n        throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n      }\n      boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n      if (!hasMethod) {\n        throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 223,
        "startColumnNumber" : 52,
        "endLineNumber" : 225,
        "endColumnNumber" : 79
      },
      "nodeContext" : "\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "interfaceClass.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 230,
      "startColumnNumber" : 71,
      "endLineNumber" : 230,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 230,
        "startColumnNumber" : 52,
        "endLineNumber" : 231,
        "endColumnNumber" : 63
      },
      "nodeContext" : "\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 230,
        "startColumnNumber" : 26,
        "endLineNumber" : 231,
        "endColumnNumber" : 64
      },
      "nodeContext" : "new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 230,
        "startColumnNumber" : 20,
        "endLineNumber" : 231,
        "endColumnNumber" : 65
      },
      "nodeContext" : "throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 229,
        "startColumnNumber" : 32,
        "endLineNumber" : 232,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 229,
        "startColumnNumber" : 16,
        "endLineNumber" : 232,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!hasMethod) {\n  throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 217,
        "startColumnNumber" : 52,
        "endLineNumber" : 233,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  methodBean.setService(interfaceClass.getName());\n  methodBean.setServiceId(this.getId());\n  methodBean.refresh();\n  String methodName=methodBean.getName();\n  if (StringUtils.isEmpty(methodName)) {\n    throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n  }\n  boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n  if (!hasMethod) {\n    throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (MethodConfig methodBean : methods) {\n  methodBean.setService(interfaceClass.getName());\n  methodBean.setServiceId(this.getId());\n  methodBean.refresh();\n  String methodName=methodBean.getName();\n  if (StringUtils.isEmpty(methodName)) {\n    throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n  }\n  boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n  if (!hasMethod) {\n    throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 216,
        "startColumnNumber" : 49,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  MethodConfig methodBean : methods) {\n    methodBean.setService(interfaceClass.getName());\n    methodBean.setServiceId(this.getId());\n    methodBean.refresh();\n    String methodName=methodBean.getName();\n    if (StringUtils.isEmpty(methodName)) {\n      throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n    }\n    boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n    if (!hasMethod) {\n      throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1056,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (CollectionUtils.isNotEmpty(methods)) {\n  for (  MethodConfig methodBean : methods) {\n    methodBean.setService(interfaceClass.getName());\n    methodBean.setServiceId(this.getId());\n    methodBean.refresh();\n    String methodName=methodBean.getName();\n    if (StringUtils.isEmpty(methodName)) {\n      throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n    }\n    boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n    if (!hasMethod) {\n      throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 207,
        "startColumnNumber" : 94,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.notNull(interfaceClass,new IllegalStateException(\"interface not allow null!\"));\n  if (!interfaceClass.isInterface()) {\n    throw new IllegalStateException(\"The interface class \" + interfaceClass + \" is not a interface!\");\n  }\n  if (CollectionUtils.isNotEmpty(methods)) {\n    for (    MethodConfig methodBean : methods) {\n      methodBean.setService(interfaceClass.getName());\n      methodBean.setServiceId(this.getId());\n      methodBean.refresh();\n      String methodName=methodBean.getName();\n      if (StringUtils.isEmpty(methodName)) {\n        throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n      }\n      boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n      if (!hasMethod) {\n        throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Check whether the remote service interface and the methods meet with Dubbo's requirements.it mainly check, if the methods configured in the configuration file are included in the interface of remote service\n * @param interfaceClass the interface of remote service\n * @param methods        the methods configured\n */\npublic void checkInterfaceAndMethods(Class<?> interfaceClass,List<MethodConfig> methods){\n  Assert.notNull(interfaceClass,new IllegalStateException(\"interface not allow null!\"));\n  if (!interfaceClass.isInterface()) {\n    throw new IllegalStateException(\"The interface class \" + interfaceClass + \" is not a interface!\");\n  }\n  if (CollectionUtils.isNotEmpty(methods)) {\n    for (    MethodConfig methodBean : methods) {\n      methodBean.setService(interfaceClass.getName());\n      methodBean.setServiceId(this.getId());\n      methodBean.refresh();\n      String methodName=methodBean.getName();\n      if (StringUtils.isEmpty(methodName)) {\n        throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" + \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\"+ \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n      }\n      boolean hasMethod=Arrays.stream(interfaceClass.getMethods()).anyMatch(method -> method.getName().equals(methodName));\n      if (!hasMethod) {\n        throw new IllegalStateException(\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 230,
        "startColumnNumber" : 52,
        "endLineNumber" : 231,
        "endColumnNumber" : 63
      },
      "nodeContext" : "\"The interface \" + interfaceClass.getName() + \" not found method \"+ methodName",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 218,
    "startColumnNumber" : 38,
    "endLineNumber" : 218,
    "endColumnNumber" : 62
  }, {
    "charLength" : 24,
    "startLineNumber" : 224,
    "startColumnNumber" : 60,
    "endLineNumber" : 224,
    "endColumnNumber" : 84
  }, {
    "charLength" : 24,
    "startLineNumber" : 230,
    "startColumnNumber" : 71,
    "endLineNumber" : 230,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}