{
  "id" : 1,
  "expression" : "mouseSequence.get(\"actions\")",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/test/org/openqa/selenium/interactions/ActionsTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mouseSequence.get(\"actions\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 189,
      "startColumnNumber" : 15,
      "endLineNumber" : 189,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(mouseSequence.get(\"actions\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(mouseSequence.get(\"actions\")).isInstanceOf(List.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 70
      },
      "nodeContext" : "assertThat(mouseSequence.get(\"actions\")).isInstanceOf(List.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2697,
        "startLineNumber" : 161,
        "startColumnNumber" : 30,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  WebDriver driver=mock(WebDriver.class,withSettings().extraInterfaces(Interactive.class));\n  ArgumentCaptor<Collection<Sequence>> sequenceCaptor=ArgumentCaptor.forClass(Collection.class);\n  Mockito.doNothing().when((Interactive)driver).perform(sequenceCaptor.capture());\n  new Actions(driver).keyDown(Keys.CONTROL).click().keyUp(Keys.CONTROL).perform();\n  Collection<Sequence> sequence=sequenceCaptor.getValue();\n  assertThat(sequence).hasSize(2);\n  Map<String,Object>[] sequencesJson=sequence.stream().map(Sequence::toJson).toArray(HashMap[]::new);\n  Map<String,Object> mouseSequence=sequencesJson[0];\n  Map<String,Object> keyboardSequence;\n  if (!mouseSequence.get(\"type\").equals(\"pointer\")) {\n    mouseSequence=sequencesJson[1];\n    keyboardSequence=sequencesJson[0];\n  }\n else {\n    keyboardSequence=sequencesJson[1];\n  }\n  assertThat(mouseSequence).containsEntry(\"type\",\"pointer\");\n  assertThat(mouseSequence.get(\"actions\")).isInstanceOf(List.class);\n  List<Map<String,Object>> mouseActions=(List<Map<String,Object>>)mouseSequence.get(\"actions\");\n  assertThat(mouseActions).hasSize(4);\n  assertThat(keyboardSequence).containsEntry(\"type\",\"key\");\n  assertThat(keyboardSequence.get(\"actions\")).isInstanceOf(List.class);\n  List<Map<String,Object>> keyboardActions=(List<Map<String,Object>>)keyboardSequence.get(\"actions\");\n  assertThat(keyboardActions).hasSize(4);\n  assertThat(mouseActions.get(0)).as(\"Mouse pauses as key goes down\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(keyboardActions.get(0)).as(\"Key goes down\").containsEntry(\"type\",\"keyDown\").containsEntry(\"value\",CONTROL.toString());\n  assertThat(mouseActions.get(1)).as(\"Mouse goes down\").containsEntry(\"type\",\"pointerDown\").containsEntry(\"button\",0);\n  assertThat(keyboardActions.get(1)).as(\"Mouse goes down, so keyboard pauses\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(mouseActions.get(2)).as(\"Mouse goes up\").containsEntry(\"type\",\"pointerUp\").containsEntry(\"button\",0);\n  assertThat(keyboardActions.get(2)).as(\"Mouse goes up, so keyboard pauses\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(mouseActions.get(3)).as(\"Mouse pauses as keyboard releases key\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(keyboardActions.get(3)).as(\"Keyboard releases key\").containsEntry(\"type\",\"keyUp\").containsEntry(\"value\",CONTROL.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2780,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) @Test public void testCtrlClick(){\n  WebDriver driver=mock(WebDriver.class,withSettings().extraInterfaces(Interactive.class));\n  ArgumentCaptor<Collection<Sequence>> sequenceCaptor=ArgumentCaptor.forClass(Collection.class);\n  Mockito.doNothing().when((Interactive)driver).perform(sequenceCaptor.capture());\n  new Actions(driver).keyDown(Keys.CONTROL).click().keyUp(Keys.CONTROL).perform();\n  Collection<Sequence> sequence=sequenceCaptor.getValue();\n  assertThat(sequence).hasSize(2);\n  Map<String,Object>[] sequencesJson=sequence.stream().map(Sequence::toJson).toArray(HashMap[]::new);\n  Map<String,Object> mouseSequence=sequencesJson[0];\n  Map<String,Object> keyboardSequence;\n  if (!mouseSequence.get(\"type\").equals(\"pointer\")) {\n    mouseSequence=sequencesJson[1];\n    keyboardSequence=sequencesJson[0];\n  }\n else {\n    keyboardSequence=sequencesJson[1];\n  }\n  assertThat(mouseSequence).containsEntry(\"type\",\"pointer\");\n  assertThat(mouseSequence.get(\"actions\")).isInstanceOf(List.class);\n  List<Map<String,Object>> mouseActions=(List<Map<String,Object>>)mouseSequence.get(\"actions\");\n  assertThat(mouseActions).hasSize(4);\n  assertThat(keyboardSequence).containsEntry(\"type\",\"key\");\n  assertThat(keyboardSequence.get(\"actions\")).isInstanceOf(List.class);\n  List<Map<String,Object>> keyboardActions=(List<Map<String,Object>>)keyboardSequence.get(\"actions\");\n  assertThat(keyboardActions).hasSize(4);\n  assertThat(mouseActions.get(0)).as(\"Mouse pauses as key goes down\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(keyboardActions.get(0)).as(\"Key goes down\").containsEntry(\"type\",\"keyDown\").containsEntry(\"value\",CONTROL.toString());\n  assertThat(mouseActions.get(1)).as(\"Mouse goes down\").containsEntry(\"type\",\"pointerDown\").containsEntry(\"button\",0);\n  assertThat(keyboardActions.get(1)).as(\"Mouse goes down, so keyboard pauses\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(mouseActions.get(2)).as(\"Mouse goes up\").containsEntry(\"type\",\"pointerUp\").containsEntry(\"button\",0);\n  assertThat(keyboardActions.get(2)).as(\"Mouse goes up, so keyboard pauses\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(mouseActions.get(3)).as(\"Mouse pauses as keyboard releases key\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(keyboardActions.get(3)).as(\"Keyboard releases key\").containsEntry(\"type\",\"keyUp\").containsEntry(\"value\",CONTROL.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 70
      },
      "nodeContext" : "assertThat(mouseSequence.get(\"actions\")).isInstanceOf(List.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "mouseSequence.get(\"actions\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 190,
      "startColumnNumber" : 73,
      "endLineNumber" : 190,
      "endColumnNumber" : 101
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 190,
        "startColumnNumber" : 45,
        "endLineNumber" : 190,
        "endColumnNumber" : 101
      },
      "nodeContext" : "(List<Map<String,Object>>)mouseSequence.get(\"actions\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 190,
        "startColumnNumber" : 30,
        "endLineNumber" : 190,
        "endColumnNumber" : 101
      },
      "nodeContext" : "mouseActions=(List<Map<String,Object>>)mouseSequence.get(\"actions\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 102
      },
      "nodeContext" : "List<Map<String,Object>> mouseActions=(List<Map<String,Object>>)mouseSequence.get(\"actions\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2697,
        "startLineNumber" : 161,
        "startColumnNumber" : 30,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  WebDriver driver=mock(WebDriver.class,withSettings().extraInterfaces(Interactive.class));\n  ArgumentCaptor<Collection<Sequence>> sequenceCaptor=ArgumentCaptor.forClass(Collection.class);\n  Mockito.doNothing().when((Interactive)driver).perform(sequenceCaptor.capture());\n  new Actions(driver).keyDown(Keys.CONTROL).click().keyUp(Keys.CONTROL).perform();\n  Collection<Sequence> sequence=sequenceCaptor.getValue();\n  assertThat(sequence).hasSize(2);\n  Map<String,Object>[] sequencesJson=sequence.stream().map(Sequence::toJson).toArray(HashMap[]::new);\n  Map<String,Object> mouseSequence=sequencesJson[0];\n  Map<String,Object> keyboardSequence;\n  if (!mouseSequence.get(\"type\").equals(\"pointer\")) {\n    mouseSequence=sequencesJson[1];\n    keyboardSequence=sequencesJson[0];\n  }\n else {\n    keyboardSequence=sequencesJson[1];\n  }\n  assertThat(mouseSequence).containsEntry(\"type\",\"pointer\");\n  assertThat(mouseSequence.get(\"actions\")).isInstanceOf(List.class);\n  List<Map<String,Object>> mouseActions=(List<Map<String,Object>>)mouseSequence.get(\"actions\");\n  assertThat(mouseActions).hasSize(4);\n  assertThat(keyboardSequence).containsEntry(\"type\",\"key\");\n  assertThat(keyboardSequence.get(\"actions\")).isInstanceOf(List.class);\n  List<Map<String,Object>> keyboardActions=(List<Map<String,Object>>)keyboardSequence.get(\"actions\");\n  assertThat(keyboardActions).hasSize(4);\n  assertThat(mouseActions.get(0)).as(\"Mouse pauses as key goes down\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(keyboardActions.get(0)).as(\"Key goes down\").containsEntry(\"type\",\"keyDown\").containsEntry(\"value\",CONTROL.toString());\n  assertThat(mouseActions.get(1)).as(\"Mouse goes down\").containsEntry(\"type\",\"pointerDown\").containsEntry(\"button\",0);\n  assertThat(keyboardActions.get(1)).as(\"Mouse goes down, so keyboard pauses\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(mouseActions.get(2)).as(\"Mouse goes up\").containsEntry(\"type\",\"pointerUp\").containsEntry(\"button\",0);\n  assertThat(keyboardActions.get(2)).as(\"Mouse goes up, so keyboard pauses\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(mouseActions.get(3)).as(\"Mouse pauses as keyboard releases key\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(keyboardActions.get(3)).as(\"Keyboard releases key\").containsEntry(\"type\",\"keyUp\").containsEntry(\"value\",CONTROL.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2780,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) @Test public void testCtrlClick(){\n  WebDriver driver=mock(WebDriver.class,withSettings().extraInterfaces(Interactive.class));\n  ArgumentCaptor<Collection<Sequence>> sequenceCaptor=ArgumentCaptor.forClass(Collection.class);\n  Mockito.doNothing().when((Interactive)driver).perform(sequenceCaptor.capture());\n  new Actions(driver).keyDown(Keys.CONTROL).click().keyUp(Keys.CONTROL).perform();\n  Collection<Sequence> sequence=sequenceCaptor.getValue();\n  assertThat(sequence).hasSize(2);\n  Map<String,Object>[] sequencesJson=sequence.stream().map(Sequence::toJson).toArray(HashMap[]::new);\n  Map<String,Object> mouseSequence=sequencesJson[0];\n  Map<String,Object> keyboardSequence;\n  if (!mouseSequence.get(\"type\").equals(\"pointer\")) {\n    mouseSequence=sequencesJson[1];\n    keyboardSequence=sequencesJson[0];\n  }\n else {\n    keyboardSequence=sequencesJson[1];\n  }\n  assertThat(mouseSequence).containsEntry(\"type\",\"pointer\");\n  assertThat(mouseSequence.get(\"actions\")).isInstanceOf(List.class);\n  List<Map<String,Object>> mouseActions=(List<Map<String,Object>>)mouseSequence.get(\"actions\");\n  assertThat(mouseActions).hasSize(4);\n  assertThat(keyboardSequence).containsEntry(\"type\",\"key\");\n  assertThat(keyboardSequence.get(\"actions\")).isInstanceOf(List.class);\n  List<Map<String,Object>> keyboardActions=(List<Map<String,Object>>)keyboardSequence.get(\"actions\");\n  assertThat(keyboardActions).hasSize(4);\n  assertThat(mouseActions.get(0)).as(\"Mouse pauses as key goes down\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(keyboardActions.get(0)).as(\"Key goes down\").containsEntry(\"type\",\"keyDown\").containsEntry(\"value\",CONTROL.toString());\n  assertThat(mouseActions.get(1)).as(\"Mouse goes down\").containsEntry(\"type\",\"pointerDown\").containsEntry(\"button\",0);\n  assertThat(keyboardActions.get(1)).as(\"Mouse goes down, so keyboard pauses\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(mouseActions.get(2)).as(\"Mouse goes up\").containsEntry(\"type\",\"pointerUp\").containsEntry(\"button\",0);\n  assertThat(keyboardActions.get(2)).as(\"Mouse goes up, so keyboard pauses\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(mouseActions.get(3)).as(\"Mouse pauses as keyboard releases key\").containsEntry(\"type\",\"pause\").containsEntry(\"duration\",0L);\n  assertThat(keyboardActions.get(3)).as(\"Keyboard releases key\").containsEntry(\"type\",\"keyUp\").containsEntry(\"value\",CONTROL.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 102
      },
      "nodeContext" : "List<Map<String,Object>> mouseActions=(List<Map<String,Object>>)mouseSequence.get(\"actions\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 189,
    "startColumnNumber" : 15,
    "endLineNumber" : 189,
    "endColumnNumber" : 43
  }, {
    "charLength" : 28,
    "startLineNumber" : 190,
    "startColumnNumber" : 73,
    "endLineNumber" : 190,
    "endColumnNumber" : 101
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}