{
  "id" : 166,
  "expression" : "location",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-mock/src/main/java/retrofit/MockHttpException.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "location",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 26,
      "startColumnNumber" : 8,
      "endLineNumber" : 26,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 24
      },
      "nodeContext" : "location == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 54
      },
      "nodeContext" : "location == null || \"\".equals(location.trim())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 28,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (location == null || \"\".equals(location.trim())) {\n  throw new IllegalArgumentException(\"Location must not be blank.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 25,
        "startColumnNumber" : 93,
        "endLineNumber" : 31,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (location == null || \"\".equals(location.trim())) {\n    throw new IllegalArgumentException(\"Location must not be blank.\");\n  }\n  return new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Create a new  {@link MockHttpException} for HTTP 301 Moved Permanently. \n */\npublic static MockHttpException newMovedPermanentely(String location,Object responseBody){\n  if (location == null || \"\".equals(location.trim())) {\n    throw new IllegalArgumentException(\"Location must not be blank.\");\n  }\n  return new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 54
      },
      "nodeContext" : "location == null || \"\".equals(location.trim())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "location",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 26,
      "startColumnNumber" : 38,
      "endLineNumber" : 26,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 26,
        "startColumnNumber" : 38,
        "endLineNumber" : 26,
        "endColumnNumber" : 53
      },
      "nodeContext" : "location.trim()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 26,
        "startColumnNumber" : 28,
        "endLineNumber" : 26,
        "endColumnNumber" : 54
      },
      "nodeContext" : "\"\".equals(location.trim())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 54
      },
      "nodeContext" : "location == null || \"\".equals(location.trim())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 28,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (location == null || \"\".equals(location.trim())) {\n  throw new IllegalArgumentException(\"Location must not be blank.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 25,
        "startColumnNumber" : 93,
        "endLineNumber" : 31,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (location == null || \"\".equals(location.trim())) {\n    throw new IllegalArgumentException(\"Location must not be blank.\");\n  }\n  return new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Create a new  {@link MockHttpException} for HTTP 301 Moved Permanently. \n */\npublic static MockHttpException newMovedPermanentely(String location,Object responseBody){\n  if (location == null || \"\".equals(location.trim())) {\n    throw new IllegalArgumentException(\"Location must not be blank.\");\n  }\n  return new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 54
      },
      "nodeContext" : "location == null || \"\".equals(location.trim())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "location",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 30,
      "startColumnNumber" : 32,
      "endLineNumber" : 30,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 29,
        "startColumnNumber" : 11,
        "endLineNumber" : 30,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 30,
        "endColumnNumber" : 42
      },
      "nodeContext" : "return new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 25,
        "startColumnNumber" : 93,
        "endLineNumber" : 31,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (location == null || \"\".equals(location.trim())) {\n    throw new IllegalArgumentException(\"Location must not be blank.\");\n  }\n  return new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Create a new  {@link MockHttpException} for HTTP 301 Moved Permanently. \n */\npublic static MockHttpException newMovedPermanentely(String location,Object responseBody){\n  if (location == null || \"\".equals(location.trim())) {\n    throw new IllegalArgumentException(\"Location must not be blank.\");\n  }\n  return new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 29,
        "startColumnNumber" : 11,
        "endLineNumber" : 30,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new MockHttpException(HTTP_MOVED_PERM,\"Moved Permanently\",responseBody).withHeader(\"Location\",location)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 26,
    "startColumnNumber" : 8,
    "endLineNumber" : 26,
    "endColumnNumber" : 16
  }, {
    "charLength" : 8,
    "startLineNumber" : 26,
    "startColumnNumber" : 38,
    "endLineNumber" : 26,
    "endColumnNumber" : 46
  }, {
    "charLength" : 8,
    "startLineNumber" : 30,
    "startColumnNumber" : 32,
    "endLineNumber" : 30,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}