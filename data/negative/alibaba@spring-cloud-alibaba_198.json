{
  "id" : 198,
  "expression" : "serviceInstancesFunction",
  "projectName" : "alibaba@spring-cloud-alibaba",
  "commitID" : "89ad537f66927a647f6233cfc79d58b18f2f6928",
  "filePath" : "/spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/registry/AbstractSpringCloudRegistry.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "serviceInstancesFunction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 224,
      "startColumnNumber" : 55,
      "endLineNumber" : 224,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 224,
        "startColumnNumber" : 55,
        "endLineNumber" : 224,
        "endColumnNumber" : 98
      },
      "nodeContext" : "serviceInstancesFunction.apply(serviceName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 224,
        "startColumnNumber" : 36,
        "endLineNumber" : 224,
        "endColumnNumber" : 98
      },
      "nodeContext" : "serviceInstances=serviceInstancesFunction.apply(serviceName)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 224,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Collection<ServiceInstance> serviceInstances=serviceInstancesFunction.apply(serviceName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3168,
        "startLineNumber" : 198,
        "startColumnNumber" : 116,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isInfoEnabled()) {\n    logger.info(\"The Dubbo Service URL[ID : {}] is being subscribed for service[name : {}]\",generateId(url),serviceName);\n  }\n  DubboMetadataService dubboMetadataService=dubboMetadataConfigServiceProxy.getProxy(serviceName);\n  if (dubboMetadataService == null) {\n    if (logger.isInfoEnabled()) {\n      logger.info(\"The metadata of Dubbo service[key : {}] can't be found when the subscribed service[name : {}], \" + \"and then try to initialize it\",url.getServiceKey(),serviceName);\n    }\n    repository.initializeMetadata(serviceName);\n    dubboMetadataService=dubboMetadataConfigServiceProxy.getProxy(serviceName);\n  }\n  if (dubboMetadataService == null) {\n    if (logger.isWarnEnabled()) {\n      logger.warn(\"The metadata of Dubbo service[key : {}] still can't be found, it could effect the further \" + \"Dubbo service invocation\",url.getServiceKey());\n    }\n    return;\n  }\n  Collection<ServiceInstance> serviceInstances=serviceInstancesFunction.apply(serviceName);\n  List<URL> allSubscribedURLs=new LinkedList<>();\n  if (CollectionUtils.isEmpty(serviceInstances)) {\n    if (logger.isWarnEnabled()) {\n      logger.warn(\"There is no instance from service[name : {}], and then Dubbo Service[key : {}] will not be \" + \"available , please make sure the further impact\",serviceName,url.getServiceKey());\n    }\n    allSubscribedURLs.addAll(emptyURLs(url));\n  }\n else {\n    List<URL> exportedURLs=getExportedURLs(dubboMetadataService,url);\n    for (    URL exportedURL : exportedURLs) {\n      String protocol=exportedURL.getProtocol();\n      List<URL> subscribedURLs=new LinkedList<>();\n      serviceInstances.forEach(serviceInstance -> {\n        Integer port=repository.getDubboProtocolPort(serviceInstance,protocol);\n        String host=serviceInstance.getHost();\n        if (port == null) {\n          if (logger.isWarnEnabled()) {\n            logger.warn(\"The protocol[{}] port of Dubbo  service instance[host : {}] \" + \"can't be resolved\",protocol,host);\n          }\n        }\n else {\n          URL subscribedURL=new URL(protocol,host,port,exportedURL.getParameters());\n          subscribedURLs.add(subscribedURL);\n        }\n      }\n);\n      allSubscribedURLs.addAll(subscribedURLs);\n    }\n  }\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"The subscribed URL[{}] will notify all URLs : {}\",url,allSubscribedURLs);\n  }\n  listener.notify(allSubscribedURLs);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void subscribeDubboServiceURL(URL url,NotifyListener listener,String serviceName,Function<String,Collection<ServiceInstance>> serviceInstancesFunction){\n  if (logger.isInfoEnabled()) {\n    logger.info(\"The Dubbo Service URL[ID : {}] is being subscribed for service[name : {}]\",generateId(url),serviceName);\n  }\n  DubboMetadataService dubboMetadataService=dubboMetadataConfigServiceProxy.getProxy(serviceName);\n  if (dubboMetadataService == null) {\n    if (logger.isInfoEnabled()) {\n      logger.info(\"The metadata of Dubbo service[key : {}] can't be found when the subscribed service[name : {}], \" + \"and then try to initialize it\",url.getServiceKey(),serviceName);\n    }\n    repository.initializeMetadata(serviceName);\n    dubboMetadataService=dubboMetadataConfigServiceProxy.getProxy(serviceName);\n  }\n  if (dubboMetadataService == null) {\n    if (logger.isWarnEnabled()) {\n      logger.warn(\"The metadata of Dubbo service[key : {}] still can't be found, it could effect the further \" + \"Dubbo service invocation\",url.getServiceKey());\n    }\n    return;\n  }\n  Collection<ServiceInstance> serviceInstances=serviceInstancesFunction.apply(serviceName);\n  List<URL> allSubscribedURLs=new LinkedList<>();\n  if (CollectionUtils.isEmpty(serviceInstances)) {\n    if (logger.isWarnEnabled()) {\n      logger.warn(\"There is no instance from service[name : {}], and then Dubbo Service[key : {}] will not be \" + \"available , please make sure the further impact\",serviceName,url.getServiceKey());\n    }\n    allSubscribedURLs.addAll(emptyURLs(url));\n  }\n else {\n    List<URL> exportedURLs=getExportedURLs(dubboMetadataService,url);\n    for (    URL exportedURL : exportedURLs) {\n      String protocol=exportedURL.getProtocol();\n      List<URL> subscribedURLs=new LinkedList<>();\n      serviceInstances.forEach(serviceInstance -> {\n        Integer port=repository.getDubboProtocolPort(serviceInstance,protocol);\n        String host=serviceInstance.getHost();\n        if (port == null) {\n          if (logger.isWarnEnabled()) {\n            logger.warn(\"The protocol[{}] port of Dubbo  service instance[host : {}] \" + \"can't be resolved\",protocol,host);\n          }\n        }\n else {\n          URL subscribedURL=new URL(protocol,host,port,exportedURL.getParameters());\n          subscribedURLs.add(subscribedURL);\n        }\n      }\n);\n      allSubscribedURLs.addAll(subscribedURLs);\n    }\n  }\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"The subscribed URL[{}] will notify all URLs : {}\",url,allSubscribedURLs);\n  }\n  listener.notify(allSubscribedURLs);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 286,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 224,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Collection<ServiceInstance> serviceInstances=serviceInstancesFunction.apply(serviceName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.function.Function<java.lang.String,java.util.Collection<com.alibaba.cloud.dubbo.registry.ServiceInstance>>"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 224,
    "startColumnNumber" : 55,
    "endLineNumber" : 224,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}