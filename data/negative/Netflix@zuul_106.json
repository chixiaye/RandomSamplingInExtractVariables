{
  "id" : 106,
  "expression" : "ditheredReconnectDeadline()",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushRegistrationHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ditheredReconnectDeadline()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 181,
      "startColumnNumber" : 70,
      "endLineNumber" : 181,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 116
      },
      "nodeContext" : "ctx.executor().schedule(this::requestClientToCloseConnection,ditheredReconnectDeadline(),TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ctx.executor().schedule(this::requestClientToCloseConnection,ditheredReconnectDeadline(),TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 501,
        "startLineNumber" : 178,
        "startColumnNumber" : 87,
        "endLineNumber" : 185,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  registry.put(authEvent.getClientIdentity(),conn);\n  ctx.executor().schedule(this::requestClientToCloseConnection,ditheredReconnectDeadline(),TimeUnit.SECONDS);\n  if (KEEP_ALIVE_ENABLED.get()) {\n    keepAliveTask=ctx.executor().scheduleWithFixedDelay(this::keepAlive,KEEP_ALIVE_INTERVAL.get(),KEEP_ALIVE_INTERVAL.get(),TimeUnit.SECONDS);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1718,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 185,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register authenticated client  - represented by PushAuthEvent - with PushConnectionRegistry of this instance. For all but really simplistic case - basically anything other than a single node push cluster, You'd most likely need some sort of off-box, partitioned, global registration registry that keeps track of which client is connected to which push server instance. You should override this default implementation for such cases and register your client with your global registry in addition to local push connection registry that is limited to this JVM instance Make sure such a registration is done in strictly non-blocking fashion lest you will block Netty event loop decimating your throughput. A typical arrangement is to use something like Memcached or redis cluster sharded by client connection key and to use blocking Memcached/redis driver in a background thread-pool to do the actual registration so that Netty event loop doesn't block\n */\nprotected void registerClient(ChannelHandlerContext ctx,PushUserAuth authEvent,PushConnection conn,PushConnectionRegistry registry){\n  registry.put(authEvent.getClientIdentity(),conn);\n  ctx.executor().schedule(this::requestClientToCloseConnection,ditheredReconnectDeadline(),TimeUnit.SECONDS);\n  if (KEEP_ALIVE_ENABLED.get()) {\n    keepAliveTask=ctx.executor().scheduleWithFixedDelay(this::keepAlive,KEEP_ALIVE_INTERVAL.get(),KEEP_ALIVE_INTERVAL.get(),TimeUnit.SECONDS);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ctx.executor().schedule(this::requestClientToCloseConnection,ditheredReconnectDeadline(),TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 181,
    "startColumnNumber" : 70,
    "endLineNumber" : 181,
    "endColumnNumber" : 97
  } ],
  "layoutRelationDataList" : [ ]
}