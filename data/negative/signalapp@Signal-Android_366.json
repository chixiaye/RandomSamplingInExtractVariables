{
  "id" : 366,
  "expression" : "controllers.size()",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/net/ChunkedDataFetcher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "controllers.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 156,
      "startColumnNumber" : 64,
      "endLineNumber" : 156,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 156,
        "startColumnNumber" : 64,
        "endLineNumber" : 156,
        "endColumnNumber" : 117
      },
      "nodeContext" : "controllers.size() + (firstChunk.isPresent() ? 1 : 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 156,
        "startColumnNumber" : 48,
        "endLineNumber" : 156,
        "endColumnNumber" : 118
      },
      "nodeContext" : "new ArrayList<>(controllers.size() + (firstChunk.isPresent() ? 1 : 0))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 156,
        "startColumnNumber" : 34,
        "endLineNumber" : 156,
        "endColumnNumber" : 118
      },
      "nodeContext" : "streams=new ArrayList<>(controllers.size() + (firstChunk.isPresent() ? 1 : 0))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 156,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 119
      },
      "nodeContext" : "List<InputStream> streams=new ArrayList<>(controllers.size() + (firstChunk.isPresent() ? 1 : 0));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 986,
        "startLineNumber" : 154,
        "startColumnNumber" : 44,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<CallRequestController> controllers=Stream.of(requestPattern).map(range -> makeChunkRequest(client,url,range)).toList();\n  List<InputStream> streams=new ArrayList<>(controllers.size() + (firstChunk.isPresent() ? 1 : 0));\n  if (firstChunk.isPresent()) {\n    streams.add(firstChunk.get().first());\n  }\n  Stream.of(controllers).forEach(compositeController::addController);\n  for (  CallRequestController controller : controllers) {\n    Optional<InputStream> stream=controller.getStream();\n    if (!stream.isPresent()) {\n      Log.w(TAG,\"Stream was canceled.\");\n      callback.onFailure(new IOException(\"Failure\"));\n      compositeController.cancel();\n      return;\n    }\n    streams.add(stream.get());\n  }\n  try {\n    callback.onSuccess(new InputStreamList(streams));\n  }\n catch (  IOException e) {\n    callback.onFailure(e);\n    compositeController.cancel();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 992,
        "startLineNumber" : 154,
        "startColumnNumber" : 38,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "() -> {\n  List<CallRequestController> controllers=Stream.of(requestPattern).map(range -> makeChunkRequest(client,url,range)).toList();\n  List<InputStream> streams=new ArrayList<>(controllers.size() + (firstChunk.isPresent() ? 1 : 0));\n  if (firstChunk.isPresent()) {\n    streams.add(firstChunk.get().first());\n  }\n  Stream.of(controllers).forEach(compositeController::addController);\n  for (  CallRequestController controller : controllers) {\n    Optional<InputStream> stream=controller.getStream();\n    if (!stream.isPresent()) {\n      Log.w(TAG,\"Stream was canceled.\");\n      callback.onFailure(new IOException(\"Failure\"));\n      compositeController.cancel();\n      return;\n    }\n    streams.add(stream.get());\n  }\n  try {\n    callback.onSuccess(new InputStreamList(streams));\n  }\n catch (  IOException e) {\n    callback.onFailure(e);\n    compositeController.cancel();\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 156,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 119
      },
      "nodeContext" : "List<InputStream> streams=new ArrayList<>(controllers.size() + (firstChunk.isPresent() ? 1 : 0));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 156,
    "startColumnNumber" : 64,
    "endLineNumber" : 156,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}