{
  "id" : 80,
  "expression" : "FrameworkErrorCode.ThreadPoolFull.getErrCode()",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/core/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemoting.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "FrameworkErrorCode.ThreadPoolFull.getErrCode()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 368,
      "startColumnNumber" : 33,
      "endLineNumber" : 368,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 368,
        "startColumnNumber" : 20,
        "endLineNumber" : 369,
        "endColumnNumber" : 108
      },
      "nodeContext" : "LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 368,
        "startColumnNumber" : 20,
        "endLineNumber" : 369,
        "endColumnNumber" : 109
      },
      "nodeContext" : "LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 367,
        "startColumnNumber" : 55,
        "endLineNumber" : 381,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n  if (allowDumpStack) {\n    String name=ManagementFactory.getRuntimeMXBean().getName();\n    String pid=name.split(\"@\")[0];\n    int idx=new Random().nextInt(100);\n    try {\n      Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n    }\n catch (    IOException exx) {\n      LOGGER.error(exx.getMessage());\n    }\n    allowDumpStack=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 828,
        "startLineNumber" : 367,
        "startColumnNumber" : 18,
        "endLineNumber" : 381,
        "endColumnNumber" : 17
      },
      "nodeContext" : "catch (RejectedExecutionException e) {\n  LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n  if (allowDumpStack) {\n    String name=ManagementFactory.getRuntimeMXBean().getName();\n    String pid=name.split(\"@\")[0];\n    int idx=new Random().nextInt(100);\n    try {\n      Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n    }\n catch (    IOException exx) {\n      LOGGER.error(exx.getMessage());\n    }\n    allowDumpStack=false;\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1384,
        "startLineNumber" : 356,
        "startColumnNumber" : 16,
        "endLineNumber" : 381,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n    @Override public void run(){\n      try {\n        dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n      }\n catch (      Throwable th) {\n        LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n      }\n    }\n  }\n);\n}\n catch (RejectedExecutionException e) {\n  LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n  if (allowDumpStack) {\n    String name=ManagementFactory.getRuntimeMXBean().getName();\n    String pid=name.split(\"@\")[0];\n    int idx=new Random().nextInt(100);\n    try {\n      Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n    }\n catch (    IOException exx) {\n      LOGGER.error(exx.getMessage());\n    }\n    allowDumpStack=false;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 136,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1602,
        "startLineNumber" : 352,
        "startColumnNumber" : 40,
        "endLineNumber" : 382,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n  }\n  try {\n    AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n      @Override public void run(){\n        try {\n          dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n        }\n catch (        Throwable th) {\n          LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n        }\n      }\n    }\n);\n  }\n catch (  RejectedExecutionException e) {\n    LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n    if (allowDumpStack) {\n      String name=ManagementFactory.getRuntimeMXBean().getName();\n      String pid=name.split(\"@\")[0];\n      int idx=new Random().nextInt(100);\n      try {\n        Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n      }\n catch (      IOException exx) {\n        LOGGER.error(exx.getMessage());\n      }\n      allowDumpStack=false;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3041,
        "startLineNumber" : 352,
        "startColumnNumber" : 12,
        "endLineNumber" : 408,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (rpcMessage.isRequest()) {\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n  }\n  try {\n    AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n      @Override public void run(){\n        try {\n          dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n        }\n catch (        Throwable th) {\n          LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n        }\n      }\n    }\n);\n  }\n catch (  RejectedExecutionException e) {\n    LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n    if (allowDumpStack) {\n      String name=ManagementFactory.getRuntimeMXBean().getName();\n      String pid=name.split(\"@\")[0];\n      int idx=new Random().nextInt(100);\n      try {\n        Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n      }\n catch (      IOException exx) {\n        LOGGER.error(exx.getMessage());\n      }\n      allowDumpStack=false;\n    }\n  }\n}\n else {\n  MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n  }\n  if (messageFuture != null) {\n    messageFuture.setResultMessage(rpcMessage.getBody());\n  }\n else {\n    try {\n      AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n        @Override public void run(){\n          try {\n            dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n          }\n catch (          Throwable th) {\n            LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n          }\n        }\n      }\n);\n    }\n catch (    RejectedExecutionException e) {\n      LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 278,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3124,
        "startLineNumber" : 350,
        "startColumnNumber" : 39,
        "endLineNumber" : 409,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final RpcMessage rpcMessage=(RpcMessage)msg;\n  if (rpcMessage.isRequest()) {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n    }\n    try {\n      AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n        @Override public void run(){\n          try {\n            dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n          }\n catch (          Throwable th) {\n            LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n          }\n        }\n      }\n);\n    }\n catch (    RejectedExecutionException e) {\n      LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n      if (allowDumpStack) {\n        String name=ManagementFactory.getRuntimeMXBean().getName();\n        String pid=name.split(\"@\")[0];\n        int idx=new Random().nextInt(100);\n        try {\n          Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n        }\n catch (        IOException exx) {\n          LOGGER.error(exx.getMessage());\n        }\n        allowDumpStack=false;\n      }\n    }\n  }\n else {\n    MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n    }\n    if (messageFuture != null) {\n      messageFuture.setResultMessage(rpcMessage.getBody());\n    }\n else {\n      try {\n        AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n          @Override public void run(){\n            try {\n              dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n            }\n catch (            Throwable th) {\n              LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n            }\n          }\n        }\n);\n      }\n catch (      RejectedExecutionException e) {\n        LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3155,
        "startLineNumber" : 350,
        "startColumnNumber" : 8,
        "endLineNumber" : 409,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof RpcMessage) {\n  final RpcMessage rpcMessage=(RpcMessage)msg;\n  if (rpcMessage.isRequest()) {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n    }\n    try {\n      AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n        @Override public void run(){\n          try {\n            dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n          }\n catch (          Throwable th) {\n            LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n          }\n        }\n      }\n);\n    }\n catch (    RejectedExecutionException e) {\n      LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n      if (allowDumpStack) {\n        String name=ManagementFactory.getRuntimeMXBean().getName();\n        String pid=name.split(\"@\")[0];\n        int idx=new Random().nextInt(100);\n        try {\n          Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n        }\n catch (        IOException exx) {\n          LOGGER.error(exx.getMessage());\n        }\n        allowDumpStack=false;\n      }\n    }\n  }\n else {\n    MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n    }\n    if (messageFuture != null) {\n      messageFuture.setResultMessage(rpcMessage.getBody());\n    }\n else {\n      try {\n        AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n          @Override public void run(){\n            try {\n              dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n            }\n catch (            Throwable th) {\n              LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n            }\n          }\n        }\n);\n      }\n catch (      RejectedExecutionException e) {\n        LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 294,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 349,
        "startColumnNumber" : 90,
        "endLineNumber" : 410,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (msg instanceof RpcMessage) {\n    final RpcMessage rpcMessage=(RpcMessage)msg;\n    if (rpcMessage.isRequest()) {\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n      }\n      try {\n        AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n          @Override public void run(){\n            try {\n              dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n            }\n catch (            Throwable th) {\n              LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n            }\n          }\n        }\n);\n      }\n catch (      RejectedExecutionException e) {\n        LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n        if (allowDumpStack) {\n          String name=ManagementFactory.getRuntimeMXBean().getName();\n          String pid=name.split(\"@\")[0];\n          int idx=new Random().nextInt(100);\n          try {\n            Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n          }\n catch (          IOException exx) {\n            LOGGER.error(exx.getMessage());\n          }\n          allowDumpStack=false;\n        }\n      }\n    }\n else {\n      MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n      }\n      if (messageFuture != null) {\n        messageFuture.setResultMessage(rpcMessage.getBody());\n      }\n else {\n        try {\n          AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n            @Override public void run(){\n              try {\n                dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n              }\n catch (              Throwable th) {\n                LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n              }\n            }\n          }\n);\n        }\n catch (        RejectedExecutionException e) {\n          LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3271,
        "startLineNumber" : 348,
        "startColumnNumber" : 4,
        "endLineNumber" : 410,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void channelRead(final ChannelHandlerContext ctx,Object msg) throws Exception {\n  if (msg instanceof RpcMessage) {\n    final RpcMessage rpcMessage=(RpcMessage)msg;\n    if (rpcMessage.isRequest()) {\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n      }\n      try {\n        AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n          @Override public void run(){\n            try {\n              dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n            }\n catch (            Throwable th) {\n              LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n            }\n          }\n        }\n);\n      }\n catch (      RejectedExecutionException e) {\n        LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n        if (allowDumpStack) {\n          String name=ManagementFactory.getRuntimeMXBean().getName();\n          String pid=name.split(\"@\")[0];\n          int idx=new Random().nextInt(100);\n          try {\n            Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n          }\n catch (          IOException exx) {\n            LOGGER.error(exx.getMessage());\n          }\n          allowDumpStack=false;\n        }\n      }\n    }\n else {\n      MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n      }\n      if (messageFuture != null) {\n        messageFuture.setResultMessage(rpcMessage.getBody());\n      }\n else {\n        try {\n          AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n            @Override public void run(){\n              try {\n                dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n              }\n catch (              Throwable th) {\n                LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n              }\n            }\n          }\n);\n        }\n catch (        RejectedExecutionException e) {\n          LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 312,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 368,
        "startColumnNumber" : 20,
        "endLineNumber" : 369,
        "endColumnNumber" : 108
      },
      "nodeContext" : "LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "FrameworkErrorCode.ThreadPoolFull.getErrCode()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 404,
      "startColumnNumber" : 37,
      "endLineNumber" : 404,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 404,
        "startColumnNumber" : 24,
        "endLineNumber" : 405,
        "endColumnNumber" : 112
      },
      "nodeContext" : "LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 404,
        "startColumnNumber" : 24,
        "endLineNumber" : 405,
        "endColumnNumber" : 113
      },
      "nodeContext" : "LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 403,
        "startColumnNumber" : 59,
        "endLineNumber" : 406,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 403,
        "startColumnNumber" : 22,
        "endLineNumber" : 406,
        "endColumnNumber" : 21
      },
      "nodeContext" : "catch (RejectedExecutionException e) {\n  LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 392,
        "startColumnNumber" : 20,
        "endLineNumber" : 406,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n    @Override public void run(){\n      try {\n        dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n      }\n catch (      Throwable th) {\n        LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n      }\n    }\n  }\n);\n}\n catch (RejectedExecutionException e) {\n  LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 71,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 899,
        "startLineNumber" : 391,
        "startColumnNumber" : 23,
        "endLineNumber" : 407,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n      @Override public void run(){\n        try {\n          dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n        }\n catch (        Throwable th) {\n          LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n        }\n      }\n    }\n);\n  }\n catch (  RejectedExecutionException e) {\n    LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 389,
        "startColumnNumber" : 16,
        "endLineNumber" : 407,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (messageFuture != null) {\n  messageFuture.setResultMessage(rpcMessage.getBody());\n}\n else {\n  try {\n    AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n      @Override public void run(){\n        try {\n          dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n        }\n catch (        Throwable th) {\n          LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n        }\n      }\n    }\n);\n  }\n catch (  RejectedExecutionException e) {\n    LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 382,
        "startColumnNumber" : 19,
        "endLineNumber" : 408,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n  }\n  if (messageFuture != null) {\n    messageFuture.setResultMessage(rpcMessage.getBody());\n  }\n else {\n    try {\n      AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n        @Override public void run(){\n          try {\n            dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n          }\n catch (          Throwable th) {\n            LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n          }\n        }\n      }\n);\n    }\n catch (    RejectedExecutionException e) {\n      LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3041,
        "startLineNumber" : 352,
        "startColumnNumber" : 12,
        "endLineNumber" : 408,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (rpcMessage.isRequest()) {\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n  }\n  try {\n    AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n      @Override public void run(){\n        try {\n          dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n        }\n catch (        Throwable th) {\n          LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n        }\n      }\n    }\n);\n  }\n catch (  RejectedExecutionException e) {\n    LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n    if (allowDumpStack) {\n      String name=ManagementFactory.getRuntimeMXBean().getName();\n      String pid=name.split(\"@\")[0];\n      int idx=new Random().nextInt(100);\n      try {\n        Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n      }\n catch (      IOException exx) {\n        LOGGER.error(exx.getMessage());\n      }\n      allowDumpStack=false;\n    }\n  }\n}\n else {\n  MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n  }\n  if (messageFuture != null) {\n    messageFuture.setResultMessage(rpcMessage.getBody());\n  }\n else {\n    try {\n      AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n        @Override public void run(){\n          try {\n            dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n          }\n catch (          Throwable th) {\n            LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n          }\n        }\n      }\n);\n    }\n catch (    RejectedExecutionException e) {\n      LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 278,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3124,
        "startLineNumber" : 350,
        "startColumnNumber" : 39,
        "endLineNumber" : 409,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final RpcMessage rpcMessage=(RpcMessage)msg;\n  if (rpcMessage.isRequest()) {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n    }\n    try {\n      AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n        @Override public void run(){\n          try {\n            dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n          }\n catch (          Throwable th) {\n            LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n          }\n        }\n      }\n);\n    }\n catch (    RejectedExecutionException e) {\n      LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n      if (allowDumpStack) {\n        String name=ManagementFactory.getRuntimeMXBean().getName();\n        String pid=name.split(\"@\")[0];\n        int idx=new Random().nextInt(100);\n        try {\n          Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n        }\n catch (        IOException exx) {\n          LOGGER.error(exx.getMessage());\n        }\n        allowDumpStack=false;\n      }\n    }\n  }\n else {\n    MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n    }\n    if (messageFuture != null) {\n      messageFuture.setResultMessage(rpcMessage.getBody());\n    }\n else {\n      try {\n        AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n          @Override public void run(){\n            try {\n              dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n            }\n catch (            Throwable th) {\n              LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n            }\n          }\n        }\n);\n      }\n catch (      RejectedExecutionException e) {\n        LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3155,
        "startLineNumber" : 350,
        "startColumnNumber" : 8,
        "endLineNumber" : 409,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof RpcMessage) {\n  final RpcMessage rpcMessage=(RpcMessage)msg;\n  if (rpcMessage.isRequest()) {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n    }\n    try {\n      AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n        @Override public void run(){\n          try {\n            dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n          }\n catch (          Throwable th) {\n            LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n          }\n        }\n      }\n);\n    }\n catch (    RejectedExecutionException e) {\n      LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n      if (allowDumpStack) {\n        String name=ManagementFactory.getRuntimeMXBean().getName();\n        String pid=name.split(\"@\")[0];\n        int idx=new Random().nextInt(100);\n        try {\n          Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n        }\n catch (        IOException exx) {\n          LOGGER.error(exx.getMessage());\n        }\n        allowDumpStack=false;\n      }\n    }\n  }\n else {\n    MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n    }\n    if (messageFuture != null) {\n      messageFuture.setResultMessage(rpcMessage.getBody());\n    }\n else {\n      try {\n        AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n          @Override public void run(){\n            try {\n              dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n            }\n catch (            Throwable th) {\n              LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n            }\n          }\n        }\n);\n      }\n catch (      RejectedExecutionException e) {\n        LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 294,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 349,
        "startColumnNumber" : 90,
        "endLineNumber" : 410,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (msg instanceof RpcMessage) {\n    final RpcMessage rpcMessage=(RpcMessage)msg;\n    if (rpcMessage.isRequest()) {\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n      }\n      try {\n        AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n          @Override public void run(){\n            try {\n              dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n            }\n catch (            Throwable th) {\n              LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n            }\n          }\n        }\n);\n      }\n catch (      RejectedExecutionException e) {\n        LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n        if (allowDumpStack) {\n          String name=ManagementFactory.getRuntimeMXBean().getName();\n          String pid=name.split(\"@\")[0];\n          int idx=new Random().nextInt(100);\n          try {\n            Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n          }\n catch (          IOException exx) {\n            LOGGER.error(exx.getMessage());\n          }\n          allowDumpStack=false;\n        }\n      }\n    }\n else {\n      MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n      }\n      if (messageFuture != null) {\n        messageFuture.setResultMessage(rpcMessage.getBody());\n      }\n else {\n        try {\n          AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n            @Override public void run(){\n              try {\n                dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n              }\n catch (              Throwable th) {\n                LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n              }\n            }\n          }\n);\n        }\n catch (        RejectedExecutionException e) {\n          LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3271,
        "startLineNumber" : 348,
        "startColumnNumber" : 4,
        "endLineNumber" : 410,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void channelRead(final ChannelHandlerContext ctx,Object msg) throws Exception {\n  if (msg instanceof RpcMessage) {\n    final RpcMessage rpcMessage=(RpcMessage)msg;\n    if (rpcMessage.isRequest()) {\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"%s msgId:%s, body:%s\",this,rpcMessage.getId(),rpcMessage.getBody()));\n      }\n      try {\n        AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n          @Override public void run(){\n            try {\n              dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n            }\n catch (            Throwable th) {\n              LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n            }\n          }\n        }\n);\n      }\n catch (      RejectedExecutionException e) {\n        LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n        if (allowDumpStack) {\n          String name=ManagementFactory.getRuntimeMXBean().getName();\n          String pid=name.split(\"@\")[0];\n          int idx=new Random().nextInt(100);\n          try {\n            Runtime.getRuntime().exec(\"jstack \" + pid + \" >d:/\"+ idx+ \".log\");\n          }\n catch (          IOException exx) {\n            LOGGER.error(exx.getMessage());\n          }\n          allowDumpStack=false;\n        }\n      }\n    }\n else {\n      MessageFuture messageFuture=futures.remove(rpcMessage.getId());\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"%s msgId:%s, future :%s, body:%s\",this,rpcMessage.getId(),messageFuture,rpcMessage.getBody()));\n      }\n      if (messageFuture != null) {\n        messageFuture.setResultMessage(rpcMessage.getBody());\n      }\n else {\n        try {\n          AbstractRpcRemoting.this.messageExecutor.execute(new Runnable(){\n            @Override public void run(){\n              try {\n                dispatch(rpcMessage.getId(),ctx,rpcMessage.getBody());\n              }\n catch (              Throwable th) {\n                LOGGER.error(FrameworkErrorCode.NetDispatch.getErrCode(),th.getMessage(),th);\n              }\n            }\n          }\n);\n        }\n catch (        RejectedExecutionException e) {\n          LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 312,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 404,
        "startColumnNumber" : 24,
        "endLineNumber" : 405,
        "endColumnNumber" : 112
      },
      "nodeContext" : "LOGGER.error(FrameworkErrorCode.ThreadPoolFull.getErrCode(),\"thread pool is full, current max pool size is \" + messageExecutor.getActiveCount())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 368,
    "startColumnNumber" : 33,
    "endLineNumber" : 368,
    "endColumnNumber" : 79
  }, {
    "charLength" : 46,
    "startLineNumber" : 404,
    "startColumnNumber" : 37,
    "endLineNumber" : 404,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}