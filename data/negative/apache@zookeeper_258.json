{
  "id" : 258,
  "expression" : "request",
  "projectName" : "apache@zookeeper",
  "commitID" : "344a30792bb30430a5949fa20ae69872c42394e0",
  "filePath" : "zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java",
  "occurrences" : 45,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 75,
      "startColumnNumber" : 12,
      "endLineNumber" : 75,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 24
      },
      "nodeContext" : "request.type",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 39
      },
      "nodeContext" : "request.type == OpCode.ping",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (request.type == OpCode.ping) {\n  traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 39
      },
      "nodeContext" : "request.type == OpCode.ping",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 78,
      "startColumnNumber" : 31,
      "endLineNumber" : 78,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ZooLog.logRequest('E',request,\"\",traceMask)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ZooLog.logRequest('E',request,\"\",traceMask);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ZooLog.logRequest('E',request,\"\",traceMask);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 82,
      "startColumnNumber" : 61,
      "endLineNumber" : 82,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 82,
        "startColumnNumber" : 61,
        "endLineNumber" : 82,
        "endColumnNumber" : 73
      },
      "nodeContext" : "request.zxid",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 82,
        "startColumnNumber" : 23,
        "endLineNumber" : 82,
        "endColumnNumber" : 73
      },
      "nodeContext" : "zks.outstandingChanges.get(0).zxid <= request.zxid",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 81,
        "startColumnNumber" : 19,
        "endLineNumber" : 82,
        "endColumnNumber" : 73
      },
      "nodeContext" : "!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n  if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n    ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n  }\n  zks.outstandingChanges.remove(0);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 82,
        "startColumnNumber" : 23,
        "endLineNumber" : 82,
        "endColumnNumber" : 73
      },
      "nodeContext" : "zks.outstandingChanges.get(0).zxid <= request.zxid",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 83,
      "startColumnNumber" : 57,
      "endLineNumber" : 83,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 83,
        "startColumnNumber" : 57,
        "endLineNumber" : 83,
        "endColumnNumber" : 69
      },
      "nodeContext" : "request.zxid",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 83,
        "startColumnNumber" : 20,
        "endLineNumber" : 83,
        "endColumnNumber" : 69
      },
      "nodeContext" : "zks.outstandingChanges.get(0).zxid < request.zxid",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n  ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 349,
        "startLineNumber" : 82,
        "startColumnNumber" : 75,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n    ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n  }\n  zks.outstandingChanges.remove(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n  if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n    ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n  }\n  zks.outstandingChanges.remove(0);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 83,
        "startColumnNumber" : 20,
        "endLineNumber" : 83,
        "endColumnNumber" : 69
      },
      "nodeContext" : "zks.outstandingChanges.get(0).zxid < request.zxid",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 86,
      "startColumnNumber" : 57,
      "endLineNumber" : 86,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 86,
        "startColumnNumber" : 57,
        "endLineNumber" : 86,
        "endColumnNumber" : 69
      },
      "nodeContext" : "request.zxid",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 84,
        "startColumnNumber" : 36,
        "endLineNumber" : 86,
        "endColumnNumber" : 69
      },
      "nodeContext" : "\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 86,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 86,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 83,
        "startColumnNumber" : 71,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n  ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 349,
        "startLineNumber" : 82,
        "startColumnNumber" : 75,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n    ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n  }\n  zks.outstandingChanges.remove(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n  if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n    ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n  }\n  zks.outstandingChanges.remove(0);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 86,
        "startColumnNumber" : 57,
        "endLineNumber" : 86,
        "endColumnNumber" : 69
      },
      "nodeContext" : "request.zxid",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 90,
      "startColumnNumber" : 16,
      "endLineNumber" : 90,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 27
      },
      "nodeContext" : "request.hdr",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 35
      },
      "nodeContext" : "request.hdr != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 35
      },
      "nodeContext" : "request.hdr != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 91,
      "startColumnNumber" : 45,
      "endLineNumber" : 91,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 91,
        "startColumnNumber" : 45,
        "endLineNumber" : 91,
        "endColumnNumber" : 56
      },
      "nodeContext" : "request.hdr",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 91,
        "startColumnNumber" : 21,
        "endLineNumber" : 91,
        "endColumnNumber" : 70
      },
      "nodeContext" : "zks.dataTree.processTxn(request.hdr,request.txn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 70
      },
      "nodeContext" : "rc=zks.dataTree.processTxn(request.hdr,request.txn)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 71
      },
      "nodeContext" : "rc=zks.dataTree.processTxn(request.hdr,request.txn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 71
      },
      "nodeContext" : "rc=zks.dataTree.processTxn(request.hdr,request.txn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 91,
      "startColumnNumber" : 58,
      "endLineNumber" : 91,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 91,
        "startColumnNumber" : 58,
        "endLineNumber" : 91,
        "endColumnNumber" : 69
      },
      "nodeContext" : "request.txn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 91,
        "startColumnNumber" : 21,
        "endLineNumber" : 91,
        "endColumnNumber" : 70
      },
      "nodeContext" : "zks.dataTree.processTxn(request.hdr,request.txn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 70
      },
      "nodeContext" : "rc=zks.dataTree.processTxn(request.hdr,request.txn)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 71
      },
      "nodeContext" : "rc=zks.dataTree.processTxn(request.hdr,request.txn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 71
      },
      "nodeContext" : "rc=zks.dataTree.processTxn(request.hdr,request.txn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 92,
      "startColumnNumber" : 20,
      "endLineNumber" : 92,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 32
      },
      "nodeContext" : "request.type",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 56
      },
      "nodeContext" : "request.type == OpCode.createSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 56
      },
      "nodeContext" : "request.type == OpCode.createSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 93,
      "startColumnNumber" : 24,
      "endLineNumber" : 93,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 93,
        "startColumnNumber" : 24,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "request.txn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 93,
        "startColumnNumber" : 24,
        "endLineNumber" : 93,
        "endColumnNumber" : 63
      },
      "nodeContext" : "request.txn instanceof CreateSessionTxn",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 480,
        "startLineNumber" : 93,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.txn instanceof CreateSessionTxn) {\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n else {\n  ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 92,
        "startColumnNumber" : 58,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 93,
        "startColumnNumber" : 24,
        "endLineNumber" : 93,
        "endColumnNumber" : 63
      },
      "nodeContext" : "request.txn instanceof CreateSessionTxn",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 94,
      "startColumnNumber" : 66,
      "endLineNumber" : 94,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 94,
        "startColumnNumber" : 66,
        "endLineNumber" : 94,
        "endColumnNumber" : 77
      },
      "nodeContext" : "request.txn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 94,
        "startColumnNumber" : 47,
        "endLineNumber" : 94,
        "endColumnNumber" : 77
      },
      "nodeContext" : "(CreateSessionTxn)request.txn",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 94,
        "startColumnNumber" : 41,
        "endLineNumber" : 94,
        "endColumnNumber" : 77
      },
      "nodeContext" : "cst=(CreateSessionTxn)request.txn",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 94,
        "startColumnNumber" : 24,
        "endLineNumber" : 94,
        "endColumnNumber" : 78
      },
      "nodeContext" : "CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 93,
        "startColumnNumber" : 65,
        "endLineNumber" : 97,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 480,
        "startLineNumber" : 93,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.txn instanceof CreateSessionTxn) {\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n else {\n  ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 92,
        "startColumnNumber" : 58,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 94,
        "startColumnNumber" : 24,
        "endLineNumber" : 94,
        "endColumnNumber" : 78
      },
      "nodeContext" : "CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 95,
      "startColumnNumber" : 54,
      "endLineNumber" : 95,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 95,
        "startColumnNumber" : 54,
        "endLineNumber" : 95,
        "endColumnNumber" : 71
      },
      "nodeContext" : "request.sessionId",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 95,
        "startColumnNumber" : 24,
        "endLineNumber" : 96,
        "endColumnNumber" : 46
      },
      "nodeContext" : "zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 95,
        "startColumnNumber" : 24,
        "endLineNumber" : 96,
        "endColumnNumber" : 47
      },
      "nodeContext" : "zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 93,
        "startColumnNumber" : 65,
        "endLineNumber" : 97,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 480,
        "startLineNumber" : 93,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.txn instanceof CreateSessionTxn) {\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n else {\n  ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 92,
        "startColumnNumber" : 58,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 95,
        "startColumnNumber" : 54,
        "endLineNumber" : 95,
        "endColumnNumber" : 71
      },
      "nodeContext" : "request.sessionId",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 99,
      "startColumnNumber" : 34,
      "endLineNumber" : 99,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 99,
        "endColumnNumber" : 45
      },
      "nodeContext" : "request.txn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 99,
        "endColumnNumber" : 56
      },
      "nodeContext" : "request.txn.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 98,
        "startColumnNumber" : 39,
        "endLineNumber" : 100,
        "endColumnNumber" : 56
      },
      "nodeContext" : "\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 98,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 98,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 97,
        "startColumnNumber" : 27,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 480,
        "startLineNumber" : 93,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.txn instanceof CreateSessionTxn) {\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n else {\n  ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 92,
        "startColumnNumber" : 58,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 99,
        "endColumnNumber" : 56
      },
      "nodeContext" : "request.txn.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 100,
      "startColumnNumber" : 34,
      "endLineNumber" : 100,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 100,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 45
      },
      "nodeContext" : "request.txn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 100,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 56
      },
      "nodeContext" : "request.txn.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 98,
        "startColumnNumber" : 39,
        "endLineNumber" : 100,
        "endColumnNumber" : 56
      },
      "nodeContext" : "\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 98,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 98,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 97,
        "startColumnNumber" : 27,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 480,
        "startLineNumber" : 93,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.txn instanceof CreateSessionTxn) {\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n else {\n  ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 92,
        "startColumnNumber" : 58,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 100,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 56
      },
      "nodeContext" : "request.txn.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 102,
      "startColumnNumber" : 27,
      "endLineNumber" : 102,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 102,
        "startColumnNumber" : 27,
        "endLineNumber" : 102,
        "endColumnNumber" : 39
      },
      "nodeContext" : "request.type",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 102,
        "startColumnNumber" : 27,
        "endLineNumber" : 102,
        "endColumnNumber" : 62
      },
      "nodeContext" : "request.type == OpCode.closeSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 102,
        "startColumnNumber" : 23,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 102,
        "startColumnNumber" : 27,
        "endLineNumber" : 102,
        "endColumnNumber" : 62
      },
      "nodeContext" : "request.type == OpCode.closeSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 103,
      "startColumnNumber" : 53,
      "endLineNumber" : 103,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 103,
        "startColumnNumber" : 53,
        "endLineNumber" : 103,
        "endColumnNumber" : 70
      },
      "nodeContext" : "request.sessionId",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 71
      },
      "nodeContext" : "zks.sessionTracker.removeSession(request.sessionId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 72
      },
      "nodeContext" : "zks.sessionTracker.removeSession(request.sessionId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 102,
        "startColumnNumber" : 64,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 102,
        "startColumnNumber" : 23,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 90,
        "startColumnNumber" : 37,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 72
      },
      "nodeContext" : "zks.sessionTracker.removeSession(request.sessionId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 107,
      "startColumnNumber" : 33,
      "endLineNumber" : 107,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 107,
        "startColumnNumber" : 33,
        "endLineNumber" : 107,
        "endColumnNumber" : 45
      },
      "nodeContext" : "request.type",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 107,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Request.isQuorum(request.type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 109,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Request.isQuorum(request.type)) {\n  zks.addCommittedProposal(request);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 107,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Request.isQuorum(request.type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 108,
      "startColumnNumber" : 41,
      "endLineNumber" : 108,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 49
      },
      "nodeContext" : "zks.addCommittedProposal(request)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 50
      },
      "nodeContext" : "zks.addCommittedProposal(request);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 107,
        "startColumnNumber" : 48,
        "endLineNumber" : 109,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  zks.addCommittedProposal(request);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 109,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Request.isQuorum(request.type)) {\n  zks.addCommittedProposal(request);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 80,
        "startColumnNumber" : 46,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 50
      },
      "nodeContext" : "zks.addCommittedProposal(request);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 112,
      "startColumnNumber" : 12,
      "endLineNumber" : 112,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 23
      },
      "nodeContext" : "request.hdr",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 31
      },
      "nodeContext" : "request.hdr != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 79
      },
      "nodeContext" : "request.hdr != null && request.hdr.getType() == OpCode.closeSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n  Factory scxn=zks.getServerCnxnFactory();\n  if (scxn != null) {\n    scxn.closeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 79
      },
      "nodeContext" : "request.hdr != null && request.hdr.getType() == OpCode.closeSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 112,
      "startColumnNumber" : 35,
      "endLineNumber" : 112,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 112,
        "startColumnNumber" : 35,
        "endLineNumber" : 112,
        "endColumnNumber" : 46
      },
      "nodeContext" : "request.hdr",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 112,
        "startColumnNumber" : 35,
        "endLineNumber" : 112,
        "endColumnNumber" : 56
      },
      "nodeContext" : "request.hdr.getType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 112,
        "startColumnNumber" : 35,
        "endLineNumber" : 112,
        "endColumnNumber" : 79
      },
      "nodeContext" : "request.hdr.getType() == OpCode.closeSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 79
      },
      "nodeContext" : "request.hdr != null && request.hdr.getType() == OpCode.closeSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n  Factory scxn=zks.getServerCnxnFactory();\n  if (scxn != null) {\n    scxn.closeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 79
      },
      "nodeContext" : "request.hdr != null && request.hdr.getType() == OpCode.closeSession",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 117,
      "startColumnNumber" : 34,
      "endLineNumber" : 117,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 117,
        "startColumnNumber" : 34,
        "endLineNumber" : 117,
        "endColumnNumber" : 51
      },
      "nodeContext" : "request.sessionId",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 117,
        "startColumnNumber" : 16,
        "endLineNumber" : 117,
        "endColumnNumber" : 52
      },
      "nodeContext" : "scxn.closeSession(request.sessionId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 117,
        "startColumnNumber" : 16,
        "endLineNumber" : 117,
        "endColumnNumber" : 53
      },
      "nodeContext" : "scxn.closeSession(request.sessionId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 116,
        "startColumnNumber" : 30,
        "endLineNumber" : 118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  scxn.closeSession(request.sessionId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (scxn != null) {\n  scxn.closeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 112,
        "startColumnNumber" : 81,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Factory scxn=zks.getServerCnxnFactory();\n  if (scxn != null) {\n    scxn.closeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n  Factory scxn=zks.getServerCnxnFactory();\n  if (scxn != null) {\n    scxn.closeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 117,
        "startColumnNumber" : 16,
        "endLineNumber" : 117,
        "endColumnNumber" : 53
      },
      "nodeContext" : "scxn.closeSession(request.sessionId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 121,
      "startColumnNumber" : 12,
      "endLineNumber" : 121,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 24
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 32
      },
      "nodeContext" : "request.cnxn == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (request.cnxn == null) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 32
      },
      "nodeContext" : "request.cnxn == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 128,
      "startColumnNumber" : 16,
      "endLineNumber" : 128,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 27
      },
      "nodeContext" : "request.hdr",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 35
      },
      "nodeContext" : "request.hdr != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 76
      },
      "nodeContext" : "request.hdr != null && request.hdr.getType() == OpCode.error",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n  throw new KeeperException(((ErrorTxn)request.txn).getErr());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 76
      },
      "nodeContext" : "request.hdr != null && request.hdr.getType() == OpCode.error",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 128,
      "startColumnNumber" : 39,
      "endLineNumber" : 128,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 128,
        "startColumnNumber" : 39,
        "endLineNumber" : 128,
        "endColumnNumber" : 50
      },
      "nodeContext" : "request.hdr",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 128,
        "startColumnNumber" : 39,
        "endLineNumber" : 128,
        "endColumnNumber" : 60
      },
      "nodeContext" : "request.hdr.getType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 128,
        "startColumnNumber" : 39,
        "endLineNumber" : 128,
        "endColumnNumber" : 76
      },
      "nodeContext" : "request.hdr.getType() == OpCode.error",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 76
      },
      "nodeContext" : "request.hdr != null && request.hdr.getType() == OpCode.error",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n  throw new KeeperException(((ErrorTxn)request.txn).getErr());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 76
      },
      "nodeContext" : "request.hdr != null && request.hdr.getType() == OpCode.error",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 129,
      "startColumnNumber" : 54,
      "endLineNumber" : 129,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 129,
        "startColumnNumber" : 54,
        "endLineNumber" : 129,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.txn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 129,
        "startColumnNumber" : 43,
        "endLineNumber" : 129,
        "endColumnNumber" : 65
      },
      "nodeContext" : "(ErrorTxn)request.txn",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 129,
        "startColumnNumber" : 42,
        "endLineNumber" : 129,
        "endColumnNumber" : 66
      },
      "nodeContext" : "((ErrorTxn)request.txn)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 129,
        "startColumnNumber" : 42,
        "endLineNumber" : 129,
        "endColumnNumber" : 75
      },
      "nodeContext" : "((ErrorTxn)request.txn).getErr()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 129,
        "startColumnNumber" : 22,
        "endLineNumber" : 129,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new KeeperException(((ErrorTxn)request.txn).getErr())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 129,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 77
      },
      "nodeContext" : "throw new KeeperException(((ErrorTxn)request.txn).getErr());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 128,
        "startColumnNumber" : 78,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new KeeperException(((ErrorTxn)request.txn).getErr());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n  throw new KeeperException(((ErrorTxn)request.txn).getErr());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 129,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 77
      },
      "nodeContext" : "throw new KeeperException(((ErrorTxn)request.txn).getErr());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 131,
      "startColumnNumber" : 20,
      "endLineNumber" : 131,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SwitchStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 131,
        "startColumnNumber" : 20,
        "endLineNumber" : 131,
        "endColumnNumber" : 32
      },
      "nodeContext" : "request.type",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SwitchStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 131,
        "startColumnNumber" : 20,
        "endLineNumber" : 131,
        "endColumnNumber" : 32
      },
      "nodeContext" : "request.type",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 133,
      "startColumnNumber" : 16,
      "endLineNumber" : 133,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 133,
        "endColumnNumber" : 28
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 77
      },
      "nodeContext" : "request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 78
      },
      "nodeContext" : "request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 133,
        "endColumnNumber" : 28
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 137,
      "startColumnNumber" : 16,
      "endLineNumber" : 137,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 137,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 28
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 137,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 52
      },
      "nodeContext" : "request.cnxn.finishSessionInit(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 137,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 53
      },
      "nodeContext" : "request.cnxn.finishSessionInit(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 137,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 53
      },
      "nodeContext" : "request.cnxn.finishSessionInit(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 159,
      "startColumnNumber" : 47,
      "endLineNumber" : 159,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 159,
        "startColumnNumber" : 47,
        "endLineNumber" : 159,
        "endColumnNumber" : 62
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 159,
        "startColumnNumber" : 13,
        "endLineNumber" : 160,
        "endColumnNumber" : 27
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,syncRequest)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 159,
        "startColumnNumber" : 13,
        "endLineNumber" : 160,
        "endColumnNumber" : 28
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 159,
        "startColumnNumber" : 47,
        "endLineNumber" : 159,
        "endColumnNumber" : 62
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 166,
      "startColumnNumber" : 50,
      "endLineNumber" : 166,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 166,
        "startColumnNumber" : 50,
        "endLineNumber" : 166,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 166,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,existsRequest)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 166,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 166,
        "startColumnNumber" : 50,
        "endLineNumber" : 166,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 173,
      "startColumnNumber" : 38,
      "endLineNumber" : 173,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 173,
        "startColumnNumber" : 38,
        "endLineNumber" : 173,
        "endColumnNumber" : 50
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 172,
        "startColumnNumber" : 56,
        "endLineNumber" : 173,
        "endColumnNumber" : 57
      },
      "nodeContext" : "existsRequest.getWatch() ? request.cnxn : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 172,
        "startColumnNumber" : 28,
        "endLineNumber" : 173,
        "endColumnNumber" : 58
      },
      "nodeContext" : "zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 172,
        "startColumnNumber" : 21,
        "endLineNumber" : 173,
        "endColumnNumber" : 58
      },
      "nodeContext" : "stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 172,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Stat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 173,
        "startColumnNumber" : 38,
        "endLineNumber" : 173,
        "endColumnNumber" : 50
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 178,
      "startColumnNumber" : 50,
      "endLineNumber" : 178,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 178,
        "startColumnNumber" : 50,
        "endLineNumber" : 178,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 179,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,getDataRequest)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 179,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 178,
        "startColumnNumber" : 50,
        "endLineNumber" : 178,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 185,
      "startColumnNumber" : 24,
      "endLineNumber" : 185,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 185,
        "startColumnNumber" : 24,
        "endLineNumber" : 185,
        "endColumnNumber" : 40
      },
      "nodeContext" : "request.authInfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 184,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 41
      },
      "nodeContext" : "PrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 184,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 42
      },
      "nodeContext" : "PrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 185,
        "startColumnNumber" : 24,
        "endLineNumber" : 185,
        "endColumnNumber" : 40
      },
      "nodeContext" : "request.authInfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 188,
      "startColumnNumber" : 52,
      "endLineNumber" : 188,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 188,
        "startColumnNumber" : 52,
        "endLineNumber" : 188,
        "endColumnNumber" : 64
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 188,
        "startColumnNumber" : 24,
        "endLineNumber" : 188,
        "endColumnNumber" : 71
      },
      "nodeContext" : "getDataRequest.getWatch() ? request.cnxn : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 187,
        "startColumnNumber" : 27,
        "endLineNumber" : 188,
        "endColumnNumber" : 72
      },
      "nodeContext" : "zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 187,
        "startColumnNumber" : 21,
        "endLineNumber" : 188,
        "endColumnNumber" : 72
      },
      "nodeContext" : "b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 73
      },
      "nodeContext" : "byte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 188,
        "startColumnNumber" : 24,
        "endLineNumber" : 188,
        "endColumnNumber" : 71
      },
      "nodeContext" : "getDataRequest.getWatch() ? request.cnxn : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 193,
      "startColumnNumber" : 50,
      "endLineNumber" : 193,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 193,
        "startColumnNumber" : 50,
        "endLineNumber" : 193,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 193,
        "startColumnNumber" : 16,
        "endLineNumber" : 194,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,getACLRequest)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 193,
        "startColumnNumber" : 16,
        "endLineNumber" : 194,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 193,
        "startColumnNumber" : 50,
        "endLineNumber" : 193,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 202,
      "startColumnNumber" : 50,
      "endLineNumber" : 202,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 202,
        "startColumnNumber" : 50,
        "endLineNumber" : 202,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 202,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 202,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 202,
        "startColumnNumber" : 50,
        "endLineNumber" : 202,
        "endColumnNumber" : 65
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 210,
      "startColumnNumber" : 24,
      "endLineNumber" : 210,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 210,
        "startColumnNumber" : 24,
        "endLineNumber" : 210,
        "endColumnNumber" : 40
      },
      "nodeContext" : "request.authInfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 209,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 41
      },
      "nodeContext" : "PrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 209,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 42
      },
      "nodeContext" : "PrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 210,
        "startColumnNumber" : 24,
        "endLineNumber" : 210,
        "endColumnNumber" : 40
      },
      "nodeContext" : "request.authInfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 213,
      "startColumnNumber" : 46,
      "endLineNumber" : 213,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 213,
        "startColumnNumber" : 46,
        "endLineNumber" : 213,
        "endColumnNumber" : 58
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 212,
        "startColumnNumber" : 60,
        "endLineNumber" : 213,
        "endColumnNumber" : 65
      },
      "nodeContext" : "getChildrenRequest.getWatch() ? request.cnxn : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 211,
        "startColumnNumber" : 45,
        "endLineNumber" : 213,
        "endColumnNumber" : 66
      },
      "nodeContext" : "zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 211,
        "startColumnNumber" : 34,
        "endLineNumber" : 213,
        "endColumnNumber" : 66
      },
      "nodeContext" : "children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 211,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 67
      },
      "nodeContext" : "ArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3954,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.ping:  request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\nreturn;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 471,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 213,
        "startColumnNumber" : 46,
        "endLineNumber" : 213,
        "endColumnNumber" : 58
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 220,
      "startColumnNumber" : 63,
      "endLineNumber" : 220,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 220,
        "startColumnNumber" : 27,
        "endLineNumber" : 220,
        "endColumnNumber" : 70
      },
      "nodeContext" : "\"****************************** \" + request",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ZooLog.logWarn(\"****************************** \" + request)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 72
      },
      "nodeContext" : "ZooLog.logWarn(\"****************************** \" + request);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 219,
        "startColumnNumber" : 30,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ZooLog.logWarn(\"****************************** \" + request);\n  StringBuffer sb=new StringBuffer();\n  ByteBuffer bb=request.request;\n  bb.rewind();\n  while (bb.hasRemaining()) {\n    sb.append(Integer.toHexString(bb.get() & 0xff));\n  }\n  ZooLog.logWarn(sb.toString());\n  ZooLog.logException(e);\n  err=Code.MarshallingError;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 219,
        "startColumnNumber" : 10,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  ZooLog.logWarn(\"****************************** \" + request);\n  StringBuffer sb=new StringBuffer();\n  ByteBuffer bb=request.request;\n  bb.rewind();\n  while (bb.hasRemaining()) {\n    sb.append(Integer.toHexString(bb.get() & 0xff));\n  }\n  ZooLog.logWarn(sb.toString());\n  ZooLog.logException(e);\n  err=Code.MarshallingError;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 68,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 72
      },
      "nodeContext" : "ZooLog.logWarn(\"****************************** \" + request);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 222,
      "startColumnNumber" : 28,
      "endLineNumber" : 222,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 222,
        "startColumnNumber" : 28,
        "endLineNumber" : 222,
        "endColumnNumber" : 43
      },
      "nodeContext" : "request.request",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 222,
        "startColumnNumber" : 23,
        "endLineNumber" : 222,
        "endColumnNumber" : 43
      },
      "nodeContext" : "bb=request.request",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ByteBuffer bb=request.request;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 219,
        "startColumnNumber" : 30,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ZooLog.logWarn(\"****************************** \" + request);\n  StringBuffer sb=new StringBuffer();\n  ByteBuffer bb=request.request;\n  bb.rewind();\n  while (bb.hasRemaining()) {\n    sb.append(Integer.toHexString(bb.get() & 0xff));\n  }\n  ZooLog.logWarn(sb.toString());\n  ZooLog.logException(e);\n  err=Code.MarshallingError;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 219,
        "startColumnNumber" : 10,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  ZooLog.logWarn(\"****************************** \" + request);\n  StringBuffer sb=new StringBuffer();\n  ByteBuffer bb=request.request;\n  bb.rewind();\n  while (bb.hasRemaining()) {\n    sb.append(Integer.toHexString(bb.get() & 0xff));\n  }\n  ZooLog.logWarn(sb.toString());\n  ZooLog.logException(e);\n  err=Code.MarshallingError;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 68,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ByteBuffer bb=request.request;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 231,
      "startColumnNumber" : 42,
      "endLineNumber" : 231,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 231,
        "startColumnNumber" : 42,
        "endLineNumber" : 231,
        "endColumnNumber" : 54
      },
      "nodeContext" : "request.cxid",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 231,
        "startColumnNumber" : 26,
        "endLineNumber" : 231,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new ReplyHeader(request.cxid,request.zxid,err)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 231,
        "startColumnNumber" : 20,
        "endLineNumber" : 231,
        "endColumnNumber" : 74
      },
      "nodeContext" : "hdr=new ReplyHeader(request.cxid,request.zxid,err)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 75
      },
      "nodeContext" : "ReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 75
      },
      "nodeContext" : "ReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 231,
      "startColumnNumber" : 56,
      "endLineNumber" : 231,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 231,
        "startColumnNumber" : 56,
        "endLineNumber" : 231,
        "endColumnNumber" : 68
      },
      "nodeContext" : "request.zxid",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 231,
        "startColumnNumber" : 26,
        "endLineNumber" : 231,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new ReplyHeader(request.cxid,request.zxid,err)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 231,
        "startColumnNumber" : 20,
        "endLineNumber" : 231,
        "endColumnNumber" : 74
      },
      "nodeContext" : "hdr=new ReplyHeader(request.cxid,request.zxid,err)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 75
      },
      "nodeContext" : "ReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 75
      },
      "nodeContext" : "ReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 232,
      "startColumnNumber" : 52,
      "endLineNumber" : 232,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 232,
        "startColumnNumber" : 52,
        "endLineNumber" : 232,
        "endColumnNumber" : 70
      },
      "nodeContext" : "request.createTime",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 232,
        "startColumnNumber" : 23,
        "endLineNumber" : 232,
        "endColumnNumber" : 70
      },
      "nodeContext" : "System.currentTimeMillis() - request.createTime",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 232,
        "startColumnNumber" : 13,
        "endLineNumber" : 232,
        "endColumnNumber" : 70
      },
      "nodeContext" : "latency=System.currentTimeMillis() - request.createTime",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 232,
        "endColumnNumber" : 71
      },
      "nodeContext" : "long latency=System.currentTimeMillis() - request.createTime;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 232,
        "endColumnNumber" : 71
      },
      "nodeContext" : "long latency=System.currentTimeMillis() - request.createTime;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 235,
      "startColumnNumber" : 8,
      "endLineNumber" : 235,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 235,
        "startColumnNumber" : 8,
        "endLineNumber" : 235,
        "endColumnNumber" : 20
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 235,
        "startColumnNumber" : 8,
        "endLineNumber" : 235,
        "endColumnNumber" : 53
      },
      "nodeContext" : "request.cnxn.setStats(latency,(avg / count))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 235,
        "startColumnNumber" : 8,
        "endLineNumber" : 235,
        "endColumnNumber" : 54
      },
      "nodeContext" : "request.cnxn.setStats(latency,(avg / count));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 235,
        "startColumnNumber" : 8,
        "endLineNumber" : 235,
        "endColumnNumber" : 54
      },
      "nodeContext" : "request.cnxn.setStats(latency,(avg / count));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 237,
      "startColumnNumber" : 12,
      "endLineNumber" : 237,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 24
      },
      "nodeContext" : "request.cnxn",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 59
      },
      "nodeContext" : "request.cnxn.sendResponse(hdr,rsp,\"response\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 60
      },
      "nodeContext" : "request.cnxn.sendResponse(hdr,rsp,\"response\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 236,
        "startColumnNumber" : 12,
        "endLineNumber" : 238,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  request.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 236,
        "startColumnNumber" : 8,
        "endLineNumber" : 240,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  request.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\n  ZooLog.logException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 60
      },
      "nodeContext" : "request.cnxn.sendResponse(hdr,rsp,\"response\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.server.Request"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 75,
    "startColumnNumber" : 12,
    "endLineNumber" : 75,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 78,
    "startColumnNumber" : 31,
    "endLineNumber" : 78,
    "endColumnNumber" : 38
  }, {
    "charLength" : 7,
    "startLineNumber" : 82,
    "startColumnNumber" : 61,
    "endLineNumber" : 82,
    "endColumnNumber" : 68
  }, {
    "charLength" : 7,
    "startLineNumber" : 83,
    "startColumnNumber" : 57,
    "endLineNumber" : 83,
    "endColumnNumber" : 64
  }, {
    "charLength" : 7,
    "startLineNumber" : 86,
    "startColumnNumber" : 57,
    "endLineNumber" : 86,
    "endColumnNumber" : 64
  }, {
    "charLength" : 7,
    "startLineNumber" : 90,
    "startColumnNumber" : 16,
    "endLineNumber" : 90,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 91,
    "startColumnNumber" : 45,
    "endLineNumber" : 91,
    "endColumnNumber" : 52
  }, {
    "charLength" : 7,
    "startLineNumber" : 91,
    "startColumnNumber" : 58,
    "endLineNumber" : 91,
    "endColumnNumber" : 65
  }, {
    "charLength" : 7,
    "startLineNumber" : 92,
    "startColumnNumber" : 20,
    "endLineNumber" : 92,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 93,
    "startColumnNumber" : 24,
    "endLineNumber" : 93,
    "endColumnNumber" : 31
  }, {
    "charLength" : 7,
    "startLineNumber" : 94,
    "startColumnNumber" : 66,
    "endLineNumber" : 94,
    "endColumnNumber" : 73
  }, {
    "charLength" : 7,
    "startLineNumber" : 95,
    "startColumnNumber" : 54,
    "endLineNumber" : 95,
    "endColumnNumber" : 61
  }, {
    "charLength" : 7,
    "startLineNumber" : 99,
    "startColumnNumber" : 34,
    "endLineNumber" : 99,
    "endColumnNumber" : 41
  }, {
    "charLength" : 7,
    "startLineNumber" : 100,
    "startColumnNumber" : 34,
    "endLineNumber" : 100,
    "endColumnNumber" : 41
  }, {
    "charLength" : 7,
    "startLineNumber" : 102,
    "startColumnNumber" : 27,
    "endLineNumber" : 102,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 103,
    "startColumnNumber" : 53,
    "endLineNumber" : 103,
    "endColumnNumber" : 60
  }, {
    "charLength" : 7,
    "startLineNumber" : 107,
    "startColumnNumber" : 33,
    "endLineNumber" : 107,
    "endColumnNumber" : 40
  }, {
    "charLength" : 7,
    "startLineNumber" : 108,
    "startColumnNumber" : 41,
    "endLineNumber" : 108,
    "endColumnNumber" : 48
  }, {
    "charLength" : 7,
    "startLineNumber" : 112,
    "startColumnNumber" : 12,
    "endLineNumber" : 112,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 112,
    "startColumnNumber" : 35,
    "endLineNumber" : 112,
    "endColumnNumber" : 42
  }, {
    "charLength" : 7,
    "startLineNumber" : 117,
    "startColumnNumber" : 34,
    "endLineNumber" : 117,
    "endColumnNumber" : 41
  }, {
    "charLength" : 7,
    "startLineNumber" : 121,
    "startColumnNumber" : 12,
    "endLineNumber" : 121,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 128,
    "startColumnNumber" : 16,
    "endLineNumber" : 128,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 128,
    "startColumnNumber" : 39,
    "endLineNumber" : 128,
    "endColumnNumber" : 46
  }, {
    "charLength" : 7,
    "startLineNumber" : 129,
    "startColumnNumber" : 54,
    "endLineNumber" : 129,
    "endColumnNumber" : 61
  }, {
    "charLength" : 7,
    "startLineNumber" : 131,
    "startColumnNumber" : 20,
    "endLineNumber" : 131,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 133,
    "startColumnNumber" : 16,
    "endLineNumber" : 133,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 137,
    "startColumnNumber" : 16,
    "endLineNumber" : 137,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 159,
    "startColumnNumber" : 47,
    "endLineNumber" : 159,
    "endColumnNumber" : 54
  }, {
    "charLength" : 7,
    "startLineNumber" : 166,
    "startColumnNumber" : 50,
    "endLineNumber" : 166,
    "endColumnNumber" : 57
  }, {
    "charLength" : 7,
    "startLineNumber" : 173,
    "startColumnNumber" : 38,
    "endLineNumber" : 173,
    "endColumnNumber" : 45
  }, {
    "charLength" : 7,
    "startLineNumber" : 178,
    "startColumnNumber" : 50,
    "endLineNumber" : 178,
    "endColumnNumber" : 57
  }, {
    "charLength" : 7,
    "startLineNumber" : 185,
    "startColumnNumber" : 24,
    "endLineNumber" : 185,
    "endColumnNumber" : 31
  }, {
    "charLength" : 7,
    "startLineNumber" : 188,
    "startColumnNumber" : 52,
    "endLineNumber" : 188,
    "endColumnNumber" : 59
  }, {
    "charLength" : 7,
    "startLineNumber" : 193,
    "startColumnNumber" : 50,
    "endLineNumber" : 193,
    "endColumnNumber" : 57
  }, {
    "charLength" : 7,
    "startLineNumber" : 202,
    "startColumnNumber" : 50,
    "endLineNumber" : 202,
    "endColumnNumber" : 57
  }, {
    "charLength" : 7,
    "startLineNumber" : 210,
    "startColumnNumber" : 24,
    "endLineNumber" : 210,
    "endColumnNumber" : 31
  }, {
    "charLength" : 7,
    "startLineNumber" : 213,
    "startColumnNumber" : 46,
    "endLineNumber" : 213,
    "endColumnNumber" : 53
  }, {
    "charLength" : 7,
    "startLineNumber" : 220,
    "startColumnNumber" : 63,
    "endLineNumber" : 220,
    "endColumnNumber" : 70
  }, {
    "charLength" : 7,
    "startLineNumber" : 222,
    "startColumnNumber" : 28,
    "endLineNumber" : 222,
    "endColumnNumber" : 35
  }, {
    "charLength" : 7,
    "startLineNumber" : 231,
    "startColumnNumber" : 42,
    "endLineNumber" : 231,
    "endColumnNumber" : 49
  }, {
    "charLength" : 7,
    "startLineNumber" : 231,
    "startColumnNumber" : 56,
    "endLineNumber" : 231,
    "endColumnNumber" : 63
  }, {
    "charLength" : 7,
    "startLineNumber" : 232,
    "startColumnNumber" : 52,
    "endLineNumber" : 232,
    "endColumnNumber" : 59
  }, {
    "charLength" : 7,
    "startLineNumber" : 235,
    "startColumnNumber" : 8,
    "endLineNumber" : 235,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 237,
    "startColumnNumber" : 12,
    "endLineNumber" : 237,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 31,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 32,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 33,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 34,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 35,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 36,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 37,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 38,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 39,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 40,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 41,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 42,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 43,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 44,
    "layout" : 10
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 31,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 32,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 33,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 34,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 35,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 36,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 37,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 38,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 39,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 40,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 41,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 42,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 43,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 44,
    "layout" : 12
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 31,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 32,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 33,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 34,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 35,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 36,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 37,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 38,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 39,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 42,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 43,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 44,
    "layout" : 11
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 31,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 32,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 33,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 34,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 35,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 36,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 37,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 38,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 39,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 40,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 41,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 42,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 43,
    "layout" : 13
  }, {
    "firstKey" : 12,
    "secondKey" : 44,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 31,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 32,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 33,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 34,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 35,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 36,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 37,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 38,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 39,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 40,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 41,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 42,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 43,
    "layout" : 13
  }, {
    "firstKey" : 13,
    "secondKey" : 44,
    "layout" : 13
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 31,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 32,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 33,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 34,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 35,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 36,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 37,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 38,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 39,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 40,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 41,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 42,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 43,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 44,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 40,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 41,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 42,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 43,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 44,
    "layout" : 10
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 31,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 32,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 33,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 34,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 35,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 36,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 37,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 30,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 30,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 31,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 32,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 32,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 32,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 33,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 33,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 34,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 34,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 34,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 34,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 36,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 36,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 36,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 40,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 41,
    "layout" : 1
  }, {
    "firstKey" : 40,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 40,
    "layout" : 1
  }, {
    "firstKey" : 41,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 44,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 43,
    "layout" : 5
  } ]
}