{
  "id" : 455,
  "expression" : "fragment",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 980,
      "startColumnNumber" : 58,
      "endLineNumber" : 980,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 980,
        "startColumnNumber" : 58,
        "endLineNumber" : 980,
        "endColumnNumber" : 73
      },
      "nodeContext" : "fragment.header",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 980,
        "startColumnNumber" : 46,
        "endLineNumber" : 980,
        "endColumnNumber" : 74
      },
      "nodeContext" : "castNonNull(fragment.header)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 980,
        "startColumnNumber" : 24,
        "endLineNumber" : 980,
        "endColumnNumber" : 74
      },
      "nodeContext" : "defaultSampleValues=castNonNull(fragment.header)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 980,
        "startColumnNumber" : 4,
        "endLineNumber" : 980,
        "endColumnNumber" : 75
      },
      "nodeContext" : "DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 980,
        "startColumnNumber" : 4,
        "endLineNumber" : 980,
        "endColumnNumber" : 75
      },
      "nodeContext" : "DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 982,
      "startColumnNumber" : 4,
      "endLineNumber" : 982,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 982,
        "startColumnNumber" : 4,
        "endLineNumber" : 982,
        "endColumnNumber" : 23
      },
      "nodeContext" : "fragment.trunLength",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 982,
        "startColumnNumber" : 4,
        "endLineNumber" : 982,
        "endColumnNumber" : 30
      },
      "nodeContext" : "fragment.trunLength[index]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 982,
        "startColumnNumber" : 4,
        "endLineNumber" : 982,
        "endColumnNumber" : 60
      },
      "nodeContext" : "fragment.trunLength[index]=trun.readUnsignedIntToInt()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 982,
        "startColumnNumber" : 4,
        "endLineNumber" : 982,
        "endColumnNumber" : 61
      },
      "nodeContext" : "fragment.trunLength[index]=trun.readUnsignedIntToInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 982,
        "startColumnNumber" : 4,
        "endLineNumber" : 982,
        "endColumnNumber" : 61
      },
      "nodeContext" : "fragment.trunLength[index]=trun.readUnsignedIntToInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 983,
      "startColumnNumber" : 4,
      "endLineNumber" : 983,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 983,
        "startColumnNumber" : 4,
        "endLineNumber" : 983,
        "endColumnNumber" : 29
      },
      "nodeContext" : "fragment.trunDataPosition",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 983,
        "startColumnNumber" : 4,
        "endLineNumber" : 983,
        "endColumnNumber" : 36
      },
      "nodeContext" : "fragment.trunDataPosition[index]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 983,
        "startColumnNumber" : 4,
        "endLineNumber" : 983,
        "endColumnNumber" : 60
      },
      "nodeContext" : "fragment.trunDataPosition[index]=fragment.dataPosition",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 983,
        "startColumnNumber" : 4,
        "endLineNumber" : 983,
        "endColumnNumber" : 61
      },
      "nodeContext" : "fragment.trunDataPosition[index]=fragment.dataPosition;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 983,
        "startColumnNumber" : 4,
        "endLineNumber" : 983,
        "endColumnNumber" : 61
      },
      "nodeContext" : "fragment.trunDataPosition[index]=fragment.dataPosition;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 983,
      "startColumnNumber" : 39,
      "endLineNumber" : 983,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 983,
        "startColumnNumber" : 39,
        "endLineNumber" : 983,
        "endColumnNumber" : 60
      },
      "nodeContext" : "fragment.dataPosition",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 983,
        "startColumnNumber" : 4,
        "endLineNumber" : 983,
        "endColumnNumber" : 60
      },
      "nodeContext" : "fragment.trunDataPosition[index]=fragment.dataPosition",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 983,
        "startColumnNumber" : 4,
        "endLineNumber" : 983,
        "endColumnNumber" : 61
      },
      "nodeContext" : "fragment.trunDataPosition[index]=fragment.dataPosition;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 983,
        "startColumnNumber" : 4,
        "endLineNumber" : 983,
        "endColumnNumber" : 61
      },
      "nodeContext" : "fragment.trunDataPosition[index]=fragment.dataPosition;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 985,
      "startColumnNumber" : 6,
      "endLineNumber" : 985,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 985,
        "startColumnNumber" : 6,
        "endLineNumber" : 985,
        "endColumnNumber" : 31
      },
      "nodeContext" : "fragment.trunDataPosition",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 985,
        "startColumnNumber" : 6,
        "endLineNumber" : 985,
        "endColumnNumber" : 38
      },
      "nodeContext" : "fragment.trunDataPosition[index]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 985,
        "startColumnNumber" : 6,
        "endLineNumber" : 985,
        "endColumnNumber" : 56
      },
      "nodeContext" : "fragment.trunDataPosition[index]+=trun.readInt()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 985,
        "startColumnNumber" : 6,
        "endLineNumber" : 985,
        "endColumnNumber" : 57
      },
      "nodeContext" : "fragment.trunDataPosition[index]+=trun.readInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 984,
        "startColumnNumber" : 59,
        "endLineNumber" : 986,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  fragment.trunDataPosition[index]+=trun.readInt();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 984,
        "startColumnNumber" : 4,
        "endLineNumber" : 986,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((atomFlags & 0x01) != 0) {\n  fragment.trunDataPosition[index]+=trun.readInt();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 985,
        "startColumnNumber" : 6,
        "endLineNumber" : 985,
        "endColumnNumber" : 57
      },
      "nodeContext" : "fragment.trunDataPosition[index]+=trun.readInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 1012,
      "startColumnNumber" : 28,
      "endLineNumber" : 1012,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1012,
        "startColumnNumber" : 28,
        "endLineNumber" : 1012,
        "endColumnNumber" : 52
      },
      "nodeContext" : "fragment.sampleSizeTable",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 1012,
        "startColumnNumber" : 10,
        "endLineNumber" : 1012,
        "endColumnNumber" : 52
      },
      "nodeContext" : "sampleSizeTable=fragment.sampleSizeTable",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1012,
        "startColumnNumber" : 4,
        "endLineNumber" : 1012,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int[] sampleSizeTable=fragment.sampleSizeTable;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1012,
        "startColumnNumber" : 4,
        "endLineNumber" : 1012,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int[] sampleSizeTable=fragment.sampleSizeTable;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 1013,
      "startColumnNumber" : 39,
      "endLineNumber" : 1013,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 1013,
        "startColumnNumber" : 39,
        "endLineNumber" : 1013,
        "endColumnNumber" : 73
      },
      "nodeContext" : "fragment.samplePresentationTimesUs",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1013,
        "startColumnNumber" : 11,
        "endLineNumber" : 1013,
        "endColumnNumber" : 73
      },
      "nodeContext" : "samplePresentationTimesUs=fragment.samplePresentationTimesUs",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 1013,
        "startColumnNumber" : 4,
        "endLineNumber" : 1013,
        "endColumnNumber" : 74
      },
      "nodeContext" : "long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 1013,
        "startColumnNumber" : 4,
        "endLineNumber" : 1013,
        "endColumnNumber" : 74
      },
      "nodeContext" : "long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 1014,
      "startColumnNumber" : 39,
      "endLineNumber" : 1014,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1014,
        "startColumnNumber" : 39,
        "endLineNumber" : 1014,
        "endColumnNumber" : 70
      },
      "nodeContext" : "fragment.sampleIsSyncFrameTable",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 1014,
        "startColumnNumber" : 14,
        "endLineNumber" : 1014,
        "endColumnNumber" : 70
      },
      "nodeContext" : "sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1014,
        "startColumnNumber" : 4,
        "endLineNumber" : 1014,
        "endColumnNumber" : 71
      },
      "nodeContext" : "boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1014,
        "startColumnNumber" : 4,
        "endLineNumber" : 1014,
        "endColumnNumber" : 71
      },
      "nodeContext" : "boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 1020,
      "startColumnNumber" : 38,
      "endLineNumber" : 1020,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 1020,
        "startColumnNumber" : 38,
        "endLineNumber" : 1020,
        "endColumnNumber" : 57
      },
      "nodeContext" : "fragment.trunLength",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 1020,
        "startColumnNumber" : 38,
        "endLineNumber" : 1020,
        "endColumnNumber" : 64
      },
      "nodeContext" : "fragment.trunLength[index]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 1020,
        "startColumnNumber" : 22,
        "endLineNumber" : 1020,
        "endColumnNumber" : 64
      },
      "nodeContext" : "trackRunStart + fragment.trunLength[index]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 1020,
        "startColumnNumber" : 8,
        "endLineNumber" : 1020,
        "endColumnNumber" : 64
      },
      "nodeContext" : "trackRunEnd=trackRunStart + fragment.trunLength[index]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1020,
        "startColumnNumber" : 4,
        "endLineNumber" : 1020,
        "endColumnNumber" : 65
      },
      "nodeContext" : "int trackRunEnd=trackRunStart + fragment.trunLength[index];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1020,
        "startColumnNumber" : 4,
        "endLineNumber" : 1020,
        "endColumnNumber" : 65
      },
      "nodeContext" : "int trackRunEnd=trackRunStart + fragment.trunLength[index];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 1022,
      "startColumnNumber" : 26,
      "endLineNumber" : 1022,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1022,
        "startColumnNumber" : 26,
        "endLineNumber" : 1022,
        "endColumnNumber" : 57
      },
      "nodeContext" : "fragment.nextFragmentDecodeTime",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 1022,
        "startColumnNumber" : 9,
        "endLineNumber" : 1022,
        "endColumnNumber" : 57
      },
      "nodeContext" : "cumulativeTime=fragment.nextFragmentDecodeTime",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 1022,
        "startColumnNumber" : 4,
        "endLineNumber" : 1022,
        "endColumnNumber" : 58
      },
      "nodeContext" : "long cumulativeTime=fragment.nextFragmentDecodeTime;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 1022,
        "startColumnNumber" : 4,
        "endLineNumber" : 1022,
        "endColumnNumber" : 58
      },
      "nodeContext" : "long cumulativeTime=fragment.nextFragmentDecodeTime;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 1045,
      "startColumnNumber" : 11,
      "endLineNumber" : 1045,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 1045,
        "startColumnNumber" : 11,
        "endLineNumber" : 1045,
        "endColumnNumber" : 54
      },
      "nodeContext" : "fragment.nextFragmentDecodeTimeIncludesMoov",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1045,
        "startColumnNumber" : 10,
        "endLineNumber" : 1045,
        "endColumnNumber" : 54
      },
      "nodeContext" : "!fragment.nextFragmentDecodeTimeIncludesMoov",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 1045,
        "startColumnNumber" : 6,
        "endLineNumber" : 1047,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n  samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1718,
        "startLineNumber" : 1023,
        "startColumnNumber" : 54,
        "endLineNumber" : 1052,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n  int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n  int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n  int sampleCompositionTimeOffset=0;\n  if (sampleCompositionTimeOffsetsPresent) {\n    sampleCompositionTimeOffset=trun.readInt();\n  }\n  long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n  samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n  if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n    samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n  }\n  sampleSizeTable[i]=sampleSize;\n  sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n  cumulativeTime+=sampleDuration;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1768,
        "startLineNumber" : 1023,
        "startColumnNumber" : 4,
        "endLineNumber" : 1052,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=trackRunStart; i < trackRunEnd; i++) {\n  int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n  int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n  int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n  int sampleCompositionTimeOffset=0;\n  if (sampleCompositionTimeOffsetsPresent) {\n    sampleCompositionTimeOffset=trun.readInt();\n  }\n  long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n  samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n  if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n    samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n  }\n  sampleSizeTable[i]=sampleSize;\n  sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n  cumulativeTime+=sampleDuration;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1045,
        "startColumnNumber" : 10,
        "endLineNumber" : 1045,
        "endColumnNumber" : 54
      },
      "nodeContext" : "!fragment.nextFragmentDecodeTimeIncludesMoov",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  }, {
    "nodeContext" : "fragment",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 1053,
      "startColumnNumber" : 4,
      "endLineNumber" : 1053,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1053,
        "startColumnNumber" : 4,
        "endLineNumber" : 1053,
        "endColumnNumber" : 35
      },
      "nodeContext" : "fragment.nextFragmentDecodeTime",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 1053,
        "startColumnNumber" : 4,
        "endLineNumber" : 1053,
        "endColumnNumber" : 52
      },
      "nodeContext" : "fragment.nextFragmentDecodeTime=cumulativeTime",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1053,
        "startColumnNumber" : 4,
        "endLineNumber" : 1053,
        "endColumnNumber" : 53
      },
      "nodeContext" : "fragment.nextFragmentDecodeTime=cumulativeTime;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1053,
        "startColumnNumber" : 4,
        "endLineNumber" : 1053,
        "endColumnNumber" : 53
      },
      "nodeContext" : "fragment.nextFragmentDecodeTime=cumulativeTime;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.TrackFragment"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 980,
    "startColumnNumber" : 58,
    "endLineNumber" : 980,
    "endColumnNumber" : 66
  }, {
    "charLength" : 8,
    "startLineNumber" : 982,
    "startColumnNumber" : 4,
    "endLineNumber" : 982,
    "endColumnNumber" : 12
  }, {
    "charLength" : 8,
    "startLineNumber" : 983,
    "startColumnNumber" : 4,
    "endLineNumber" : 983,
    "endColumnNumber" : 12
  }, {
    "charLength" : 8,
    "startLineNumber" : 983,
    "startColumnNumber" : 39,
    "endLineNumber" : 983,
    "endColumnNumber" : 47
  }, {
    "charLength" : 8,
    "startLineNumber" : 985,
    "startColumnNumber" : 6,
    "endLineNumber" : 985,
    "endColumnNumber" : 14
  }, {
    "charLength" : 8,
    "startLineNumber" : 1012,
    "startColumnNumber" : 28,
    "endLineNumber" : 1012,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 1013,
    "startColumnNumber" : 39,
    "endLineNumber" : 1013,
    "endColumnNumber" : 47
  }, {
    "charLength" : 8,
    "startLineNumber" : 1014,
    "startColumnNumber" : 39,
    "endLineNumber" : 1014,
    "endColumnNumber" : 47
  }, {
    "charLength" : 8,
    "startLineNumber" : 1020,
    "startColumnNumber" : 38,
    "endLineNumber" : 1020,
    "endColumnNumber" : 46
  }, {
    "charLength" : 8,
    "startLineNumber" : 1022,
    "startColumnNumber" : 26,
    "endLineNumber" : 1022,
    "endColumnNumber" : 34
  }, {
    "charLength" : 8,
    "startLineNumber" : 1045,
    "startColumnNumber" : 11,
    "endLineNumber" : 1045,
    "endColumnNumber" : 19
  }, {
    "charLength" : 8,
    "startLineNumber" : 1053,
    "startColumnNumber" : 4,
    "endLineNumber" : 1053,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  } ]
}