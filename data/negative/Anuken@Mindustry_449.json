{
  "id" : 449,
  "expression" : "row++ % cols",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/ui/fragments/BlockInventoryFragment.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "row++ % cols",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 181,
      "startColumnNumber" : 19,
      "endLineNumber" : 181,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 181,
        "startColumnNumber" : 19,
        "endLineNumber" : 181,
        "endColumnNumber" : 43
      },
      "nodeContext" : "row++ % cols == cols - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 181,
        "endColumnNumber" : 57
      },
      "nodeContext" : "if (row++ % cols == cols - 1) table.row();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1898,
        "startLineNumber" : 139,
        "startColumnNumber" : 57,
        "endLineNumber" : 182,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Item item=content.item(i);\n  if (!tile.items.has(item))   continue;\n  container.add(i);\n  Boolp canPick=() -> player.unit().acceptsItem(item) && !state.isPaused() && player.within(tile,itemTransferRange);\n  HandCursorListener l=new HandCursorListener();\n  l.enabled=canPick;\n  Element image=itemImage(item.icon(Cicon.xlarge),() -> {\n    if (tile == null || !tile.isValid()) {\n      return \"\";\n    }\n    return round(tile.items.get(item));\n  }\n);\n  image.addListener(l);\n  image.addListener(new InputListener(){\n    @Override public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    KeyCode button){\n      if (!canPick.get() || tile == null || !tile.isValid() || tile.items == null || !tile.items.has(item))       return false;\n      int amount=Math.min(1,player.unit().maxAccepted(item));\n      if (amount > 0) {\n        Call.requestItem(player,tile,item,amount);\n        lastItem=item;\n        holding=true;\n        holdTime=0f;\n        if (net.client())         Events.fire(new WithdrawEvent(tile,player,item,amount));\n      }\n      return true;\n    }\n    @Override public void touchUp(    InputEvent event,    float x,    float y,    int pointer,    KeyCode button){\n      holding=false;\n      lastItem=null;\n    }\n  }\n);\n  table.add(image);\n  if (row++ % cols == cols - 1)   table.row();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1943,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 182,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < content.items().size; i++) {\n  Item item=content.item(i);\n  if (!tile.items.has(item))   continue;\n  container.add(i);\n  Boolp canPick=() -> player.unit().acceptsItem(item) && !state.isPaused() && player.within(tile,itemTransferRange);\n  HandCursorListener l=new HandCursorListener();\n  l.enabled=canPick;\n  Element image=itemImage(item.icon(Cicon.xlarge),() -> {\n    if (tile == null || !tile.isValid()) {\n      return \"\";\n    }\n    return round(tile.items.get(item));\n  }\n);\n  image.addListener(l);\n  image.addListener(new InputListener(){\n    @Override public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    KeyCode button){\n      if (!canPick.get() || tile == null || !tile.isValid() || tile.items == null || !tile.items.has(item))       return false;\n      int amount=Math.min(1,player.unit().maxAccepted(item));\n      if (amount > 0) {\n        Call.requestItem(player,tile,item,amount);\n        lastItem=item;\n        holding=true;\n        holdTime=0f;\n        if (net.client())         Events.fire(new WithdrawEvent(tile,player,item,amount));\n      }\n      return true;\n    }\n    @Override public void touchUp(    InputEvent event,    float x,    float y,    int pointer,    KeyCode button){\n      holding=false;\n      lastItem=null;\n    }\n  }\n);\n  table.add(image);\n  if (row++ % cols == cols - 1)   table.row();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 284,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1968,
        "startLineNumber" : 137,
        "startColumnNumber" : 31,
        "endLineNumber" : 183,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=0; i < content.items().size; i++) {\n    Item item=content.item(i);\n    if (!tile.items.has(item))     continue;\n    container.add(i);\n    Boolp canPick=() -> player.unit().acceptsItem(item) && !state.isPaused() && player.within(tile,itemTransferRange);\n    HandCursorListener l=new HandCursorListener();\n    l.enabled=canPick;\n    Element image=itemImage(item.icon(Cicon.xlarge),() -> {\n      if (tile == null || !tile.isValid()) {\n        return \"\";\n      }\n      return round(tile.items.get(item));\n    }\n);\n    image.addListener(l);\n    image.addListener(new InputListener(){\n      @Override public boolean touchDown(      InputEvent event,      float x,      float y,      int pointer,      KeyCode button){\n        if (!canPick.get() || tile == null || !tile.isValid() || tile.items == null || !tile.items.has(item))         return false;\n        int amount=Math.min(1,player.unit().maxAccepted(item));\n        if (amount > 0) {\n          Call.requestItem(player,tile,item,amount);\n          lastItem=item;\n          holding=true;\n          holdTime=0f;\n          if (net.client())           Events.fire(new WithdrawEvent(tile,player,item,amount));\n        }\n        return true;\n      }\n      @Override public void touchUp(      InputEvent event,      float x,      float y,      int pointer,      KeyCode button){\n        holding=false;\n        lastItem=null;\n      }\n    }\n);\n    table.add(image);\n    if (row++ % cols == cols - 1)     table.row();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 183,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (tile.block.hasItems) {\n  for (int i=0; i < content.items().size; i++) {\n    Item item=content.item(i);\n    if (!tile.items.has(item))     continue;\n    container.add(i);\n    Boolp canPick=() -> player.unit().acceptsItem(item) && !state.isPaused() && player.within(tile,itemTransferRange);\n    HandCursorListener l=new HandCursorListener();\n    l.enabled=canPick;\n    Element image=itemImage(item.icon(Cicon.xlarge),() -> {\n      if (tile == null || !tile.isValid()) {\n        return \"\";\n      }\n      return round(tile.items.get(item));\n    }\n);\n    image.addListener(l);\n    image.addListener(new InputListener(){\n      @Override public boolean touchDown(      InputEvent event,      float x,      float y,      int pointer,      KeyCode button){\n        if (!canPick.get() || tile == null || !tile.isValid() || tile.items == null || !tile.items.has(item))         return false;\n        int amount=Math.min(1,player.unit().maxAccepted(item));\n        if (amount > 0) {\n          Call.requestItem(player,tile,item,amount);\n          lastItem=item;\n          holding=true;\n          holdTime=0f;\n          if (net.client())           Events.fire(new WithdrawEvent(tile,player,item,amount));\n        }\n        return true;\n      }\n      @Override public void touchUp(      InputEvent event,      float x,      float y,      int pointer,      KeyCode button){\n        holding=false;\n        lastItem=null;\n      }\n    }\n);\n    table.add(image);\n    if (row++ % cols == cols - 1)     table.row();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 291,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4618,
        "startLineNumber" : 72,
        "startColumnNumber" : 41,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  IntSet container=new IntSet();\n  Arrays.fill(shrinkHoldTimes,0);\n  holdTime=emptyTime=0f;\n  table.clearChildren();\n  table.clearActions();\n  table.background(Tex.inventory);\n  table.touchable=Touchable.enabled;\n  table.update(() -> {\n    if (state.isMenu() || tile == null || !tile.isValid() || !tile.block.isAccessible() || emptyTime >= holdShrink) {\n      hide();\n    }\n else {\n      if (tile.items.total() == 0) {\n        emptyTime+=Time.delta;\n      }\n else {\n        emptyTime=0f;\n      }\n      if (holding && lastItem != null) {\n        holdTime+=Time.delta;\n        if (holdTime >= holdWithdraw) {\n          int amount=Math.min(tile.items.get(lastItem),player.unit().maxAccepted(lastItem));\n          Call.requestItem(player,tile,lastItem,amount);\n          holding=false;\n          holdTime=0f;\n          if (net.client())           Events.fire(new WithdrawEvent(tile,player,lastItem,amount));\n        }\n      }\n      updateTablePosition();\n      if (tile.block.hasItems) {\n        boolean dirty=false;\n        if (shrinkHoldTimes.length != content.items().size)         shrinkHoldTimes=new float[content.items().size];\n        for (int i=0; i < content.items().size; i++) {\n          boolean has=tile.items.has(content.item(i));\n          boolean had=container.contains(i);\n          if (has) {\n            shrinkHoldTimes[i]=0f;\n            dirty|=!had;\n          }\n else           if (had) {\n            shrinkHoldTimes[i]+=Time.delta;\n            dirty|=shrinkHoldTimes[i] >= holdShrink;\n          }\n        }\n        if (dirty)         rebuild(false);\n      }\n      if (table.getChildren().isEmpty()) {\n        hide();\n      }\n    }\n  }\n);\n  int cols=3;\n  int row=0;\n  table.margin(4f);\n  table.defaults().size(8 * 5).pad(4f);\n  if (tile.block.hasItems) {\n    for (int i=0; i < content.items().size; i++) {\n      Item item=content.item(i);\n      if (!tile.items.has(item))       continue;\n      container.add(i);\n      Boolp canPick=() -> player.unit().acceptsItem(item) && !state.isPaused() && player.within(tile,itemTransferRange);\n      HandCursorListener l=new HandCursorListener();\n      l.enabled=canPick;\n      Element image=itemImage(item.icon(Cicon.xlarge),() -> {\n        if (tile == null || !tile.isValid()) {\n          return \"\";\n        }\n        return round(tile.items.get(item));\n      }\n);\n      image.addListener(l);\n      image.addListener(new InputListener(){\n        @Override public boolean touchDown(        InputEvent event,        float x,        float y,        int pointer,        KeyCode button){\n          if (!canPick.get() || tile == null || !tile.isValid() || tile.items == null || !tile.items.has(item))           return false;\n          int amount=Math.min(1,player.unit().maxAccepted(item));\n          if (amount > 0) {\n            Call.requestItem(player,tile,item,amount);\n            lastItem=item;\n            holding=true;\n            holdTime=0f;\n            if (net.client())             Events.fire(new WithdrawEvent(tile,player,item,amount));\n          }\n          return true;\n        }\n        @Override public void touchUp(        InputEvent event,        float x,        float y,        int pointer,        KeyCode button){\n          holding=false;\n          lastItem=null;\n        }\n      }\n);\n      table.add(image);\n      if (row++ % cols == cols - 1)       table.row();\n    }\n  }\n  if (row == 0) {\n    table.setSize(0f,0f);\n  }\n  updateTablePosition();\n  table.visible=true;\n  if (actions) {\n    table.setScale(0f,1f);\n    table.actions(Actions.scaleTo(1f,1f,0.07f,Interp.pow3Out));\n  }\n else {\n    table.setScale(1f,1f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 657,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4655,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void rebuild(boolean actions){\n  IntSet container=new IntSet();\n  Arrays.fill(shrinkHoldTimes,0);\n  holdTime=emptyTime=0f;\n  table.clearChildren();\n  table.clearActions();\n  table.background(Tex.inventory);\n  table.touchable=Touchable.enabled;\n  table.update(() -> {\n    if (state.isMenu() || tile == null || !tile.isValid() || !tile.block.isAccessible() || emptyTime >= holdShrink) {\n      hide();\n    }\n else {\n      if (tile.items.total() == 0) {\n        emptyTime+=Time.delta;\n      }\n else {\n        emptyTime=0f;\n      }\n      if (holding && lastItem != null) {\n        holdTime+=Time.delta;\n        if (holdTime >= holdWithdraw) {\n          int amount=Math.min(tile.items.get(lastItem),player.unit().maxAccepted(lastItem));\n          Call.requestItem(player,tile,lastItem,amount);\n          holding=false;\n          holdTime=0f;\n          if (net.client())           Events.fire(new WithdrawEvent(tile,player,lastItem,amount));\n        }\n      }\n      updateTablePosition();\n      if (tile.block.hasItems) {\n        boolean dirty=false;\n        if (shrinkHoldTimes.length != content.items().size)         shrinkHoldTimes=new float[content.items().size];\n        for (int i=0; i < content.items().size; i++) {\n          boolean has=tile.items.has(content.item(i));\n          boolean had=container.contains(i);\n          if (has) {\n            shrinkHoldTimes[i]=0f;\n            dirty|=!had;\n          }\n else           if (had) {\n            shrinkHoldTimes[i]+=Time.delta;\n            dirty|=shrinkHoldTimes[i] >= holdShrink;\n          }\n        }\n        if (dirty)         rebuild(false);\n      }\n      if (table.getChildren().isEmpty()) {\n        hide();\n      }\n    }\n  }\n);\n  int cols=3;\n  int row=0;\n  table.margin(4f);\n  table.defaults().size(8 * 5).pad(4f);\n  if (tile.block.hasItems) {\n    for (int i=0; i < content.items().size; i++) {\n      Item item=content.item(i);\n      if (!tile.items.has(item))       continue;\n      container.add(i);\n      Boolp canPick=() -> player.unit().acceptsItem(item) && !state.isPaused() && player.within(tile,itemTransferRange);\n      HandCursorListener l=new HandCursorListener();\n      l.enabled=canPick;\n      Element image=itemImage(item.icon(Cicon.xlarge),() -> {\n        if (tile == null || !tile.isValid()) {\n          return \"\";\n        }\n        return round(tile.items.get(item));\n      }\n);\n      image.addListener(l);\n      image.addListener(new InputListener(){\n        @Override public boolean touchDown(        InputEvent event,        float x,        float y,        int pointer,        KeyCode button){\n          if (!canPick.get() || tile == null || !tile.isValid() || tile.items == null || !tile.items.has(item))           return false;\n          int amount=Math.min(1,player.unit().maxAccepted(item));\n          if (amount > 0) {\n            Call.requestItem(player,tile,item,amount);\n            lastItem=item;\n            holding=true;\n            holdTime=0f;\n            if (net.client())             Events.fire(new WithdrawEvent(tile,player,item,amount));\n          }\n          return true;\n        }\n        @Override public void touchUp(        InputEvent event,        float x,        float y,        int pointer,        KeyCode button){\n          holding=false;\n          lastItem=null;\n        }\n      }\n);\n      table.add(image);\n      if (row++ % cols == cols - 1)       table.row();\n    }\n  }\n  if (row == 0) {\n    table.setSize(0f,0f);\n  }\n  updateTablePosition();\n  table.visible=true;\n  if (actions) {\n    table.setScale(0f,1f);\n    table.actions(Actions.scaleTo(1f,1f,0.07f,Interp.pow3Out));\n  }\n else {\n    table.setScale(1f,1f);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 664,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 181,
        "endColumnNumber" : 57
      },
      "nodeContext" : "if (row++ % cols == cols - 1) table.row();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 181,
    "startColumnNumber" : 19,
    "endLineNumber" : 181,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}