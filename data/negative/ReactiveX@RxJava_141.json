{
  "id" : 141,
  "expression" : "Flowable.just(Boolean.TRUE,Boolean.FALSE)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnEachTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Flowable.just(Boolean.TRUE,Boolean.FALSE)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 118,
      "startColumnNumber" : 12,
      "endLineNumber" : 119,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 314,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 22
      },
      "nodeContext" : "Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n  @Override public boolean test(  Boolean value){\n    return value;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n  @Override public boolean test(  Boolean value){\n    return value;\n  }\n}\n).toList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 22
      },
      "nodeContext" : "Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n  @Override public boolean test(  Boolean value){\n    return value;\n  }\n}\n).toList().doOnNext(new Consumer<List<Boolean>>(){\n  @Override public void accept(  List<Boolean> booleans){\n    count.incrementAndGet();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 652,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n  @Override public boolean test(  Boolean value){\n    return value;\n  }\n}\n).toList().doOnNext(new Consumer<List<Boolean>>(){\n  @Override public void accept(  List<Boolean> booleans){\n    count.incrementAndGet();\n  }\n}\n).subscribe()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 653,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n  @Override public boolean test(  Boolean value){\n    return value;\n  }\n}\n).toList().doOnNext(new Consumer<List<Boolean>>(){\n  @Override public void accept(  List<Boolean> booleans){\n    count.incrementAndGet();\n  }\n}\n).subscribe();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 66,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 679,
        "startLineNumber" : 117,
        "startColumnNumber" : 46,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n    @Override public boolean test(    Boolean value){\n      return value;\n    }\n  }\n).toList().doOnNext(new Consumer<List<Boolean>>(){\n    @Override public void accept(    List<Boolean> booleans){\n      count.incrementAndGet();\n    }\n  }\n).subscribe();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < expectedCount; i++) {\n  Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n    @Override public boolean test(    Boolean value){\n      return value;\n    }\n  }\n).toList().doOnNext(new Consumer<List<Boolean>>(){\n    @Override public void accept(    List<Boolean> booleans){\n      count.incrementAndGet();\n    }\n  }\n).subscribe();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 78,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 940,
        "startLineNumber" : 113,
        "startColumnNumber" : 37,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int expectedCount=3;\n  final AtomicInteger count=new AtomicInteger();\n  for (int i=0; i < expectedCount; i++) {\n    Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n      @Override public boolean test(      Boolean value){\n        return value;\n      }\n    }\n).toList().doOnNext(new Consumer<List<Boolean>>(){\n      @Override public void accept(      List<Boolean> booleans){\n        count.incrementAndGet();\n      }\n    }\n).subscribe();\n  }\n  assertEquals(expectedCount,count.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 984,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testIssue1451Case1(){\n  final int expectedCount=3;\n  final AtomicInteger count=new AtomicInteger();\n  for (int i=0; i < expectedCount; i++) {\n    Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n      @Override public boolean test(      Boolean value){\n        return value;\n      }\n    }\n).toList().doOnNext(new Consumer<List<Boolean>>(){\n      @Override public void accept(      List<Boolean> booleans){\n        count.incrementAndGet();\n      }\n    }\n).subscribe();\n  }\n  assertEquals(expectedCount,count.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 314,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 22
      },
      "nodeContext" : "Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){\n  @Override public boolean test(  Boolean value){\n    return value;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "io.reactivex.Flowable<java.lang.Boolean>"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 118,
    "startColumnNumber" : 12,
    "endLineNumber" : 119,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}