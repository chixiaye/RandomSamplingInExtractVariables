{
  "id" : 10,
  "expression" : "filename",
  "projectName" : "Konloch@bytecode-viewer",
  "commitID" : "9ab8ec7f8c061fb1d9b1db3e901034d162a211ff",
  "filePath" : "/src/main/java/the/bytecode/club/bytecodeviewer/util/JarUtils.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "filename",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 283,
      "startColumnNumber" : 25,
      "endLineNumber" : 283,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 283,
        "startColumnNumber" : 25,
        "endLineNumber" : 283,
        "endColumnNumber" : 56
      },
      "nodeContext" : "filename.startsWith(\"META-INF\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 283,
        "startColumnNumber" : 24,
        "endLineNumber" : 283,
        "endColumnNumber" : 56
      },
      "nodeContext" : "!filename.startsWith(\"META-INF\")",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 283,
        "startColumnNumber" : 20,
        "endLineNumber" : 287,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!filename.startsWith(\"META-INF\")) {\n  out.putNextEntry(new ZipEntry(filename));\n  out.write(entry.getValue());\n  out.closeEntry();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 281,
        "startColumnNumber" : 79,
        "endLineNumber" : 288,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String filename=entry.getKey();\n  if (!filename.startsWith(\"META-INF\")) {\n    out.putNextEntry(new ZipEntry(filename));\n    out.write(entry.getValue());\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 281,
        "startColumnNumber" : 16,
        "endLineNumber" : 288,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Entry<String,byte[]> entry : container.files.entrySet()) {\n  String filename=entry.getKey();\n  if (!filename.startsWith(\"META-INF\")) {\n    out.putNextEntry(new ZipEntry(filename));\n    out.write(entry.getValue());\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 280,
        "startColumnNumber" : 12,
        "endLineNumber" : 288,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (FileContainer container : BytecodeViewer.files) for (Entry<String,byte[]> entry : container.files.entrySet()) {\n  String filename=entry.getKey();\n  if (!filename.startsWith(\"META-INF\")) {\n    out.putNextEntry(new ZipEntry(filename));\n    out.write(entry.getValue());\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 264,
        "startColumnNumber" : 12,
        "endLineNumber" : 291,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JarOutputStream out=new JarOutputStream(new FileOutputStream(path));\n  for (  ClassNode cn : nodeList) {\n    ClassWriter cw=new ClassWriter(0);\n    cn.accept(cw);\n    out.putNextEntry(new ZipEntry(cn.name + \".class\"));\n    out.write(cw.toByteArray());\n    out.closeEntry();\n  }\n  out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n  out.write((manifest.trim() + \"\\r\\n\\r\\n\").getBytes());\n  out.closeEntry();\n  for (  FileContainer container : BytecodeViewer.files)   for (  Entry<String,byte[]> entry : container.files.entrySet()) {\n    String filename=entry.getKey();\n    if (!filename.startsWith(\"META-INF\")) {\n      out.putNextEntry(new ZipEntry(filename));\n      out.write(entry.getValue());\n      out.closeEntry();\n    }\n  }\n  out.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1143,
        "startLineNumber" : 264,
        "startColumnNumber" : 8,
        "endLineNumber" : 293,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JarOutputStream out=new JarOutputStream(new FileOutputStream(path));\n  for (  ClassNode cn : nodeList) {\n    ClassWriter cw=new ClassWriter(0);\n    cn.accept(cw);\n    out.putNextEntry(new ZipEntry(cn.name + \".class\"));\n    out.write(cw.toByteArray());\n    out.closeEntry();\n  }\n  out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n  out.write((manifest.trim() + \"\\r\\n\\r\\n\").getBytes());\n  out.closeEntry();\n  for (  FileContainer container : BytecodeViewer.files)   for (  Entry<String,byte[]> entry : container.files.entrySet()) {\n    String filename=entry.getKey();\n    if (!filename.startsWith(\"META-INF\")) {\n      out.putNextEntry(new ZipEntry(filename));\n      out.write(entry.getValue());\n      out.closeEntry();\n    }\n  }\n  out.close();\n}\n catch (IOException e) {\n  BytecodeViewer.handleException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1159,
        "startLineNumber" : 263,
        "startColumnNumber" : 50,
        "endLineNumber" : 294,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    JarOutputStream out=new JarOutputStream(new FileOutputStream(path));\n    for (    ClassNode cn : nodeList) {\n      ClassWriter cw=new ClassWriter(0);\n      cn.accept(cw);\n      out.putNextEntry(new ZipEntry(cn.name + \".class\"));\n      out.write(cw.toByteArray());\n      out.closeEntry();\n    }\n    out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n    out.write((manifest.trim() + \"\\r\\n\\r\\n\").getBytes());\n    out.closeEntry();\n    for (    FileContainer container : BytecodeViewer.files)     for (    Entry<String,byte[]> entry : container.files.entrySet()) {\n      String filename=entry.getKey();\n      if (!filename.startsWith(\"META-INF\")) {\n        out.putNextEntry(new ZipEntry(filename));\n        out.write(entry.getValue());\n        out.closeEntry();\n      }\n    }\n    out.close();\n  }\n catch (  IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 255,
        "startColumnNumber" : 4,
        "endLineNumber" : 294,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Saves as jar with manifest\n * @param nodeList the loaded ClassNodes\n * @param path     the exact path of the output jar file\n * @param manifest the manifest contents\n */\npublic static void saveAsJar(ArrayList<ClassNode> nodeList,String path,String manifest){\n  try {\n    JarOutputStream out=new JarOutputStream(new FileOutputStream(path));\n    for (    ClassNode cn : nodeList) {\n      ClassWriter cw=new ClassWriter(0);\n      cn.accept(cw);\n      out.putNextEntry(new ZipEntry(cn.name + \".class\"));\n      out.write(cw.toByteArray());\n      out.closeEntry();\n    }\n    out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n    out.write((manifest.trim() + \"\\r\\n\\r\\n\").getBytes());\n    out.closeEntry();\n    for (    FileContainer container : BytecodeViewer.files)     for (    Entry<String,byte[]> entry : container.files.entrySet()) {\n      String filename=entry.getKey();\n      if (!filename.startsWith(\"META-INF\")) {\n        out.putNextEntry(new ZipEntry(filename));\n        out.write(entry.getValue());\n        out.closeEntry();\n      }\n    }\n    out.close();\n  }\n catch (  IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 178,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 283,
        "startColumnNumber" : 24,
        "endLineNumber" : 283,
        "endColumnNumber" : 56
      },
      "nodeContext" : "!filename.startsWith(\"META-INF\")",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "filename",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 284,
      "startColumnNumber" : 54,
      "endLineNumber" : 284,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 284,
        "startColumnNumber" : 41,
        "endLineNumber" : 284,
        "endColumnNumber" : 63
      },
      "nodeContext" : "new ZipEntry(filename)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 284,
        "startColumnNumber" : 24,
        "endLineNumber" : 284,
        "endColumnNumber" : 64
      },
      "nodeContext" : "out.putNextEntry(new ZipEntry(filename))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 284,
        "startColumnNumber" : 24,
        "endLineNumber" : 284,
        "endColumnNumber" : 65
      },
      "nodeContext" : "out.putNextEntry(new ZipEntry(filename));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 283,
        "startColumnNumber" : 58,
        "endLineNumber" : 287,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  out.putNextEntry(new ZipEntry(filename));\n  out.write(entry.getValue());\n  out.closeEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 283,
        "startColumnNumber" : 20,
        "endLineNumber" : 287,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!filename.startsWith(\"META-INF\")) {\n  out.putNextEntry(new ZipEntry(filename));\n  out.write(entry.getValue());\n  out.closeEntry();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 281,
        "startColumnNumber" : 79,
        "endLineNumber" : 288,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String filename=entry.getKey();\n  if (!filename.startsWith(\"META-INF\")) {\n    out.putNextEntry(new ZipEntry(filename));\n    out.write(entry.getValue());\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 281,
        "startColumnNumber" : 16,
        "endLineNumber" : 288,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Entry<String,byte[]> entry : container.files.entrySet()) {\n  String filename=entry.getKey();\n  if (!filename.startsWith(\"META-INF\")) {\n    out.putNextEntry(new ZipEntry(filename));\n    out.write(entry.getValue());\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 280,
        "startColumnNumber" : 12,
        "endLineNumber" : 288,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (FileContainer container : BytecodeViewer.files) for (Entry<String,byte[]> entry : container.files.entrySet()) {\n  String filename=entry.getKey();\n  if (!filename.startsWith(\"META-INF\")) {\n    out.putNextEntry(new ZipEntry(filename));\n    out.write(entry.getValue());\n    out.closeEntry();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 264,
        "startColumnNumber" : 12,
        "endLineNumber" : 291,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JarOutputStream out=new JarOutputStream(new FileOutputStream(path));\n  for (  ClassNode cn : nodeList) {\n    ClassWriter cw=new ClassWriter(0);\n    cn.accept(cw);\n    out.putNextEntry(new ZipEntry(cn.name + \".class\"));\n    out.write(cw.toByteArray());\n    out.closeEntry();\n  }\n  out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n  out.write((manifest.trim() + \"\\r\\n\\r\\n\").getBytes());\n  out.closeEntry();\n  for (  FileContainer container : BytecodeViewer.files)   for (  Entry<String,byte[]> entry : container.files.entrySet()) {\n    String filename=entry.getKey();\n    if (!filename.startsWith(\"META-INF\")) {\n      out.putNextEntry(new ZipEntry(filename));\n      out.write(entry.getValue());\n      out.closeEntry();\n    }\n  }\n  out.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1143,
        "startLineNumber" : 264,
        "startColumnNumber" : 8,
        "endLineNumber" : 293,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JarOutputStream out=new JarOutputStream(new FileOutputStream(path));\n  for (  ClassNode cn : nodeList) {\n    ClassWriter cw=new ClassWriter(0);\n    cn.accept(cw);\n    out.putNextEntry(new ZipEntry(cn.name + \".class\"));\n    out.write(cw.toByteArray());\n    out.closeEntry();\n  }\n  out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n  out.write((manifest.trim() + \"\\r\\n\\r\\n\").getBytes());\n  out.closeEntry();\n  for (  FileContainer container : BytecodeViewer.files)   for (  Entry<String,byte[]> entry : container.files.entrySet()) {\n    String filename=entry.getKey();\n    if (!filename.startsWith(\"META-INF\")) {\n      out.putNextEntry(new ZipEntry(filename));\n      out.write(entry.getValue());\n      out.closeEntry();\n    }\n  }\n  out.close();\n}\n catch (IOException e) {\n  BytecodeViewer.handleException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1159,
        "startLineNumber" : 263,
        "startColumnNumber" : 50,
        "endLineNumber" : 294,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    JarOutputStream out=new JarOutputStream(new FileOutputStream(path));\n    for (    ClassNode cn : nodeList) {\n      ClassWriter cw=new ClassWriter(0);\n      cn.accept(cw);\n      out.putNextEntry(new ZipEntry(cn.name + \".class\"));\n      out.write(cw.toByteArray());\n      out.closeEntry();\n    }\n    out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n    out.write((manifest.trim() + \"\\r\\n\\r\\n\").getBytes());\n    out.closeEntry();\n    for (    FileContainer container : BytecodeViewer.files)     for (    Entry<String,byte[]> entry : container.files.entrySet()) {\n      String filename=entry.getKey();\n      if (!filename.startsWith(\"META-INF\")) {\n        out.putNextEntry(new ZipEntry(filename));\n        out.write(entry.getValue());\n        out.closeEntry();\n      }\n    }\n    out.close();\n  }\n catch (  IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 255,
        "startColumnNumber" : 4,
        "endLineNumber" : 294,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Saves as jar with manifest\n * @param nodeList the loaded ClassNodes\n * @param path     the exact path of the output jar file\n * @param manifest the manifest contents\n */\npublic static void saveAsJar(ArrayList<ClassNode> nodeList,String path,String manifest){\n  try {\n    JarOutputStream out=new JarOutputStream(new FileOutputStream(path));\n    for (    ClassNode cn : nodeList) {\n      ClassWriter cw=new ClassWriter(0);\n      cn.accept(cw);\n      out.putNextEntry(new ZipEntry(cn.name + \".class\"));\n      out.write(cw.toByteArray());\n      out.closeEntry();\n    }\n    out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n    out.write((manifest.trim() + \"\\r\\n\\r\\n\").getBytes());\n    out.closeEntry();\n    for (    FileContainer container : BytecodeViewer.files)     for (    Entry<String,byte[]> entry : container.files.entrySet()) {\n      String filename=entry.getKey();\n      if (!filename.startsWith(\"META-INF\")) {\n        out.putNextEntry(new ZipEntry(filename));\n        out.write(entry.getValue());\n        out.closeEntry();\n      }\n    }\n    out.close();\n  }\n catch (  IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 178,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 284,
        "startColumnNumber" : 24,
        "endLineNumber" : 284,
        "endColumnNumber" : 65
      },
      "nodeContext" : "out.putNextEntry(new ZipEntry(filename));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 283,
    "startColumnNumber" : 25,
    "endLineNumber" : 283,
    "endColumnNumber" : 33
  }, {
    "charLength" : 8,
    "startLineNumber" : 284,
    "startColumnNumber" : 54,
    "endLineNumber" : 284,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}