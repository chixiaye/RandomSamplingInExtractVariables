{
  "id" : 967,
  "expression" : "null",
  "projectName" : "alibaba@fastjson",
  "commitID" : "5c815ee3185f26ce42354193910afebc502cb2af",
  "filePath" : "src/main/java/com/alibaba/fastjson/util/DeserializeBeanInfo.java",
  "occurrences" : 33,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 84,
      "startColumnNumber" : 39,
      "endLineNumber" : 84,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 84,
        "startColumnNumber" : 28,
        "endLineNumber" : 84,
        "endColumnNumber" : 43
      },
      "nodeContext" : "beanInfo=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 44
      },
      "nodeContext" : "DeserializeBeanInfo beanInfo=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 44
      },
      "nodeContext" : "DeserializeBeanInfo beanInfo=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 90,
      "startColumnNumber" : 34,
      "endLineNumber" : 90,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 38
      },
      "nodeContext" : "defaultConstructor != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 38
      },
      "nodeContext" : "defaultConstructor != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 92,
      "startColumnNumber" : 74,
      "endLineNumber" : 92,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 92,
        "startColumnNumber" : 23,
        "endLineNumber" : 92,
        "endColumnNumber" : 85
      },
      "nodeContext" : "new DeserializeBeanInfo(clazz,defaultConstructor,null,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 85
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 86
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 90,
        "startColumnNumber" : 40,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 86
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 92,
      "startColumnNumber" : 80,
      "endLineNumber" : 92,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 92,
        "startColumnNumber" : 23,
        "endLineNumber" : 92,
        "endColumnNumber" : 85
      },
      "nodeContext" : "new DeserializeBeanInfo(clazz,defaultConstructor,null,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 85
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 86
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 90,
        "startColumnNumber" : 40,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 86
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 93,
      "startColumnNumber" : 41,
      "endLineNumber" : 93,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 93,
        "endColumnNumber" : 45
      },
      "nodeContext" : "defaultConstructor == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 93,
        "endColumnNumber" : 111
      },
      "nodeContext" : "defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 93,
        "endColumnNumber" : 111
      },
      "nodeContext" : "defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 95,
      "startColumnNumber" : 38,
      "endLineNumber" : 95,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 42
      },
      "nodeContext" : "creatorConstructor != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (creatorConstructor != null) {\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 42
      },
      "nodeContext" : "creatorConstructor != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 97,
      "startColumnNumber" : 58,
      "endLineNumber" : 97,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 97,
        "startColumnNumber" : 27,
        "endLineNumber" : 97,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new DeserializeBeanInfo(clazz,null,creatorConstructor,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 89
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 90
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 95,
        "startColumnNumber" : 44,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (creatorConstructor != null) {\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 90
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 97,
      "startColumnNumber" : 84,
      "endLineNumber" : 97,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 97,
        "startColumnNumber" : 27,
        "endLineNumber" : 97,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new DeserializeBeanInfo(clazz,null,creatorConstructor,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 89
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 90
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 95,
        "startColumnNumber" : 44,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (creatorConstructor != null) {\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 90
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 103,
      "startColumnNumber" : 48,
      "endLineNumber" : 103,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 103,
        "startColumnNumber" : 30,
        "endLineNumber" : 103,
        "endColumnNumber" : 52
      },
      "nodeContext" : "fieldAnnotation=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 53
      },
      "nodeContext" : "JSONField fieldAnnotation=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1441,
        "startLineNumber" : 101,
        "startColumnNumber" : 64,
        "endLineNumber" : 127,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=getGenericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  if (field != null) {\n    TypeUtils.setAccessible(field,modifiers);\n  }\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < parameterTypes.length; ++i) {\n  Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=getGenericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  if (field != null) {\n    TypeUtils.setAccessible(field,modifiers);\n  }\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 95,
        "startColumnNumber" : 44,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (creatorConstructor != null) {\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 53
      },
      "nodeContext" : "JSONField fieldAnnotation=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 110,
      "startColumnNumber" : 43,
      "endLineNumber" : 110,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 110,
        "startColumnNumber" : 24,
        "endLineNumber" : 110,
        "endColumnNumber" : 47
      },
      "nodeContext" : "fieldAnnotation == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 110,
        "startColumnNumber" : 20,
        "endLineNumber" : 112,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldAnnotation == null) {\n  throw new JSONException(\"illegal json creator\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1441,
        "startLineNumber" : 101,
        "startColumnNumber" : 64,
        "endLineNumber" : 127,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=getGenericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  if (field != null) {\n    TypeUtils.setAccessible(field,modifiers);\n  }\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < parameterTypes.length; ++i) {\n  Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=getGenericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  if (field != null) {\n    TypeUtils.setAccessible(field,modifiers);\n  }\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 95,
        "startColumnNumber" : 44,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (creatorConstructor != null) {\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 110,
        "startColumnNumber" : 24,
        "endLineNumber" : 110,
        "endColumnNumber" : 47
      },
      "nodeContext" : "fieldAnnotation == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 118,
      "startColumnNumber" : 33,
      "endLineNumber" : 118,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 118,
        "startColumnNumber" : 24,
        "endLineNumber" : 118,
        "endColumnNumber" : 37
      },
      "nodeContext" : "field != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 118,
        "startColumnNumber" : 20,
        "endLineNumber" : 120,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (field != null) {\n  TypeUtils.setAccessible(field,modifiers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1441,
        "startLineNumber" : 101,
        "startColumnNumber" : 64,
        "endLineNumber" : 127,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=getGenericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  if (field != null) {\n    TypeUtils.setAccessible(field,modifiers);\n  }\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < parameterTypes.length; ++i) {\n  Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=getGenericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  if (field != null) {\n    TypeUtils.setAccessible(field,modifiers);\n  }\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 95,
        "startColumnNumber" : 44,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (creatorConstructor != null) {\n  TypeUtils.setAccessible(creatorConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n  Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n  Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=getGenericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    if (field != null) {\n      TypeUtils.setAccessible(field,modifiers);\n    }\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 118,
        "startColumnNumber" : 24,
        "endLineNumber" : 118,
        "endColumnNumber" : 37
      },
      "nodeContext" : "field != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 132,
      "startColumnNumber" : 33,
      "endLineNumber" : 132,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 37
      },
      "nodeContext" : "factoryMethod != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2027,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (factoryMethod != null) {\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 37
      },
      "nodeContext" : "factoryMethod != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 134,
      "startColumnNumber" : 58,
      "endLineNumber" : 134,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 134,
        "startColumnNumber" : 27,
        "endLineNumber" : 134,
        "endColumnNumber" : 84
      },
      "nodeContext" : "new DeserializeBeanInfo(clazz,null,null,factoryMethod)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 84
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 85
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2000,
        "startLineNumber" : 132,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2027,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (factoryMethod != null) {\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 85
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 134,
      "startColumnNumber" : 64,
      "endLineNumber" : 134,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 134,
        "startColumnNumber" : 27,
        "endLineNumber" : 134,
        "endColumnNumber" : 84
      },
      "nodeContext" : "new DeserializeBeanInfo(clazz,null,null,factoryMethod)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 84
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 85
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2000,
        "startLineNumber" : 132,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2027,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (factoryMethod != null) {\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 85
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 140,
      "startColumnNumber" : 48,
      "endLineNumber" : 140,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 140,
        "startColumnNumber" : 30,
        "endLineNumber" : 140,
        "endColumnNumber" : 52
      },
      "nodeContext" : "fieldAnnotation=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 140,
        "startColumnNumber" : 20,
        "endLineNumber" : 140,
        "endColumnNumber" : 53
      },
      "nodeContext" : "JSONField fieldAnnotation=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1565,
        "startLineNumber" : 138,
        "startColumnNumber" : 64,
        "endLineNumber" : 164,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=genericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1613,
        "startLineNumber" : 138,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < parameterTypes.length; ++i) {\n  Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=genericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 135,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2000,
        "startLineNumber" : 132,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2027,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (factoryMethod != null) {\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 140,
        "startColumnNumber" : 20,
        "endLineNumber" : 140,
        "endColumnNumber" : 53
      },
      "nodeContext" : "JSONField fieldAnnotation=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 147,
      "startColumnNumber" : 43,
      "endLineNumber" : 147,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 147,
        "endColumnNumber" : 47
      },
      "nodeContext" : "fieldAnnotation == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 147,
        "startColumnNumber" : 20,
        "endLineNumber" : 149,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldAnnotation == null) {\n  throw new JSONException(\"illegal json creator\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1565,
        "startLineNumber" : 138,
        "startColumnNumber" : 64,
        "endLineNumber" : 164,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=genericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1613,
        "startLineNumber" : 138,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < parameterTypes.length; ++i) {\n  Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n  JSONField fieldAnnotation=null;\n  for (  Annotation paramAnnotation : paramAnnotations) {\n    if (paramAnnotation instanceof JSONField) {\n      fieldAnnotation=(JSONField)paramAnnotation;\n      break;\n    }\n  }\n  if (fieldAnnotation == null) {\n    throw new JSONException(\"illegal json creator\");\n  }\n  Class<?> fieldClass=parameterTypes[i];\n  Type fieldType=genericParameterTypes[i];\n  Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n  final int ordinal=fieldAnnotation.ordinal();\n  final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n  beanInfo.add(fieldInfo);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 135,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2000,
        "startLineNumber" : 132,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2027,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (factoryMethod != null) {\n  TypeUtils.setAccessible(factoryMethod,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n  Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n  Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n  for (int i=0; i < parameterTypes.length; ++i) {\n    Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n    JSONField fieldAnnotation=null;\n    for (    Annotation paramAnnotation : paramAnnotations) {\n      if (paramAnnotation instanceof JSONField) {\n        fieldAnnotation=(JSONField)paramAnnotation;\n        break;\n      }\n    }\n    if (fieldAnnotation == null) {\n      throw new JSONException(\"illegal json creator\");\n    }\n    Class<?> fieldClass=parameterTypes[i];\n    Type fieldType=genericParameterTypes[i];\n    Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n    final int ordinal=fieldAnnotation.ordinal();\n    final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n    beanInfo.add(fieldInfo);\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4237,
        "startLineNumber" : 93,
        "startColumnNumber" : 113,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4335,
        "startLineNumber" : 93,
        "startColumnNumber" : 15,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 417,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4539,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultConstructor != null) {\n  TypeUtils.setAccessible(defaultConstructor,modifiers);\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n else if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n  Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n  if (creatorConstructor != null) {\n    TypeUtils.setAccessible(creatorConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n    Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n    Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=getGenericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      if (field != null) {\n        TypeUtils.setAccessible(field,modifiers);\n      }\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  Method factoryMethod=getFactoryMethod(clazz,methods);\n  if (factoryMethod != null) {\n    TypeUtils.setAccessible(factoryMethod,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n    Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n    Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n    for (int i=0; i < parameterTypes.length; ++i) {\n      Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n      JSONField fieldAnnotation=null;\n      for (      Annotation paramAnnotation : paramAnnotations) {\n        if (paramAnnotation instanceof JSONField) {\n          fieldAnnotation=(JSONField)paramAnnotation;\n          break;\n        }\n      }\n      if (fieldAnnotation == null) {\n        throw new JSONException(\"illegal json creator\");\n      }\n      Class<?> fieldClass=parameterTypes[i];\n      Type fieldType=genericParameterTypes[i];\n      Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n      final int ordinal=fieldAnnotation.ordinal();\n      final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n      beanInfo.add(fieldInfo);\n    }\n    return beanInfo;\n  }\n  throw new JSONException(\"default constructor not found. \" + clazz);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 147,
        "endColumnNumber" : 47
      },
      "nodeContext" : "fieldAnnotation == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 171,
      "startColumnNumber" : 24,
      "endLineNumber" : 171,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 171,
        "endColumnNumber" : 28
      },
      "nodeContext" : "beanInfo == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (beanInfo == null) {\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 171,
        "endColumnNumber" : 28
      },
      "nodeContext" : "beanInfo == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 172,
      "startColumnNumber" : 74,
      "endLineNumber" : 172,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 172,
        "startColumnNumber" : 23,
        "endLineNumber" : 172,
        "endColumnNumber" : 85
      },
      "nodeContext" : "new DeserializeBeanInfo(clazz,defaultConstructor,null,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 85
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 86
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 171,
        "startColumnNumber" : 30,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (beanInfo == null) {\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 86
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 172,
      "startColumnNumber" : 80,
      "endLineNumber" : 172,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 172,
        "startColumnNumber" : 23,
        "endLineNumber" : 172,
        "endColumnNumber" : 85
      },
      "nodeContext" : "new DeserializeBeanInfo(clazz,defaultConstructor,null,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 85
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 86
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 171,
        "startColumnNumber" : 30,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (beanInfo == null) {\n  beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 86
      },
      "nodeContext" : "beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 203,
      "startColumnNumber" : 30,
      "endLineNumber" : 203,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 34
      },
      "nodeContext" : "annotation == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 203,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation == null) {\n  annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 34
      },
      "nodeContext" : "annotation == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 207,
      "startColumnNumber" : 30,
      "endLineNumber" : 207,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 207,
        "startColumnNumber" : 16,
        "endLineNumber" : 207,
        "endColumnNumber" : 34
      },
      "nodeContext" : "annotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 637,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation != null) {\n  if (!annotation.deserialize()) {\n    continue;\n  }\n  ordinal=annotation.ordinal();\n  serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 207,
        "startColumnNumber" : 16,
        "endLineNumber" : 207,
        "endColumnNumber" : 34
      },
      "nodeContext" : "annotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 217,
      "startColumnNumber" : 69,
      "endLineNumber" : 217,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 217,
        "startColumnNumber" : 33,
        "endLineNumber" : 217,
        "endColumnNumber" : 132
      },
      "nodeContext" : "new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 217,
        "startColumnNumber" : 20,
        "endLineNumber" : 217,
        "endColumnNumber" : 133
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 217,
        "startColumnNumber" : 20,
        "endLineNumber" : 217,
        "endColumnNumber" : 134
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 215,
        "startColumnNumber" : 53,
        "endLineNumber" : 220,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String propertyName=annotation.name();\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 215,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (annotation.name().length() != 0) {\n  String propertyName=annotation.name();\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 613,
        "startLineNumber" : 207,
        "startColumnNumber" : 36,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!annotation.deserialize()) {\n    continue;\n  }\n  ordinal=annotation.ordinal();\n  serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 637,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation != null) {\n  if (!annotation.deserialize()) {\n    continue;\n  }\n  ordinal=annotation.ordinal();\n  serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 217,
        "startColumnNumber" : 20,
        "endLineNumber" : 217,
        "endColumnNumber" : 134
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 217,
      "startColumnNumber" : 127,
      "endLineNumber" : 217,
      "endColumnNumber" : 131
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 217,
        "startColumnNumber" : 33,
        "endLineNumber" : 217,
        "endColumnNumber" : 132
      },
      "nodeContext" : "new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 217,
        "startColumnNumber" : 20,
        "endLineNumber" : 217,
        "endColumnNumber" : 133
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 217,
        "startColumnNumber" : 20,
        "endLineNumber" : 217,
        "endColumnNumber" : 134
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 215,
        "startColumnNumber" : 53,
        "endLineNumber" : 220,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String propertyName=annotation.name();\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 215,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (annotation.name().length() != 0) {\n  String propertyName=annotation.name();\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 613,
        "startLineNumber" : 207,
        "startColumnNumber" : 36,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!annotation.deserialize()) {\n    continue;\n  }\n  ordinal=annotation.ordinal();\n  serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 637,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation != null) {\n  if (!annotation.deserialize()) {\n    continue;\n  }\n  ordinal=annotation.ordinal();\n  serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 217,
        "startColumnNumber" : 20,
        "endLineNumber" : 217,
        "endColumnNumber" : 134
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 247,
      "startColumnNumber" : 25,
      "endLineNumber" : 247,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 29
      },
      "nodeContext" : "field == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 79
      },
      "nodeContext" : "field == null && method.getParameterTypes()[0] == boolean.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 247,
        "startColumnNumber" : 12,
        "endLineNumber" : 250,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (field == null && method.getParameterTypes()[0] == boolean.class) {\n  String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n  field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 79
      },
      "nodeContext" : "field == null && method.getParameterTypes()[0] == boolean.class",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 252,
      "startColumnNumber" : 25,
      "endLineNumber" : 252,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 252,
        "startColumnNumber" : 16,
        "endLineNumber" : 252,
        "endColumnNumber" : 29
      },
      "nodeContext" : "field != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 252,
        "startColumnNumber" : 16,
        "endLineNumber" : 252,
        "endColumnNumber" : 29
      },
      "nodeContext" : "field != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 255,
      "startColumnNumber" : 39,
      "endLineNumber" : 255,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 255,
        "startColumnNumber" : 20,
        "endLineNumber" : 255,
        "endColumnNumber" : 43
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 537,
        "startLineNumber" : 255,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  ordinal=fieldAnnotation.ordinal();\n  serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 653,
        "startLineNumber" : 252,
        "startColumnNumber" : 31,
        "endLineNumber" : 266,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 255,
        "startColumnNumber" : 20,
        "endLineNumber" : 255,
        "endColumnNumber" : 43
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 267,
      "startColumnNumber" : 61,
      "endLineNumber" : 267,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 267,
        "startColumnNumber" : 25,
        "endLineNumber" : 267,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 267,
        "startColumnNumber" : 12,
        "endLineNumber" : 267,
        "endColumnNumber" : 125
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 267,
        "startColumnNumber" : 12,
        "endLineNumber" : 267,
        "endColumnNumber" : 126
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 267,
        "startColumnNumber" : 12,
        "endLineNumber" : 267,
        "endColumnNumber" : 126
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 267,
      "startColumnNumber" : 119,
      "endLineNumber" : 267,
      "endColumnNumber" : 123
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 267,
        "startColumnNumber" : 25,
        "endLineNumber" : 267,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 267,
        "startColumnNumber" : 12,
        "endLineNumber" : 267,
        "endColumnNumber" : 125
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 267,
        "startColumnNumber" : 12,
        "endLineNumber" : 267,
        "endColumnNumber" : 126
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 267,
        "startColumnNumber" : 12,
        "endLineNumber" : 267,
        "endColumnNumber" : 126
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 294,
      "startColumnNumber" : 35,
      "endLineNumber" : 294,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 294,
        "startColumnNumber" : 16,
        "endLineNumber" : 294,
        "endColumnNumber" : 39
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 294,
        "startColumnNumber" : 12,
        "endLineNumber" : 301,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  ordinal=fieldAnnotation.ordinal();\n  serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 271,
        "startColumnNumber" : 46,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  final String fieldName=field.getName();\n  boolean contains=false;\n  for (  FieldInfo item : beanInfo.fields) {\n    if (item.name.equals(fieldName)) {\n      contains=true;\n      continue;\n    }\n  }\n  if (contains) {\n    continue;\n  }\n  int ordinal=0, serialzeFeatures=0;\n  String propertyName=fieldName;\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  TypeUtils.setAccessible(field,modifiers);\n  beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1217,
        "startLineNumber" : 271,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Field field : clazz.getFields()) {\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  final String fieldName=field.getName();\n  boolean contains=false;\n  for (  FieldInfo item : beanInfo.fields) {\n    if (item.name.equals(fieldName)) {\n      contains=true;\n      continue;\n    }\n  }\n  if (contains) {\n    continue;\n  }\n  int ordinal=0, serialzeFeatures=0;\n  String propertyName=fieldName;\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  TypeUtils.setAccessible(field,modifiers);\n  beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 294,
        "startColumnNumber" : 16,
        "endLineNumber" : 294,
        "endColumnNumber" : 39
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 303,
      "startColumnNumber" : 53,
      "endLineNumber" : 303,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 303,
        "startColumnNumber" : 25,
        "endLineNumber" : 303,
        "endColumnNumber" : 128
      },
      "nodeContext" : "new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 129
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 130
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 271,
        "startColumnNumber" : 46,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  final String fieldName=field.getName();\n  boolean contains=false;\n  for (  FieldInfo item : beanInfo.fields) {\n    if (item.name.equals(fieldName)) {\n      contains=true;\n      continue;\n    }\n  }\n  if (contains) {\n    continue;\n  }\n  int ordinal=0, serialzeFeatures=0;\n  String propertyName=fieldName;\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  TypeUtils.setAccessible(field,modifiers);\n  beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1217,
        "startLineNumber" : 271,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Field field : clazz.getFields()) {\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  final String fieldName=field.getName();\n  boolean contains=false;\n  for (  FieldInfo item : beanInfo.fields) {\n    if (item.name.equals(fieldName)) {\n      contains=true;\n      continue;\n    }\n  }\n  if (contains) {\n    continue;\n  }\n  int ordinal=0, serialzeFeatures=0;\n  String propertyName=fieldName;\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  TypeUtils.setAccessible(field,modifiers);\n  beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 130
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 303,
      "startColumnNumber" : 106,
      "endLineNumber" : 303,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 303,
        "startColumnNumber" : 25,
        "endLineNumber" : 303,
        "endColumnNumber" : 128
      },
      "nodeContext" : "new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 129
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 130
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 271,
        "startColumnNumber" : 46,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  final String fieldName=field.getName();\n  boolean contains=false;\n  for (  FieldInfo item : beanInfo.fields) {\n    if (item.name.equals(fieldName)) {\n      contains=true;\n      continue;\n    }\n  }\n  if (contains) {\n    continue;\n  }\n  int ordinal=0, serialzeFeatures=0;\n  String propertyName=fieldName;\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  TypeUtils.setAccessible(field,modifiers);\n  beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1217,
        "startLineNumber" : 271,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Field field : clazz.getFields()) {\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  final String fieldName=field.getName();\n  boolean contains=false;\n  for (  FieldInfo item : beanInfo.fields) {\n    if (item.name.equals(fieldName)) {\n      contains=true;\n      continue;\n    }\n  }\n  if (contains) {\n    continue;\n  }\n  int ordinal=0, serialzeFeatures=0;\n  String propertyName=fieldName;\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    ordinal=fieldAnnotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  TypeUtils.setAccessible(field,modifiers);\n  beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 130
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 329,
      "startColumnNumber" : 38,
      "endLineNumber" : 329,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 329,
        "startColumnNumber" : 24,
        "endLineNumber" : 329,
        "endColumnNumber" : 42
      },
      "nodeContext" : "annotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 329,
        "startColumnNumber" : 24,
        "endLineNumber" : 329,
        "endColumnNumber" : 95
      },
      "nodeContext" : "annotation != null && (annotationName=annotation.name()).length() > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 329,
        "startColumnNumber" : 20,
        "endLineNumber" : 333,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n  propertyName=annotationName;\n}\n else {\n  propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 324,
        "startColumnNumber" : 18,
        "endLineNumber" : 337,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String propertyName;\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  String annotationName;\n  if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n    propertyName=annotationName;\n  }\n else {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n  String propertyName;\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  String annotationName;\n  if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n    propertyName=annotationName;\n  }\n else {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 316,
        "startColumnNumber" : 93,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  Class<?> methodReturnType=method.getReturnType();\n  if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n    String propertyName;\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    String annotationName;\n    if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n      propertyName=annotationName;\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1128,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  Class<?> methodReturnType=method.getReturnType();\n  if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n    String propertyName;\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    String annotationName;\n    if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n      propertyName=annotationName;\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 306,
        "startColumnNumber" : 49,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    Class<?> methodReturnType=method.getReturnType();\n    if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n      String propertyName;\n      JSONField annotation=method.getAnnotation(JSONField.class);\n      String annotationName;\n      if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n        propertyName=annotationName;\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n      TypeUtils.setAccessible(method,modifiers);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1428,
        "startLineNumber" : 306,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    Class<?> methodReturnType=method.getReturnType();\n    if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n      String propertyName;\n      JSONField annotation=method.getAnnotation(JSONField.class);\n      String annotationName;\n      if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n        propertyName=annotationName;\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n      TypeUtils.setAccessible(method,modifiers);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 159,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 329,
        "startColumnNumber" : 24,
        "endLineNumber" : 329,
        "endColumnNumber" : 95
      },
      "nodeContext" : "annotation != null && (annotationName=annotation.name()).length() > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 335,
      "startColumnNumber" : 69,
      "endLineNumber" : 335,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 335,
        "startColumnNumber" : 33,
        "endLineNumber" : 335,
        "endColumnNumber" : 99
      },
      "nodeContext" : "new FieldInfo(propertyName,method,null,clazz,type,annotation)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 335,
        "startColumnNumber" : 20,
        "endLineNumber" : 335,
        "endColumnNumber" : 100
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 335,
        "startColumnNumber" : 20,
        "endLineNumber" : 335,
        "endColumnNumber" : 101
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 324,
        "startColumnNumber" : 18,
        "endLineNumber" : 337,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String propertyName;\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  String annotationName;\n  if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n    propertyName=annotationName;\n  }\n else {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n  String propertyName;\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  String annotationName;\n  if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n    propertyName=annotationName;\n  }\n else {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 316,
        "startColumnNumber" : 93,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  Class<?> methodReturnType=method.getReturnType();\n  if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n    String propertyName;\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    String annotationName;\n    if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n      propertyName=annotationName;\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1128,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  Class<?> methodReturnType=method.getReturnType();\n  if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n    String propertyName;\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    String annotationName;\n    if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n      propertyName=annotationName;\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 306,
        "startColumnNumber" : 49,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    Class<?> methodReturnType=method.getReturnType();\n    if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n      String propertyName;\n      JSONField annotation=method.getAnnotation(JSONField.class);\n      String annotationName;\n      if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n        propertyName=annotationName;\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n      TypeUtils.setAccessible(method,modifiers);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1428,
        "startLineNumber" : 306,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    Class<?> methodReturnType=method.getReturnType();\n    if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n      String propertyName;\n      JSONField annotation=method.getAnnotation(JSONField.class);\n      String annotationName;\n      if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n        propertyName=annotationName;\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n      TypeUtils.setAccessible(method,modifiers);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 159,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 335,
        "startColumnNumber" : 20,
        "endLineNumber" : 335,
        "endColumnNumber" : 101
      },
      "nodeContext" : "beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 84,
    "startColumnNumber" : 39,
    "endLineNumber" : 84,
    "endColumnNumber" : 43
  }, {
    "charLength" : 4,
    "startLineNumber" : 90,
    "startColumnNumber" : 34,
    "endLineNumber" : 90,
    "endColumnNumber" : 38
  }, {
    "charLength" : 4,
    "startLineNumber" : 92,
    "startColumnNumber" : 74,
    "endLineNumber" : 92,
    "endColumnNumber" : 78
  }, {
    "charLength" : 4,
    "startLineNumber" : 92,
    "startColumnNumber" : 80,
    "endLineNumber" : 92,
    "endColumnNumber" : 84
  }, {
    "charLength" : 4,
    "startLineNumber" : 93,
    "startColumnNumber" : 41,
    "endLineNumber" : 93,
    "endColumnNumber" : 45
  }, {
    "charLength" : 4,
    "startLineNumber" : 95,
    "startColumnNumber" : 38,
    "endLineNumber" : 95,
    "endColumnNumber" : 42
  }, {
    "charLength" : 4,
    "startLineNumber" : 97,
    "startColumnNumber" : 58,
    "endLineNumber" : 97,
    "endColumnNumber" : 62
  }, {
    "charLength" : 4,
    "startLineNumber" : 97,
    "startColumnNumber" : 84,
    "endLineNumber" : 97,
    "endColumnNumber" : 88
  }, {
    "charLength" : 4,
    "startLineNumber" : 103,
    "startColumnNumber" : 48,
    "endLineNumber" : 103,
    "endColumnNumber" : 52
  }, {
    "charLength" : 4,
    "startLineNumber" : 110,
    "startColumnNumber" : 43,
    "endLineNumber" : 110,
    "endColumnNumber" : 47
  }, {
    "charLength" : 4,
    "startLineNumber" : 118,
    "startColumnNumber" : 33,
    "endLineNumber" : 118,
    "endColumnNumber" : 37
  }, {
    "charLength" : 4,
    "startLineNumber" : 132,
    "startColumnNumber" : 33,
    "endLineNumber" : 132,
    "endColumnNumber" : 37
  }, {
    "charLength" : 4,
    "startLineNumber" : 134,
    "startColumnNumber" : 58,
    "endLineNumber" : 134,
    "endColumnNumber" : 62
  }, {
    "charLength" : 4,
    "startLineNumber" : 134,
    "startColumnNumber" : 64,
    "endLineNumber" : 134,
    "endColumnNumber" : 68
  }, {
    "charLength" : 4,
    "startLineNumber" : 140,
    "startColumnNumber" : 48,
    "endLineNumber" : 140,
    "endColumnNumber" : 52
  }, {
    "charLength" : 4,
    "startLineNumber" : 147,
    "startColumnNumber" : 43,
    "endLineNumber" : 147,
    "endColumnNumber" : 47
  }, {
    "charLength" : 4,
    "startLineNumber" : 171,
    "startColumnNumber" : 24,
    "endLineNumber" : 171,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 172,
    "startColumnNumber" : 74,
    "endLineNumber" : 172,
    "endColumnNumber" : 78
  }, {
    "charLength" : 4,
    "startLineNumber" : 172,
    "startColumnNumber" : 80,
    "endLineNumber" : 172,
    "endColumnNumber" : 84
  }, {
    "charLength" : 4,
    "startLineNumber" : 203,
    "startColumnNumber" : 30,
    "endLineNumber" : 203,
    "endColumnNumber" : 34
  }, {
    "charLength" : 4,
    "startLineNumber" : 207,
    "startColumnNumber" : 30,
    "endLineNumber" : 207,
    "endColumnNumber" : 34
  }, {
    "charLength" : 4,
    "startLineNumber" : 217,
    "startColumnNumber" : 69,
    "endLineNumber" : 217,
    "endColumnNumber" : 73
  }, {
    "charLength" : 4,
    "startLineNumber" : 217,
    "startColumnNumber" : 127,
    "endLineNumber" : 217,
    "endColumnNumber" : 131
  }, {
    "charLength" : 4,
    "startLineNumber" : 247,
    "startColumnNumber" : 25,
    "endLineNumber" : 247,
    "endColumnNumber" : 29
  }, {
    "charLength" : 4,
    "startLineNumber" : 252,
    "startColumnNumber" : 25,
    "endLineNumber" : 252,
    "endColumnNumber" : 29
  }, {
    "charLength" : 4,
    "startLineNumber" : 255,
    "startColumnNumber" : 39,
    "endLineNumber" : 255,
    "endColumnNumber" : 43
  }, {
    "charLength" : 4,
    "startLineNumber" : 267,
    "startColumnNumber" : 61,
    "endLineNumber" : 267,
    "endColumnNumber" : 65
  }, {
    "charLength" : 4,
    "startLineNumber" : 267,
    "startColumnNumber" : 119,
    "endLineNumber" : 267,
    "endColumnNumber" : 123
  }, {
    "charLength" : 4,
    "startLineNumber" : 294,
    "startColumnNumber" : 35,
    "endLineNumber" : 294,
    "endColumnNumber" : 39
  }, {
    "charLength" : 4,
    "startLineNumber" : 303,
    "startColumnNumber" : 53,
    "endLineNumber" : 303,
    "endColumnNumber" : 57
  }, {
    "charLength" : 4,
    "startLineNumber" : 303,
    "startColumnNumber" : 106,
    "endLineNumber" : 303,
    "endColumnNumber" : 110
  }, {
    "charLength" : 4,
    "startLineNumber" : 329,
    "startColumnNumber" : 38,
    "endLineNumber" : 329,
    "endColumnNumber" : 42
  }, {
    "charLength" : 4,
    "startLineNumber" : 335,
    "startColumnNumber" : 69,
    "endLineNumber" : 335,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 0
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 0
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 0
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 0
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 0
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 0
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 0
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 0
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 1
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 0
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 0
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 0
  }, {
    "firstKey" : 29,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 0
  }, {
    "firstKey" : 30,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 31,
    "layout" : 3
  } ]
}