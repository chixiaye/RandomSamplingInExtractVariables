{
  "id" : 518,
  "expression" : "findAsteriskPattern(row,counters)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/oned/Code39Reader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "findAsteriskPattern(row,counters)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 100,
      "startColumnNumber" : 18,
      "endLineNumber" : 100,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 100,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 52
      },
      "nodeContext" : "start=findAsteriskPattern(row,counters)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int[] start=findAsteriskPattern(row,counters);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2380,
        "startLineNumber" : 97,
        "startColumnNumber" : 67,
        "endLineNumber" : 171,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] counters=new int[9];\n  int[] start=findAsteriskPattern(row,counters);\n  int nextStart=row.getNextSet(start[1]);\n  int end=row.getSize();\n  StringBuilder result=new StringBuilder(20);\n  char decodedChar;\n  int lastStart;\n  do {\n    recordPattern(row,nextStart,counters);\n    int pattern=toNarrowWidePattern(counters);\n    if (pattern < 0) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodedChar=patternToChar(pattern);\n    result.append(decodedChar);\n    lastStart=nextStart;\n    for (    int counter : counters) {\n      nextStart+=counter;\n    }\n    nextStart=row.getNextSet(nextStart);\n  }\n while (decodedChar != '*');\n  result.setLength(result.length() - 1);\n  int lastPatternSize=0;\n  for (  int counter : counters) {\n    lastPatternSize+=counter;\n  }\n  int whiteSpaceAfterEnd=nextStart - lastStart - lastPatternSize;\n  if (nextStart != end && (whiteSpaceAfterEnd >> 1) < lastPatternSize) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (usingCheckDigit) {\n    int max=result.length() - 1;\n    int total=0;\n    for (int i=0; i < max; i++) {\n      total+=ALPHABET_STRING.indexOf(result.charAt(i));\n    }\n    if (result.charAt(max) != ALPHABET[total % 43]) {\n      throw ChecksumException.getChecksumInstance();\n    }\n    result.setLength(max);\n  }\n  if (result.length() == 0) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  String resultString;\n  if (extendedMode) {\n    resultString=decodeExtended(result);\n  }\n else {\n    resultString=result.toString();\n  }\n  float left=(float)(start[1] + start[0]) / 2.0f;\n  float right=(float)(nextStart + lastStart) / 2.0f;\n  return new Result(resultString,null,new ResultPoint[]{new ResultPoint(left,(float)rowNumber),new ResultPoint(right,(float)rowNumber)},BarcodeFormat.CODE_39);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 312,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2543,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 171,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException {\n  int[] counters=new int[9];\n  int[] start=findAsteriskPattern(row,counters);\n  int nextStart=row.getNextSet(start[1]);\n  int end=row.getSize();\n  StringBuilder result=new StringBuilder(20);\n  char decodedChar;\n  int lastStart;\n  do {\n    recordPattern(row,nextStart,counters);\n    int pattern=toNarrowWidePattern(counters);\n    if (pattern < 0) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodedChar=patternToChar(pattern);\n    result.append(decodedChar);\n    lastStart=nextStart;\n    for (    int counter : counters) {\n      nextStart+=counter;\n    }\n    nextStart=row.getNextSet(nextStart);\n  }\n while (decodedChar != '*');\n  result.setLength(result.length() - 1);\n  int lastPatternSize=0;\n  for (  int counter : counters) {\n    lastPatternSize+=counter;\n  }\n  int whiteSpaceAfterEnd=nextStart - lastStart - lastPatternSize;\n  if (nextStart != end && (whiteSpaceAfterEnd >> 1) < lastPatternSize) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (usingCheckDigit) {\n    int max=result.length() - 1;\n    int total=0;\n    for (int i=0; i < max; i++) {\n      total+=ALPHABET_STRING.indexOf(result.charAt(i));\n    }\n    if (result.charAt(max) != ALPHABET[total % 43]) {\n      throw ChecksumException.getChecksumInstance();\n    }\n    result.setLength(max);\n  }\n  if (result.length() == 0) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  String resultString;\n  if (extendedMode) {\n    resultString=decodeExtended(result);\n  }\n else {\n    resultString=result.toString();\n  }\n  float left=(float)(start[1] + start[0]) / 2.0f;\n  float right=(float)(nextStart + lastStart) / 2.0f;\n  return new Result(resultString,null,new ResultPoint[]{new ResultPoint(left,(float)rowNumber),new ResultPoint(right,(float)rowNumber)},BarcodeFormat.CODE_39);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int[] start=findAsteriskPattern(row,counters);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 100,
    "startColumnNumber" : 18,
    "endLineNumber" : 100,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}