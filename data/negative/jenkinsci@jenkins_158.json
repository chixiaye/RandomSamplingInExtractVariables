{
  "id" : 158,
  "expression" : "null",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "5b5040298f5fbf9d5ff7ea7fbfd34f7169e94d75",
  "filePath" : "cli/src/main/java/hudson/cli/PlainCLIProtocol.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 141,
      "startColumnNumber" : 50,
      "endLineNumber" : 141,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 141,
        "startColumnNumber" : 24,
        "endLineNumber" : 141,
        "endColumnNumber" : 58
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,x)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 141,
        "startColumnNumber" : 24,
        "endLineNumber" : 141,
        "endColumnNumber" : 59
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,x);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 140,
        "startColumnNumber" : 50,
        "endLineNumber" : 143,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  LOGGER.log(Level.WARNING,null,x);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 140,
        "startColumnNumber" : 22,
        "endLineNumber" : 143,
        "endColumnNumber" : 21
      },
      "nodeContext" : "catch (ProtocolException x) {\n  LOGGER.log(Level.WARNING,null,x);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 713,
        "startLineNumber" : 138,
        "startColumnNumber" : 20,
        "endLineNumber" : 150,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n}\n catch (ProtocolException x) {\n  LOGGER.log(Level.WARNING,null,x);\n}\n finally {\n  long actuallyRead=cis.getByteCount() - start;\n  long unread=framelen + 1 - actuallyRead;\n  if (unread > 0) {\n    LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n    IOUtils.skipFully(dis,unread);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 70,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 124,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.finest(\"reading frame\");\n  int framelen;\n  try {\n    framelen=dis.readInt();\n  }\n catch (  EOFException x) {\n    side.handleClose();\n    break;\n  }\n  if (framelen < 0) {\n    throw new IOException(\"corrupt stream: negative frame length\");\n  }\n  LOGGER.finest(\"read frame length \" + framelen);\n  long start=cis.getByteCount();\n  try {\n    side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n  }\n catch (  ProtocolException x) {\n    LOGGER.log(Level.WARNING,null,x);\n  }\n finally {\n    long actuallyRead=cis.getByteCount() - start;\n    long unread=framelen + 1 - actuallyRead;\n    if (unread > 0) {\n      LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n      IOUtils.skipFully(dis,unread);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1428,
        "startLineNumber" : 124,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (true) {\n  LOGGER.finest(\"reading frame\");\n  int framelen;\n  try {\n    framelen=dis.readInt();\n  }\n catch (  EOFException x) {\n    side.handleClose();\n    break;\n  }\n  if (framelen < 0) {\n    throw new IOException(\"corrupt stream: negative frame length\");\n  }\n  LOGGER.finest(\"read frame length \" + framelen);\n  long start=cis.getByteCount();\n  try {\n    side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n  }\n catch (  ProtocolException x) {\n    LOGGER.log(Level.WARNING,null,x);\n  }\n finally {\n    long actuallyRead=cis.getByteCount() - start;\n    long unread=framelen + 1 - actuallyRead;\n    if (unread > 0) {\n      LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n      IOUtils.skipFully(dis,unread);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 125,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1462,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long unread=framelen + 1 - actuallyRead;\n      if (unread > 0) {\n        LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n        IOUtils.skipFully(dis,unread);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long unread=framelen + 1 - actuallyRead;\n      if (unread > 0) {\n        LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n        IOUtils.skipFully(dis,unread);\n      }\n    }\n  }\n}\n catch (ClosedChannelException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (IOException x) {\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\ncatch (ReadPendingException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (RuntimeException x) {\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 203,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2097,
        "startLineNumber" : 122,
        "startColumnNumber" : 26,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2134,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 141,
        "startColumnNumber" : 24,
        "endLineNumber" : 141,
        "endColumnNumber" : 59
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,x);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 153,
      "startColumnNumber" : 39,
      "endLineNumber" : 153,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 153,
        "startColumnNumber" : 16,
        "endLineNumber" : 153,
        "endColumnNumber" : 47
      },
      "nodeContext" : "LOGGER.log(Level.FINE,null,x)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 153,
        "startColumnNumber" : 16,
        "endLineNumber" : 153,
        "endColumnNumber" : 48
      },
      "nodeContext" : "LOGGER.log(Level.FINE,null,x);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 152,
        "startColumnNumber" : 47,
        "endLineNumber" : 155,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 152,
        "startColumnNumber" : 14,
        "endLineNumber" : 155,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (ClosedChannelException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long unread=framelen + 1 - actuallyRead;\n      if (unread > 0) {\n        LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n        IOUtils.skipFully(dis,unread);\n      }\n    }\n  }\n}\n catch (ClosedChannelException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (IOException x) {\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\ncatch (ReadPendingException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (RuntimeException x) {\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 203,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2097,
        "startLineNumber" : 122,
        "startColumnNumber" : 26,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2134,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 153,
        "startColumnNumber" : 16,
        "endLineNumber" : 153,
        "endColumnNumber" : 48
      },
      "nodeContext" : "LOGGER.log(Level.FINE,null,x);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 156,
      "startColumnNumber" : 42,
      "endLineNumber" : 156,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 156,
        "startColumnNumber" : 16,
        "endLineNumber" : 156,
        "endColumnNumber" : 96
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 156,
        "startColumnNumber" : 16,
        "endLineNumber" : 156,
        "endColumnNumber" : 97
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 155,
        "startColumnNumber" : 36,
        "endLineNumber" : 157,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 155,
        "startColumnNumber" : 14,
        "endLineNumber" : 157,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (IOException x) {\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long unread=framelen + 1 - actuallyRead;\n      if (unread > 0) {\n        LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n        IOUtils.skipFully(dis,unread);\n      }\n    }\n  }\n}\n catch (ClosedChannelException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (IOException x) {\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\ncatch (ReadPendingException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (RuntimeException x) {\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 203,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2097,
        "startLineNumber" : 122,
        "startColumnNumber" : 26,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2134,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 156,
        "startColumnNumber" : 16,
        "endLineNumber" : 156,
        "endColumnNumber" : 97
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 159,
      "startColumnNumber" : 39,
      "endLineNumber" : 159,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 47
      },
      "nodeContext" : "LOGGER.log(Level.FINE,null,x)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 48
      },
      "nodeContext" : "LOGGER.log(Level.FINE,null,x);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 157,
        "startColumnNumber" : 45,
        "endLineNumber" : 161,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 157,
        "startColumnNumber" : 14,
        "endLineNumber" : 161,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (ReadPendingException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long unread=framelen + 1 - actuallyRead;\n      if (unread > 0) {\n        LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n        IOUtils.skipFully(dis,unread);\n      }\n    }\n  }\n}\n catch (ClosedChannelException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (IOException x) {\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\ncatch (ReadPendingException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (RuntimeException x) {\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 203,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2097,
        "startLineNumber" : 122,
        "startColumnNumber" : 26,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2134,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 48
      },
      "nodeContext" : "LOGGER.log(Level.FINE,null,x);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 162,
      "startColumnNumber" : 42,
      "endLineNumber" : 162,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 162,
        "startColumnNumber" : 16,
        "endLineNumber" : 162,
        "endColumnNumber" : 50
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,x)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 162,
        "startColumnNumber" : 16,
        "endLineNumber" : 162,
        "endColumnNumber" : 51
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,x);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 161,
        "startColumnNumber" : 41,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 161,
        "startColumnNumber" : 14,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (RuntimeException x) {\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long unread=framelen + 1 - actuallyRead;\n      if (unread > 0) {\n        LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n        IOUtils.skipFully(dis,unread);\n      }\n    }\n  }\n}\n catch (ClosedChannelException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (IOException x) {\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\ncatch (ReadPendingException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (RuntimeException x) {\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 203,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2097,
        "startLineNumber" : 122,
        "startColumnNumber" : 26,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2134,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long unread=framelen + 1 - actuallyRead;\n        if (unread > 0) {\n          LOGGER.warning(() -> \"Did not read \" + unread + \" bytes\");\n          IOUtils.skipFully(dis,unread);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 162,
        "startColumnNumber" : 16,
        "endLineNumber" : 162,
        "endColumnNumber" : 51
      },
      "nodeContext" : "LOGGER.log(Level.WARNING,null,x);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 141,
    "startColumnNumber" : 50,
    "endLineNumber" : 141,
    "endColumnNumber" : 54
  }, {
    "charLength" : 4,
    "startLineNumber" : 153,
    "startColumnNumber" : 39,
    "endLineNumber" : 153,
    "endColumnNumber" : 43
  }, {
    "charLength" : 4,
    "startLineNumber" : 156,
    "startColumnNumber" : 42,
    "endLineNumber" : 156,
    "endColumnNumber" : 46
  }, {
    "charLength" : 4,
    "startLineNumber" : 159,
    "startColumnNumber" : 39,
    "endLineNumber" : 159,
    "endColumnNumber" : 43
  }, {
    "charLength" : 4,
    "startLineNumber" : 162,
    "startColumnNumber" : 42,
    "endLineNumber" : 162,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}