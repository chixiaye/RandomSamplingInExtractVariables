{
  "id" : 178,
  "expression" : "analyzer",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/automata/ParserATNFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "analyzer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 126,
      "startColumnNumber" : 8,
      "endLineNumber" : 126,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 47
      },
      "nodeContext" : "analyzer.LOOK(startState,pair.c,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 92
      },
      "nodeContext" : "analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)) {\n  g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL,g.fileName,((GrammarAST)pair.a.ast.getChild(0)).getToken(),pair.a.name);\n  continue optionalCheck;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 118,
        "startColumnNumber" : 61,
        "endLineNumber" : 130,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ATNState startState=pair.b.transition(i).target;\n  if (startState == pair.c) {\n    bypassCount++;\n    continue;\n  }\n  LL1Analyzer analyzer=new LL1Analyzer(atn);\n  if (analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)) {\n    g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL,g.fileName,((GrammarAST)pair.a.ast.getChild(0)).getToken(),pair.a.name);\n    continue optionalCheck;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 118,
        "startColumnNumber" : 3,
        "endLineNumber" : 130,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < pair.b.getNumberOfTransitions(); i++) {\n  ATNState startState=pair.b.transition(i).target;\n  if (startState == pair.c) {\n    bypassCount++;\n    continue;\n  }\n  LL1Analyzer analyzer=new LL1Analyzer(atn);\n  if (analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)) {\n    g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL,g.fileName,((GrammarAST)pair.a.ast.getChild(0)).getToken(),pair.a.name);\n    continue optionalCheck;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 107,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 116,
        "startColumnNumber" : 77,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int bypassCount=0;\n  for (int i=0; i < pair.b.getNumberOfTransitions(); i++) {\n    ATNState startState=pair.b.transition(i).target;\n    if (startState == pair.c) {\n      bypassCount++;\n      continue;\n    }\n    LL1Analyzer analyzer=new LL1Analyzer(atn);\n    if (analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)) {\n      g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL,g.fileName,((GrammarAST)pair.a.ast.getChild(0)).getToken(),pair.a.name);\n      continue optionalCheck;\n    }\n  }\n  if (bypassCount != 1) {\n    throw new UnsupportedOperationException(\"Expected optional block with exactly 1 bypass alternative.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 775,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Triple<Rule,ATNState,ATNState> pair : preventEpsilonOptionalBlocks) {\n  int bypassCount=0;\n  for (int i=0; i < pair.b.getNumberOfTransitions(); i++) {\n    ATNState startState=pair.b.transition(i).target;\n    if (startState == pair.c) {\n      bypassCount++;\n      continue;\n    }\n    LL1Analyzer analyzer=new LL1Analyzer(atn);\n    if (analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)) {\n      g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL,g.fileName,((GrammarAST)pair.a.ast.getChild(0)).getToken(),pair.a.name);\n      continue optionalCheck;\n    }\n  }\n  if (bypassCount != 1) {\n    throw new UnsupportedOperationException(\"Expected optional block with exactly 1 bypass alternative.\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 136,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "optionalCheck: for (Triple<Rule,ATNState,ATNState> pair : preventEpsilonOptionalBlocks) {\n  int bypassCount=0;\n  for (int i=0; i < pair.b.getNumberOfTransitions(); i++) {\n    ATNState startState=pair.b.transition(i).target;\n    if (startState == pair.c) {\n      bypassCount++;\n      continue;\n    }\n    LL1Analyzer analyzer=new LL1Analyzer(atn);\n    if (analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)) {\n      g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL,g.fileName,((GrammarAST)pair.a.ast.getChild(0)).getToken(),pair.a.name);\n      continue optionalCheck;\n    }\n  }\n  if (bypassCount != 1) {\n    throw new UnsupportedOperationException(\"Expected optional block with exactly 1 bypass alternative.\");\n  }\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 138,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 107,
        "startColumnNumber" : 24,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  _createATN(g.rules.values());\n  assert atn.maxTokenType == g.getMaxTokenType();\n  addRuleFollowLinks();\n  addEOFTransitionToStartRules();\n  ATNOptimizer.optimize(g,atn);\n  checkEpsilonClosure();\n  optionalCheck:   for (  Triple<Rule,ATNState,ATNState> pair : preventEpsilonOptionalBlocks) {\n    int bypassCount=0;\n    for (int i=0; i < pair.b.getNumberOfTransitions(); i++) {\n      ATNState startState=pair.b.transition(i).target;\n      if (startState == pair.c) {\n        bypassCount++;\n        continue;\n      }\n      LL1Analyzer analyzer=new LL1Analyzer(atn);\n      if (analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)) {\n        g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL,g.fileName,((GrammarAST)pair.a.ast.getChild(0)).getToken(),pair.a.name);\n        continue optionalCheck;\n      }\n    }\n    if (bypassCount != 1) {\n      throw new UnsupportedOperationException(\"Expected optional block with exactly 1 bypass alternative.\");\n    }\n  }\n  return atn;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1066,
        "startLineNumber" : 106,
        "startColumnNumber" : 1,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public ATN createATN(){\n  _createATN(g.rules.values());\n  assert atn.maxTokenType == g.getMaxTokenType();\n  addRuleFollowLinks();\n  addEOFTransitionToStartRules();\n  ATNOptimizer.optimize(g,atn);\n  checkEpsilonClosure();\n  optionalCheck:   for (  Triple<Rule,ATNState,ATNState> pair : preventEpsilonOptionalBlocks) {\n    int bypassCount=0;\n    for (int i=0; i < pair.b.getNumberOfTransitions(); i++) {\n      ATNState startState=pair.b.transition(i).target;\n      if (startState == pair.c) {\n        bypassCount++;\n        continue;\n      }\n      LL1Analyzer analyzer=new LL1Analyzer(atn);\n      if (analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)) {\n        g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL,g.fileName,((GrammarAST)pair.a.ast.getChild(0)).getToken(),pair.a.name);\n        continue optionalCheck;\n      }\n    }\n    if (bypassCount != 1) {\n      throw new UnsupportedOperationException(\"Expected optional block with exactly 1 bypass alternative.\");\n    }\n  }\n  return atn;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 92
      },
      "nodeContext" : "analyzer.LOOK(startState,pair.c,null).contains(org.antlr.v4.runtime.Token.EPSILON)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.atn.LL1Analyzer"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 126,
    "startColumnNumber" : 8,
    "endLineNumber" : 126,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ ]
}