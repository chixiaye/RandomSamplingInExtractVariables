{
  "id" : 291,
  "expression" : "curTime - lastCheckTime",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/runtime/jobs/KeepAliveListenerJob.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "curTime - lastCheckTime",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 119,
      "startColumnNumber" : 13,
      "endLineNumber" : 119,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 37
      },
      "nodeContext" : "(curTime - lastCheckTime)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(curTime - lastCheckTime) / 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 64
      },
      "nodeContext" : "(curTime - lastCheckTime) / 1000 > keepAliveInterval",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 656,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((curTime - lastCheckTime) / 1000 > keepAliveInterval) {\n  final KeepAlivePingJob pingJob=new KeepAlivePingJob(dataSource);\n  pingJob.addJobChangeListener(new JobChangeAdapter(){\n    @Override public void done(    IJobChangeEvent event){\nsynchronized (KeepAliveListenerJob.this) {\n        checkCache.put(dsId,System.currentTimeMillis());\n        pingCache.remove(dsId);\n      }\n    }\n  }\n);\nsynchronized (this) {\n    pingCache.add(dsId);\n  }\n  pingJob.schedule();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1888,
        "startLineNumber" : 84,
        "startColumnNumber" : 89,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!dataSourceDescriptor.isConnected()) {\n    return;\n  }\n  final int keepAliveInterval=dataSourceDescriptor.getConnectionConfiguration().getKeepAliveInterval();\n  if (keepAliveInterval <= 0) {\n    return;\n  }\n  final String dsId=dataSourceDescriptor.getId();\nsynchronized (this) {\n    if (pingCache.contains(dsId)) {\n      return;\n    }\n  }\n  final DBPDataSource dataSource=dataSourceDescriptor.getDataSource();\n  if (dataSource == null) {\n    return;\n  }\n  Long lastCheckTime;\nsynchronized (this) {\n    lastCheckTime=checkCache.get(dsId);\n  }\n  if (lastCheckTime == null) {\n    final Date connectTime=dataSourceDescriptor.getConnectTime();\n    if (connectTime != null) {\n      lastCheckTime=connectTime.getTime();\n    }\n  }\n  if (lastCheckTime == null) {\n    log.debug(\"Can't determine last check time for \" + dsId);\n    return;\n  }\n  long curTime=System.currentTimeMillis();\n  if ((curTime - lastCheckTime) / 1000 > keepAliveInterval) {\n    final KeepAlivePingJob pingJob=new KeepAlivePingJob(dataSource);\n    pingJob.addJobChangeListener(new JobChangeAdapter(){\n      @Override public void done(      IJobChangeEvent event){\nsynchronized (KeepAliveListenerJob.this) {\n          checkCache.put(dsId,System.currentTimeMillis());\n          pingCache.remove(dsId);\n        }\n      }\n    }\n);\nsynchronized (this) {\n      pingCache.add(dsId);\n    }\n    pingJob.schedule();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1973,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void checkDataSourceAlive(final DBPDataSourceContainer dataSourceDescriptor){\n  if (!dataSourceDescriptor.isConnected()) {\n    return;\n  }\n  final int keepAliveInterval=dataSourceDescriptor.getConnectionConfiguration().getKeepAliveInterval();\n  if (keepAliveInterval <= 0) {\n    return;\n  }\n  final String dsId=dataSourceDescriptor.getId();\nsynchronized (this) {\n    if (pingCache.contains(dsId)) {\n      return;\n    }\n  }\n  final DBPDataSource dataSource=dataSourceDescriptor.getDataSource();\n  if (dataSource == null) {\n    return;\n  }\n  Long lastCheckTime;\nsynchronized (this) {\n    lastCheckTime=checkCache.get(dsId);\n  }\n  if (lastCheckTime == null) {\n    final Date connectTime=dataSourceDescriptor.getConnectTime();\n    if (connectTime != null) {\n      lastCheckTime=connectTime.getTime();\n    }\n  }\n  if (lastCheckTime == null) {\n    log.debug(\"Can't determine last check time for \" + dsId);\n    return;\n  }\n  long curTime=System.currentTimeMillis();\n  if ((curTime - lastCheckTime) / 1000 > keepAliveInterval) {\n    final KeepAlivePingJob pingJob=new KeepAlivePingJob(dataSource);\n    pingJob.addJobChangeListener(new JobChangeAdapter(){\n      @Override public void done(      IJobChangeEvent event){\nsynchronized (KeepAliveListenerJob.this) {\n          checkCache.put(dsId,System.currentTimeMillis());\n          pingCache.remove(dsId);\n        }\n      }\n    }\n);\nsynchronized (this) {\n      pingCache.add(dsId);\n    }\n    pingJob.schedule();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 195,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 64
      },
      "nodeContext" : "(curTime - lastCheckTime) / 1000 > keepAliveInterval",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 119,
    "startColumnNumber" : 13,
    "endLineNumber" : 119,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}