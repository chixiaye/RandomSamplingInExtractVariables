{
  "id" : 199,
  "expression" : "ref",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator/src/test/java/org/openapitools/codegen/validations/oas/OpenApiOperationValidationsTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ref",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 43,
      "startColumnNumber" : 35,
      "endLineNumber" : 43,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 39
      },
      "nodeContext" : "StringUtils.isNotEmpty(ref)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 58
      },
      "nodeContext" : "StringUtils.isNotEmpty(ref) || content != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isNotEmpty(ref) || content != null) {\n  body.$ref(ref);\n  body.content(content);\n  op.setRequestBody(body);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 36,
        "startColumnNumber" : 145,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RuleConfiguration config=new RuleConfiguration();\n  config.setEnableRecommendations(true);\n  OpenApiOperationValidations validator=new OpenApiOperationValidations(config);\n  Operation op=new Operation().operationId(operationId);\n  RequestBody body=new RequestBody();\n  if (StringUtils.isNotEmpty(ref) || content != null) {\n    body.$ref(ref);\n    body.content(content);\n    op.setRequestBody(body);\n  }\n  ValidationResult result=validator.validate(new OperationWrapper(null,op,method));\n  Assert.assertNotNull(result.getWarnings());\n  List<Invalid> warnings=result.getWarnings().stream().filter(invalid -> \"API GET/HEAD defined with request body\".equals(invalid.getRule().getDescription())).collect(Collectors.toList());\n  Assert.assertNotNull(warnings);\n  if (shouldTriggerFailure) {\n    Assert.assertEquals(warnings.size(),1,\"Expected warnings to include recommendation.\");\n  }\n else {\n    Assert.assertEquals(warnings.size(),0,\"Expected warnings not to include recommendation.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1375,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"getOrHeadWithBodyExpectations\") public void testGetOrHeadWithBody(PathItem.HttpMethod method,String operationId,String ref,Content content,boolean shouldTriggerFailure){\n  RuleConfiguration config=new RuleConfiguration();\n  config.setEnableRecommendations(true);\n  OpenApiOperationValidations validator=new OpenApiOperationValidations(config);\n  Operation op=new Operation().operationId(operationId);\n  RequestBody body=new RequestBody();\n  if (StringUtils.isNotEmpty(ref) || content != null) {\n    body.$ref(ref);\n    body.content(content);\n    op.setRequestBody(body);\n  }\n  ValidationResult result=validator.validate(new OperationWrapper(null,op,method));\n  Assert.assertNotNull(result.getWarnings());\n  List<Invalid> warnings=result.getWarnings().stream().filter(invalid -> \"API GET/HEAD defined with request body\".equals(invalid.getRule().getDescription())).collect(Collectors.toList());\n  Assert.assertNotNull(warnings);\n  if (shouldTriggerFailure) {\n    Assert.assertEquals(warnings.size(),1,\"Expected warnings to include recommendation.\");\n  }\n else {\n    Assert.assertEquals(warnings.size(),0,\"Expected warnings not to include recommendation.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 58
      },
      "nodeContext" : "StringUtils.isNotEmpty(ref) || content != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "ref",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 44,
      "startColumnNumber" : 22,
      "endLineNumber" : 44,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 26
      },
      "nodeContext" : "body.$ref(ref)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 27
      },
      "nodeContext" : "body.$ref(ref);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 43,
        "startColumnNumber" : 60,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  body.$ref(ref);\n  body.content(content);\n  op.setRequestBody(body);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isNotEmpty(ref) || content != null) {\n  body.$ref(ref);\n  body.content(content);\n  op.setRequestBody(body);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 36,
        "startColumnNumber" : 145,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RuleConfiguration config=new RuleConfiguration();\n  config.setEnableRecommendations(true);\n  OpenApiOperationValidations validator=new OpenApiOperationValidations(config);\n  Operation op=new Operation().operationId(operationId);\n  RequestBody body=new RequestBody();\n  if (StringUtils.isNotEmpty(ref) || content != null) {\n    body.$ref(ref);\n    body.content(content);\n    op.setRequestBody(body);\n  }\n  ValidationResult result=validator.validate(new OperationWrapper(null,op,method));\n  Assert.assertNotNull(result.getWarnings());\n  List<Invalid> warnings=result.getWarnings().stream().filter(invalid -> \"API GET/HEAD defined with request body\".equals(invalid.getRule().getDescription())).collect(Collectors.toList());\n  Assert.assertNotNull(warnings);\n  if (shouldTriggerFailure) {\n    Assert.assertEquals(warnings.size(),1,\"Expected warnings to include recommendation.\");\n  }\n else {\n    Assert.assertEquals(warnings.size(),0,\"Expected warnings not to include recommendation.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1375,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"getOrHeadWithBodyExpectations\") public void testGetOrHeadWithBody(PathItem.HttpMethod method,String operationId,String ref,Content content,boolean shouldTriggerFailure){\n  RuleConfiguration config=new RuleConfiguration();\n  config.setEnableRecommendations(true);\n  OpenApiOperationValidations validator=new OpenApiOperationValidations(config);\n  Operation op=new Operation().operationId(operationId);\n  RequestBody body=new RequestBody();\n  if (StringUtils.isNotEmpty(ref) || content != null) {\n    body.$ref(ref);\n    body.content(content);\n    op.setRequestBody(body);\n  }\n  ValidationResult result=validator.validate(new OperationWrapper(null,op,method));\n  Assert.assertNotNull(result.getWarnings());\n  List<Invalid> warnings=result.getWarnings().stream().filter(invalid -> \"API GET/HEAD defined with request body\".equals(invalid.getRule().getDescription())).collect(Collectors.toList());\n  Assert.assertNotNull(warnings);\n  if (shouldTriggerFailure) {\n    Assert.assertEquals(warnings.size(),1,\"Expected warnings to include recommendation.\");\n  }\n else {\n    Assert.assertEquals(warnings.size(),0,\"Expected warnings not to include recommendation.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 27
      },
      "nodeContext" : "body.$ref(ref);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 43,
    "startColumnNumber" : 35,
    "endLineNumber" : 43,
    "endColumnNumber" : 38
  }, {
    "charLength" : 3,
    "startLineNumber" : 44,
    "startColumnNumber" : 22,
    "endLineNumber" : 44,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}