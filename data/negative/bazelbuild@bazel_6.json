{
  "id" : 6,
  "expression" : "wasInterrupted.get()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/concurrent/AbstractQueueVisitorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "wasInterrupted.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 401,
      "startColumnNumber" : 15,
      "endLineNumber" : 401,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 401,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertThat(wasInterrupted.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 401,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(wasInterrupted.get()).isTrue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 401,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertThat(wasInterrupted.get()).isTrue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 367,
        "startColumnNumber" : 64,
        "endLineNumber" : 404,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ThreadPoolExecutor executor=new ThreadPoolExecutor(3,3,0,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n  final AbstractQueueVisitor visitor=createQueueVisitorWithConstantErrorClassification(executor,ErrorClassification.CRITICAL);\n  final CountDownLatch latch1=new CountDownLatch(1);\n  final AtomicBoolean wasInterrupted=new AtomicBoolean(false);\n  Runnable r1=new Runnable(){\n    @Override public void run(){\n      latch1.countDown();\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException e) {\n        wasInterrupted.set(true);\n      }\n    }\n  }\n;\n  visitor.execute(r1);\n  latch1.await();\n  visitor.execute(throwingRunnable());\n  CountDownLatch exnLatch=visitor.getExceptionLatchForTestingOnly();\n  Exception e=assertThrows(Exception.class,() -> visitor.awaitQuiescence(true));\n  assertThat(e).isSameInstanceAs(THROWABLE);\n  assertThat(wasInterrupted.get()).isTrue();\n  assertThat(executor.isShutdown()).isTrue();\n  assertThat(exnLatch.await(0,TimeUnit.MILLISECONDS)).isTrue();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1468,
        "startLineNumber" : 366,
        "startColumnNumber" : 2,
        "endLineNumber" : 404,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void jobIsInterruptedWhenOtherFails() throws Exception {\n  ThreadPoolExecutor executor=new ThreadPoolExecutor(3,3,0,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n  final AbstractQueueVisitor visitor=createQueueVisitorWithConstantErrorClassification(executor,ErrorClassification.CRITICAL);\n  final CountDownLatch latch1=new CountDownLatch(1);\n  final AtomicBoolean wasInterrupted=new AtomicBoolean(false);\n  Runnable r1=new Runnable(){\n    @Override public void run(){\n      latch1.countDown();\n      try {\n        Thread.sleep(1000);\n      }\n catch (      InterruptedException e) {\n        wasInterrupted.set(true);\n      }\n    }\n  }\n;\n  visitor.execute(r1);\n  latch1.await();\n  visitor.execute(throwingRunnable());\n  CountDownLatch exnLatch=visitor.getExceptionLatchForTestingOnly();\n  Exception e=assertThrows(Exception.class,() -> visitor.awaitQuiescence(true));\n  assertThat(e).isSameInstanceAs(THROWABLE);\n  assertThat(wasInterrupted.get()).isTrue();\n  assertThat(executor.isShutdown()).isTrue();\n  assertThat(exnLatch.await(0,TimeUnit.MILLISECONDS)).isTrue();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 401,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertThat(wasInterrupted.get()).isTrue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 401,
    "startColumnNumber" : 15,
    "endLineNumber" : 401,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}