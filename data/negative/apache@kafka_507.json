{
  "id" : 507,
  "expression" : "globalResult != null",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/query/StateQueryResult.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "globalResult != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 100,
      "startColumnNumber" : 12,
      "endLineNumber" : 100,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (globalResult != null) {\n  return globalResult.getPosition();\n}\n else {\n  final Position position=Position.emptyPosition();\n  for (  final QueryResult<R> r : partitionResults.values()) {\n    position.merge(r.getPosition());\n  }\n  return position;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (globalResult != null) {\n    return globalResult.getPosition();\n  }\n else {\n    final Position position=Position.emptyPosition();\n    for (    final QueryResult<R> r : partitionResults.values()) {\n      position.merge(r.getPosition());\n    }\n    return position;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The position of the state store at the moment it executed the query. In conjunction with {@link StateQueryRequest#withPositionBound}, this can be used to achieve a good balance between consistency and availability in which repeated queries are guaranteed to advance in time while allowing reads to be served from any replica that is caught up to that caller's prior observations.\n */\npublic Position getPosition(){\n  if (globalResult != null) {\n    return globalResult.getPosition();\n  }\n else {\n    final Position position=Position.emptyPosition();\n    for (    final QueryResult<R> r : partitionResults.values()) {\n      position.merge(r.getPosition());\n    }\n    return position;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 48,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (globalResult != null) {\n  return globalResult.getPosition();\n}\n else {\n  final Position position=Position.emptyPosition();\n  for (  final QueryResult<R> r : partitionResults.values()) {\n    position.merge(r.getPosition());\n  }\n  return position;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 100,
    "startColumnNumber" : 12,
    "endLineNumber" : 100,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}