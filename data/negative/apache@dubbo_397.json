{
  "id" : 397,
  "expression" : "overrider.getName()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/utils/MethodUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "overrider.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 337,
      "startColumnNumber" : 28,
      "endLineNumber" : 337,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 337,
        "startColumnNumber" : 13,
        "endLineNumber" : 337,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Objects.equals(overrider.getName(),overridden.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 337,
        "startColumnNumber" : 12,
        "endLineNumber" : 337,
        "endColumnNumber" : 70
      },
      "nodeContext" : "!Objects.equals(overrider.getName(),overridden.getName())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 337,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!Objects.equals(overrider.getName(),overridden.getName())) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2004,
        "startLineNumber" : 305,
        "startColumnNumber" : 66,
        "endLineNumber" : 361,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (overrider == null || overridden == null) {\n    return false;\n  }\n  if (Objects.equals(overrider,overridden)) {\n    return false;\n  }\n  if (isStatic(overrider) || isStatic(overridden)) {\n    return false;\n  }\n  if (isPrivate(overrider) || isPrivate(overridden)) {\n    return false;\n  }\n  if (!overridden.getDeclaringClass().isAssignableFrom(overrider.getDeclaringClass())) {\n    return false;\n  }\n  if (overrider.isDefault()) {\n    return false;\n  }\n  if (!Objects.equals(overrider.getName(),overridden.getName())) {\n    return false;\n  }\n  if (!Objects.equals(overrider.getParameterCount(),overridden.getParameterCount())) {\n    return false;\n  }\n  for (int i=0; i < overrider.getParameterCount(); i++) {\n    if (!Objects.equals(overridden.getParameterTypes()[i],overrider.getParameterTypes()[i])) {\n      return false;\n    }\n  }\n  if (!overridden.getReturnType().isAssignableFrom(overrider.getReturnType())) {\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2585,
        "startLineNumber" : 293,
        "startColumnNumber" : 4,
        "endLineNumber" : 361,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests whether one method, as a member of a given type, overrides another method.\n * @param overrider  the first method, possible overrider\n * @param overridden the second method, possibly being overridden\n * @return {@code true} if and only if the first method overridesthe second\n * @jls 8.4.8 Inheritance, Overriding, and Hiding\n * @jls 9.4.1 Inheritance and Overriding\n * @see Elements#overrides(ExecutableElement,ExecutableElement,TypeElement)\n */\nstatic boolean overrides(Method overrider,Method overridden){\n  if (overrider == null || overridden == null) {\n    return false;\n  }\n  if (Objects.equals(overrider,overridden)) {\n    return false;\n  }\n  if (isStatic(overrider) || isStatic(overridden)) {\n    return false;\n  }\n  if (isPrivate(overrider) || isPrivate(overridden)) {\n    return false;\n  }\n  if (!overridden.getDeclaringClass().isAssignableFrom(overrider.getDeclaringClass())) {\n    return false;\n  }\n  if (overrider.isDefault()) {\n    return false;\n  }\n  if (!Objects.equals(overrider.getName(),overridden.getName())) {\n    return false;\n  }\n  if (!Objects.equals(overrider.getParameterCount(),overridden.getParameterCount())) {\n    return false;\n  }\n  for (int i=0; i < overrider.getParameterCount(); i++) {\n    if (!Objects.equals(overridden.getParameterTypes()[i],overrider.getParameterTypes()[i])) {\n      return false;\n    }\n  }\n  if (!overridden.getReturnType().isAssignableFrom(overrider.getReturnType())) {\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 337,
        "startColumnNumber" : 12,
        "endLineNumber" : 337,
        "endColumnNumber" : 70
      },
      "nodeContext" : "!Objects.equals(overrider.getName(),overridden.getName())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 337,
    "startColumnNumber" : 28,
    "endLineNumber" : 337,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}