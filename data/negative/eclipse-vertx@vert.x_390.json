{
  "id" : 390,
  "expression" : "addr[2]",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "addr[2]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 200,
      "startColumnNumber" : 24,
      "endLineNumber" : 200,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 200,
        "startColumnNumber" : 24,
        "endLineNumber" : 200,
        "endColumnNumber" : 37
      },
      "nodeContext" : "addr[2] & 0xff",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 38
      },
      "nodeContext" : "reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 50
      },
      "nodeContext" : "reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 201,
        "endColumnNumber" : 38
      },
      "nodeContext" : "reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 201,
        "endColumnNumber" : 50
      },
      "nodeContext" : "reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 38
      },
      "nodeContext" : "reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\").append(addr[0] & 0xff)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 39
      },
      "nodeContext" : "reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\").append(addr[0] & 0xff);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 39,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 197,
        "startColumnNumber" : 47,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\").append(addr[0] & 0xff);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 197,
        "startColumnNumber" : 6,
        "endLineNumber" : 213,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (inetAddress instanceof Inet4Address) {\n  reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\").append(addr[0] & 0xff);\n}\n else {\n  for (int i=0; i < 16; i++) {\n    reverseName.append(HEX_TABLE[(addr[15 - i] & 0xf)]);\n    reverseName.append(\".\");\n    reverseName.append(HEX_TABLE[(addr[15 - i] >> 4) & 0xf]);\n    if (i != 15) {\n      reverseName.append(\".\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1152,
        "startLineNumber" : 192,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InetAddress inetAddress=InetAddress.getByName(address);\n  byte[] addr=inetAddress.getAddress();\n  StringBuilder reverseName=new StringBuilder(64);\n  if (inetAddress instanceof Inet4Address) {\n    reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\").append(addr[0] & 0xff);\n  }\n else {\n    for (int i=0; i < 16; i++) {\n      reverseName.append(HEX_TABLE[(addr[15 - i] & 0xf)]);\n      reverseName.append(\".\");\n      reverseName.append(HEX_TABLE[(addr[15 - i] >> 4) & 0xf]);\n      if (i != 15) {\n        reverseName.append(\".\");\n      }\n    }\n  }\n  reverseName.append(\".in-addr.arpa\");\n  return resolvePTR(reverseName.toString(),ar -> {\n    if (ar.failed()) {\n      handler.handle(Future.failedFuture(ar.cause()));\n    }\n else {\n      String result=ar.result();\n      handler.handle(Future.succeededFuture(result));\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 192,
        "startColumnNumber" : 4,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  InetAddress inetAddress=InetAddress.getByName(address);\n  byte[] addr=inetAddress.getAddress();\n  StringBuilder reverseName=new StringBuilder(64);\n  if (inetAddress instanceof Inet4Address) {\n    reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\").append(addr[0] & 0xff);\n  }\n else {\n    for (int i=0; i < 16; i++) {\n      reverseName.append(HEX_TABLE[(addr[15 - i] & 0xf)]);\n      reverseName.append(\".\");\n      reverseName.append(HEX_TABLE[(addr[15 - i] >> 4) & 0xf]);\n      if (i != 15) {\n        reverseName.append(\".\");\n      }\n    }\n  }\n  reverseName.append(\".in-addr.arpa\");\n  return resolvePTR(reverseName.toString(),ar -> {\n    if (ar.failed()) {\n      handler.handle(Future.failedFuture(ar.cause()));\n    }\n else {\n      String result=ar.result();\n      handler.handle(Future.succeededFuture(result));\n    }\n  }\n);\n}\n catch (UnknownHostException e) {\n  actualCtx.runOnContext((v) -> handler.handle(Future.failedFuture(e)));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 199,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 188,
        "startColumnNumber" : 87,
        "endLineNumber" : 230,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    InetAddress inetAddress=InetAddress.getByName(address);\n    byte[] addr=inetAddress.getAddress();\n    StringBuilder reverseName=new StringBuilder(64);\n    if (inetAddress instanceof Inet4Address) {\n      reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\").append(addr[0] & 0xff);\n    }\n else {\n      for (int i=0; i < 16; i++) {\n        reverseName.append(HEX_TABLE[(addr[15 - i] & 0xf)]);\n        reverseName.append(\".\");\n        reverseName.append(HEX_TABLE[(addr[15 - i] >> 4) & 0xf]);\n        if (i != 15) {\n          reverseName.append(\".\");\n        }\n      }\n    }\n    reverseName.append(\".in-addr.arpa\");\n    return resolvePTR(reverseName.toString(),ar -> {\n      if (ar.failed()) {\n        handler.handle(Future.failedFuture(ar.cause()));\n      }\n else {\n        String result=ar.result();\n        handler.handle(Future.succeededFuture(result));\n      }\n    }\n);\n  }\n catch (  UnknownHostException e) {\n    actualCtx.runOnContext((v) -> handler.handle(Future.failedFuture(e)));\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1777,
        "startLineNumber" : 187,
        "startColumnNumber" : 2,
        "endLineNumber" : 230,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public DnsClient reverseLookup(String address,Handler<AsyncResult<String>> handler){\n  try {\n    InetAddress inetAddress=InetAddress.getByName(address);\n    byte[] addr=inetAddress.getAddress();\n    StringBuilder reverseName=new StringBuilder(64);\n    if (inetAddress instanceof Inet4Address) {\n      reverseName.append(addr[3] & 0xff).append(\".\").append(addr[2] & 0xff).append(\".\").append(addr[1] & 0xff).append(\".\").append(addr[0] & 0xff);\n    }\n else {\n      for (int i=0; i < 16; i++) {\n        reverseName.append(HEX_TABLE[(addr[15 - i] & 0xf)]);\n        reverseName.append(\".\");\n        reverseName.append(HEX_TABLE[(addr[15 - i] >> 4) & 0xf]);\n        if (i != 15) {\n          reverseName.append(\".\");\n        }\n      }\n    }\n    reverseName.append(\".in-addr.arpa\");\n    return resolvePTR(reverseName.toString(),ar -> {\n      if (ar.failed()) {\n        handler.handle(Future.failedFuture(ar.cause()));\n      }\n else {\n        String result=ar.result();\n        handler.handle(Future.succeededFuture(result));\n      }\n    }\n);\n  }\n catch (  UnknownHostException e) {\n    actualCtx.runOnContext((v) -> handler.handle(Future.failedFuture(e)));\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 223,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 200,
        "startColumnNumber" : 24,
        "endLineNumber" : 200,
        "endColumnNumber" : 37
      },
      "nodeContext" : "addr[2] & 0xff",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "byte"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 200,
    "startColumnNumber" : 24,
    "endLineNumber" : 200,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}