{
  "id" : 353,
  "expression" : "placeholder * 10",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/TextFormatter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "placeholder * 10",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 79,
      "startColumnNumber" : 19,
      "endLineNumber" : 79,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 79,
        "startColumnNumber" : 19,
        "endLineNumber" : 79,
        "endColumnNumber" : 48
      },
      "nodeContext" : "placeholder * 10 + (ch - '0')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 79,
        "startColumnNumber" : 5,
        "endLineNumber" : 79,
        "endColumnNumber" : 48
      },
      "nodeContext" : "placeholder=placeholder * 10 + (ch - '0')",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 79,
        "startColumnNumber" : 5,
        "endLineNumber" : 79,
        "endColumnNumber" : 49
      },
      "nodeContext" : "placeholder=placeholder * 10 + (ch - '0');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 76,
        "startColumnNumber" : 11,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ch < '0' || ch > '9')   throw new IllegalArgumentException(\"Unexpected '\" + ch + \"' while parsing argument index\");\n  placeholder=placeholder * 10 + (ch - '0');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 699,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (ch == '}') {\n  if (placeholder >= args.length)   throw new IllegalArgumentException(\"Argument index out of bounds: \" + placeholder);\n  if (pattern.charAt(i - 1) == '{')   throw new IllegalArgumentException(\"Missing argument index after a left curly brace\");\n  if (args[placeholder] == null)   buffer.append(\"null\");\n else   buffer.append(args[placeholder].toString());\n  placeholder=-1;\n}\n else {\n  if (ch < '0' || ch > '9')   throw new IllegalArgumentException(\"Unexpected '\" + ch + \"' while parsing argument index\");\n  placeholder=placeholder * 10 + (ch - '0');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (ch == '}') {\n    if (placeholder >= args.length)     throw new IllegalArgumentException(\"Argument index out of bounds: \" + placeholder);\n    if (pattern.charAt(i - 1) == '{')     throw new IllegalArgumentException(\"Missing argument index after a left curly brace\");\n    if (args[placeholder] == null)     buffer.append(\"null\");\n else     buffer.append(args[placeholder].toString());\n    placeholder=-1;\n  }\n else {\n    if (ch < '0' || ch > '9')     throw new IllegalArgumentException(\"Unexpected '\" + ch + \"' while parsing argument index\");\n    placeholder=placeholder * 10 + (ch - '0');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 53,
        "startColumnNumber" : 3,
        "endLineNumber" : 81,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (placeholder < 0) {\n  if (ch == '{') {\n    changed=true;\n    if (i + 1 < patternLength && pattern.charAt(i + 1) == '{') {\n      buffer.append(ch);\n      ++i;\n    }\n else {\n      placeholder=0;\n    }\n  }\n else {\n    buffer.append(ch);\n  }\n}\n else {\n  if (ch == '}') {\n    if (placeholder >= args.length)     throw new IllegalArgumentException(\"Argument index out of bounds: \" + placeholder);\n    if (pattern.charAt(i - 1) == '{')     throw new IllegalArgumentException(\"Missing argument index after a left curly brace\");\n    if (args[placeholder] == null)     buffer.append(\"null\");\n else     buffer.append(args[placeholder].toString());\n    placeholder=-1;\n  }\n else {\n    if (ch < '0' || ch > '9')     throw new IllegalArgumentException(\"Unexpected '\" + ch + \"' while parsing argument index\");\n    placeholder=placeholder * 10 + (ch - '0');\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 51,
        "startColumnNumber" : 42,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  char ch=pattern.charAt(i);\n  if (placeholder < 0) {\n    if (ch == '{') {\n      changed=true;\n      if (i + 1 < patternLength && pattern.charAt(i + 1) == '{') {\n        buffer.append(ch);\n        ++i;\n      }\n else {\n        placeholder=0;\n      }\n    }\n else {\n      buffer.append(ch);\n    }\n  }\n else {\n    if (ch == '}') {\n      if (placeholder >= args.length)       throw new IllegalArgumentException(\"Argument index out of bounds: \" + placeholder);\n      if (pattern.charAt(i - 1) == '{')       throw new IllegalArgumentException(\"Missing argument index after a left curly brace\");\n      if (args[placeholder] == null)       buffer.append(\"null\");\n else       buffer.append(args[placeholder].toString());\n      placeholder=-1;\n    }\n else {\n      if (ch < '0' || ch > '9')       throw new IllegalArgumentException(\"Unexpected '\" + ch + \"' while parsing argument index\");\n      placeholder=placeholder * 10 + (ch - '0');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1166,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < patternLength; ++i) {\n  char ch=pattern.charAt(i);\n  if (placeholder < 0) {\n    if (ch == '{') {\n      changed=true;\n      if (i + 1 < patternLength && pattern.charAt(i + 1) == '{') {\n        buffer.append(ch);\n        ++i;\n      }\n else {\n        placeholder=0;\n      }\n    }\n else {\n      buffer.append(ch);\n    }\n  }\n else {\n    if (ch == '}') {\n      if (placeholder >= args.length)       throw new IllegalArgumentException(\"Argument index out of bounds: \" + placeholder);\n      if (pattern.charAt(i - 1) == '{')       throw new IllegalArgumentException(\"Missing argument index after a left curly brace\");\n      if (args[placeholder] == null)       buffer.append(\"null\");\n else       buffer.append(args[placeholder].toString());\n      placeholder=-1;\n    }\n else {\n      if (ch < '0' || ch > '9')       throw new IllegalArgumentException(\"Unexpected '\" + ch + \"' while parsing argument index\");\n      placeholder=placeholder * 10 + (ch - '0');\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1432,
        "startLineNumber" : 46,
        "startColumnNumber" : 55,
        "endLineNumber" : 86,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  buffer.setLength(0);\n  boolean changed=false;\n  int placeholder=-1;\n  int patternLength=pattern.length();\n  for (int i=0; i < patternLength; ++i) {\n    char ch=pattern.charAt(i);\n    if (placeholder < 0) {\n      if (ch == '{') {\n        changed=true;\n        if (i + 1 < patternLength && pattern.charAt(i + 1) == '{') {\n          buffer.append(ch);\n          ++i;\n        }\n else {\n          placeholder=0;\n        }\n      }\n else {\n        buffer.append(ch);\n      }\n    }\n else {\n      if (ch == '}') {\n        if (placeholder >= args.length)         throw new IllegalArgumentException(\"Argument index out of bounds: \" + placeholder);\n        if (pattern.charAt(i - 1) == '{')         throw new IllegalArgumentException(\"Missing argument index after a left curly brace\");\n        if (args[placeholder] == null)         buffer.append(\"null\");\n else         buffer.append(args[placeholder].toString());\n        placeholder=-1;\n      }\n else {\n        if (ch < '0' || ch > '9')         throw new IllegalArgumentException(\"Unexpected '\" + ch + \"' while parsing argument index\");\n        placeholder=placeholder * 10 + (ch - '0');\n      }\n    }\n  }\n  if (placeholder >= 0)   throw new IllegalArgumentException(\"Unmatched braces in the pattern.\");\n  return changed ? buffer.toString() : pattern;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2207,
        "startLineNumber" : 34,
        "startColumnNumber" : 1,
        "endLineNumber" : 86,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Formats the given  {@code pattern} replacing any placeholder of the form {0}, {1}, {2} and so on with the correspondingobject from  {@code args} converted to a string with {@code toString()}, so without taking into account the locale. <p> This method only implements a small subset of the grammar supported by  {@link java.text.MessageFormat}. Especially, placeholder are only made up of an index; neither the type nor the style are supported. <p> If nothing has been replaced this implementation returns the pattern itself.\n * @param pattern the pattern\n * @param args the arguments\n * @return the formatted pattern\n * @exception IllegalArgumentException if the pattern is invalid \n */\npublic String format(String pattern,Object... args){\n  buffer.setLength(0);\n  boolean changed=false;\n  int placeholder=-1;\n  int patternLength=pattern.length();\n  for (int i=0; i < patternLength; ++i) {\n    char ch=pattern.charAt(i);\n    if (placeholder < 0) {\n      if (ch == '{') {\n        changed=true;\n        if (i + 1 < patternLength && pattern.charAt(i + 1) == '{') {\n          buffer.append(ch);\n          ++i;\n        }\n else {\n          placeholder=0;\n        }\n      }\n else {\n        buffer.append(ch);\n      }\n    }\n else {\n      if (ch == '}') {\n        if (placeholder >= args.length)         throw new IllegalArgumentException(\"Argument index out of bounds: \" + placeholder);\n        if (pattern.charAt(i - 1) == '{')         throw new IllegalArgumentException(\"Missing argument index after a left curly brace\");\n        if (args[placeholder] == null)         buffer.append(\"null\");\n else         buffer.append(args[placeholder].toString());\n        placeholder=-1;\n      }\n else {\n        if (ch < '0' || ch > '9')         throw new IllegalArgumentException(\"Unexpected '\" + ch + \"' while parsing argument index\");\n        placeholder=placeholder * 10 + (ch - '0');\n      }\n    }\n  }\n  if (placeholder >= 0)   throw new IllegalArgumentException(\"Unmatched braces in the pattern.\");\n  return changed ? buffer.toString() : pattern;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 79,
        "startColumnNumber" : 5,
        "endLineNumber" : 79,
        "endColumnNumber" : 49
      },
      "nodeContext" : "placeholder=placeholder * 10 + (ch - '0');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 79,
    "startColumnNumber" : 19,
    "endLineNumber" : 79,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}