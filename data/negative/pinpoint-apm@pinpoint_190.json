{
  "id" : 190,
  "expression" : "spanBo",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "4cacf1146253b99caf0b9176ba85d3cbb2d02221",
  "filePath" : "collector/src/main/java/com/navercorp/pinpoint/collector/dao/hbase/HbaseTraceDao.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spanBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 77,
      "startColumnNumber" : 12,
      "endLineNumber" : 77,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 26
      },
      "nodeContext" : "spanBo == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (spanBo == null) {\n  throw new NullPointerException(\"span must not be null\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 681,
        "startLineNumber" : 76,
        "startColumnNumber" : 44,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void insert(final SpanBo spanBo){\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 26
      },
      "nodeContext" : "spanBo == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanBo"
  }, {
    "nodeContext" : "spanBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 82,
      "startColumnNumber" : 28,
      "endLineNumber" : 82,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 59
      },
      "nodeContext" : "spanBo.getCollectorAcceptTime()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 82,
        "startColumnNumber" : 13,
        "endLineNumber" : 82,
        "endColumnNumber" : 59
      },
      "nodeContext" : "acceptedTime=spanBo.getCollectorAcceptTime()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 60
      },
      "nodeContext" : "long acceptedTime=spanBo.getCollectorAcceptTime();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 681,
        "startLineNumber" : 76,
        "startColumnNumber" : 44,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void insert(final SpanBo spanBo){\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 60
      },
      "nodeContext" : "long acceptedTime=spanBo.getCollectorAcceptTime();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanBo"
  }, {
    "nodeContext" : "spanBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 84,
      "startColumnNumber" : 38,
      "endLineNumber" : 84,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 84,
        "startColumnNumber" : 38,
        "endLineNumber" : 84,
        "endColumnNumber" : 63
      },
      "nodeContext" : "spanBo.getTransactionId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 84,
        "startColumnNumber" : 22,
        "endLineNumber" : 84,
        "endColumnNumber" : 63
      },
      "nodeContext" : "transactionId=spanBo.getTransactionId()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TransactionId transactionId=spanBo.getTransactionId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 681,
        "startLineNumber" : 76,
        "startColumnNumber" : 44,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void insert(final SpanBo spanBo){\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TransactionId transactionId=spanBo.getTransactionId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanBo"
  }, {
    "nodeContext" : "spanBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 88,
      "startColumnNumber" : 38,
      "endLineNumber" : 88,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 56
      },
      "nodeContext" : "this.spanSerializer.serialize(spanBo,put,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 57
      },
      "nodeContext" : "this.spanSerializer.serialize(spanBo,put,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 681,
        "startLineNumber" : 76,
        "startColumnNumber" : 44,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void insert(final SpanBo spanBo){\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 57
      },
      "nodeContext" : "this.spanSerializer.serialize(spanBo,put,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanBo"
  }, {
    "nodeContext" : "spanBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 89,
      "startColumnNumber" : 44,
      "endLineNumber" : 89,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 62
      },
      "nodeContext" : "this.annotationSerializer.serialize(spanBo,put,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 63
      },
      "nodeContext" : "this.annotationSerializer.serialize(spanBo,put,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 681,
        "startLineNumber" : 76,
        "startColumnNumber" : 44,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void insert(final SpanBo spanBo){\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 63
      },
      "nodeContext" : "this.annotationSerializer.serialize(spanBo,put,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanBo"
  }, {
    "nodeContext" : "spanBo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 92,
      "startColumnNumber" : 32,
      "endLineNumber" : 92,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addNestedSpanEvent(put,spanBo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addNestedSpanEvent(put,spanBo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 681,
        "startLineNumber" : 76,
        "startColumnNumber" : 44,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void insert(final SpanBo spanBo){\n  if (spanBo == null) {\n    throw new NullPointerException(\"span must not be null\");\n  }\n  long acceptedTime=spanBo.getCollectorAcceptTime();\n  TransactionId transactionId=spanBo.getTransactionId();\n  final byte[] rowKey=rowKeyEncoder.encodeRowKey(transactionId);\n  final Put put=new Put(rowKey,acceptedTime);\n  this.spanSerializer.serialize(spanBo,put,null);\n  this.annotationSerializer.serialize(spanBo,put,null);\n  addNestedSpanEvent(put,spanBo);\n  boolean success=hbaseTemplate.asyncPut(TRACES,put);\n  if (!success) {\n    hbaseTemplate.put(TRACES,put);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addNestedSpanEvent(put,spanBo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.navercorp.pinpoint.common.server.bo.SpanBo"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 77,
    "startColumnNumber" : 12,
    "endLineNumber" : 77,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 82,
    "startColumnNumber" : 28,
    "endLineNumber" : 82,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 84,
    "startColumnNumber" : 38,
    "endLineNumber" : 84,
    "endColumnNumber" : 44
  }, {
    "charLength" : 6,
    "startLineNumber" : 88,
    "startColumnNumber" : 38,
    "endLineNumber" : 88,
    "endColumnNumber" : 44
  }, {
    "charLength" : 6,
    "startLineNumber" : 89,
    "startColumnNumber" : 44,
    "endLineNumber" : 89,
    "endColumnNumber" : 50
  }, {
    "charLength" : 6,
    "startLineNumber" : 92,
    "startColumnNumber" : 32,
    "endLineNumber" : 92,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}