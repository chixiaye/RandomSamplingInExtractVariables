{
  "id" : 393,
  "expression" : "\"_example\"",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "d68d65ce00c49b43ca238ada5d843cd9e681bff6",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"_example\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 1108,
      "startColumnNumber" : 40,
      "endLineNumber" : 1108,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1108,
        "startColumnNumber" : 26,
        "endLineNumber" : 1108,
        "endColumnNumber" : 50
      },
      "nodeContext" : "p.paramName + \"_example\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 1108,
        "startColumnNumber" : 16,
        "endLineNumber" : 1108,
        "endColumnNumber" : 50
      },
      "nodeContext" : "example=p.paramName + \"_example\"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1108,
        "startColumnNumber" : 16,
        "endLineNumber" : 1108,
        "endColumnNumber" : 51
      },
      "nodeContext" : "example=p.paramName + \"_example\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1107,
        "startColumnNumber" : 33,
        "endLineNumber" : 1109,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  example=p.paramName + \"_example\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 1107,
        "startColumnNumber" : 12,
        "endLineNumber" : 1109,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (example == null) {\n  example=p.paramName + \"_example\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 1106,
        "startColumnNumber" : 35,
        "endLineNumber" : 1111,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (example == null) {\n    example=p.paramName + \"_example\";\n  }\n  example=\"\\\"\" + escapeText(example) + \"\\\"\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2603,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (\"String\".equals(type)) {\n  if (example == null) {\n    example=p.paramName + \"_example\";\n  }\n  example=\"\\\"\" + escapeText(example) + \"\\\"\";\n}\n else if (\"Integer\".equals(type) || \"Short\".equals(type)) {\n  if (example == null) {\n    example=\"56\";\n  }\n}\n else if (\"Long\".equals(type)) {\n  if (example == null) {\n    example=\"56\";\n  }\n  example=StringUtils.appendIfMissingIgnoreCase(example,\"L\");\n}\n else if (\"Float\".equals(type)) {\n  if (example == null) {\n    example=\"3.4\";\n  }\n  example=StringUtils.appendIfMissingIgnoreCase(example,\"F\");\n}\n else if (\"Double\".equals(type)) {\n  if (example == null) {\n    example=\"3.4\";\n  }\n  example=StringUtils.appendIfMissingIgnoreCase(example,\"D\");\n}\n else if (\"Boolean\".equals(type)) {\n  if (example == null) {\n    example=\"true\";\n  }\n}\n else if (\"File\".equals(type)) {\n  if (example == null) {\n    example=\"/path/to/file\";\n  }\n  example=\"new File(\\\"\" + escapeText(example) + \"\\\")\";\n}\n else if (\"Date\".equals(type)) {\n  example=\"new Date()\";\n}\n else if (\"LocalDate\".equals(type)) {\n  if (example == null) {\n    example=\"LocalDate.now()\";\n  }\n else {\n    example=\"LocalDate.parse(\\\"\" + example + \"\\\")\";\n  }\n}\n else if (\"OffsetDateTime\".equals(type)) {\n  if (example == null) {\n    example=\"OffsetDateTime.now()\";\n  }\n else {\n    example=\"OffsetDateTime.parse(\\\"\" + example + \"\\\")\";\n  }\n}\n else if (\"BigDecimal\".equals(type)) {\n  if (example == null) {\n    example=\"new BigDecimal(78)\";\n  }\n else {\n    example=\"new BigDecimal(\\\"\" + example + \"\\\")\";\n  }\n}\n else if (\"UUID\".equals(type)) {\n  if (example == null) {\n    example=\"UUID.randomUUID()\";\n  }\n else {\n    example=\"UUID.fromString(\\\"\" + example + \"\\\")\";\n  }\n}\n else if (hasAllowableValues) {\n  example=type + \".fromValue(\\\"\" + example+ \"\\\")\";\n}\n else if (!languageSpecificPrimitives.contains(type)) {\n  example=\"new \" + type + \"()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 283,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3915,
        "startLineNumber" : 1087,
        "startColumnNumber" : 61,
        "endLineNumber" : 1193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String example;\n  boolean hasAllowableValues=p.allowableValues != null && !p.allowableValues.isEmpty();\n  if (hasAllowableValues) {\n    final List<Object> values=(List<Object>)p.allowableValues.get(\"values\");\n    example=String.valueOf(values.get(0));\n  }\n else   if (p.defaultValue == null) {\n    example=p.example;\n  }\n else {\n    example=p.defaultValue;\n  }\n  String type=p.baseType;\n  if (type == null) {\n    type=p.dataType;\n  }\n  if (\"String\".equals(type)) {\n    if (example == null) {\n      example=p.paramName + \"_example\";\n    }\n    example=\"\\\"\" + escapeText(example) + \"\\\"\";\n  }\n else   if (\"Integer\".equals(type) || \"Short\".equals(type)) {\n    if (example == null) {\n      example=\"56\";\n    }\n  }\n else   if (\"Long\".equals(type)) {\n    if (example == null) {\n      example=\"56\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"L\");\n  }\n else   if (\"Float\".equals(type)) {\n    if (example == null) {\n      example=\"3.4\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"F\");\n  }\n else   if (\"Double\".equals(type)) {\n    if (example == null) {\n      example=\"3.4\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"D\");\n  }\n else   if (\"Boolean\".equals(type)) {\n    if (example == null) {\n      example=\"true\";\n    }\n  }\n else   if (\"File\".equals(type)) {\n    if (example == null) {\n      example=\"/path/to/file\";\n    }\n    example=\"new File(\\\"\" + escapeText(example) + \"\\\")\";\n  }\n else   if (\"Date\".equals(type)) {\n    example=\"new Date()\";\n  }\n else   if (\"LocalDate\".equals(type)) {\n    if (example == null) {\n      example=\"LocalDate.now()\";\n    }\n else {\n      example=\"LocalDate.parse(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"OffsetDateTime\".equals(type)) {\n    if (example == null) {\n      example=\"OffsetDateTime.now()\";\n    }\n else {\n      example=\"OffsetDateTime.parse(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"BigDecimal\".equals(type)) {\n    if (example == null) {\n      example=\"new BigDecimal(78)\";\n    }\n else {\n      example=\"new BigDecimal(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"UUID\".equals(type)) {\n    if (example == null) {\n      example=\"UUID.randomUUID()\";\n    }\n else {\n      example=\"UUID.fromString(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (hasAllowableValues) {\n    example=type + \".fromValue(\\\"\" + example+ \"\\\")\";\n  }\n else   if (!languageSpecificPrimitives.contains(type)) {\n    example=\"new \" + type + \"()\";\n  }\n  if (example == null) {\n    example=\"null\";\n  }\n else   if (Boolean.TRUE.equals(p.isArray)) {\n    if (p.items.defaultValue != null) {\n      String innerExample;\n      if (\"String\".equals(p.items.dataType)) {\n        innerExample=\"\\\"\" + p.items.defaultValue + \"\\\"\";\n      }\n else {\n        innerExample=p.items.defaultValue;\n      }\n      example=\"Arrays.asList(\" + innerExample + \")\";\n    }\n else {\n      example=\"Arrays.asList()\";\n    }\n  }\n else   if (Boolean.TRUE.equals(p.isMap)) {\n    example=\"new HashMap()\";\n  }\n  p.example=example;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 473,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3986,
        "startLineNumber" : 1086,
        "startColumnNumber" : 4,
        "endLineNumber" : 1193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setParameterExampleValue(CodegenParameter p){\n  String example;\n  boolean hasAllowableValues=p.allowableValues != null && !p.allowableValues.isEmpty();\n  if (hasAllowableValues) {\n    final List<Object> values=(List<Object>)p.allowableValues.get(\"values\");\n    example=String.valueOf(values.get(0));\n  }\n else   if (p.defaultValue == null) {\n    example=p.example;\n  }\n else {\n    example=p.defaultValue;\n  }\n  String type=p.baseType;\n  if (type == null) {\n    type=p.dataType;\n  }\n  if (\"String\".equals(type)) {\n    if (example == null) {\n      example=p.paramName + \"_example\";\n    }\n    example=\"\\\"\" + escapeText(example) + \"\\\"\";\n  }\n else   if (\"Integer\".equals(type) || \"Short\".equals(type)) {\n    if (example == null) {\n      example=\"56\";\n    }\n  }\n else   if (\"Long\".equals(type)) {\n    if (example == null) {\n      example=\"56\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"L\");\n  }\n else   if (\"Float\".equals(type)) {\n    if (example == null) {\n      example=\"3.4\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"F\");\n  }\n else   if (\"Double\".equals(type)) {\n    if (example == null) {\n      example=\"3.4\";\n    }\n    example=StringUtils.appendIfMissingIgnoreCase(example,\"D\");\n  }\n else   if (\"Boolean\".equals(type)) {\n    if (example == null) {\n      example=\"true\";\n    }\n  }\n else   if (\"File\".equals(type)) {\n    if (example == null) {\n      example=\"/path/to/file\";\n    }\n    example=\"new File(\\\"\" + escapeText(example) + \"\\\")\";\n  }\n else   if (\"Date\".equals(type)) {\n    example=\"new Date()\";\n  }\n else   if (\"LocalDate\".equals(type)) {\n    if (example == null) {\n      example=\"LocalDate.now()\";\n    }\n else {\n      example=\"LocalDate.parse(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"OffsetDateTime\".equals(type)) {\n    if (example == null) {\n      example=\"OffsetDateTime.now()\";\n    }\n else {\n      example=\"OffsetDateTime.parse(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"BigDecimal\".equals(type)) {\n    if (example == null) {\n      example=\"new BigDecimal(78)\";\n    }\n else {\n      example=\"new BigDecimal(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (\"UUID\".equals(type)) {\n    if (example == null) {\n      example=\"UUID.randomUUID()\";\n    }\n else {\n      example=\"UUID.fromString(\\\"\" + example + \"\\\")\";\n    }\n  }\n else   if (hasAllowableValues) {\n    example=type + \".fromValue(\\\"\" + example+ \"\\\")\";\n  }\n else   if (!languageSpecificPrimitives.contains(type)) {\n    example=\"new \" + type + \"()\";\n  }\n  if (example == null) {\n    example=\"null\";\n  }\n else   if (Boolean.TRUE.equals(p.isArray)) {\n    if (p.items.defaultValue != null) {\n      String innerExample;\n      if (\"String\".equals(p.items.dataType)) {\n        innerExample=\"\\\"\" + p.items.defaultValue + \"\\\"\";\n      }\n else {\n        innerExample=p.items.defaultValue;\n      }\n      example=\"Arrays.asList(\" + innerExample + \")\";\n    }\n else {\n      example=\"Arrays.asList()\";\n    }\n  }\n else   if (Boolean.TRUE.equals(p.isMap)) {\n    example=\"new HashMap()\";\n  }\n  p.example=example;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 483,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1108,
        "startColumnNumber" : 16,
        "endLineNumber" : 1108,
        "endColumnNumber" : 51
      },
      "nodeContext" : "example=p.paramName + \"_example\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 1108,
    "startColumnNumber" : 40,
    "endLineNumber" : 1108,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}