{
  "id" : 388,
  "expression" : "min",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "369e30d0f67ceba656e7600035259f941963c688",
  "filePath" : "jib-core/src/main/java/com/google/cloud/tools/jib/frontend/ExposedPortsParser.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "min",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 69,
      "startColumnNumber" : 16,
      "endLineNumber" : 69,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 69,
        "startColumnNumber" : 10,
        "endLineNumber" : 69,
        "endColumnNumber" : 19
      },
      "nodeContext" : "max=min",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 20
      },
      "nodeContext" : "int max=min;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 55,
        "startColumnNumber" : 30,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  String protocol=matcher.group(3);\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  String portString=(protocol == null ? \"\" : protocol);\n  for (int portNum=min; portNum <= max; portNum++) {\n    result.add(portNum + portString);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String port : ports) {\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  String protocol=matcher.group(3);\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  String portString=(protocol == null ? \"\" : protocol);\n  for (int portNum=min; portNum <= max; portNum++) {\n    result.add(portNum + portString);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 138,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 52,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * TODO: Return list of  {@link PortWithProtocol}s instead of strings <p>Converts/validates a list of ports with ranges to an expanded form without ranges. <p>Example:  {@code [\"1000/tcp\", \"2000-2002/tcp\"] -> [\"1000/tcp\", \"2000/tcp\", \"2001/tcp\",\"2002/tcp\"]}\n * @param ports the list of port numbers/ranges\n * @param buildLogger used to log warning messages\n * @return the ports as a list of integers\n * @throws NumberFormatException if any of the ports are in an invalid format or out of range\n */\n@VisibleForTesting public static ImmutableList<String> parse(List<String> ports,BuildLogger buildLogger) throws NumberFormatException {\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 20
      },
      "nodeContext" : "int max=min;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "min",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 76,
      "startColumnNumber" : 10,
      "endLineNumber" : 76,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 76,
        "startColumnNumber" : 10,
        "endLineNumber" : 76,
        "endColumnNumber" : 19
      },
      "nodeContext" : "min > max",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 79,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (min > max) {\n  throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 55,
        "startColumnNumber" : 30,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  String protocol=matcher.group(3);\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  String portString=(protocol == null ? \"\" : protocol);\n  for (int portNum=min; portNum <= max; portNum++) {\n    result.add(portNum + portString);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String port : ports) {\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  String protocol=matcher.group(3);\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  String portString=(protocol == null ? \"\" : protocol);\n  for (int portNum=min; portNum <= max; portNum++) {\n    result.add(portNum + portString);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 138,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 52,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * TODO: Return list of  {@link PortWithProtocol}s instead of strings <p>Converts/validates a list of ports with ranges to an expanded form without ranges. <p>Example:  {@code [\"1000/tcp\", \"2000-2002/tcp\"] -> [\"1000/tcp\", \"2000/tcp\", \"2001/tcp\",\"2002/tcp\"]}\n * @param ports the list of port numbers/ranges\n * @param buildLogger used to log warning messages\n * @return the ports as a list of integers\n * @throws NumberFormatException if any of the ports are in an invalid format or out of range\n */\n@VisibleForTesting public static ImmutableList<String> parse(List<String> ports,BuildLogger buildLogger) throws NumberFormatException {\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 76,
        "startColumnNumber" : 10,
        "endLineNumber" : 76,
        "endColumnNumber" : 19
      },
      "nodeContext" : "min > max",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "min",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 82,
      "startColumnNumber" : 10,
      "endLineNumber" : 82,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 82,
        "startColumnNumber" : 10,
        "endLineNumber" : 82,
        "endColumnNumber" : 17
      },
      "nodeContext" : "min < 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 82,
        "startColumnNumber" : 10,
        "endLineNumber" : 82,
        "endColumnNumber" : 32
      },
      "nodeContext" : "min < 1 || max > 65535",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (min < 1 || max > 65535) {\n  buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 55,
        "startColumnNumber" : 30,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  String protocol=matcher.group(3);\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  String portString=(protocol == null ? \"\" : protocol);\n  for (int portNum=min; portNum <= max; portNum++) {\n    result.add(portNum + portString);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String port : ports) {\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  String protocol=matcher.group(3);\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  String portString=(protocol == null ? \"\" : protocol);\n  for (int portNum=min; portNum <= max; portNum++) {\n    result.add(portNum + portString);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 138,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 52,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * TODO: Return list of  {@link PortWithProtocol}s instead of strings <p>Converts/validates a list of ports with ranges to an expanded form without ranges. <p>Example:  {@code [\"1000/tcp\", \"2000-2002/tcp\"] -> [\"1000/tcp\", \"2000/tcp\", \"2001/tcp\",\"2002/tcp\"]}\n * @param ports the list of port numbers/ranges\n * @param buildLogger used to log warning messages\n * @return the ports as a list of integers\n * @throws NumberFormatException if any of the ports are in an invalid format or out of range\n */\n@VisibleForTesting public static ImmutableList<String> parse(List<String> ports,BuildLogger buildLogger) throws NumberFormatException {\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 82,
        "startColumnNumber" : 10,
        "endLineNumber" : 82,
        "endColumnNumber" : 32
      },
      "nodeContext" : "min < 1 || max > 65535",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "min",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 89,
      "startColumnNumber" : 25,
      "endLineNumber" : 89,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 89,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 28
      },
      "nodeContext" : "portNum=min",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 89,
        "endColumnNumber" : 28
      },
      "nodeContext" : "int portNum=min",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 89,
        "startColumnNumber" : 6,
        "endLineNumber" : 91,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int portNum=min; portNum <= max; portNum++) {\n  result.add(portNum + portString);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 55,
        "startColumnNumber" : 30,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  String protocol=matcher.group(3);\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  String portString=(protocol == null ? \"\" : protocol);\n  for (int portNum=min; portNum <= max; portNum++) {\n    result.add(portNum + portString);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String port : ports) {\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  String protocol=matcher.group(3);\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  String portString=(protocol == null ? \"\" : protocol);\n  for (int portNum=min; portNum <= max; portNum++) {\n    result.add(portNum + portString);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 138,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 52,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * TODO: Return list of  {@link PortWithProtocol}s instead of strings <p>Converts/validates a list of ports with ranges to an expanded form without ranges. <p>Example:  {@code [\"1000/tcp\", \"2000-2002/tcp\"] -> [\"1000/tcp\", \"2000/tcp\", \"2001/tcp\",\"2002/tcp\"]}\n * @param ports the list of port numbers/ranges\n * @param buildLogger used to log warning messages\n * @return the ports as a list of integers\n * @throws NumberFormatException if any of the ports are in an invalid format or out of range\n */\n@VisibleForTesting public static ImmutableList<String> parse(List<String> ports,BuildLogger buildLogger) throws NumberFormatException {\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 89,
        "endColumnNumber" : 28
      },
      "nodeContext" : "int portNum=min",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 69,
    "startColumnNumber" : 16,
    "endLineNumber" : 69,
    "endColumnNumber" : 19
  }, {
    "charLength" : 3,
    "startLineNumber" : 76,
    "startColumnNumber" : 10,
    "endLineNumber" : 76,
    "endColumnNumber" : 13
  }, {
    "charLength" : 3,
    "startLineNumber" : 82,
    "startColumnNumber" : 10,
    "endLineNumber" : 82,
    "endColumnNumber" : 13
  }, {
    "charLength" : 3,
    "startLineNumber" : 89,
    "startColumnNumber" : 25,
    "endLineNumber" : 89,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}