{
  "id" : 573,
  "expression" : "Vars.bases",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "8dd66fb94231a7d9b5c9c86a34f778fb4a9c4b1c",
  "filePath" : "core/src/mindustry/ai/BaseAI.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Vars.bases",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 165,
      "startColumnNumber" : 42,
      "endLineNumber" : 165,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 165,
        "startColumnNumber" : 42,
        "endLineNumber" : 165,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Vars.bases.forResource(tile.drop())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 165,
        "startColumnNumber" : 42,
        "endLineNumber" : 165,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Vars.bases.forResource(tile.drop()).any()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 165,
        "startColumnNumber" : 19,
        "endLineNumber" : 165,
        "endColumnNumber" : 83
      },
      "nodeContext" : "tile.drop() != null && Vars.bases.forResource(tile.drop()).any()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n  parts=Vars.bases.forResource(tile.drop());\n}\n else if (Mathf.chance(emptyChance)) {\n  parts=Vars.bases.parts;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1272,
        "startLineNumber" : 144,
        "startColumnNumber" : 45,
        "endLineNumber" : 177,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int range=150;\n  Position pos=randomPosition();\n  if (pos == null)   return;\n  Tmp.v1.rnd(Mathf.random(range));\n  int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n  Tile tile=world.tiles.getc(wx,wy);\n  if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n    continue;\n  }\n  Seq<BasePart> parts=null;\n  if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n    parts=Vars.bases.forResource(tile.drop());\n  }\n else   if (Mathf.chance(emptyChance)) {\n    parts=Vars.bases.parts;\n  }\n  if (parts != null) {\n    BasePart part=parts.random();\n    if (tryPlace(part,tile.x,tile.y)) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1305,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 177,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < attempts; i++) {\n  int range=150;\n  Position pos=randomPosition();\n  if (pos == null)   return;\n  Tmp.v1.rnd(Mathf.random(range));\n  int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n  Tile tile=world.tiles.getc(wx,wy);\n  if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n    continue;\n  }\n  Seq<BasePart> parts=null;\n  if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n    parts=Vars.bases.forResource(tile.drop());\n  }\n else   if (Mathf.chance(emptyChance)) {\n    parts=Vars.bases.parts;\n  }\n  if (parts != null) {\n    BasePart part=parts.random();\n    if (tryPlace(part,tile.x,tile.y)) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 138,
        "startColumnNumber" : 122,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!triedWalls) {\n    tryWalls();\n    triedWalls=true;\n  }\n  for (int i=0; i < attempts; i++) {\n    int range=150;\n    Position pos=randomPosition();\n    if (pos == null)     return;\n    Tmp.v1.rnd(Mathf.random(range));\n    int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n    Tile tile=world.tiles.getc(wx,wy);\n    if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n      continue;\n    }\n    Seq<BasePart> parts=null;\n    if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n      parts=Vars.bases.forResource(tile.drop());\n    }\n else     if (Mathf.chance(emptyChance)) {\n      parts=Vars.bases.parts;\n    }\n    if (parts != null) {\n      BasePart part=parts.random();\n      if (tryPlace(part,tile.x,tile.y)) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n  if (!triedWalls) {\n    tryWalls();\n    triedWalls=true;\n  }\n  for (int i=0; i < attempts; i++) {\n    int range=150;\n    Position pos=randomPosition();\n    if (pos == null)     return;\n    Tmp.v1.rnd(Mathf.random(range));\n    int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n    Tile tile=world.tiles.getc(wx,wy);\n    if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n      continue;\n    }\n    Seq<BasePart> parts=null;\n    if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n      parts=Vars.bases.forResource(tile.drop());\n    }\n else     if (Mathf.chance(emptyChance)) {\n      parts=Vars.bases.parts;\n    }\n    if (parts != null) {\n      BasePart part=parts.random();\n      if (tryPlace(part,tile.x,tile.y)) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 221,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4750,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 634,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void update(){\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 165,
        "startColumnNumber" : 19,
        "endLineNumber" : 165,
        "endColumnNumber" : 83
      },
      "nodeContext" : "tile.drop() != null && Vars.bases.forResource(tile.drop()).any()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "mindustry.ai.BaseRegistry"
  }, {
    "nodeContext" : "Vars.bases",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 166,
      "startColumnNumber" : 28,
      "endLineNumber" : 166,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 166,
        "startColumnNumber" : 28,
        "endLineNumber" : 166,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Vars.bases.forResource(tile.drop())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 166,
        "startColumnNumber" : 20,
        "endLineNumber" : 166,
        "endColumnNumber" : 63
      },
      "nodeContext" : "parts=Vars.bases.forResource(tile.drop())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 166,
        "startColumnNumber" : 20,
        "endLineNumber" : 166,
        "endColumnNumber" : 64
      },
      "nodeContext" : "parts=Vars.bases.forResource(tile.drop());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 165,
        "startColumnNumber" : 84,
        "endLineNumber" : 167,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  parts=Vars.bases.forResource(tile.drop());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n  parts=Vars.bases.forResource(tile.drop());\n}\n else if (Mathf.chance(emptyChance)) {\n  parts=Vars.bases.parts;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1272,
        "startLineNumber" : 144,
        "startColumnNumber" : 45,
        "endLineNumber" : 177,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int range=150;\n  Position pos=randomPosition();\n  if (pos == null)   return;\n  Tmp.v1.rnd(Mathf.random(range));\n  int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n  Tile tile=world.tiles.getc(wx,wy);\n  if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n    continue;\n  }\n  Seq<BasePart> parts=null;\n  if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n    parts=Vars.bases.forResource(tile.drop());\n  }\n else   if (Mathf.chance(emptyChance)) {\n    parts=Vars.bases.parts;\n  }\n  if (parts != null) {\n    BasePart part=parts.random();\n    if (tryPlace(part,tile.x,tile.y)) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1305,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 177,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < attempts; i++) {\n  int range=150;\n  Position pos=randomPosition();\n  if (pos == null)   return;\n  Tmp.v1.rnd(Mathf.random(range));\n  int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n  Tile tile=world.tiles.getc(wx,wy);\n  if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n    continue;\n  }\n  Seq<BasePart> parts=null;\n  if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n    parts=Vars.bases.forResource(tile.drop());\n  }\n else   if (Mathf.chance(emptyChance)) {\n    parts=Vars.bases.parts;\n  }\n  if (parts != null) {\n    BasePart part=parts.random();\n    if (tryPlace(part,tile.x,tile.y)) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 138,
        "startColumnNumber" : 122,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!triedWalls) {\n    tryWalls();\n    triedWalls=true;\n  }\n  for (int i=0; i < attempts; i++) {\n    int range=150;\n    Position pos=randomPosition();\n    if (pos == null)     return;\n    Tmp.v1.rnd(Mathf.random(range));\n    int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n    Tile tile=world.tiles.getc(wx,wy);\n    if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n      continue;\n    }\n    Seq<BasePart> parts=null;\n    if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n      parts=Vars.bases.forResource(tile.drop());\n    }\n else     if (Mathf.chance(emptyChance)) {\n      parts=Vars.bases.parts;\n    }\n    if (parts != null) {\n      BasePart part=parts.random();\n      if (tryPlace(part,tile.x,tile.y)) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n  if (!triedWalls) {\n    tryWalls();\n    triedWalls=true;\n  }\n  for (int i=0; i < attempts; i++) {\n    int range=150;\n    Position pos=randomPosition();\n    if (pos == null)     return;\n    Tmp.v1.rnd(Mathf.random(range));\n    int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n    Tile tile=world.tiles.getc(wx,wy);\n    if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n      continue;\n    }\n    Seq<BasePart> parts=null;\n    if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n      parts=Vars.bases.forResource(tile.drop());\n    }\n else     if (Mathf.chance(emptyChance)) {\n      parts=Vars.bases.parts;\n    }\n    if (parts != null) {\n      BasePart part=parts.random();\n      if (tryPlace(part,tile.x,tile.y)) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 221,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4750,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 634,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void update(){\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 166,
        "startColumnNumber" : 20,
        "endLineNumber" : 166,
        "endColumnNumber" : 64
      },
      "nodeContext" : "parts=Vars.bases.forResource(tile.drop());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "mindustry.ai.BaseRegistry"
  }, {
    "nodeContext" : "Vars.bases",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 168,
      "startColumnNumber" : 28,
      "endLineNumber" : 168,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 168,
        "startColumnNumber" : 28,
        "endLineNumber" : 168,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Vars.bases.parts",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 168,
        "startColumnNumber" : 20,
        "endLineNumber" : 168,
        "endColumnNumber" : 44
      },
      "nodeContext" : "parts=Vars.bases.parts",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 168,
        "startColumnNumber" : 20,
        "endLineNumber" : 168,
        "endColumnNumber" : 45
      },
      "nodeContext" : "parts=Vars.bases.parts;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 167,
        "startColumnNumber" : 51,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  parts=Vars.bases.parts;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 167,
        "startColumnNumber" : 22,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Mathf.chance(emptyChance)) {\n  parts=Vars.bases.parts;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n  parts=Vars.bases.forResource(tile.drop());\n}\n else if (Mathf.chance(emptyChance)) {\n  parts=Vars.bases.parts;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1272,
        "startLineNumber" : 144,
        "startColumnNumber" : 45,
        "endLineNumber" : 177,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int range=150;\n  Position pos=randomPosition();\n  if (pos == null)   return;\n  Tmp.v1.rnd(Mathf.random(range));\n  int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n  Tile tile=world.tiles.getc(wx,wy);\n  if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n    continue;\n  }\n  Seq<BasePart> parts=null;\n  if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n    parts=Vars.bases.forResource(tile.drop());\n  }\n else   if (Mathf.chance(emptyChance)) {\n    parts=Vars.bases.parts;\n  }\n  if (parts != null) {\n    BasePart part=parts.random();\n    if (tryPlace(part,tile.x,tile.y)) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1305,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 177,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < attempts; i++) {\n  int range=150;\n  Position pos=randomPosition();\n  if (pos == null)   return;\n  Tmp.v1.rnd(Mathf.random(range));\n  int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n  Tile tile=world.tiles.getc(wx,wy);\n  if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n    continue;\n  }\n  Seq<BasePart> parts=null;\n  if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n    parts=Vars.bases.forResource(tile.drop());\n  }\n else   if (Mathf.chance(emptyChance)) {\n    parts=Vars.bases.parts;\n  }\n  if (parts != null) {\n    BasePart part=parts.random();\n    if (tryPlace(part,tile.x,tile.y)) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 182,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 138,
        "startColumnNumber" : 122,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!triedWalls) {\n    tryWalls();\n    triedWalls=true;\n  }\n  for (int i=0; i < attempts; i++) {\n    int range=150;\n    Position pos=randomPosition();\n    if (pos == null)     return;\n    Tmp.v1.rnd(Mathf.random(range));\n    int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n    Tile tile=world.tiles.getc(wx,wy);\n    if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n      continue;\n    }\n    Seq<BasePart> parts=null;\n    if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n      parts=Vars.bases.forResource(tile.drop());\n    }\n else     if (Mathf.chance(emptyChance)) {\n      parts=Vars.bases.parts;\n    }\n    if (parts != null) {\n      BasePart part=parts.random();\n      if (tryPlace(part,tile.x,tile.y)) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n  if (!triedWalls) {\n    tryWalls();\n    triedWalls=true;\n  }\n  for (int i=0; i < attempts; i++) {\n    int range=150;\n    Position pos=randomPosition();\n    if (pos == null)     return;\n    Tmp.v1.rnd(Mathf.random(range));\n    int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n    Tile tile=world.tiles.getc(wx,wy);\n    if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n      continue;\n    }\n    Seq<BasePart> parts=null;\n    if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n      parts=Vars.bases.forResource(tile.drop());\n    }\n else     if (Mathf.chance(emptyChance)) {\n      parts=Vars.bases.parts;\n    }\n    if (parts != null) {\n      BasePart part=parts.random();\n      if (tryPlace(part,tile.x,tile.y)) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 221,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4750,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 634,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void update(){\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 168,
        "startColumnNumber" : 20,
        "endLineNumber" : 168,
        "endColumnNumber" : 45
      },
      "nodeContext" : "parts=Vars.bases.parts;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "mindustry.ai.BaseRegistry"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 165,
    "startColumnNumber" : 42,
    "endLineNumber" : 165,
    "endColumnNumber" : 52
  }, {
    "charLength" : 10,
    "startLineNumber" : 166,
    "startColumnNumber" : 28,
    "endLineNumber" : 166,
    "endColumnNumber" : 38
  }, {
    "charLength" : 10,
    "startLineNumber" : 168,
    "startColumnNumber" : 28,
    "endLineNumber" : 168,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}