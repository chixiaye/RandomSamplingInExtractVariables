{
  "id" : 162,
  "expression" : "rafStream.offset",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipFile.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rafStream.offset",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 374,
      "startColumnNumber" : 38,
      "endLineNumber" : 374,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 374,
        "startColumnNumber" : 38,
        "endLineNumber" : 374,
        "endColumnNumber" : 67
      },
      "nodeContext" : "rafStream.offset + entry.size",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 374,
        "startColumnNumber" : 16,
        "endLineNumber" : 374,
        "endColumnNumber" : 67
      },
      "nodeContext" : "rafStream.endOffset=rafStream.offset + entry.size",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 374,
        "startColumnNumber" : 16,
        "endLineNumber" : 374,
        "endColumnNumber" : 68
      },
      "nodeContext" : "rafStream.endOffset=rafStream.offset + entry.size;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 373,
        "startColumnNumber" : 66,
        "endLineNumber" : 375,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rafStream.endOffset=rafStream.offset + entry.size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 373,
        "startColumnNumber" : 12,
        "endLineNumber" : 377,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.compressionMethod == TinkerZipEntry.STORED) {\n  rafStream.endOffset=rafStream.offset + entry.size;\n}\n else {\n  rafStream.endOffset=rafStream.offset + entry.compressedSize;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 2231,
        "startLineNumber" : 341,
        "startColumnNumber" : 32,
        "endLineNumber" : 379,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);\n  DataInputStream is=new DataInputStream(rafStream);\n  final int localMagic=Integer.reverseBytes(is.readInt());\n  if (localMagic != LOCSIG) {\n    throwZipException(filename,localRaf.length(),entry.getName(),entry.localHeaderRelOffset,\"Local File Header\",localMagic);\n  }\n  is.skipBytes(2);\n  int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;\n  if ((gpbf & TinkerZipFile.GPBF_UNSUPPORTED_MASK) != 0) {\n    throw new ZipException(\"Invalid General Purpose Bit Flag: \" + gpbf);\n  }\n  is.skipBytes(18);\n  int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;\n  int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;\n  is.close();\n  rafStream.skip(fileNameLength + extraFieldLength);\n  if (entry.compressionMethod == TinkerZipEntry.STORED) {\n    rafStream.endOffset=rafStream.offset + entry.size;\n  }\n else {\n    rafStream.endOffset=rafStream.offset + entry.compressedSize;\n  }\n  return rafStream;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2255,
        "startLineNumber" : 341,
        "startColumnNumber" : 8,
        "endLineNumber" : 379,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (localRaf) {\n  RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);\n  DataInputStream is=new DataInputStream(rafStream);\n  final int localMagic=Integer.reverseBytes(is.readInt());\n  if (localMagic != LOCSIG) {\n    throwZipException(filename,localRaf.length(),entry.getName(),entry.localHeaderRelOffset,\"Local File Header\",localMagic);\n  }\n  is.skipBytes(2);\n  int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;\n  if ((gpbf & TinkerZipFile.GPBF_UNSUPPORTED_MASK) != 0) {\n    throw new ZipException(\"Invalid General Purpose Bit Flag: \" + gpbf);\n  }\n  is.skipBytes(18);\n  int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;\n  int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;\n  is.close();\n  rafStream.skip(fileNameLength + extraFieldLength);\n  if (entry.compressionMethod == TinkerZipEntry.STORED) {\n    rafStream.endOffset=rafStream.offset + entry.size;\n  }\n else {\n    rafStream.endOffset=rafStream.offset + entry.compressedSize;\n  }\n  return rafStream;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 165,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2575,
        "startLineNumber" : 333,
        "startColumnNumber" : 79,
        "endLineNumber" : 380,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  entry=getEntry(entry.getName());\n  if (entry == null) {\n    return null;\n  }\n  RandomAccessFile localRaf=raf;\nsynchronized (localRaf) {\n    RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);\n    DataInputStream is=new DataInputStream(rafStream);\n    final int localMagic=Integer.reverseBytes(is.readInt());\n    if (localMagic != LOCSIG) {\n      throwZipException(filename,localRaf.length(),entry.getName(),entry.localHeaderRelOffset,\"Local File Header\",localMagic);\n    }\n    is.skipBytes(2);\n    int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;\n    if ((gpbf & TinkerZipFile.GPBF_UNSUPPORTED_MASK) != 0) {\n      throw new ZipException(\"Invalid General Purpose Bit Flag: \" + gpbf);\n    }\n    is.skipBytes(18);\n    int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;\n    int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;\n    is.close();\n    rafStream.skip(fileNameLength + extraFieldLength);\n    if (entry.compressionMethod == TinkerZipEntry.STORED) {\n      rafStream.endOffset=rafStream.offset + entry.size;\n    }\n else {\n      rafStream.endOffset=rafStream.offset + entry.compressedSize;\n    }\n    return rafStream;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3032,
        "startLineNumber" : 323,
        "startColumnNumber" : 4,
        "endLineNumber" : 380,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns an input stream on the data of the specified  {@code ZipEntry}.\n * @param entry the ZipEntry.\n * @return an input stream of the data contained in the {@code ZipEntry}.\n * @throws IOException if an  {@code IOException} occurs.\n * @throws IllegalStateException if this zip file has been closed.\n */\npublic InputStream getInputStream(TinkerZipEntry entry) throws IOException {\n  entry=getEntry(entry.getName());\n  if (entry == null) {\n    return null;\n  }\n  RandomAccessFile localRaf=raf;\nsynchronized (localRaf) {\n    RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);\n    DataInputStream is=new DataInputStream(rafStream);\n    final int localMagic=Integer.reverseBytes(is.readInt());\n    if (localMagic != LOCSIG) {\n      throwZipException(filename,localRaf.length(),entry.getName(),entry.localHeaderRelOffset,\"Local File Header\",localMagic);\n    }\n    is.skipBytes(2);\n    int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;\n    if ((gpbf & TinkerZipFile.GPBF_UNSUPPORTED_MASK) != 0) {\n      throw new ZipException(\"Invalid General Purpose Bit Flag: \" + gpbf);\n    }\n    is.skipBytes(18);\n    int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;\n    int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;\n    is.close();\n    rafStream.skip(fileNameLength + extraFieldLength);\n    if (entry.compressionMethod == TinkerZipEntry.STORED) {\n      rafStream.endOffset=rafStream.offset + entry.size;\n    }\n else {\n      rafStream.endOffset=rafStream.offset + entry.compressedSize;\n    }\n    return rafStream;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 374,
        "startColumnNumber" : 16,
        "endLineNumber" : 374,
        "endColumnNumber" : 68
      },
      "nodeContext" : "rafStream.endOffset=rafStream.offset + entry.size;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "long"
  }, {
    "nodeContext" : "rafStream.offset",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 376,
      "startColumnNumber" : 38,
      "endLineNumber" : 376,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 376,
        "startColumnNumber" : 38,
        "endLineNumber" : 376,
        "endColumnNumber" : 77
      },
      "nodeContext" : "rafStream.offset + entry.compressedSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 376,
        "startColumnNumber" : 16,
        "endLineNumber" : 376,
        "endColumnNumber" : 77
      },
      "nodeContext" : "rafStream.endOffset=rafStream.offset + entry.compressedSize",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 376,
        "startColumnNumber" : 16,
        "endLineNumber" : 376,
        "endColumnNumber" : 78
      },
      "nodeContext" : "rafStream.endOffset=rafStream.offset + entry.compressedSize;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 375,
        "startColumnNumber" : 19,
        "endLineNumber" : 377,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rafStream.endOffset=rafStream.offset + entry.compressedSize;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 373,
        "startColumnNumber" : 12,
        "endLineNumber" : 377,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.compressionMethod == TinkerZipEntry.STORED) {\n  rafStream.endOffset=rafStream.offset + entry.size;\n}\n else {\n  rafStream.endOffset=rafStream.offset + entry.compressedSize;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 2231,
        "startLineNumber" : 341,
        "startColumnNumber" : 32,
        "endLineNumber" : 379,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);\n  DataInputStream is=new DataInputStream(rafStream);\n  final int localMagic=Integer.reverseBytes(is.readInt());\n  if (localMagic != LOCSIG) {\n    throwZipException(filename,localRaf.length(),entry.getName(),entry.localHeaderRelOffset,\"Local File Header\",localMagic);\n  }\n  is.skipBytes(2);\n  int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;\n  if ((gpbf & TinkerZipFile.GPBF_UNSUPPORTED_MASK) != 0) {\n    throw new ZipException(\"Invalid General Purpose Bit Flag: \" + gpbf);\n  }\n  is.skipBytes(18);\n  int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;\n  int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;\n  is.close();\n  rafStream.skip(fileNameLength + extraFieldLength);\n  if (entry.compressionMethod == TinkerZipEntry.STORED) {\n    rafStream.endOffset=rafStream.offset + entry.size;\n  }\n else {\n    rafStream.endOffset=rafStream.offset + entry.compressedSize;\n  }\n  return rafStream;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2255,
        "startLineNumber" : 341,
        "startColumnNumber" : 8,
        "endLineNumber" : 379,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (localRaf) {\n  RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);\n  DataInputStream is=new DataInputStream(rafStream);\n  final int localMagic=Integer.reverseBytes(is.readInt());\n  if (localMagic != LOCSIG) {\n    throwZipException(filename,localRaf.length(),entry.getName(),entry.localHeaderRelOffset,\"Local File Header\",localMagic);\n  }\n  is.skipBytes(2);\n  int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;\n  if ((gpbf & TinkerZipFile.GPBF_UNSUPPORTED_MASK) != 0) {\n    throw new ZipException(\"Invalid General Purpose Bit Flag: \" + gpbf);\n  }\n  is.skipBytes(18);\n  int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;\n  int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;\n  is.close();\n  rafStream.skip(fileNameLength + extraFieldLength);\n  if (entry.compressionMethod == TinkerZipEntry.STORED) {\n    rafStream.endOffset=rafStream.offset + entry.size;\n  }\n else {\n    rafStream.endOffset=rafStream.offset + entry.compressedSize;\n  }\n  return rafStream;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 165,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2575,
        "startLineNumber" : 333,
        "startColumnNumber" : 79,
        "endLineNumber" : 380,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  entry=getEntry(entry.getName());\n  if (entry == null) {\n    return null;\n  }\n  RandomAccessFile localRaf=raf;\nsynchronized (localRaf) {\n    RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);\n    DataInputStream is=new DataInputStream(rafStream);\n    final int localMagic=Integer.reverseBytes(is.readInt());\n    if (localMagic != LOCSIG) {\n      throwZipException(filename,localRaf.length(),entry.getName(),entry.localHeaderRelOffset,\"Local File Header\",localMagic);\n    }\n    is.skipBytes(2);\n    int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;\n    if ((gpbf & TinkerZipFile.GPBF_UNSUPPORTED_MASK) != 0) {\n      throw new ZipException(\"Invalid General Purpose Bit Flag: \" + gpbf);\n    }\n    is.skipBytes(18);\n    int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;\n    int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;\n    is.close();\n    rafStream.skip(fileNameLength + extraFieldLength);\n    if (entry.compressionMethod == TinkerZipEntry.STORED) {\n      rafStream.endOffset=rafStream.offset + entry.size;\n    }\n else {\n      rafStream.endOffset=rafStream.offset + entry.compressedSize;\n    }\n    return rafStream;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3032,
        "startLineNumber" : 323,
        "startColumnNumber" : 4,
        "endLineNumber" : 380,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns an input stream on the data of the specified  {@code ZipEntry}.\n * @param entry the ZipEntry.\n * @return an input stream of the data contained in the {@code ZipEntry}.\n * @throws IOException if an  {@code IOException} occurs.\n * @throws IllegalStateException if this zip file has been closed.\n */\npublic InputStream getInputStream(TinkerZipEntry entry) throws IOException {\n  entry=getEntry(entry.getName());\n  if (entry == null) {\n    return null;\n  }\n  RandomAccessFile localRaf=raf;\nsynchronized (localRaf) {\n    RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);\n    DataInputStream is=new DataInputStream(rafStream);\n    final int localMagic=Integer.reverseBytes(is.readInt());\n    if (localMagic != LOCSIG) {\n      throwZipException(filename,localRaf.length(),entry.getName(),entry.localHeaderRelOffset,\"Local File Header\",localMagic);\n    }\n    is.skipBytes(2);\n    int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;\n    if ((gpbf & TinkerZipFile.GPBF_UNSUPPORTED_MASK) != 0) {\n      throw new ZipException(\"Invalid General Purpose Bit Flag: \" + gpbf);\n    }\n    is.skipBytes(18);\n    int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;\n    int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;\n    is.close();\n    rafStream.skip(fileNameLength + extraFieldLength);\n    if (entry.compressionMethod == TinkerZipEntry.STORED) {\n      rafStream.endOffset=rafStream.offset + entry.size;\n    }\n else {\n      rafStream.endOffset=rafStream.offset + entry.compressedSize;\n    }\n    return rafStream;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 376,
        "startColumnNumber" : 16,
        "endLineNumber" : 376,
        "endColumnNumber" : 78
      },
      "nodeContext" : "rafStream.endOffset=rafStream.offset + entry.compressedSize;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 374,
    "startColumnNumber" : 38,
    "endLineNumber" : 374,
    "endColumnNumber" : 54
  }, {
    "charLength" : 16,
    "startLineNumber" : 376,
    "startColumnNumber" : 38,
    "endLineNumber" : 376,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}