{
  "id" : 457,
  "expression" : "AND",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/net/starlark/java/eval/Eval.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AND",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 527,
      "startColumnNumber" : 11,
      "endLineNumber" : 527,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 527,
        "startColumnNumber" : 6,
        "endLineNumber" : 527,
        "endColumnNumber" : 15
      },
      "nodeContext" : "case AND:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 467,
        "startLineNumber" : 526,
        "startColumnNumber" : 4,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (binop.getOperator()) {\ncase AND:  return Starlark.truth(x) ? eval(fr,binop.getY()) : x;\ncase OR:return Starlark.truth(x) ? x : eval(fr,binop.getY());\ndefault:Object y=eval(fr,binop.getY());\ntry {\nreturn EvalUtils.binaryOp(binop.getOperator(),x,y,fr.thread);\n}\n catch (EvalException ex) {\nfr.setErrorLocation(binop.getOperatorLocation());\nthrow ex;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 523,
        "startColumnNumber" : 49,
        "endLineNumber" : 540,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object x=eval(fr,binop.getX());\nswitch (binop.getOperator()) {\ncase AND:    return Starlark.truth(x) ? eval(fr,binop.getY()) : x;\ncase OR:  return Starlark.truth(x) ? x : eval(fr,binop.getY());\ndefault:Object y=eval(fr,binop.getY());\ntry {\nreturn EvalUtils.binaryOp(binop.getOperator(),x,y,fr.thread);\n}\n catch (EvalException ex) {\nfr.setErrorLocation(binop.getOperatorLocation());\nthrow ex;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 522,
        "startColumnNumber" : 2,
        "endLineNumber" : 540,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Object evalBinaryOperator(StarlarkThread.Frame fr,BinaryOperatorExpression binop) throws EvalException, InterruptedException {\n  Object x=eval(fr,binop.getX());\nswitch (binop.getOperator()) {\ncase AND:    return Starlark.truth(x) ? eval(fr,binop.getY()) : x;\ncase OR:  return Starlark.truth(x) ? x : eval(fr,binop.getY());\ndefault:Object y=eval(fr,binop.getY());\ntry {\nreturn EvalUtils.binaryOp(binop.getOperator(),x,y,fr.thread);\n}\n catch (EvalException ex) {\nfr.setErrorLocation(binop.getOperatorLocation());\nthrow ex;\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 527,
        "startColumnNumber" : 6,
        "endLineNumber" : 527,
        "endColumnNumber" : 15
      },
      "nodeContext" : "case AND:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "net.starlark.java.syntax.TokenKind"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 527,
    "startColumnNumber" : 11,
    "endLineNumber" : 527,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}