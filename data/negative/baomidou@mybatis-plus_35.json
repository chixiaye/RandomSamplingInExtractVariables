{
  "id" : 35,
  "expression" : "injectionConfig",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "047d6eab831f917bb5338ffc2f62611eac1be7d7",
  "filePath" : "mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "injectionConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 160,
      "startColumnNumber" : 24,
      "endLineNumber" : 160,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 39
      },
      "nodeContext" : "null != injectionConfig",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != injectionConfig) {\n  injectionConfig.initMap();\n  ctx.put(\"cfg\",injectionConfig.getMap());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 39
      },
      "nodeContext" : "null != injectionConfig",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.InjectionConfig"
  }, {
    "nodeContext" : "injectionConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 164,
      "startColumnNumber" : 16,
      "endLineNumber" : 164,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 164,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 41
      },
      "nodeContext" : "injectionConfig.initMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 164,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 42
      },
      "nodeContext" : "injectionConfig.initMap();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 160,
        "startColumnNumber" : 41,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  injectionConfig.initMap();\n  ctx.put(\"cfg\",injectionConfig.getMap());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != injectionConfig) {\n  injectionConfig.initMap();\n  ctx.put(\"cfg\",injectionConfig.getMap());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 164,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 42
      },
      "nodeContext" : "injectionConfig.initMap();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.InjectionConfig"
  }, {
    "nodeContext" : "injectionConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 165,
      "startColumnNumber" : 31,
      "endLineNumber" : 165,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 165,
        "startColumnNumber" : 31,
        "endLineNumber" : 165,
        "endColumnNumber" : 55
      },
      "nodeContext" : "injectionConfig.getMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ctx.put(\"cfg\",injectionConfig.getMap())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"cfg\",injectionConfig.getMap());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 160,
        "startColumnNumber" : 41,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  injectionConfig.initMap();\n  ctx.put(\"cfg\",injectionConfig.getMap());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != injectionConfig) {\n  injectionConfig.initMap();\n  ctx.put(\"cfg\",injectionConfig.getMap());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 165,
        "startColumnNumber" : 16,
        "endLineNumber" : 165,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"cfg\",injectionConfig.getMap());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.InjectionConfig"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 160,
    "startColumnNumber" : 24,
    "endLineNumber" : 160,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 164,
    "startColumnNumber" : 16,
    "endLineNumber" : 164,
    "endColumnNumber" : 31
  }, {
    "charLength" : 15,
    "startLineNumber" : 165,
    "startColumnNumber" : 31,
    "endLineNumber" : 165,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}