{
  "id" : 259,
  "expression" : "Double",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Double",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 470,
      "startColumnNumber" : 22,
      "endLineNumber" : 470,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 470,
        "startColumnNumber" : 22,
        "endLineNumber" : 470,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Double.doubleToLongBits(lhs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 470,
        "startColumnNumber" : 15,
        "endLineNumber" : 470,
        "endColumnNumber" : 81
      },
      "nodeContext" : "append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 470,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 82
      },
      "nodeContext" : "return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 466,
        "startColumnNumber" : 56,
        "endLineNumber" : 471,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!isEquals) {\n    return this;\n  }\n  return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 733,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 471,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p>Test if two <code>double</code>s are equal by testing that the pattern of bits returned by <code>doubleToLong</code> are equal.</p> <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p> <p>It is compatible with the hash code generated by <code>HashCodeBuilder</code>.</p>\n * @param lhs  the left hand <code>double</code>\n * @param rhs  the right hand <code>double</code>\n * @return EqualsBuilder - used to chain calls.\n */\npublic EqualsBuilder append(double lhs,double rhs){\n  if (!isEquals) {\n    return this;\n  }\n  return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 30,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 470,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 82
      },
      "nodeContext" : "return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Double"
  }, {
    "nodeContext" : "Double",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 470,
      "startColumnNumber" : 52,
      "endLineNumber" : 470,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 470,
        "startColumnNumber" : 52,
        "endLineNumber" : 470,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Double.doubleToLongBits(rhs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 470,
        "startColumnNumber" : 15,
        "endLineNumber" : 470,
        "endColumnNumber" : 81
      },
      "nodeContext" : "append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 470,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 82
      },
      "nodeContext" : "return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 466,
        "startColumnNumber" : 56,
        "endLineNumber" : 471,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!isEquals) {\n    return this;\n  }\n  return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 733,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 471,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p>Test if two <code>double</code>s are equal by testing that the pattern of bits returned by <code>doubleToLong</code> are equal.</p> <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p> <p>It is compatible with the hash code generated by <code>HashCodeBuilder</code>.</p>\n * @param lhs  the left hand <code>double</code>\n * @param rhs  the right hand <code>double</code>\n * @return EqualsBuilder - used to chain calls.\n */\npublic EqualsBuilder append(double lhs,double rhs){\n  if (!isEquals) {\n    return this;\n  }\n  return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 30,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 470,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 82
      },
      "nodeContext" : "return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Double"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 470,
    "startColumnNumber" : 22,
    "endLineNumber" : 470,
    "endColumnNumber" : 28
  }, {
    "charLength" : 6,
    "startLineNumber" : 470,
    "startColumnNumber" : 52,
    "endLineNumber" : 470,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}