{
  "id" : 339,
  "expression" : "JobScheduler",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/JobSchedulerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "JobScheduler",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 116,
      "startColumnNumber" : 28,
      "endLineNumber" : 116,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 116,
        "startColumnNumber" : 28,
        "endLineNumber" : 116,
        "endColumnNumber" : 65
      },
      "nodeContext" : "JobScheduler.JobStartExecutorSupplier",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 116,
        "startColumnNumber" : 28,
        "endLineNumber" : 116,
        "endColumnNumber" : 65
      },
      "nodeContext" : "JobScheduler.JobStartExecutorSupplier",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 116,
        "startColumnNumber" : 28,
        "endLineNumber" : 116,
        "endColumnNumber" : 71
      },
      "nodeContext" : "JobScheduler.JobStartExecutorSupplier.class",
      "nodeType" : "TypeLiteral",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 72
      },
      "nodeContext" : "PowerMockito.mockStatic(JobScheduler.JobStartExecutorSupplier.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 73
      },
      "nodeContext" : "PowerMockito.mockStatic(JobScheduler.JobStartExecutorSupplier.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1103,
        "startLineNumber" : 96,
        "startColumnNumber" : 22,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MockitoAnnotations.initMocks(this);\n  mFakeClockForTime=new FakeClock();\n  mFakeClockForWorker=new FakeClock();\n  mFakeClockForScheduled=new FakeClock();\n  mFakeClockForTime.incrementBy(1000);\n  mFakeClockForWorker.incrementBy(1000);\n  mFakeClockForScheduled.incrementBy(1000);\n  PowerMockito.mockStatic(SystemClock.class);\n  when(SystemClock.uptimeMillis()).thenAnswer(new Answer<Long>(){\n    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {\n      return mFakeClockForTime.now();\n    }\n  }\n);\n  mTestExecutorService=new TestExecutorService(mFakeClockForWorker);\n  mTestScheduledExecutorService=new TestScheduledExecutorService(mFakeClockForScheduled);\n  PowerMockito.mockStatic(JobScheduler.JobStartExecutorSupplier.class);\n  when(JobScheduler.JobStartExecutorSupplier.get()).thenReturn(mTestScheduledExecutorService);\n  mTestJobRunnable=new TestJobRunnable();\n  mJobScheduler=new JobScheduler(mTestExecutorService,mTestJobRunnable,INTERVAL);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public void setUp(){\n  MockitoAnnotations.initMocks(this);\n  mFakeClockForTime=new FakeClock();\n  mFakeClockForWorker=new FakeClock();\n  mFakeClockForScheduled=new FakeClock();\n  mFakeClockForTime.incrementBy(1000);\n  mFakeClockForWorker.incrementBy(1000);\n  mFakeClockForScheduled.incrementBy(1000);\n  PowerMockito.mockStatic(SystemClock.class);\n  when(SystemClock.uptimeMillis()).thenAnswer(new Answer<Long>(){\n    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {\n      return mFakeClockForTime.now();\n    }\n  }\n);\n  mTestExecutorService=new TestExecutorService(mFakeClockForWorker);\n  mTestScheduledExecutorService=new TestScheduledExecutorService(mFakeClockForScheduled);\n  PowerMockito.mockStatic(JobScheduler.JobStartExecutorSupplier.class);\n  when(JobScheduler.JobStartExecutorSupplier.get()).thenReturn(mTestScheduledExecutorService);\n  mTestJobRunnable=new TestJobRunnable();\n  mJobScheduler=new JobScheduler(mTestExecutorService,mTestJobRunnable,INTERVAL);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 73
      },
      "nodeContext" : "PowerMockito.mockStatic(JobScheduler.JobStartExecutorSupplier.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.producers.JobScheduler"
  }, {
    "nodeContext" : "JobScheduler",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 117,
      "startColumnNumber" : 9,
      "endLineNumber" : 117,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 117,
        "startColumnNumber" : 9,
        "endLineNumber" : 117,
        "endColumnNumber" : 46
      },
      "nodeContext" : "JobScheduler.JobStartExecutorSupplier",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 117,
        "startColumnNumber" : 9,
        "endLineNumber" : 117,
        "endColumnNumber" : 52
      },
      "nodeContext" : "JobScheduler.JobStartExecutorSupplier.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 53
      },
      "nodeContext" : "when(JobScheduler.JobStartExecutorSupplier.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 95
      },
      "nodeContext" : "when(JobScheduler.JobStartExecutorSupplier.get()).thenReturn(mTestScheduledExecutorService)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 96
      },
      "nodeContext" : "when(JobScheduler.JobStartExecutorSupplier.get()).thenReturn(mTestScheduledExecutorService);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1103,
        "startLineNumber" : 96,
        "startColumnNumber" : 22,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MockitoAnnotations.initMocks(this);\n  mFakeClockForTime=new FakeClock();\n  mFakeClockForWorker=new FakeClock();\n  mFakeClockForScheduled=new FakeClock();\n  mFakeClockForTime.incrementBy(1000);\n  mFakeClockForWorker.incrementBy(1000);\n  mFakeClockForScheduled.incrementBy(1000);\n  PowerMockito.mockStatic(SystemClock.class);\n  when(SystemClock.uptimeMillis()).thenAnswer(new Answer<Long>(){\n    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {\n      return mFakeClockForTime.now();\n    }\n  }\n);\n  mTestExecutorService=new TestExecutorService(mFakeClockForWorker);\n  mTestScheduledExecutorService=new TestScheduledExecutorService(mFakeClockForScheduled);\n  PowerMockito.mockStatic(JobScheduler.JobStartExecutorSupplier.class);\n  when(JobScheduler.JobStartExecutorSupplier.get()).thenReturn(mTestScheduledExecutorService);\n  mTestJobRunnable=new TestJobRunnable();\n  mJobScheduler=new JobScheduler(mTestExecutorService,mTestJobRunnable,INTERVAL);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public void setUp(){\n  MockitoAnnotations.initMocks(this);\n  mFakeClockForTime=new FakeClock();\n  mFakeClockForWorker=new FakeClock();\n  mFakeClockForScheduled=new FakeClock();\n  mFakeClockForTime.incrementBy(1000);\n  mFakeClockForWorker.incrementBy(1000);\n  mFakeClockForScheduled.incrementBy(1000);\n  PowerMockito.mockStatic(SystemClock.class);\n  when(SystemClock.uptimeMillis()).thenAnswer(new Answer<Long>(){\n    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {\n      return mFakeClockForTime.now();\n    }\n  }\n);\n  mTestExecutorService=new TestExecutorService(mFakeClockForWorker);\n  mTestScheduledExecutorService=new TestScheduledExecutorService(mFakeClockForScheduled);\n  PowerMockito.mockStatic(JobScheduler.JobStartExecutorSupplier.class);\n  when(JobScheduler.JobStartExecutorSupplier.get()).thenReturn(mTestScheduledExecutorService);\n  mTestJobRunnable=new TestJobRunnable();\n  mJobScheduler=new JobScheduler(mTestExecutorService,mTestJobRunnable,INTERVAL);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 96
      },
      "nodeContext" : "when(JobScheduler.JobStartExecutorSupplier.get()).thenReturn(mTestScheduledExecutorService);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.producers.JobScheduler"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 116,
    "startColumnNumber" : 28,
    "endLineNumber" : 116,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 117,
    "startColumnNumber" : 9,
    "endLineNumber" : 117,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}