{
  "id" : 648,
  "expression" : "statistics",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "abbaaa75b5bbcc93de7f6b6668cc44ae3629662f",
  "filePath" : "plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/data/ExecuteBatchImpl.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "statistics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 147,
      "startColumnNumber" : 39,
      "endLineNumber" : 147,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 147,
        "startColumnNumber" : 28,
        "endLineNumber" : 147,
        "endColumnNumber" : 61
      },
      "nodeContext" : "flushBatch(statistics,statement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 147,
        "startColumnNumber" : 28,
        "endLineNumber" : 147,
        "endColumnNumber" : 62
      },
      "nodeContext" : "flushBatch(statistics,statement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 146,
        "startColumnNumber" : 45,
        "endLineNumber" : 148,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  flushBatch(statistics,statement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 146,
        "startColumnNumber" : 24,
        "endLineNumber" : 148,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (actions == null) {\n  flushBatch(statistics,statement);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 144,
        "startColumnNumber" : 57,
        "endLineNumber" : 153,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (actions == null) {\n    flushBatch(statistics,statement);\n  }\n  statement.close();\n  statement=null;\n  statementsInBatch=0;\n  reuse=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 144,
        "startColumnNumber" : 20,
        "endLineNumber" : 153,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!reuse && statementsInBatch > 0) {\n  if (actions == null) {\n    flushBatch(statistics,statement);\n  }\n  statement.close();\n  statement=null;\n  statementsInBatch=0;\n  reuse=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 136,
        "startColumnNumber" : 27,
        "endLineNumber" : 154,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (int i=0; i < rowValues.length; i++) {\n    nulls[i]=DBUtils.isNullValue(rowValues[i]);\n  }\n  if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n    reuse=false;\n  }\n  System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n  if (!reuse && statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n    statementsInBatch=0;\n    reuse=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 835,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 154,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (reuse) {\n  for (int i=0; i < rowValues.length; i++) {\n    nulls[i]=DBUtils.isNullValue(rowValues[i]);\n  }\n  if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n    reuse=false;\n  }\n  System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n  if (!reuse && statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n    statementsInBatch=0;\n    reuse=true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 147,
        "startColumnNumber" : 28,
        "endLineNumber" : 147,
        "endColumnNumber" : 62
      },
      "nodeContext" : "flushBatch(statistics,statement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.DBCStatistics"
  }, {
    "nodeContext" : "statistics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 157,
      "startColumnNumber" : 20,
      "endLineNumber" : 157,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 71
      },
      "nodeContext" : "statistics.setQueryText(statement.getQueryString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 72
      },
      "nodeContext" : "statistics.setQueryText(statement.getQueryString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 155,
        "startColumnNumber" : 49,
        "endLineNumber" : 159,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  statement=prepareStatement(session,handlers,rowValues,options);\n  statistics.setQueryText(statement.getQueryString());\n  statistics.addStatementsCount();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 155,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (statement == null || !reuse) {\n  statement=prepareStatement(session,handlers,rowValues,options);\n  statistics.setQueryText(statement.getQueryString());\n  statistics.addStatementsCount();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 72
      },
      "nodeContext" : "statistics.setQueryText(statement.getQueryString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.DBCStatistics"
  }, {
    "nodeContext" : "statistics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 158,
      "startColumnNumber" : 20,
      "endLineNumber" : 158,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 158,
        "startColumnNumber" : 20,
        "endLineNumber" : 158,
        "endColumnNumber" : 51
      },
      "nodeContext" : "statistics.addStatementsCount()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 158,
        "startColumnNumber" : 20,
        "endLineNumber" : 158,
        "endColumnNumber" : 52
      },
      "nodeContext" : "statistics.addStatementsCount();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 155,
        "startColumnNumber" : 49,
        "endLineNumber" : 159,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  statement=prepareStatement(session,handlers,rowValues,options);\n  statistics.setQueryText(statement.getQueryString());\n  statistics.addStatementsCount();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 155,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (statement == null || !reuse) {\n  statement=prepareStatement(session,handlers,rowValues,options);\n  statistics.setQueryText(statement.getQueryString());\n  statistics.addStatementsCount();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 158,
        "startColumnNumber" : 20,
        "endLineNumber" : 158,
        "endColumnNumber" : 52
      },
      "nodeContext" : "statistics.addStatementsCount();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.DBCStatistics"
  }, {
    "nodeContext" : "statistics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 169,
      "startColumnNumber" : 45,
      "endLineNumber" : 169,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 169,
        "startColumnNumber" : 28,
        "endLineNumber" : 169,
        "endColumnNumber" : 67
      },
      "nodeContext" : "executeStatement(statistics,statement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 169,
        "startColumnNumber" : 28,
        "endLineNumber" : 169,
        "endColumnNumber" : 68
      },
      "nodeContext" : "executeStatement(statistics,statement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 166,
        "startColumnNumber" : 31,
        "endLineNumber" : 185,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  long startTime=System.currentTimeMillis();\n  executeStatement(statistics,statement);\n  statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n  long rowCount=statement.getUpdateRowCount();\n  if (rowCount > 0) {\n    statistics.addRowsUpdated(rowCount);\n  }\n  if (keysReceiver != null) {\n    try {\n      readKeys(statement.getSession(),statement,keysReceiver);\n    }\n catch (    Exception e) {\n      log.warn(\"Error reading auto-generated keys\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 163,
        "startColumnNumber" : 24,
        "endLineNumber" : 185,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (useBatch) {\n  statement.addToBatch();\n  statementsInBatch++;\n}\n else {\n  long startTime=System.currentTimeMillis();\n  executeStatement(statistics,statement);\n  statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n  long rowCount=statement.getUpdateRowCount();\n  if (rowCount > 0) {\n    statistics.addRowsUpdated(rowCount);\n  }\n  if (keysReceiver != null) {\n    try {\n      readKeys(statement.getSession(),statement,keysReceiver);\n    }\n catch (    Exception e) {\n      log.warn(\"Error reading auto-generated keys\",e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 162,
        "startColumnNumber" : 41,
        "endLineNumber" : 186,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (useBatch) {\n    statement.addToBatch();\n    statementsInBatch++;\n  }\n else {\n    long startTime=System.currentTimeMillis();\n    executeStatement(statistics,statement);\n    statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n    long rowCount=statement.getUpdateRowCount();\n    if (rowCount > 0) {\n      statistics.addRowsUpdated(rowCount);\n    }\n    if (keysReceiver != null) {\n      try {\n        readKeys(statement.getSession(),statement,keysReceiver);\n      }\n catch (      Exception e) {\n        log.warn(\"Error reading auto-generated keys\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 162,
        "startColumnNumber" : 20,
        "endLineNumber" : 192,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (actions == null) {\n  if (useBatch) {\n    statement.addToBatch();\n    statementsInBatch++;\n  }\n else {\n    long startTime=System.currentTimeMillis();\n    executeStatement(statistics,statement);\n    statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n    long rowCount=statement.getUpdateRowCount();\n    if (rowCount > 0) {\n      statistics.addRowsUpdated(rowCount);\n    }\n    if (keysReceiver != null) {\n      try {\n        readKeys(statement.getSession(),statement,keysReceiver);\n      }\n catch (      Exception e) {\n        log.warn(\"Error reading auto-generated keys\",e);\n      }\n    }\n  }\n}\n else {\n  String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n  actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1657,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 193,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n  finally {\n  if (!reuse) {\n    statement.close();\n  }\n  if (rowIndex > 0 && rowIndex % 100 == 0) {\n    session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 146,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 169,
        "startColumnNumber" : 28,
        "endLineNumber" : 169,
        "endColumnNumber" : 68
      },
      "nodeContext" : "executeStatement(statistics,statement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.DBCStatistics"
  }, {
    "nodeContext" : "statistics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 170,
      "startColumnNumber" : 28,
      "endLineNumber" : 170,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 170,
        "startColumnNumber" : 28,
        "endLineNumber" : 170,
        "endColumnNumber" : 93
      },
      "nodeContext" : "statistics.addExecuteTime(System.currentTimeMillis() - startTime)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 170,
        "startColumnNumber" : 28,
        "endLineNumber" : 170,
        "endColumnNumber" : 94
      },
      "nodeContext" : "statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 166,
        "startColumnNumber" : 31,
        "endLineNumber" : 185,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  long startTime=System.currentTimeMillis();\n  executeStatement(statistics,statement);\n  statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n  long rowCount=statement.getUpdateRowCount();\n  if (rowCount > 0) {\n    statistics.addRowsUpdated(rowCount);\n  }\n  if (keysReceiver != null) {\n    try {\n      readKeys(statement.getSession(),statement,keysReceiver);\n    }\n catch (    Exception e) {\n      log.warn(\"Error reading auto-generated keys\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 163,
        "startColumnNumber" : 24,
        "endLineNumber" : 185,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (useBatch) {\n  statement.addToBatch();\n  statementsInBatch++;\n}\n else {\n  long startTime=System.currentTimeMillis();\n  executeStatement(statistics,statement);\n  statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n  long rowCount=statement.getUpdateRowCount();\n  if (rowCount > 0) {\n    statistics.addRowsUpdated(rowCount);\n  }\n  if (keysReceiver != null) {\n    try {\n      readKeys(statement.getSession(),statement,keysReceiver);\n    }\n catch (    Exception e) {\n      log.warn(\"Error reading auto-generated keys\",e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 162,
        "startColumnNumber" : 41,
        "endLineNumber" : 186,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (useBatch) {\n    statement.addToBatch();\n    statementsInBatch++;\n  }\n else {\n    long startTime=System.currentTimeMillis();\n    executeStatement(statistics,statement);\n    statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n    long rowCount=statement.getUpdateRowCount();\n    if (rowCount > 0) {\n      statistics.addRowsUpdated(rowCount);\n    }\n    if (keysReceiver != null) {\n      try {\n        readKeys(statement.getSession(),statement,keysReceiver);\n      }\n catch (      Exception e) {\n        log.warn(\"Error reading auto-generated keys\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 162,
        "startColumnNumber" : 20,
        "endLineNumber" : 192,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (actions == null) {\n  if (useBatch) {\n    statement.addToBatch();\n    statementsInBatch++;\n  }\n else {\n    long startTime=System.currentTimeMillis();\n    executeStatement(statistics,statement);\n    statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n    long rowCount=statement.getUpdateRowCount();\n    if (rowCount > 0) {\n      statistics.addRowsUpdated(rowCount);\n    }\n    if (keysReceiver != null) {\n      try {\n        readKeys(statement.getSession(),statement,keysReceiver);\n      }\n catch (      Exception e) {\n        log.warn(\"Error reading auto-generated keys\",e);\n      }\n    }\n  }\n}\n else {\n  String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n  actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1657,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 193,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n  finally {\n  if (!reuse) {\n    statement.close();\n  }\n  if (rowIndex > 0 && rowIndex % 100 == 0) {\n    session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 146,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 170,
        "startColumnNumber" : 28,
        "endLineNumber" : 170,
        "endColumnNumber" : 94
      },
      "nodeContext" : "statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.DBCStatistics"
  }, {
    "nodeContext" : "statistics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 174,
      "startColumnNumber" : 32,
      "endLineNumber" : 174,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 174,
        "startColumnNumber" : 32,
        "endLineNumber" : 174,
        "endColumnNumber" : 67
      },
      "nodeContext" : "statistics.addRowsUpdated(rowCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 174,
        "startColumnNumber" : 32,
        "endLineNumber" : 174,
        "endColumnNumber" : 68
      },
      "nodeContext" : "statistics.addRowsUpdated(rowCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 173,
        "startColumnNumber" : 46,
        "endLineNumber" : 175,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  statistics.addRowsUpdated(rowCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 173,
        "startColumnNumber" : 28,
        "endLineNumber" : 175,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (rowCount > 0) {\n  statistics.addRowsUpdated(rowCount);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 166,
        "startColumnNumber" : 31,
        "endLineNumber" : 185,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  long startTime=System.currentTimeMillis();\n  executeStatement(statistics,statement);\n  statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n  long rowCount=statement.getUpdateRowCount();\n  if (rowCount > 0) {\n    statistics.addRowsUpdated(rowCount);\n  }\n  if (keysReceiver != null) {\n    try {\n      readKeys(statement.getSession(),statement,keysReceiver);\n    }\n catch (    Exception e) {\n      log.warn(\"Error reading auto-generated keys\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 163,
        "startColumnNumber" : 24,
        "endLineNumber" : 185,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (useBatch) {\n  statement.addToBatch();\n  statementsInBatch++;\n}\n else {\n  long startTime=System.currentTimeMillis();\n  executeStatement(statistics,statement);\n  statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n  long rowCount=statement.getUpdateRowCount();\n  if (rowCount > 0) {\n    statistics.addRowsUpdated(rowCount);\n  }\n  if (keysReceiver != null) {\n    try {\n      readKeys(statement.getSession(),statement,keysReceiver);\n    }\n catch (    Exception e) {\n      log.warn(\"Error reading auto-generated keys\",e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 162,
        "startColumnNumber" : 41,
        "endLineNumber" : 186,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (useBatch) {\n    statement.addToBatch();\n    statementsInBatch++;\n  }\n else {\n    long startTime=System.currentTimeMillis();\n    executeStatement(statistics,statement);\n    statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n    long rowCount=statement.getUpdateRowCount();\n    if (rowCount > 0) {\n      statistics.addRowsUpdated(rowCount);\n    }\n    if (keysReceiver != null) {\n      try {\n        readKeys(statement.getSession(),statement,keysReceiver);\n      }\n catch (      Exception e) {\n        log.warn(\"Error reading auto-generated keys\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 162,
        "startColumnNumber" : 20,
        "endLineNumber" : 192,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (actions == null) {\n  if (useBatch) {\n    statement.addToBatch();\n    statementsInBatch++;\n  }\n else {\n    long startTime=System.currentTimeMillis();\n    executeStatement(statistics,statement);\n    statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n    long rowCount=statement.getUpdateRowCount();\n    if (rowCount > 0) {\n      statistics.addRowsUpdated(rowCount);\n    }\n    if (keysReceiver != null) {\n      try {\n        readKeys(statement.getSession(),statement,keysReceiver);\n      }\n catch (      Exception e) {\n        log.warn(\"Error reading auto-generated keys\",e);\n      }\n    }\n  }\n}\n else {\n  String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n  actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1657,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 193,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n  finally {\n  if (!reuse) {\n    statement.close();\n  }\n  if (rowIndex > 0 && rowIndex % 100 == 0) {\n    session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 146,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 174,
        "startColumnNumber" : 32,
        "endLineNumber" : 174,
        "endColumnNumber" : 68
      },
      "nodeContext" : "statistics.addRowsUpdated(rowCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.DBCStatistics"
  }, {
    "nodeContext" : "statistics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 206,
      "startColumnNumber" : 31,
      "endLineNumber" : 206,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 206,
        "startColumnNumber" : 20,
        "endLineNumber" : 206,
        "endColumnNumber" : 53
      },
      "nodeContext" : "flushBatch(statistics,statement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 206,
        "startColumnNumber" : 20,
        "endLineNumber" : 206,
        "endColumnNumber" : 54
      },
      "nodeContext" : "flushBatch(statistics,statement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 205,
        "startColumnNumber" : 37,
        "endLineNumber" : 207,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  flushBatch(statistics,statement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 205,
        "startColumnNumber" : 16,
        "endLineNumber" : 207,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (actions == null) {\n  flushBatch(statistics,statement);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 204,
        "startColumnNumber" : 39,
        "endLineNumber" : 210,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (actions == null) {\n    flushBatch(statistics,statement);\n  }\n  statement.close();\n  statement=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (statementsInBatch > 0) {\n  if (actions == null) {\n    flushBatch(statistics,statement);\n  }\n  statement.close();\n  statement=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 206,
        "startColumnNumber" : 20,
        "endLineNumber" : 206,
        "endColumnNumber" : 54
      },
      "nodeContext" : "flushBatch(statistics,statement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.DBCStatistics"
  }, {
    "nodeContext" : "statistics",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 220,
      "startColumnNumber" : 15,
      "endLineNumber" : 220,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 26
      },
      "nodeContext" : "return statistics;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 26
      },
      "nodeContext" : "return statistics;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.model.exec.DBCStatistics"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 147,
    "startColumnNumber" : 39,
    "endLineNumber" : 147,
    "endColumnNumber" : 49
  }, {
    "charLength" : 10,
    "startLineNumber" : 157,
    "startColumnNumber" : 20,
    "endLineNumber" : 157,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 158,
    "startColumnNumber" : 20,
    "endLineNumber" : 158,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 169,
    "startColumnNumber" : 45,
    "endLineNumber" : 169,
    "endColumnNumber" : 55
  }, {
    "charLength" : 10,
    "startLineNumber" : 170,
    "startColumnNumber" : 28,
    "endLineNumber" : 170,
    "endColumnNumber" : 38
  }, {
    "charLength" : 10,
    "startLineNumber" : 174,
    "startColumnNumber" : 32,
    "endLineNumber" : 174,
    "endColumnNumber" : 42
  }, {
    "charLength" : 10,
    "startLineNumber" : 206,
    "startColumnNumber" : 31,
    "endLineNumber" : 206,
    "endColumnNumber" : 41
  }, {
    "charLength" : 10,
    "startLineNumber" : 220,
    "startColumnNumber" : 15,
    "endLineNumber" : 220,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 14
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  } ]
}