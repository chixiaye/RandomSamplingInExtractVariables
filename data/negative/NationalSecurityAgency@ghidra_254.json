{
  "id" : 254,
  "expression" : "reader.getLimit()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/PDB/src/main/java/ghidra/app/util/bin/format/pdb2/pdbreader/TypeProgramInterfaceParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "reader.getLimit()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 66,
      "startColumnNumber" : 6,
      "endLineNumber" : 66,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 66,
        "startColumnNumber" : 6,
        "endLineNumber" : 66,
        "endColumnNumber" : 43
      },
      "nodeContext" : "reader.getLimit() < versionNumberSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 68,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (reader.getLimit() < versionNumberSize) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 59,
        "startColumnNumber" : 56,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AbstractTypeProgramInterface typeProgramInterface;\n  int versionNumberSize=AbstractTypeProgramInterface.getVersionNumberSize();\n  int streamNumber=getStreamNumber();\n  PdbByteReader reader=pdb.getReaderForStreamNumber(streamNumber,0,versionNumberSize,monitor);\n  if (reader.getLimit() < versionNumberSize) {\n    return null;\n  }\n  int versionNumber=AbstractTypeProgramInterface.deserializeVersionNumber(reader);\nswitch (versionNumber) {\ncase TI20_ID:case TI40_ID:case TI41_ID:    typeProgramInterface=new TypeProgramInterface200(pdb,getCategory(),streamNumber);\n  break;\ncase TI42_ID:case TI50DEP_ID:typeProgramInterface=new TypeProgramInterface500(pdb,getCategory(),streamNumber);\nbreak;\ncase TI50_ID:case TI70_ID:case TI80_ID:typeProgramInterface=new TypeProgramInterface800(pdb,getCategory(),streamNumber);\nbreak;\ndefault:throw new PdbException(\"Unknown TPI Version: \" + versionNumber);\n}\nreturn typeProgramInterface;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2178,
        "startLineNumber" : 46,
        "startColumnNumber" : 1,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Parses information to determine the version of  {@link AbstractTypeProgramInterface} tocreate.\n * @param pdb {@link AbstractPdb} that owns this {@link AbstractTypeProgramInterface}.\n * @param monitor {@link TaskMonitor} used for checking cancellation.\n * @return the appropriate {@link AbstractTypeProgramInterface} or null if the stream doesnot have enough information to be parsed.\n * @throws IOException On file seek or read, invalid parameters, bad file configuration, orinability to read required bytes.\n * @throws PdbException Upon error in processing components.\n * @throws CancelledException Upon user cancellation.\n */\npublic AbstractTypeProgramInterface parse(AbstractPdb pdb,TaskMonitor monitor) throws IOException, PdbException, CancelledException {\n  AbstractTypeProgramInterface typeProgramInterface;\n  int versionNumberSize=AbstractTypeProgramInterface.getVersionNumberSize();\n  int streamNumber=getStreamNumber();\n  PdbByteReader reader=pdb.getReaderForStreamNumber(streamNumber,0,versionNumberSize,monitor);\n  if (reader.getLimit() < versionNumberSize) {\n    return null;\n  }\n  int versionNumber=AbstractTypeProgramInterface.deserializeVersionNumber(reader);\nswitch (versionNumber) {\ncase TI20_ID:case TI40_ID:case TI41_ID:    typeProgramInterface=new TypeProgramInterface200(pdb,getCategory(),streamNumber);\n  break;\ncase TI42_ID:case TI50DEP_ID:typeProgramInterface=new TypeProgramInterface500(pdb,getCategory(),streamNumber);\nbreak;\ncase TI50_ID:case TI70_ID:case TI80_ID:typeProgramInterface=new TypeProgramInterface800(pdb,getCategory(),streamNumber);\nbreak;\ndefault:throw new PdbException(\"Unknown TPI Version: \" + versionNumber);\n}\nreturn typeProgramInterface;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 66,
        "startColumnNumber" : 6,
        "endLineNumber" : 66,
        "endColumnNumber" : 43
      },
      "nodeContext" : "reader.getLimit() < versionNumberSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 66,
    "startColumnNumber" : 6,
    "endLineNumber" : 66,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}