{
  "id" : 339,
  "expression" : "\"selectPhyOffset exception \"",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"selectPhyOffset exception \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 250,
      "startColumnNumber" : 26,
      "endLineNumber" : 250,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 250,
        "startColumnNumber" : 16,
        "endLineNumber" : 250,
        "endColumnNumber" : 58
      },
      "nodeContext" : "log.error(\"selectPhyOffset exception \",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 250,
        "startColumnNumber" : 16,
        "endLineNumber" : 250,
        "endColumnNumber" : 59
      },
      "nodeContext" : "log.error(\"selectPhyOffset exception \",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 249,
        "startColumnNumber" : 34,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  log.error(\"selectPhyOffset exception \",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 249,
        "startColumnNumber" : 14,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  log.error(\"selectPhyOffset exception \",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2630,
        "startLineNumber" : 197,
        "startColumnNumber" : 12,
        "endLineNumber" : 261,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (lock) {\n  }\n  int slotValue=this.mappedByteBuffer.getInt(absSlotPos);\n  if (slotValue <= invalidIndex || slotValue > this.indexHeader.getIndexCount() || this.indexHeader.getIndexCount() <= 1) {\n  }\n else {\n    for (int nextIndexToRead=slotValue; ; ) {\n      if (phyOffsets.size() >= maxNum) {\n        break;\n      }\n      int absIndexPos=IndexHeader.INDEX_HEADER_SIZE + this.hashSlotNum * hashSlotSize + nextIndexToRead * indexSize;\n      int keyHashRead=this.mappedByteBuffer.getInt(absIndexPos);\n      long phyOffsetRead=this.mappedByteBuffer.getLong(absIndexPos + 4);\n      long timeDiff=(long)this.mappedByteBuffer.getInt(absIndexPos + 4 + 8);\n      int prevIndexRead=this.mappedByteBuffer.getInt(absIndexPos + 4 + 8+ 4);\n      if (timeDiff < 0) {\n        break;\n      }\n      timeDiff*=1000L;\n      long timeRead=this.indexHeader.getBeginTimestamp() + timeDiff;\n      boolean timeMatched=(timeRead >= begin) && (timeRead <= end);\n      if (keyHash == keyHashRead && timeMatched) {\n        phyOffsets.add(phyOffsetRead);\n      }\n      if (prevIndexRead <= invalidIndex || prevIndexRead > this.indexHeader.getIndexCount() || prevIndexRead == nextIndexToRead || timeRead < begin) {\n        break;\n      }\n      nextIndexToRead=prevIndexRead;\n    }\n  }\n}\n catch (Exception e) {\n  log.error(\"selectPhyOffset exception \",e);\n}\n finally {\n  if (fileLock != null) {\n    try {\n      fileLock.release();\n    }\n catch (    IOException e) {\n      log.error(\"Failed to release the lock\",e);\n    }\n  }\n  this.mappedFile.release();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2883,
        "startLineNumber" : 191,
        "startColumnNumber" : 36,
        "endLineNumber" : 262,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int keyHash=indexKeyHashMethod(key);\n  int slotPos=keyHash % this.hashSlotNum;\n  int absSlotPos=IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;\n  FileLock fileLock=null;\n  try {\n    if (lock) {\n    }\n    int slotValue=this.mappedByteBuffer.getInt(absSlotPos);\n    if (slotValue <= invalidIndex || slotValue > this.indexHeader.getIndexCount() || this.indexHeader.getIndexCount() <= 1) {\n    }\n else {\n      for (int nextIndexToRead=slotValue; ; ) {\n        if (phyOffsets.size() >= maxNum) {\n          break;\n        }\n        int absIndexPos=IndexHeader.INDEX_HEADER_SIZE + this.hashSlotNum * hashSlotSize + nextIndexToRead * indexSize;\n        int keyHashRead=this.mappedByteBuffer.getInt(absIndexPos);\n        long phyOffsetRead=this.mappedByteBuffer.getLong(absIndexPos + 4);\n        long timeDiff=(long)this.mappedByteBuffer.getInt(absIndexPos + 4 + 8);\n        int prevIndexRead=this.mappedByteBuffer.getInt(absIndexPos + 4 + 8+ 4);\n        if (timeDiff < 0) {\n          break;\n        }\n        timeDiff*=1000L;\n        long timeRead=this.indexHeader.getBeginTimestamp() + timeDiff;\n        boolean timeMatched=(timeRead >= begin) && (timeRead <= end);\n        if (keyHash == keyHashRead && timeMatched) {\n          phyOffsets.add(phyOffsetRead);\n        }\n        if (prevIndexRead <= invalidIndex || prevIndexRead > this.indexHeader.getIndexCount() || prevIndexRead == nextIndexToRead || timeRead < begin) {\n          break;\n        }\n        nextIndexToRead=prevIndexRead;\n      }\n    }\n  }\n catch (  Exception e) {\n    log.error(\"selectPhyOffset exception \",e);\n  }\n finally {\n    if (fileLock != null) {\n      try {\n        fileLock.release();\n      }\n catch (      IOException e) {\n        log.error(\"Failed to release the lock\",e);\n      }\n    }\n    this.mappedFile.release();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2911,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.mappedFile.hold()) {\n  int keyHash=indexKeyHashMethod(key);\n  int slotPos=keyHash % this.hashSlotNum;\n  int absSlotPos=IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;\n  FileLock fileLock=null;\n  try {\n    if (lock) {\n    }\n    int slotValue=this.mappedByteBuffer.getInt(absSlotPos);\n    if (slotValue <= invalidIndex || slotValue > this.indexHeader.getIndexCount() || this.indexHeader.getIndexCount() <= 1) {\n    }\n else {\n      for (int nextIndexToRead=slotValue; ; ) {\n        if (phyOffsets.size() >= maxNum) {\n          break;\n        }\n        int absIndexPos=IndexHeader.INDEX_HEADER_SIZE + this.hashSlotNum * hashSlotSize + nextIndexToRead * indexSize;\n        int keyHashRead=this.mappedByteBuffer.getInt(absIndexPos);\n        long phyOffsetRead=this.mappedByteBuffer.getLong(absIndexPos + 4);\n        long timeDiff=(long)this.mappedByteBuffer.getInt(absIndexPos + 4 + 8);\n        int prevIndexRead=this.mappedByteBuffer.getInt(absIndexPos + 4 + 8+ 4);\n        if (timeDiff < 0) {\n          break;\n        }\n        timeDiff*=1000L;\n        long timeRead=this.indexHeader.getBeginTimestamp() + timeDiff;\n        boolean timeMatched=(timeRead >= begin) && (timeRead <= end);\n        if (keyHash == keyHashRead && timeMatched) {\n          phyOffsets.add(phyOffsetRead);\n        }\n        if (prevIndexRead <= invalidIndex || prevIndexRead > this.indexHeader.getIndexCount() || prevIndexRead == nextIndexToRead || timeRead < begin) {\n          break;\n        }\n        nextIndexToRead=prevIndexRead;\n      }\n    }\n  }\n catch (  Exception e) {\n    log.error(\"selectPhyOffset exception \",e);\n  }\n finally {\n    if (fileLock != null) {\n      try {\n        fileLock.release();\n      }\n catch (      IOException e) {\n        log.error(\"Failed to release the lock\",e);\n      }\n    }\n    this.mappedFile.release();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2927,
        "startLineNumber" : 190,
        "startColumnNumber" : 56,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (this.mappedFile.hold()) {\n    int keyHash=indexKeyHashMethod(key);\n    int slotPos=keyHash % this.hashSlotNum;\n    int absSlotPos=IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;\n    FileLock fileLock=null;\n    try {\n      if (lock) {\n      }\n      int slotValue=this.mappedByteBuffer.getInt(absSlotPos);\n      if (slotValue <= invalidIndex || slotValue > this.indexHeader.getIndexCount() || this.indexHeader.getIndexCount() <= 1) {\n      }\n else {\n        for (int nextIndexToRead=slotValue; ; ) {\n          if (phyOffsets.size() >= maxNum) {\n            break;\n          }\n          int absIndexPos=IndexHeader.INDEX_HEADER_SIZE + this.hashSlotNum * hashSlotSize + nextIndexToRead * indexSize;\n          int keyHashRead=this.mappedByteBuffer.getInt(absIndexPos);\n          long phyOffsetRead=this.mappedByteBuffer.getLong(absIndexPos + 4);\n          long timeDiff=(long)this.mappedByteBuffer.getInt(absIndexPos + 4 + 8);\n          int prevIndexRead=this.mappedByteBuffer.getInt(absIndexPos + 4 + 8+ 4);\n          if (timeDiff < 0) {\n            break;\n          }\n          timeDiff*=1000L;\n          long timeRead=this.indexHeader.getBeginTimestamp() + timeDiff;\n          boolean timeMatched=(timeRead >= begin) && (timeRead <= end);\n          if (keyHash == keyHashRead && timeMatched) {\n            phyOffsets.add(phyOffsetRead);\n          }\n          if (prevIndexRead <= invalidIndex || prevIndexRead > this.indexHeader.getIndexCount() || prevIndexRead == nextIndexToRead || timeRead < begin) {\n            break;\n          }\n          nextIndexToRead=prevIndexRead;\n        }\n      }\n    }\n catch (    Exception e) {\n      log.error(\"selectPhyOffset exception \",e);\n    }\n finally {\n      if (fileLock != null) {\n        try {\n          fileLock.release();\n        }\n catch (        IOException e) {\n          log.error(\"Failed to release the lock\",e);\n        }\n      }\n      this.mappedFile.release();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void selectPhyOffset(final List<Long> phyOffsets,final String key,final int maxNum,final long begin,final long end,boolean lock){\n  if (this.mappedFile.hold()) {\n    int keyHash=indexKeyHashMethod(key);\n    int slotPos=keyHash % this.hashSlotNum;\n    int absSlotPos=IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;\n    FileLock fileLock=null;\n    try {\n      if (lock) {\n      }\n      int slotValue=this.mappedByteBuffer.getInt(absSlotPos);\n      if (slotValue <= invalidIndex || slotValue > this.indexHeader.getIndexCount() || this.indexHeader.getIndexCount() <= 1) {\n      }\n else {\n        for (int nextIndexToRead=slotValue; ; ) {\n          if (phyOffsets.size() >= maxNum) {\n            break;\n          }\n          int absIndexPos=IndexHeader.INDEX_HEADER_SIZE + this.hashSlotNum * hashSlotSize + nextIndexToRead * indexSize;\n          int keyHashRead=this.mappedByteBuffer.getInt(absIndexPos);\n          long phyOffsetRead=this.mappedByteBuffer.getLong(absIndexPos + 4);\n          long timeDiff=(long)this.mappedByteBuffer.getInt(absIndexPos + 4 + 8);\n          int prevIndexRead=this.mappedByteBuffer.getInt(absIndexPos + 4 + 8+ 4);\n          if (timeDiff < 0) {\n            break;\n          }\n          timeDiff*=1000L;\n          long timeRead=this.indexHeader.getBeginTimestamp() + timeDiff;\n          boolean timeMatched=(timeRead >= begin) && (timeRead <= end);\n          if (keyHash == keyHashRead && timeMatched) {\n            phyOffsets.add(phyOffsetRead);\n          }\n          if (prevIndexRead <= invalidIndex || prevIndexRead > this.indexHeader.getIndexCount() || prevIndexRead == nextIndexToRead || timeRead < begin) {\n            break;\n          }\n          nextIndexToRead=prevIndexRead;\n        }\n      }\n    }\n catch (    Exception e) {\n      log.error(\"selectPhyOffset exception \",e);\n    }\n finally {\n      if (fileLock != null) {\n        try {\n          fileLock.release();\n        }\n catch (        IOException e) {\n          log.error(\"Failed to release the lock\",e);\n        }\n      }\n      this.mappedFile.release();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 250,
        "startColumnNumber" : 16,
        "endLineNumber" : 250,
        "endColumnNumber" : 59
      },
      "nodeContext" : "log.error(\"selectPhyOffset exception \",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 250,
    "startColumnNumber" : 26,
    "endLineNumber" : 250,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}