{
  "id" : 87,
  "expression" : "new ATNDeserializer()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/misc/InterpreterDataReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ATNDeserializer()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 132,
      "startColumnNumber" : 36,
      "endLineNumber" : 132,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 132,
        "startColumnNumber" : 21,
        "endLineNumber" : 132,
        "endColumnNumber" : 57
      },
      "nodeContext" : "deserializer=new ATNDeserializer()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 132,
        "startColumnNumber" : 5,
        "endLineNumber" : 132,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ATNDeserializer deserializer=new ATNDeserializer();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2518,
        "startLineNumber" : 59,
        "startColumnNumber" : 73,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String line;\n  List<String> literalNames=new ArrayList<String>();\n  List<String> symbolicNames=new ArrayList<String>();\n  line=br.readLine();\n  if (!line.equals(\"token literal names:\"))   throw new RuntimeException(\"Unexpected data entry\");\n  while ((line=br.readLine()) != null) {\n    if (line.isEmpty())     break;\n    literalNames.add(line.equals(\"null\") ? \"\" : line);\n  }\n  line=br.readLine();\n  if (!line.equals(\"token symbolic names:\"))   throw new RuntimeException(\"Unexpected data entry\");\n  while ((line=br.readLine()) != null) {\n    if (line.isEmpty())     break;\n    symbolicNames.add(line.equals(\"null\") ? \"\" : line);\n  }\n  result.vocabulary=new VocabularyImpl(literalNames.toArray(new String[0]),symbolicNames.toArray(new String[0]));\n  line=br.readLine();\n  if (!line.equals(\"rule names:\"))   throw new RuntimeException(\"Unexpected data entry\");\n  while ((line=br.readLine()) != null) {\n    if (line.isEmpty())     break;\n    result.ruleNames.add(line);\n  }\n  line=br.readLine();\n  if (line.equals(\"channel names:\")) {\n    result.channels=new ArrayList<String>();\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      result.channels.add(line);\n    }\n    line=br.readLine();\n    if (!line.equals(\"mode names:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    result.modes=new ArrayList<String>();\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      result.modes.add(line);\n    }\n  }\n  line=br.readLine();\n  if (!line.equals(\"atn:\"))   throw new RuntimeException(\"Unexpected data entry\");\n  line=br.readLine();\n  String[] elements=line.split(\",\");\n  char[] serializedATN=new char[elements.length];\n  for (int i=0; i < elements.length; ++i) {\n    int value;\n    String element=elements[i];\n    if (element.startsWith(\"[\"))     value=Integer.parseInt(element.substring(1).trim());\n else     if (element.endsWith(\"]\"))     value=Integer.parseInt(element.substring(0,element.length() - 1).trim());\n else     value=Integer.parseInt(element.trim());\n    serializedATN[i]=(char)value;\n  }\n  ATNDeserializer deserializer=new ATNDeserializer();\n  result.atn=deserializer.deserialize(serializedATN);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2696,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try (BufferedReader br=new BufferedReader(new FileReader(fileName))){\n  String line;\n  List<String> literalNames=new ArrayList<String>();\n  List<String> symbolicNames=new ArrayList<String>();\n  line=br.readLine();\n  if (!line.equals(\"token literal names:\"))   throw new RuntimeException(\"Unexpected data entry\");\n  while ((line=br.readLine()) != null) {\n    if (line.isEmpty())     break;\n    literalNames.add(line.equals(\"null\") ? \"\" : line);\n  }\n  line=br.readLine();\n  if (!line.equals(\"token symbolic names:\"))   throw new RuntimeException(\"Unexpected data entry\");\n  while ((line=br.readLine()) != null) {\n    if (line.isEmpty())     break;\n    symbolicNames.add(line.equals(\"null\") ? \"\" : line);\n  }\n  result.vocabulary=new VocabularyImpl(literalNames.toArray(new String[0]),symbolicNames.toArray(new String[0]));\n  line=br.readLine();\n  if (!line.equals(\"rule names:\"))   throw new RuntimeException(\"Unexpected data entry\");\n  while ((line=br.readLine()) != null) {\n    if (line.isEmpty())     break;\n    result.ruleNames.add(line);\n  }\n  line=br.readLine();\n  if (line.equals(\"channel names:\")) {\n    result.channels=new ArrayList<String>();\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      result.channels.add(line);\n    }\n    line=br.readLine();\n    if (!line.equals(\"mode names:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    result.modes=new ArrayList<String>();\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      result.modes.add(line);\n    }\n  }\n  line=br.readLine();\n  if (!line.equals(\"atn:\"))   throw new RuntimeException(\"Unexpected data entry\");\n  line=br.readLine();\n  String[] elements=line.split(\",\");\n  char[] serializedATN=new char[elements.length];\n  for (int i=0; i < elements.length; ++i) {\n    int value;\n    String element=elements[i];\n    if (element.startsWith(\"[\"))     value=Integer.parseInt(element.substring(1).trim());\n else     if (element.endsWith(\"]\"))     value=Integer.parseInt(element.substring(0,element.length() - 1).trim());\n else     value=Integer.parseInt(element.trim());\n    serializedATN[i]=(char)value;\n  }\n  ATNDeserializer deserializer=new ATNDeserializer();\n  result.atn=deserializer.deserialize(serializedATN);\n}\n catch (java.io.IOException e) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 449,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2829,
        "startLineNumber" : 55,
        "startColumnNumber" : 58,
        "endLineNumber" : 140,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  InterpreterData result=new InterpreterData();\n  result.ruleNames=new ArrayList<String>();\n  try (BufferedReader br=new BufferedReader(new FileReader(fileName))){\n    String line;\n    List<String> literalNames=new ArrayList<String>();\n    List<String> symbolicNames=new ArrayList<String>();\n    line=br.readLine();\n    if (!line.equals(\"token literal names:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      literalNames.add(line.equals(\"null\") ? \"\" : line);\n    }\n    line=br.readLine();\n    if (!line.equals(\"token symbolic names:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      symbolicNames.add(line.equals(\"null\") ? \"\" : line);\n    }\n    result.vocabulary=new VocabularyImpl(literalNames.toArray(new String[0]),symbolicNames.toArray(new String[0]));\n    line=br.readLine();\n    if (!line.equals(\"rule names:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      result.ruleNames.add(line);\n    }\n    line=br.readLine();\n    if (line.equals(\"channel names:\")) {\n      result.channels=new ArrayList<String>();\n      while ((line=br.readLine()) != null) {\n        if (line.isEmpty())         break;\n        result.channels.add(line);\n      }\n      line=br.readLine();\n      if (!line.equals(\"mode names:\"))       throw new RuntimeException(\"Unexpected data entry\");\n      result.modes=new ArrayList<String>();\n      while ((line=br.readLine()) != null) {\n        if (line.isEmpty())         break;\n        result.modes.add(line);\n      }\n    }\n    line=br.readLine();\n    if (!line.equals(\"atn:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    line=br.readLine();\n    String[] elements=line.split(\",\");\n    char[] serializedATN=new char[elements.length];\n    for (int i=0; i < elements.length; ++i) {\n      int value;\n      String element=elements[i];\n      if (element.startsWith(\"[\"))       value=Integer.parseInt(element.substring(1).trim());\n else       if (element.endsWith(\"]\"))       value=Integer.parseInt(element.substring(0,element.length() - 1).trim());\n else       value=Integer.parseInt(element.trim());\n      serializedATN[i]=(char)value;\n    }\n    ATNDeserializer deserializer=new ATNDeserializer();\n    result.atn=deserializer.deserialize(serializedATN);\n  }\n catch (  java.io.IOException e) {\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 471,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3410,
        "startLineNumber" : 32,
        "startColumnNumber" : 1,
        "endLineNumber" : 140,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * The structure of the data file is very simple. Everything is line based with empty lines separating the different parts. For lexers the layout is: token literal names: ... token symbolic names: ... rule names: ... channel names: ... mode names: ... atn: <a single line with comma separated int values> enclosed in a pair of squared brackets. Data for a parser does not contain channel and mode names.\n */\npublic static InterpreterData parseFile(String fileName){\n  InterpreterData result=new InterpreterData();\n  result.ruleNames=new ArrayList<String>();\n  try (BufferedReader br=new BufferedReader(new FileReader(fileName))){\n    String line;\n    List<String> literalNames=new ArrayList<String>();\n    List<String> symbolicNames=new ArrayList<String>();\n    line=br.readLine();\n    if (!line.equals(\"token literal names:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      literalNames.add(line.equals(\"null\") ? \"\" : line);\n    }\n    line=br.readLine();\n    if (!line.equals(\"token symbolic names:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      symbolicNames.add(line.equals(\"null\") ? \"\" : line);\n    }\n    result.vocabulary=new VocabularyImpl(literalNames.toArray(new String[0]),symbolicNames.toArray(new String[0]));\n    line=br.readLine();\n    if (!line.equals(\"rule names:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    while ((line=br.readLine()) != null) {\n      if (line.isEmpty())       break;\n      result.ruleNames.add(line);\n    }\n    line=br.readLine();\n    if (line.equals(\"channel names:\")) {\n      result.channels=new ArrayList<String>();\n      while ((line=br.readLine()) != null) {\n        if (line.isEmpty())         break;\n        result.channels.add(line);\n      }\n      line=br.readLine();\n      if (!line.equals(\"mode names:\"))       throw new RuntimeException(\"Unexpected data entry\");\n      result.modes=new ArrayList<String>();\n      while ((line=br.readLine()) != null) {\n        if (line.isEmpty())         break;\n        result.modes.add(line);\n      }\n    }\n    line=br.readLine();\n    if (!line.equals(\"atn:\"))     throw new RuntimeException(\"Unexpected data entry\");\n    line=br.readLine();\n    String[] elements=line.split(\",\");\n    char[] serializedATN=new char[elements.length];\n    for (int i=0; i < elements.length; ++i) {\n      int value;\n      String element=elements[i];\n      if (element.startsWith(\"[\"))       value=Integer.parseInt(element.substring(1).trim());\n else       if (element.endsWith(\"]\"))       value=Integer.parseInt(element.substring(0,element.length() - 1).trim());\n else       value=Integer.parseInt(element.trim());\n      serializedATN[i]=(char)value;\n    }\n    ATNDeserializer deserializer=new ATNDeserializer();\n    result.atn=deserializer.deserialize(serializedATN);\n  }\n catch (  java.io.IOException e) {\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 482,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 132,
        "startColumnNumber" : 5,
        "endLineNumber" : 132,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ATNDeserializer deserializer=new ATNDeserializer();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.atn.ATNDeserializer"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 132,
    "startColumnNumber" : 36,
    "endLineNumber" : 132,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}