{
  "id" : 677,
  "expression" : "startEvent",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "738dd0ee18a142d3fe69fc5f16889ac770188c93",
  "filePath" : "java/client/test/org/openqa/selenium/remote/tracing/opentelemetry/TracerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "startEvent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 114,
      "startColumnNumber" : 20,
      "endLineNumber" : 114,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 31
      },
      "nodeContext" : "span.addEvent(startEvent)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 32
      },
      "nodeContext" : "span.addEvent(startEvent);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 113,
        "startColumnNumber" : 70,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  span.addEvent(startEvent);\n  span.addEvent(endEvent);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n  span.addEvent(startEvent);\n  span.addEvent(endEvent);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 107,
        "startColumnNumber" : 52,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldBeAbleToCreateASpanWithEvents(){\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 32
      },
      "nodeContext" : "span.addEvent(startEvent);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "startEvent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 124,
      "startColumnNumber" : 19,
      "endLineNumber" : 124,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 31
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 107,
        "startColumnNumber" : 52,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldBeAbleToCreateASpanWithEvents(){\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 114,
    "startColumnNumber" : 20,
    "endLineNumber" : 114,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 124,
    "startColumnNumber" : 19,
    "endLineNumber" : 124,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}