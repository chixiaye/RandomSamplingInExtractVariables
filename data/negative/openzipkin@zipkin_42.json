{
  "id" : 42,
  "expression" : "asList(Span.builder().traceId(20L).id(20L).name(\"get\").timestamp(TODAY * 1000).duration(350L * 1000).addAnnotation(Annotation.create(TODAY * 1000,SERVER_RECV,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 350) * 1000,SERVER_SEND,WEB_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,someClient)).build(),Span.builder().traceId(20L).parentId(20L).id(21L).name(\"get\").timestamp((TODAY + 50L) * 1000).duration(250L * 1000).addAnnotation(Annotation.create((TODAY + 50) * 1000,CLIENT_SEND,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 100) * 1000,SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 250) * 1000,SERVER_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 300) * 1000,CLIENT_RECV,WEB_ENDPOINT)).build(),Span.builder().traceId(20L).parentId(21L).id(22L).name(\"get\").timestamp((TODAY + 150L) * 1000).duration(50L * 1000).addAnnotation(Annotation.create((TODAY + 150) * 1000,CLIENT_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 200) * 1000,CLIENT_RECV,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(SERVER_ADDR,DB_ENDPOINT)).build())",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/test/java/zipkin/DependenciesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "asList(Span.builder().traceId(20L).id(20L).name(\"get\").timestamp(TODAY * 1000).duration(350L * 1000).addAnnotation(Annotation.create(TODAY * 1000,SERVER_RECV,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 350) * 1000,SERVER_SEND,WEB_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,someClient)).build(),Span.builder().traceId(20L).parentId(20L).id(21L).name(\"get\").timestamp((TODAY + 50L) * 1000).duration(250L * 1000).addAnnotation(Annotation.create((TODAY + 50) * 1000,CLIENT_SEND,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 100) * 1000,SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 250) * 1000,SERVER_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 300) * 1000,CLIENT_RECV,WEB_ENDPOINT)).build(),Span.builder().traceId(20L).parentId(21L).id(22L).name(\"get\").timestamp((TODAY + 150L) * 1000).duration(50L * 1000).addAnnotation(Annotation.create((TODAY + 150) * 1000,CLIENT_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 200) * 1000,CLIENT_RECV,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(SERVER_ADDR,DB_ENDPOINT)).build())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 1473,
      "startLineNumber" : 235,
      "startColumnNumber" : 23,
      "endLineNumber" : 256,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 208,
    "astHeight" : 14,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1481,
        "startLineNumber" : 235,
        "startColumnNumber" : 15,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "trace=asList(Span.builder().traceId(20L).id(20L).name(\"get\").timestamp(TODAY * 1000).duration(350L * 1000).addAnnotation(Annotation.create(TODAY * 1000,SERVER_RECV,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 350) * 1000,SERVER_SEND,WEB_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,someClient)).build(),Span.builder().traceId(20L).parentId(20L).id(21L).name(\"get\").timestamp((TODAY + 50L) * 1000).duration(250L * 1000).addAnnotation(Annotation.create((TODAY + 50) * 1000,CLIENT_SEND,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 100) * 1000,SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 250) * 1000,SERVER_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 300) * 1000,CLIENT_RECV,WEB_ENDPOINT)).build(),Span.builder().traceId(20L).parentId(21L).id(22L).name(\"get\").timestamp((TODAY + 150L) * 1000).duration(50L * 1000).addAnnotation(Annotation.create((TODAY + 150) * 1000,CLIENT_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 200) * 1000,CLIENT_RECV,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(SERVER_ADDR,DB_ENDPOINT)).build())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 210,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1493,
        "startLineNumber" : 235,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 6
      },
      "nodeContext" : "List<Span> trace=asList(Span.builder().traceId(20L).id(20L).name(\"get\").timestamp(TODAY * 1000).duration(350L * 1000).addAnnotation(Annotation.create(TODAY * 1000,SERVER_RECV,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 350) * 1000,SERVER_SEND,WEB_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,someClient)).build(),Span.builder().traceId(20L).parentId(20L).id(21L).name(\"get\").timestamp((TODAY + 50L) * 1000).duration(250L * 1000).addAnnotation(Annotation.create((TODAY + 50) * 1000,CLIENT_SEND,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 100) * 1000,SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 250) * 1000,SERVER_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 300) * 1000,CLIENT_RECV,WEB_ENDPOINT)).build(),Span.builder().traceId(20L).parentId(21L).id(22L).name(\"get\").timestamp((TODAY + 150L) * 1000).duration(50L * 1000).addAnnotation(Annotation.create((TODAY + 150) * 1000,CLIENT_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 200) * 1000,CLIENT_RECV,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(SERVER_ADDR,DB_ENDPOINT)).build());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 216,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1849,
        "startLineNumber" : 232,
        "startColumnNumber" : 47,
        "endLineNumber" : 265,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Endpoint someClient=Endpoint.create(\"some-client\",172 << 24 | 17 << 16 | 4,80);\n  List<Span> trace=asList(Span.builder().traceId(20L).id(20L).name(\"get\").timestamp(TODAY * 1000).duration(350L * 1000).addAnnotation(Annotation.create(TODAY * 1000,SERVER_RECV,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 350) * 1000,SERVER_SEND,WEB_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,someClient)).build(),Span.builder().traceId(20L).parentId(20L).id(21L).name(\"get\").timestamp((TODAY + 50L) * 1000).duration(250L * 1000).addAnnotation(Annotation.create((TODAY + 50) * 1000,CLIENT_SEND,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 100) * 1000,SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 250) * 1000,SERVER_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 300) * 1000,CLIENT_RECV,WEB_ENDPOINT)).build(),Span.builder().traceId(20L).parentId(21L).id(22L).name(\"get\").timestamp((TODAY + 150L) * 1000).duration(50L * 1000).addAnnotation(Annotation.create((TODAY + 150) * 1000,CLIENT_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 200) * 1000,CLIENT_RECV,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(SERVER_ADDR,DB_ENDPOINT)).build());\n  processDependencies(trace);\n  assertThat(store().getDependencies(TODAY + 1000L,null)).containsOnly(new DependencyLink(\"some-client\",\"web\",1),new DependencyLink(\"web\",\"app\",1),new DependencyLink(\"app\",\"db\",1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 265,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This test confirms that the span store can detect dependency indicated by SERVER_ADDR and CLIENT_ADDR. In some cases an RPC call is made where one of the two services is not instrumented. However, if the other service is able to emit \"sa\" or \"ca\" annotation with a service name, the link can still be constructed. span1: CA SR SS: Dependency 1 by a not-instrumented client span2: intermediate call span3: CS CR SA: Dependency 2 to a not-instrumented server\n */\n@Test public void notInstrumentedClientAndServer(){\n  Endpoint someClient=Endpoint.create(\"some-client\",172 << 24 | 17 << 16 | 4,80);\n  List<Span> trace=asList(Span.builder().traceId(20L).id(20L).name(\"get\").timestamp(TODAY * 1000).duration(350L * 1000).addAnnotation(Annotation.create(TODAY * 1000,SERVER_RECV,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 350) * 1000,SERVER_SEND,WEB_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,someClient)).build(),Span.builder().traceId(20L).parentId(20L).id(21L).name(\"get\").timestamp((TODAY + 50L) * 1000).duration(250L * 1000).addAnnotation(Annotation.create((TODAY + 50) * 1000,CLIENT_SEND,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 100) * 1000,SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 250) * 1000,SERVER_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 300) * 1000,CLIENT_RECV,WEB_ENDPOINT)).build(),Span.builder().traceId(20L).parentId(21L).id(22L).name(\"get\").timestamp((TODAY + 150L) * 1000).duration(50L * 1000).addAnnotation(Annotation.create((TODAY + 150) * 1000,CLIENT_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 200) * 1000,CLIENT_RECV,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(SERVER_ADDR,DB_ENDPOINT)).build());\n  processDependencies(trace);\n  assertThat(store().getDependencies(TODAY + 1000L,null)).containsOnly(new DependencyLink(\"some-client\",\"web\",1),new DependencyLink(\"web\",\"app\",1),new DependencyLink(\"app\",\"db\",1));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1493,
        "startLineNumber" : 235,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 6
      },
      "nodeContext" : "List<Span> trace=asList(Span.builder().traceId(20L).id(20L).name(\"get\").timestamp(TODAY * 1000).duration(350L * 1000).addAnnotation(Annotation.create(TODAY * 1000,SERVER_RECV,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 350) * 1000,SERVER_SEND,WEB_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,someClient)).build(),Span.builder().traceId(20L).parentId(20L).id(21L).name(\"get\").timestamp((TODAY + 50L) * 1000).duration(250L * 1000).addAnnotation(Annotation.create((TODAY + 50) * 1000,CLIENT_SEND,WEB_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 100) * 1000,SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 250) * 1000,SERVER_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 300) * 1000,CLIENT_RECV,WEB_ENDPOINT)).build(),Span.builder().traceId(20L).parentId(21L).id(22L).name(\"get\").timestamp((TODAY + 150L) * 1000).duration(50L * 1000).addAnnotation(Annotation.create((TODAY + 150) * 1000,CLIENT_SEND,APP_ENDPOINT)).addAnnotation(Annotation.create((TODAY + 200) * 1000,CLIENT_RECV,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(CLIENT_ADDR,APP_ENDPOINT)).addBinaryAnnotation(BinaryAnnotation.address(SERVER_ADDR,DB_ENDPOINT)).build());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 216,
      "astHeight" : 16
    },
    "tokenLength" : 174,
    "type" : "java.util.List<zipkin.Span>"
  } ],
  "positionList" : [ {
    "charLength" : 1473,
    "startLineNumber" : 235,
    "startColumnNumber" : 23,
    "endLineNumber" : 256,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}