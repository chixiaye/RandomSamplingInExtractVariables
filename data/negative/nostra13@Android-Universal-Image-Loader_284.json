{
  "id" : 284,
  "expression" : "bw - width",
  "projectName" : "nostra13@Android-Universal-Image-Loader",
  "commitID" : "56f4df896682733c9979b348e46ba77494851304",
  "filePath" : "library/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bw - width",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 154,
      "startColumnNumber" : 9,
      "endLineNumber" : 154,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 154,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 20
      },
      "nodeContext" : "(bw - width)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 154,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 24
      },
      "nodeContext" : "(bw - width) / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 24
      },
      "nodeContext" : "x=(bw - width) / 2",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 25
      },
      "nodeContext" : "x=(bw - width) / 2;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1997,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (scaleType) {\ncase CENTER_INSIDE:  float vRation=(float)vw / vh;\nfloat bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 440,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2780,
        "startLineNumber" : 64,
        "startColumnNumber" : 88,
        "endLineNumber" : 169,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (imageView == null) {\n    L.w(\"View is collected probably. Can't round bitmap corners without view parameters.\");\n    return bitmap;\n  }\n  Bitmap roundBitmap;\n  int bw=bitmap.getWidth();\n  int bh=bitmap.getHeight();\n  int vw=imageView.getWidth();\n  int vh=imageView.getHeight();\n  if (vw <= 0)   vw=bw;\n  if (vh <= 0)   vh=bh;\n  final ImageView.ScaleType scaleType=imageView.getScaleType();\n  if (scaleType == null) {\n    return bitmap;\n  }\n  int width, height;\n  Rect srcRect;\n  Rect destRect;\nswitch (scaleType) {\ncase CENTER_INSIDE:    float vRation=(float)vw / vh;\n  float bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\ntry {\nroundBitmap=getRoundedCornerBitmap(bitmap,roundPixels,srcRect,destRect,width,height);\n}\n catch (OutOfMemoryError e) {\nL.e(e,\"Can't create bitmap with rounded corners. Not enough memory.\");\nroundBitmap=bitmap;\n}\nreturn roundBitmap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 567,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3279,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 169,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Process incoming  {@linkplain Bitmap} to make rounded corners according to target {@link ImageView}.<br /> This method <b>doesn't display</b> result bitmap in  {@link ImageView}\n * @param bitmap      Incoming Bitmap to process\n * @param imageView   Target {@link ImageView} to display bitmap in\n * @param roundPixels Rounded pixels of corner\n * @return Result bitmap with rounded corners\n */\npublic static Bitmap roundCorners(Bitmap bitmap,ImageView imageView,int roundPixels){\n  if (imageView == null) {\n    L.w(\"View is collected probably. Can't round bitmap corners without view parameters.\");\n    return bitmap;\n  }\n  Bitmap roundBitmap;\n  int bw=bitmap.getWidth();\n  int bh=bitmap.getHeight();\n  int vw=imageView.getWidth();\n  int vh=imageView.getHeight();\n  if (vw <= 0)   vw=bw;\n  if (vh <= 0)   vh=bh;\n  final ImageView.ScaleType scaleType=imageView.getScaleType();\n  if (scaleType == null) {\n    return bitmap;\n  }\n  int width, height;\n  Rect srcRect;\n  Rect destRect;\nswitch (scaleType) {\ncase CENTER_INSIDE:    float vRation=(float)vw / vh;\n  float bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\ntry {\nroundBitmap=getRoundedCornerBitmap(bitmap,roundPixels,srcRect,destRect,width,height);\n}\n catch (OutOfMemoryError e) {\nL.e(e,\"Can't create bitmap with rounded corners. Not enough memory.\");\nroundBitmap=bitmap;\n}\nreturn roundBitmap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 585,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 25
      },
      "nodeContext" : "x=(bw - width) / 2;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 154,
    "startColumnNumber" : 9,
    "endLineNumber" : 154,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}