{
  "id" : 189,
  "expression" : "currentMessageObject != null && currentMessageObject.forceSeekTo >= 0",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "currentMessageObject != null && currentMessageObject.forceSeekTo >= 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 69,
      "startLineNumber" : 6569,
      "startColumnNumber" : 12,
      "endLineNumber" : 6569,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 6569,
        "startColumnNumber" : 8,
        "endLineNumber" : 6572,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (currentMessageObject != null && currentMessageObject.forceSeekTo >= 0) {\n  seekToProgressPending=currentMessageObject.forceSeekTo;\n  currentMessageObject.forceSeekTo=-1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14311,
        "startLineNumber" : 6303,
        "startColumnNumber" : 131,
        "endLineNumber" : 6592,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!preview) {\n    currentPlayingVideoFile=uri;\n  }\n  if (parentActivity == null) {\n    return;\n  }\n  streamingAlertShown=false;\n  startedPlayTime=SystemClock.elapsedRealtime();\n  currentVideoFinishedLoading=false;\n  lastBufferedPositionCheck=0;\n  firstAnimationDelay=true;\n  inPreview=preview;\n  releasePlayer(false);\n  if (imagesArrLocals.isEmpty()) {\n    createVideoTextureView(null);\n  }\n  if (Build.VERSION.SDK_INT >= 21 && textureImageView == null) {\n    textureImageView=new ImageView(parentActivity);\n    textureImageView.setBackgroundColor(0xffff0000);\n    textureImageView.setPivotX(0);\n    textureImageView.setPivotY(0);\n    textureImageView.setVisibility(View.INVISIBLE);\n    containerView.addView(textureImageView);\n  }\n  textureUploaded=false;\n  videoSizeSet=false;\n  videoCrossfadeStarted=false;\n  boolean newPlayerCreated=false;\n  playerWasReady=false;\n  playerWasPlaying=false;\n  captureFrameReadyAtTime=-1;\n  captureFrameAtTime=-1;\n  needCaptureFrameReadyAtTime=-1;\n  if (videoPlayer == null) {\n    if (injectingVideoPlayer != null) {\n      videoPlayer=injectingVideoPlayer;\n      injectingVideoPlayer=null;\n      playerInjected=true;\n      updatePlayerState(videoPlayer.getPlayWhenReady(),videoPlayer.getPlaybackState());\n    }\n else {\n      videoPlayer=new VideoPlayer(){\n        @Override public void play(){\n          super.play();\n          playOrStopAnimatedStickers(true);\n        }\n        @Override public void pause(){\n          super.pause();\n          if (currentEditMode == 0) {\n            playOrStopAnimatedStickers(false);\n          }\n        }\n        @Override public void seekTo(        long positionMs){\n          super.seekTo(positionMs);\n          if (isCurrentVideo) {\n            seekAnimatedStickersTo(positionMs);\n          }\n        }\n      }\n;\n      newPlayerCreated=true;\n    }\n    if (videoTextureView != null) {\n      videoPlayer.setTextureView(videoTextureView);\n    }\n    videoPlayer.setDelegate(new VideoPlayer.VideoPlayerDelegate(){\n      @Override public void onStateChanged(      boolean playWhenReady,      int playbackState){\n        updatePlayerState(playWhenReady,playbackState);\n      }\n      @Override public void onError(      VideoPlayer player,      Exception e){\n        if (videoPlayer != player) {\n          return;\n        }\n        FileLog.e(e);\n        if (!menuItem.isSubItemVisible(gallery_menu_openin)) {\n          return;\n        }\n        AlertDialog.Builder builder=new AlertDialog.Builder(parentActivity);\n        builder.setTitle(LocaleController.getString(\"AppName\",R.string.AppName));\n        builder.setMessage(LocaleController.getString(\"CantPlayVideo\",R.string.CantPlayVideo));\n        builder.setPositiveButton(LocaleController.getString(\"Open\",R.string.Open),(dialog,which) -> {\n          try {\n            AndroidUtilities.openForView(currentMessageObject,parentActivity);\n            closePhoto(false,false);\n          }\n catch (          Exception e1) {\n            FileLog.e(e1);\n          }\n        }\n);\n        builder.setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),null);\n        showAlertDialog(builder);\n      }\n      @Override public void onVideoSizeChanged(      int width,      int height,      int unappliedRotationDegrees,      float pixelWidthHeightRatio){\n        if (aspectRatioFrameLayout != null) {\n          if (unappliedRotationDegrees == 90 || unappliedRotationDegrees == 270) {\n            int temp=width;\n            width=height;\n            height=temp;\n          }\n          aspectRatioFrameLayout.setAspectRatio(height == 0 ? 1 : (width * pixelWidthHeightRatio) / height,unappliedRotationDegrees);\n          if (videoTextureView instanceof VideoEditTextureView) {\n            ((VideoEditTextureView)videoTextureView).setVideoSize((int)(width * pixelWidthHeightRatio),height);\n            if (sendPhotoType == SELECT_TYPE_AVATAR) {\n              setCropBitmap();\n            }\n          }\n          videoSizeSet=true;\n        }\n      }\n      @Override public void onRenderedFirstFrame(){\n        if (!textureUploaded) {\n          textureUploaded=true;\n          containerView.invalidate();\n        }\n      }\n      @Override public void onRenderedFirstFrame(      AnalyticsListener.EventTime eventTime){\n        if (eventTime.eventPlaybackPositionMs == needCaptureFrameReadyAtTime) {\n          captureFrameReadyAtTime=eventTime.eventPlaybackPositionMs;\n          needCaptureFrameReadyAtTime=-1;\n          captureCurrentFrame();\n        }\n      }\n      @Override public boolean onSurfaceDestroyed(      SurfaceTexture surfaceTexture){\n        if (changingTextureView) {\n          changingTextureView=false;\n          if (isInline) {\n            if (isInline) {\n              waitingForFirstTextureUpload=1;\n            }\n            changedTextureView.setSurfaceTexture(surfaceTexture);\n            changedTextureView.setSurfaceTextureListener(surfaceTextureListener);\n            changedTextureView.setVisibility(View.VISIBLE);\n            return true;\n          }\n        }\n        return false;\n      }\n      @Override public void onSurfaceTextureUpdated(      SurfaceTexture surfaceTexture){\n        if (waitingForFirstTextureUpload == 2) {\n          if (textureImageView != null) {\n            textureImageView.setVisibility(View.INVISIBLE);\n            textureImageView.setImageDrawable(null);\n            if (currentBitmap != null) {\n              currentBitmap.recycle();\n              currentBitmap=null;\n            }\n          }\n          switchingInlineMode=false;\n          if (Build.VERSION.SDK_INT >= 21) {\n            aspectRatioFrameLayout.getLocationInWindow(pipPosition);\n            pipPosition[1]-=containerView.getTranslationY();\n            textureImageView.setTranslationX(textureImageView.getTranslationX() + getLeftInset());\n            videoTextureView.setTranslationX(videoTextureView.getTranslationX() + getLeftInset() - aspectRatioFrameLayout.getX());\n            AnimatorSet animatorSet=new AnimatorSet();\n            animatorSet.playTogether(ObjectAnimator.ofFloat(textureImageView,View.SCALE_X,1.0f),ObjectAnimator.ofFloat(textureImageView,View.SCALE_Y,1.0f),ObjectAnimator.ofFloat(textureImageView,View.TRANSLATION_X,pipPosition[0]),ObjectAnimator.ofFloat(textureImageView,View.TRANSLATION_Y,pipPosition[1]),ObjectAnimator.ofFloat(videoTextureView,View.SCALE_X,1.0f),ObjectAnimator.ofFloat(videoTextureView,View.SCALE_Y,1.0f),ObjectAnimator.ofFloat(videoTextureView,View.TRANSLATION_X,pipPosition[0] - aspectRatioFrameLayout.getX()),ObjectAnimator.ofFloat(videoTextureView,View.TRANSLATION_Y,pipPosition[1] - aspectRatioFrameLayout.getY()),ObjectAnimator.ofInt(backgroundDrawable,AnimationProperties.COLOR_DRAWABLE_ALPHA,255));\n            final DecelerateInterpolator interpolator=new DecelerateInterpolator();\n            animatorSet.setInterpolator(interpolator);\n            animatorSet.setDuration(250);\n            animatorSet.addListener(new AnimatorListenerAdapter(){\n              @Override public void onAnimationEnd(              Animator animation){\n                pipAnimationInProgress=false;\n              }\n            }\n);\n            animatorSet.start();\n            toggleActionBar(true,true,new ActionBarToggleParams().enableStatusBarAnimation(false).enableTranslationAnimation(false).animationDuration(250).animationInterpolator(interpolator));\n          }\n else {\n            toggleActionBar(true,false);\n          }\n          waitingForFirstTextureUpload=0;\n        }\n      }\n    }\n);\n  }\n  if (!imagesArrLocals.isEmpty()) {\n    createVideoTextureView(savedFilterState);\n  }\n  videoTextureView.setAlpha(videoCrossfadeAlpha=0.0f);\n  if (paintingOverlay != null) {\n    paintingOverlay.setAlpha(videoCrossfadeAlpha);\n  }\n  shouldSavePositionForCurrentVideo=null;\n  shouldSavePositionForCurrentVideoShortTerm=null;\n  lastSaveTime=0;\n  if (newPlayerCreated) {\n    seekToProgressPending=seekToProgressPending2;\n    videoPlayerSeekbar.setProgress(0);\n    videoTimelineView.setProgress(0);\n    videoPlayerSeekbar.setBufferedProgress(0);\n    if (currentMessageObject != null) {\n      final int duration=currentMessageObject.getDuration();\n      final String name=currentMessageObject.getFileName();\n      if (!TextUtils.isEmpty(name)) {\n        if (duration >= 20 * 60) {\n          if (currentMessageObject.forceSeekTo < 0) {\n            SharedPreferences preferences=ApplicationLoader.applicationContext.getSharedPreferences(\"media_saved_pos\",Activity.MODE_PRIVATE);\n            float pos=preferences.getFloat(name,-1);\n            if (pos > 0 && pos < 0.999f) {\n              currentMessageObject.forceSeekTo=pos;\n              videoPlayerSeekbar.setProgress(pos);\n            }\n          }\n          shouldSavePositionForCurrentVideo=name;\n        }\n else         if (duration >= 10) {\n          SavedVideoPosition videoPosition=null;\n          for (int i=savedVideoPositions.size() - 1; i >= 0; i--) {\n            final SavedVideoPosition item=savedVideoPositions.valueAt(i);\n            if (item.timestamp < SystemClock.elapsedRealtime() - 5 * 1000) {\n              savedVideoPositions.removeAt(i);\n            }\n else             if (videoPosition == null && savedVideoPositions.keyAt(i).equals(name)) {\n              videoPosition=item;\n            }\n          }\n          if (currentMessageObject.forceSeekTo < 0 && videoPosition != null) {\n            float pos=videoPosition.position;\n            if (pos > 0 && pos < 0.999f) {\n              currentMessageObject.forceSeekTo=pos;\n              videoPlayerSeekbar.setProgress(pos);\n            }\n          }\n          shouldSavePositionForCurrentVideoShortTerm=name;\n        }\n      }\n    }\n    videoPlayer.preparePlayer(uri,\"other\");\n    videoPlayer.setPlayWhenReady(playWhenReady);\n  }\n  playerLooping=currentMessageObject != null && currentMessageObject.getDuration() <= 30;\n  videoPlayerControlFrameLayout.setSeekBarTransitionEnabled(playerLooping);\n  videoPlayer.setLooping(playerLooping);\n  if (currentMessageObject != null && currentMessageObject.forceSeekTo >= 0) {\n    seekToProgressPending=currentMessageObject.forceSeekTo;\n    currentMessageObject.forceSeekTo=-1;\n  }\n  if (currentBotInlineResult != null && (currentBotInlineResult.type.equals(\"video\") || MessageObject.isVideoDocument(currentBotInlineResult.document))) {\n    bottomLayout.setVisibility(View.VISIBLE);\n    bottomLayout.setPadding(0,0,AndroidUtilities.dp(84),0);\n    pickerView.setVisibility(View.GONE);\n  }\n else {\n    bottomLayout.setPadding(0,0,0,0);\n  }\n  if (pageBlocksAdapter != null) {\n    bottomLayout.setVisibility(View.VISIBLE);\n  }\n  setVideoPlayerControlVisible(!isCurrentVideo,true);\n  if (!isCurrentVideo) {\n    scheduleActionBarHide(playerAutoStarted ? 3000 : 1000);\n  }\n  inPreview=preview;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1289,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14438,
        "startLineNumber" : 6303,
        "startColumnNumber" : 4,
        "endLineNumber" : 6592,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void preparePlayer(Uri uri,boolean playWhenReady,boolean preview,MediaController.SavedFilterState savedFilterState){\n  if (!preview) {\n    currentPlayingVideoFile=uri;\n  }\n  if (parentActivity == null) {\n    return;\n  }\n  streamingAlertShown=false;\n  startedPlayTime=SystemClock.elapsedRealtime();\n  currentVideoFinishedLoading=false;\n  lastBufferedPositionCheck=0;\n  firstAnimationDelay=true;\n  inPreview=preview;\n  releasePlayer(false);\n  if (imagesArrLocals.isEmpty()) {\n    createVideoTextureView(null);\n  }\n  if (Build.VERSION.SDK_INT >= 21 && textureImageView == null) {\n    textureImageView=new ImageView(parentActivity);\n    textureImageView.setBackgroundColor(0xffff0000);\n    textureImageView.setPivotX(0);\n    textureImageView.setPivotY(0);\n    textureImageView.setVisibility(View.INVISIBLE);\n    containerView.addView(textureImageView);\n  }\n  textureUploaded=false;\n  videoSizeSet=false;\n  videoCrossfadeStarted=false;\n  boolean newPlayerCreated=false;\n  playerWasReady=false;\n  playerWasPlaying=false;\n  captureFrameReadyAtTime=-1;\n  captureFrameAtTime=-1;\n  needCaptureFrameReadyAtTime=-1;\n  if (videoPlayer == null) {\n    if (injectingVideoPlayer != null) {\n      videoPlayer=injectingVideoPlayer;\n      injectingVideoPlayer=null;\n      playerInjected=true;\n      updatePlayerState(videoPlayer.getPlayWhenReady(),videoPlayer.getPlaybackState());\n    }\n else {\n      videoPlayer=new VideoPlayer(){\n        @Override public void play(){\n          super.play();\n          playOrStopAnimatedStickers(true);\n        }\n        @Override public void pause(){\n          super.pause();\n          if (currentEditMode == 0) {\n            playOrStopAnimatedStickers(false);\n          }\n        }\n        @Override public void seekTo(        long positionMs){\n          super.seekTo(positionMs);\n          if (isCurrentVideo) {\n            seekAnimatedStickersTo(positionMs);\n          }\n        }\n      }\n;\n      newPlayerCreated=true;\n    }\n    if (videoTextureView != null) {\n      videoPlayer.setTextureView(videoTextureView);\n    }\n    videoPlayer.setDelegate(new VideoPlayer.VideoPlayerDelegate(){\n      @Override public void onStateChanged(      boolean playWhenReady,      int playbackState){\n        updatePlayerState(playWhenReady,playbackState);\n      }\n      @Override public void onError(      VideoPlayer player,      Exception e){\n        if (videoPlayer != player) {\n          return;\n        }\n        FileLog.e(e);\n        if (!menuItem.isSubItemVisible(gallery_menu_openin)) {\n          return;\n        }\n        AlertDialog.Builder builder=new AlertDialog.Builder(parentActivity);\n        builder.setTitle(LocaleController.getString(\"AppName\",R.string.AppName));\n        builder.setMessage(LocaleController.getString(\"CantPlayVideo\",R.string.CantPlayVideo));\n        builder.setPositiveButton(LocaleController.getString(\"Open\",R.string.Open),(dialog,which) -> {\n          try {\n            AndroidUtilities.openForView(currentMessageObject,parentActivity);\n            closePhoto(false,false);\n          }\n catch (          Exception e1) {\n            FileLog.e(e1);\n          }\n        }\n);\n        builder.setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),null);\n        showAlertDialog(builder);\n      }\n      @Override public void onVideoSizeChanged(      int width,      int height,      int unappliedRotationDegrees,      float pixelWidthHeightRatio){\n        if (aspectRatioFrameLayout != null) {\n          if (unappliedRotationDegrees == 90 || unappliedRotationDegrees == 270) {\n            int temp=width;\n            width=height;\n            height=temp;\n          }\n          aspectRatioFrameLayout.setAspectRatio(height == 0 ? 1 : (width * pixelWidthHeightRatio) / height,unappliedRotationDegrees);\n          if (videoTextureView instanceof VideoEditTextureView) {\n            ((VideoEditTextureView)videoTextureView).setVideoSize((int)(width * pixelWidthHeightRatio),height);\n            if (sendPhotoType == SELECT_TYPE_AVATAR) {\n              setCropBitmap();\n            }\n          }\n          videoSizeSet=true;\n        }\n      }\n      @Override public void onRenderedFirstFrame(){\n        if (!textureUploaded) {\n          textureUploaded=true;\n          containerView.invalidate();\n        }\n      }\n      @Override public void onRenderedFirstFrame(      AnalyticsListener.EventTime eventTime){\n        if (eventTime.eventPlaybackPositionMs == needCaptureFrameReadyAtTime) {\n          captureFrameReadyAtTime=eventTime.eventPlaybackPositionMs;\n          needCaptureFrameReadyAtTime=-1;\n          captureCurrentFrame();\n        }\n      }\n      @Override public boolean onSurfaceDestroyed(      SurfaceTexture surfaceTexture){\n        if (changingTextureView) {\n          changingTextureView=false;\n          if (isInline) {\n            if (isInline) {\n              waitingForFirstTextureUpload=1;\n            }\n            changedTextureView.setSurfaceTexture(surfaceTexture);\n            changedTextureView.setSurfaceTextureListener(surfaceTextureListener);\n            changedTextureView.setVisibility(View.VISIBLE);\n            return true;\n          }\n        }\n        return false;\n      }\n      @Override public void onSurfaceTextureUpdated(      SurfaceTexture surfaceTexture){\n        if (waitingForFirstTextureUpload == 2) {\n          if (textureImageView != null) {\n            textureImageView.setVisibility(View.INVISIBLE);\n            textureImageView.setImageDrawable(null);\n            if (currentBitmap != null) {\n              currentBitmap.recycle();\n              currentBitmap=null;\n            }\n          }\n          switchingInlineMode=false;\n          if (Build.VERSION.SDK_INT >= 21) {\n            aspectRatioFrameLayout.getLocationInWindow(pipPosition);\n            pipPosition[1]-=containerView.getTranslationY();\n            textureImageView.setTranslationX(textureImageView.getTranslationX() + getLeftInset());\n            videoTextureView.setTranslationX(videoTextureView.getTranslationX() + getLeftInset() - aspectRatioFrameLayout.getX());\n            AnimatorSet animatorSet=new AnimatorSet();\n            animatorSet.playTogether(ObjectAnimator.ofFloat(textureImageView,View.SCALE_X,1.0f),ObjectAnimator.ofFloat(textureImageView,View.SCALE_Y,1.0f),ObjectAnimator.ofFloat(textureImageView,View.TRANSLATION_X,pipPosition[0]),ObjectAnimator.ofFloat(textureImageView,View.TRANSLATION_Y,pipPosition[1]),ObjectAnimator.ofFloat(videoTextureView,View.SCALE_X,1.0f),ObjectAnimator.ofFloat(videoTextureView,View.SCALE_Y,1.0f),ObjectAnimator.ofFloat(videoTextureView,View.TRANSLATION_X,pipPosition[0] - aspectRatioFrameLayout.getX()),ObjectAnimator.ofFloat(videoTextureView,View.TRANSLATION_Y,pipPosition[1] - aspectRatioFrameLayout.getY()),ObjectAnimator.ofInt(backgroundDrawable,AnimationProperties.COLOR_DRAWABLE_ALPHA,255));\n            final DecelerateInterpolator interpolator=new DecelerateInterpolator();\n            animatorSet.setInterpolator(interpolator);\n            animatorSet.setDuration(250);\n            animatorSet.addListener(new AnimatorListenerAdapter(){\n              @Override public void onAnimationEnd(              Animator animation){\n                pipAnimationInProgress=false;\n              }\n            }\n);\n            animatorSet.start();\n            toggleActionBar(true,true,new ActionBarToggleParams().enableStatusBarAnimation(false).enableTranslationAnimation(false).animationDuration(250).animationInterpolator(interpolator));\n          }\n else {\n            toggleActionBar(true,false);\n          }\n          waitingForFirstTextureUpload=0;\n        }\n      }\n    }\n);\n  }\n  if (!imagesArrLocals.isEmpty()) {\n    createVideoTextureView(savedFilterState);\n  }\n  videoTextureView.setAlpha(videoCrossfadeAlpha=0.0f);\n  if (paintingOverlay != null) {\n    paintingOverlay.setAlpha(videoCrossfadeAlpha);\n  }\n  shouldSavePositionForCurrentVideo=null;\n  shouldSavePositionForCurrentVideoShortTerm=null;\n  lastSaveTime=0;\n  if (newPlayerCreated) {\n    seekToProgressPending=seekToProgressPending2;\n    videoPlayerSeekbar.setProgress(0);\n    videoTimelineView.setProgress(0);\n    videoPlayerSeekbar.setBufferedProgress(0);\n    if (currentMessageObject != null) {\n      final int duration=currentMessageObject.getDuration();\n      final String name=currentMessageObject.getFileName();\n      if (!TextUtils.isEmpty(name)) {\n        if (duration >= 20 * 60) {\n          if (currentMessageObject.forceSeekTo < 0) {\n            SharedPreferences preferences=ApplicationLoader.applicationContext.getSharedPreferences(\"media_saved_pos\",Activity.MODE_PRIVATE);\n            float pos=preferences.getFloat(name,-1);\n            if (pos > 0 && pos < 0.999f) {\n              currentMessageObject.forceSeekTo=pos;\n              videoPlayerSeekbar.setProgress(pos);\n            }\n          }\n          shouldSavePositionForCurrentVideo=name;\n        }\n else         if (duration >= 10) {\n          SavedVideoPosition videoPosition=null;\n          for (int i=savedVideoPositions.size() - 1; i >= 0; i--) {\n            final SavedVideoPosition item=savedVideoPositions.valueAt(i);\n            if (item.timestamp < SystemClock.elapsedRealtime() - 5 * 1000) {\n              savedVideoPositions.removeAt(i);\n            }\n else             if (videoPosition == null && savedVideoPositions.keyAt(i).equals(name)) {\n              videoPosition=item;\n            }\n          }\n          if (currentMessageObject.forceSeekTo < 0 && videoPosition != null) {\n            float pos=videoPosition.position;\n            if (pos > 0 && pos < 0.999f) {\n              currentMessageObject.forceSeekTo=pos;\n              videoPlayerSeekbar.setProgress(pos);\n            }\n          }\n          shouldSavePositionForCurrentVideoShortTerm=name;\n        }\n      }\n    }\n    videoPlayer.preparePlayer(uri,\"other\");\n    videoPlayer.setPlayWhenReady(playWhenReady);\n  }\n  playerLooping=currentMessageObject != null && currentMessageObject.getDuration() <= 30;\n  videoPlayerControlFrameLayout.setSeekBarTransitionEnabled(playerLooping);\n  videoPlayer.setLooping(playerLooping);\n  if (currentMessageObject != null && currentMessageObject.forceSeekTo >= 0) {\n    seekToProgressPending=currentMessageObject.forceSeekTo;\n    currentMessageObject.forceSeekTo=-1;\n  }\n  if (currentBotInlineResult != null && (currentBotInlineResult.type.equals(\"video\") || MessageObject.isVideoDocument(currentBotInlineResult.document))) {\n    bottomLayout.setVisibility(View.VISIBLE);\n    bottomLayout.setPadding(0,0,AndroidUtilities.dp(84),0);\n    pickerView.setVisibility(View.GONE);\n  }\n else {\n    bottomLayout.setPadding(0,0,0,0);\n  }\n  if (pageBlocksAdapter != null) {\n    bottomLayout.setVisibility(View.VISIBLE);\n  }\n  setVideoPlayerControlVisible(!isCurrentVideo,true);\n  if (!isCurrentVideo) {\n    scheduleActionBarHide(playerAutoStarted ? 3000 : 1000);\n  }\n  inPreview=preview;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1309,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 6569,
        "startColumnNumber" : 8,
        "endLineNumber" : 6572,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (currentMessageObject != null && currentMessageObject.forceSeekTo >= 0) {\n  seekToProgressPending=currentMessageObject.forceSeekTo;\n  currentMessageObject.forceSeekTo=-1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 69,
    "startLineNumber" : 6569,
    "startColumnNumber" : 12,
    "endLineNumber" : 6569,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}