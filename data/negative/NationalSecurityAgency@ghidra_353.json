{
  "id" : 353,
  "expression" : "TARGET_FILE_ID_HI_PARM",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/DB/src/main/java/db/buffers/ChangeMapFile.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TARGET_FILE_ID_HI_PARM",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 105,
      "startColumnNumber" : 55,
      "endLineNumber" : 105,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 105,
        "startColumnNumber" : 34,
        "endLineNumber" : 105,
        "endColumnNumber" : 78
      },
      "nodeContext" : "mapFile.getParameter(TARGET_FILE_ID_HI_PARM)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 105,
        "startColumnNumber" : 28,
        "endLineNumber" : 105,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 105,
        "startColumnNumber" : 28,
        "endLineNumber" : 105,
        "endColumnNumber" : 84
      },
      "nodeContext" : "(long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 105,
        "startColumnNumber" : 27,
        "endLineNumber" : 105,
        "endColumnNumber" : 85
      },
      "nodeContext" : "((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 105,
        "startColumnNumber" : 27,
        "endLineNumber" : 106,
        "endColumnNumber" : 66
      },
      "nodeContext" : "((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 105,
        "startColumnNumber" : 9,
        "endLineNumber" : 106,
        "endColumnNumber" : 66
      },
      "nodeContext" : "oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 67
      },
      "nodeContext" : "long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 819,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  mapFile=new LocalBufferFile(file,true);\n  if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n    throw new IOException(\"Bad modification map file: \" + file);\n  }\n  long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n  if (oldTargetFileId != oldFile.getFileId()) {\n    throw new IOException(\"Modification map file does not correspond to target: \" + file);\n  }\n  bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n  indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n  if (newFile.getIndexCount() < indexCnt) {\n    throw new AssertException();\n  }\n  int id=bufMgr.getParameter(BUFFER_ID_PARM);\n  buffer=new ChainedBuffer(bufMgr,id);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1718,
        "startLineNumber" : 68,
        "startColumnNumber" : 3,
        "endLineNumber" : 120,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!file.exists()) {\n  indexCnt=oldFile.getIndexCount();\n  bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n  bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n  int ver=oldFile.getVersion();\n  bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n  bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n  int size=((indexCnt - 1) / 8) + 1;\n  buffer=new ChainedBuffer(size,bufMgr);\n  bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n  int lastByteOffset=(indexCnt - 1) / 8;\n  byte lastByte=0;\n  int index=indexCnt;\n  int bit;\n  while ((bit=index % 8) != 0) {\n    int bitMask=1 << bit;\n    lastByte=(byte)(lastByte | bitMask);\n    ++index;\n  }\n  buffer.putByte(lastByteOffset,lastByte);\n}\n else {\n  mapFile=new LocalBufferFile(file,true);\n  if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n    throw new IOException(\"Bad modification map file: \" + file);\n  }\n  long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n  if (oldTargetFileId != oldFile.getFileId()) {\n    throw new IOException(\"Modification map file does not correspond to target: \" + file);\n  }\n  bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n  indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n  if (newFile.getIndexCount() < indexCnt) {\n    throw new AssertException();\n  }\n  int id=bufMgr.getParameter(BUFFER_ID_PARM);\n  buffer=new ChainedBuffer(bufMgr,id);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 238,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 67,
        "startColumnNumber" : 6,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!file.exists()) {\n    indexCnt=oldFile.getIndexCount();\n    bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n    bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n    int ver=oldFile.getVersion();\n    bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n    bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n    int size=((indexCnt - 1) / 8) + 1;\n    buffer=new ChainedBuffer(size,bufMgr);\n    bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n    int lastByteOffset=(indexCnt - 1) / 8;\n    byte lastByte=0;\n    int index=indexCnt;\n    int bit;\n    while ((bit=index % 8) != 0) {\n      int bitMask=1 << bit;\n      lastByte=(byte)(lastByte | bitMask);\n      ++index;\n    }\n    buffer.putByte(lastByteOffset,lastByte);\n  }\n else {\n    mapFile=new LocalBufferFile(file,true);\n    if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n      throw new IOException(\"Bad modification map file: \" + file);\n    }\n    long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n    if (oldTargetFileId != oldFile.getFileId()) {\n      throw new IOException(\"Modification map file does not correspond to target: \" + file);\n    }\n    bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n    indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n    if (newFile.getIndexCount() < indexCnt) {\n      throw new AssertException();\n    }\n    int id=bufMgr.getParameter(BUFFER_ID_PARM);\n    buffer=new ChainedBuffer(bufMgr,id);\n  }\n  long targetFileId=newFile.getFileId();\n  bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n  bufMgr.setParameter(TARGET_FILE_ID_LOW_PARM,(int)(targetFileId & 0xffffffffL));\n  success=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2289,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  if (!file.exists()) {\n    indexCnt=oldFile.getIndexCount();\n    bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n    bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n    int ver=oldFile.getVersion();\n    bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n    bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n    int size=((indexCnt - 1) / 8) + 1;\n    buffer=new ChainedBuffer(size,bufMgr);\n    bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n    int lastByteOffset=(indexCnt - 1) / 8;\n    byte lastByte=0;\n    int index=indexCnt;\n    int bit;\n    while ((bit=index % 8) != 0) {\n      int bitMask=1 << bit;\n      lastByte=(byte)(lastByte | bitMask);\n      ++index;\n    }\n    buffer.putByte(lastByteOffset,lastByte);\n  }\n else {\n    mapFile=new LocalBufferFile(file,true);\n    if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n      throw new IOException(\"Bad modification map file: \" + file);\n    }\n    long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n    if (oldTargetFileId != oldFile.getFileId()) {\n      throw new IOException(\"Modification map file does not correspond to target: \" + file);\n    }\n    bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n    indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n    if (newFile.getIndexCount() < indexCnt) {\n      throw new AssertException();\n    }\n    int id=bufMgr.getParameter(BUFFER_ID_PARM);\n    buffer=new ChainedBuffer(bufMgr,id);\n  }\n  long targetFileId=newFile.getFileId();\n  bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n  bufMgr.setParameter(TARGET_FILE_ID_LOW_PARM,(int)(targetFileId & 0xffffffffL));\n  success=true;\n}\n catch (NoSuchElementException e) {\n  throw new IOException(\"Required modification map paramater (\" + e.getMessage() + \") not found: \"+ file);\n}\n finally {\n  if (!success) {\n    if (bufMgr != null) {\n      bufMgr.dispose();\n    }\n else     if (mapFile != null) {\n      mapFile.dispose();\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 60,
        "startColumnNumber" : 109,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  this.file=file;\n  readOnly=false;\n  LocalBufferFile mapFile=null;\n  boolean success=false;\n  try {\n    if (!file.exists()) {\n      indexCnt=oldFile.getIndexCount();\n      bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n      bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n      int ver=oldFile.getVersion();\n      bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n      bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n      int size=((indexCnt - 1) / 8) + 1;\n      buffer=new ChainedBuffer(size,bufMgr);\n      bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n      int lastByteOffset=(indexCnt - 1) / 8;\n      byte lastByte=0;\n      int index=indexCnt;\n      int bit;\n      while ((bit=index % 8) != 0) {\n        int bitMask=1 << bit;\n        lastByte=(byte)(lastByte | bitMask);\n        ++index;\n      }\n      buffer.putByte(lastByteOffset,lastByte);\n    }\n else {\n      mapFile=new LocalBufferFile(file,true);\n      if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n        throw new IOException(\"Bad modification map file: \" + file);\n      }\n      long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n      if (oldTargetFileId != oldFile.getFileId()) {\n        throw new IOException(\"Modification map file does not correspond to target: \" + file);\n      }\n      bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n      indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n      if (newFile.getIndexCount() < indexCnt) {\n        throw new AssertException();\n      }\n      int id=bufMgr.getParameter(BUFFER_ID_PARM);\n      buffer=new ChainedBuffer(bufMgr,id);\n    }\n    long targetFileId=newFile.getFileId();\n    bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n    bufMgr.setParameter(TARGET_FILE_ID_LOW_PARM,(int)(targetFileId & 0xffffffffL));\n    success=true;\n  }\n catch (  NoSuchElementException e) {\n    throw new IOException(\"Required modification map paramater (\" + e.getMessage() + \") not found: \"+ file);\n  }\n finally {\n    if (!success) {\n      if (bufMgr != null) {\n        bufMgr.dispose();\n      }\n else       if (mapFile != null) {\n        mapFile.dispose();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2857,
        "startLineNumber" : 52,
        "startColumnNumber" : 1,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Construct a map file for output.  If the file exists it will be updated, otherwise a new file will be created.\n * @param file map file\n * @param targetFile associated target buffer file\n * @param create if true a new map file will be created\n * @throws IOException if file already exists or an IO error occurs\n */\nChangeMapFile(File file,LocalManagedBufferFile oldFile,LocalManagedBufferFile newFile) throws IOException {\n  this.file=file;\n  readOnly=false;\n  LocalBufferFile mapFile=null;\n  boolean success=false;\n  try {\n    if (!file.exists()) {\n      indexCnt=oldFile.getIndexCount();\n      bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n      bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n      int ver=oldFile.getVersion();\n      bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n      bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n      int size=((indexCnt - 1) / 8) + 1;\n      buffer=new ChainedBuffer(size,bufMgr);\n      bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n      int lastByteOffset=(indexCnt - 1) / 8;\n      byte lastByte=0;\n      int index=indexCnt;\n      int bit;\n      while ((bit=index % 8) != 0) {\n        int bitMask=1 << bit;\n        lastByte=(byte)(lastByte | bitMask);\n        ++index;\n      }\n      buffer.putByte(lastByteOffset,lastByte);\n    }\n else {\n      mapFile=new LocalBufferFile(file,true);\n      if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n        throw new IOException(\"Bad modification map file: \" + file);\n      }\n      long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n      if (oldTargetFileId != oldFile.getFileId()) {\n        throw new IOException(\"Modification map file does not correspond to target: \" + file);\n      }\n      bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n      indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n      if (newFile.getIndexCount() < indexCnt) {\n        throw new AssertException();\n      }\n      int id=bufMgr.getParameter(BUFFER_ID_PARM);\n      buffer=new ChainedBuffer(bufMgr,id);\n    }\n    long targetFileId=newFile.getFileId();\n    bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n    bufMgr.setParameter(TARGET_FILE_ID_LOW_PARM,(int)(targetFileId & 0xffffffffL));\n    success=true;\n  }\n catch (  NoSuchElementException e) {\n    throw new IOException(\"Required modification map paramater (\" + e.getMessage() + \") not found: \"+ file);\n  }\n finally {\n    if (!success) {\n      if (bufMgr != null) {\n        bufMgr.dispose();\n      }\n else       if (mapFile != null) {\n        mapFile.dispose();\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 105,
        "startColumnNumber" : 27,
        "endLineNumber" : 105,
        "endColumnNumber" : 85
      },
      "nodeContext" : "((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TARGET_FILE_ID_HI_PARM",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 123,
      "startColumnNumber" : 23,
      "endLineNumber" : 123,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 123,
        "startColumnNumber" : 3,
        "endLineNumber" : 123,
        "endColumnNumber" : 73
      },
      "nodeContext" : "bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 123,
        "startColumnNumber" : 3,
        "endLineNumber" : 123,
        "endColumnNumber" : 74
      },
      "nodeContext" : "bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 67,
        "startColumnNumber" : 6,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!file.exists()) {\n    indexCnt=oldFile.getIndexCount();\n    bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n    bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n    int ver=oldFile.getVersion();\n    bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n    bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n    int size=((indexCnt - 1) / 8) + 1;\n    buffer=new ChainedBuffer(size,bufMgr);\n    bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n    int lastByteOffset=(indexCnt - 1) / 8;\n    byte lastByte=0;\n    int index=indexCnt;\n    int bit;\n    while ((bit=index % 8) != 0) {\n      int bitMask=1 << bit;\n      lastByte=(byte)(lastByte | bitMask);\n      ++index;\n    }\n    buffer.putByte(lastByteOffset,lastByte);\n  }\n else {\n    mapFile=new LocalBufferFile(file,true);\n    if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n      throw new IOException(\"Bad modification map file: \" + file);\n    }\n    long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n    if (oldTargetFileId != oldFile.getFileId()) {\n      throw new IOException(\"Modification map file does not correspond to target: \" + file);\n    }\n    bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n    indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n    if (newFile.getIndexCount() < indexCnt) {\n      throw new AssertException();\n    }\n    int id=bufMgr.getParameter(BUFFER_ID_PARM);\n    buffer=new ChainedBuffer(bufMgr,id);\n  }\n  long targetFileId=newFile.getFileId();\n  bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n  bufMgr.setParameter(TARGET_FILE_ID_LOW_PARM,(int)(targetFileId & 0xffffffffL));\n  success=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2289,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  if (!file.exists()) {\n    indexCnt=oldFile.getIndexCount();\n    bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n    bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n    int ver=oldFile.getVersion();\n    bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n    bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n    int size=((indexCnt - 1) / 8) + 1;\n    buffer=new ChainedBuffer(size,bufMgr);\n    bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n    int lastByteOffset=(indexCnt - 1) / 8;\n    byte lastByte=0;\n    int index=indexCnt;\n    int bit;\n    while ((bit=index % 8) != 0) {\n      int bitMask=1 << bit;\n      lastByte=(byte)(lastByte | bitMask);\n      ++index;\n    }\n    buffer.putByte(lastByteOffset,lastByte);\n  }\n else {\n    mapFile=new LocalBufferFile(file,true);\n    if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n      throw new IOException(\"Bad modification map file: \" + file);\n    }\n    long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n    if (oldTargetFileId != oldFile.getFileId()) {\n      throw new IOException(\"Modification map file does not correspond to target: \" + file);\n    }\n    bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n    indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n    if (newFile.getIndexCount() < indexCnt) {\n      throw new AssertException();\n    }\n    int id=bufMgr.getParameter(BUFFER_ID_PARM);\n    buffer=new ChainedBuffer(bufMgr,id);\n  }\n  long targetFileId=newFile.getFileId();\n  bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n  bufMgr.setParameter(TARGET_FILE_ID_LOW_PARM,(int)(targetFileId & 0xffffffffL));\n  success=true;\n}\n catch (NoSuchElementException e) {\n  throw new IOException(\"Required modification map paramater (\" + e.getMessage() + \") not found: \"+ file);\n}\n finally {\n  if (!success) {\n    if (bufMgr != null) {\n      bufMgr.dispose();\n    }\n else     if (mapFile != null) {\n      mapFile.dispose();\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 60,
        "startColumnNumber" : 109,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  this.file=file;\n  readOnly=false;\n  LocalBufferFile mapFile=null;\n  boolean success=false;\n  try {\n    if (!file.exists()) {\n      indexCnt=oldFile.getIndexCount();\n      bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n      bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n      int ver=oldFile.getVersion();\n      bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n      bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n      int size=((indexCnt - 1) / 8) + 1;\n      buffer=new ChainedBuffer(size,bufMgr);\n      bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n      int lastByteOffset=(indexCnt - 1) / 8;\n      byte lastByte=0;\n      int index=indexCnt;\n      int bit;\n      while ((bit=index % 8) != 0) {\n        int bitMask=1 << bit;\n        lastByte=(byte)(lastByte | bitMask);\n        ++index;\n      }\n      buffer.putByte(lastByteOffset,lastByte);\n    }\n else {\n      mapFile=new LocalBufferFile(file,true);\n      if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n        throw new IOException(\"Bad modification map file: \" + file);\n      }\n      long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n      if (oldTargetFileId != oldFile.getFileId()) {\n        throw new IOException(\"Modification map file does not correspond to target: \" + file);\n      }\n      bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n      indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n      if (newFile.getIndexCount() < indexCnt) {\n        throw new AssertException();\n      }\n      int id=bufMgr.getParameter(BUFFER_ID_PARM);\n      buffer=new ChainedBuffer(bufMgr,id);\n    }\n    long targetFileId=newFile.getFileId();\n    bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n    bufMgr.setParameter(TARGET_FILE_ID_LOW_PARM,(int)(targetFileId & 0xffffffffL));\n    success=true;\n  }\n catch (  NoSuchElementException e) {\n    throw new IOException(\"Required modification map paramater (\" + e.getMessage() + \") not found: \"+ file);\n  }\n finally {\n    if (!success) {\n      if (bufMgr != null) {\n        bufMgr.dispose();\n      }\n else       if (mapFile != null) {\n        mapFile.dispose();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2857,
        "startLineNumber" : 52,
        "startColumnNumber" : 1,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Construct a map file for output.  If the file exists it will be updated, otherwise a new file will be created.\n * @param file map file\n * @param targetFile associated target buffer file\n * @param create if true a new map file will be created\n * @throws IOException if file already exists or an IO error occurs\n */\nChangeMapFile(File file,LocalManagedBufferFile oldFile,LocalManagedBufferFile newFile) throws IOException {\n  this.file=file;\n  readOnly=false;\n  LocalBufferFile mapFile=null;\n  boolean success=false;\n  try {\n    if (!file.exists()) {\n      indexCnt=oldFile.getIndexCount();\n      bufMgr=new BufferMgr(BufferMgr.DEFAULT_BUFFER_SIZE,CACHE_SIZE,1);\n      bufMgr.setParameter(MAGIC_NUMBER_PARM,MAGIC_NUMBER);\n      int ver=oldFile.getVersion();\n      bufMgr.setParameter(INITIAL_VERSION_PARM,ver);\n      bufMgr.setParameter(INDEX_CNT_PARM,indexCnt);\n      int size=((indexCnt - 1) / 8) + 1;\n      buffer=new ChainedBuffer(size,bufMgr);\n      bufMgr.setParameter(BUFFER_ID_PARM,buffer.getId());\n      int lastByteOffset=(indexCnt - 1) / 8;\n      byte lastByte=0;\n      int index=indexCnt;\n      int bit;\n      while ((bit=index % 8) != 0) {\n        int bitMask=1 << bit;\n        lastByte=(byte)(lastByte | bitMask);\n        ++index;\n      }\n      buffer.putByte(lastByteOffset,lastByte);\n    }\n else {\n      mapFile=new LocalBufferFile(file,true);\n      if (mapFile.getParameter(MAGIC_NUMBER_PARM) != MAGIC_NUMBER) {\n        throw new IOException(\"Bad modification map file: \" + file);\n      }\n      long oldTargetFileId=((long)mapFile.getParameter(TARGET_FILE_ID_HI_PARM) << 32) | (mapFile.getParameter(TARGET_FILE_ID_LOW_PARM) & 0xffffffffL);\n      if (oldTargetFileId != oldFile.getFileId()) {\n        throw new IOException(\"Modification map file does not correspond to target: \" + file);\n      }\n      bufMgr=new BufferMgr(mapFile,CACHE_SIZE,1);\n      indexCnt=bufMgr.getParameter(INDEX_CNT_PARM);\n      if (newFile.getIndexCount() < indexCnt) {\n        throw new AssertException();\n      }\n      int id=bufMgr.getParameter(BUFFER_ID_PARM);\n      buffer=new ChainedBuffer(bufMgr,id);\n    }\n    long targetFileId=newFile.getFileId();\n    bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n    bufMgr.setParameter(TARGET_FILE_ID_LOW_PARM,(int)(targetFileId & 0xffffffffL));\n    success=true;\n  }\n catch (  NoSuchElementException e) {\n    throw new IOException(\"Required modification map paramater (\" + e.getMessage() + \") not found: \"+ file);\n  }\n finally {\n    if (!success) {\n      if (bufMgr != null) {\n        bufMgr.dispose();\n      }\n else       if (mapFile != null) {\n        mapFile.dispose();\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 123,
        "startColumnNumber" : 3,
        "endLineNumber" : 123,
        "endColumnNumber" : 74
      },
      "nodeContext" : "bufMgr.setParameter(TARGET_FILE_ID_HI_PARM,(int)(targetFileId >> 32));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 105,
    "startColumnNumber" : 55,
    "endLineNumber" : 105,
    "endColumnNumber" : 77
  }, {
    "charLength" : 22,
    "startLineNumber" : 123,
    "startColumnNumber" : 23,
    "endLineNumber" : 123,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}