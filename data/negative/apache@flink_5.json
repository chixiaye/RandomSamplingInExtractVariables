{
  "id" : 5,
  "expression" : "this",
  "projectName" : "apache@flink",
  "commitID" : "0e6f33b1ad9607faefd2f8fd7fdf4d62f612f6df",
  "filePath" : "flink-connectors/flink-connector-pulsar/src/main/java/org/apache/flink/connector/pulsar/sink/writer/topic/TopicMetadataListener.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 132,
      "startColumnNumber" : 12,
      "endLineNumber" : 132,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 32
      },
      "nodeContext" : "this.availableTopics",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 64
      },
      "nodeContext" : "this.availableTopics=ImmutableList.copyOf(results)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 65
      },
      "nodeContext" : "this.availableTopics=ImmutableList.copyOf(results);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 749,
        "startLineNumber" : 117,
        "startColumnNumber" : 79,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 858,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n  List<String> results=new ArrayList<>();\n  for (  Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n    int partitionNums=entry.getValue();\n    if (partitionNums == NON_PARTITIONED) {\n      results.add(topicNameWithNonPartition(entry.getKey()));\n    }\n else {\n      for (int i=0; i < partitionNums; i++) {\n        results.add(topicNameWithPartition(entry.getKey(),i));\n      }\n    }\n  }\n  results.addAll(partitionedTopics);\n  this.availableTopics=ImmutableList.copyOf(results);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 102,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 115,
        "startColumnNumber" : 42,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Return all the available topic partitions. We would recalculate the partitions if the topic metadata has been changed. Otherwise, we would return the cached result for better performance.\n */\npublic List<String> availableTopics(){\n  if (availableTopics.isEmpty() && (!partitionedTopics.isEmpty() || !topicMetadata.isEmpty())) {\n    List<String> results=new ArrayList<>();\n    for (    Map.Entry<String,Integer> entry : topicMetadata.entrySet()) {\n      int partitionNums=entry.getValue();\n      if (partitionNums == NON_PARTITIONED) {\n        results.add(topicNameWithNonPartition(entry.getKey()));\n      }\n else {\n        for (int i=0; i < partitionNums; i++) {\n          results.add(topicNameWithPartition(entry.getKey(),i));\n        }\n      }\n    }\n    results.addAll(partitionedTopics);\n    this.availableTopics=ImmutableList.copyOf(results);\n  }\n  return availableTopics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 65
      },
      "nodeContext" : "this.availableTopics=ImmutableList.copyOf(results);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.connector.pulsar.sink.writer.topic.TopicMetadataListener"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 132,
    "startColumnNumber" : 12,
    "endLineNumber" : 132,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ ]
}