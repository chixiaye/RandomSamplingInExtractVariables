{
  "id" : 264,
  "expression" : "\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ReactiveDatasourceHealthCheck.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 97,
      "startLineNumber" : 85,
      "startColumnNumber" : 25,
      "endLineNumber" : 85,
      "endColumnNumber" : 122
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 123
      },
      "nodeContext" : "log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 124
      },
      "nodeContext" : "log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 84,
        "startColumnNumber" : 45,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n  Thread.currentThread().interrupt();\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 84,
        "startColumnNumber" : 14,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (InterruptedException e) {\n  log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n  Thread.currentThread().interrupt();\n  return builder.build();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2390,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  CompletableFuture<Void> databaseConnectionAttempt=new CompletableFuture<>();\n  Context context=Vertx.currentContext();\n  if (context != null) {\n    log.debug(\"Run health check on the current Vert.x context\");\n    context.runOnContext(v -> {\n      pgPool.query(healthCheckSQL).execute(ar -> {\n        checkFailure(ar,builder,dataSourceName);\n        databaseConnectionAttempt.complete(null);\n      }\n);\n    }\n);\n  }\n else {\n    log.warn(\"Vert.x context unavailable to perform healthcheck of reactive datasource `\" + dataSourceName + \"`. This is unlikely to work correctly.\");\n    pgPool.query(healthCheckSQL).execute(ar -> {\n      checkFailure(ar,builder,dataSourceName);\n      databaseConnectionAttempt.complete(null);\n    }\n);\n  }\n  databaseConnectionAttempt.get(20,TimeUnit.SECONDS);\n  builder.withData(dataSourceName,\"up\");\n}\n catch (RuntimeException|ExecutionException exception) {\n  operationsError(dataSourceName,exception);\n  builder.down();\n  builder.withData(dataSourceName,\"down - connection failed: \" + exception.getMessage());\n}\ncatch (InterruptedException e) {\n  log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n  Thread.currentThread().interrupt();\n  return builder.build();\n}\ncatch (TimeoutException e) {\n  log.warn(\"Timed out while waiting for an available connection to perform healthcheck of datasource \" + dataSourceName);\n  builder.down();\n  builder.withData(dataSourceName,\"timed out, unable to obtain connection to perform healthcheck of datasource\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 181,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2534,
        "startLineNumber" : 51,
        "startColumnNumber" : 69,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String dataSourceName=pgPoolEntry.getKey();\n  final Pool pgPool=pgPoolEntry.getValue();\n  try {\n    CompletableFuture<Void> databaseConnectionAttempt=new CompletableFuture<>();\n    Context context=Vertx.currentContext();\n    if (context != null) {\n      log.debug(\"Run health check on the current Vert.x context\");\n      context.runOnContext(v -> {\n        pgPool.query(healthCheckSQL).execute(ar -> {\n          checkFailure(ar,builder,dataSourceName);\n          databaseConnectionAttempt.complete(null);\n        }\n);\n      }\n);\n    }\n else {\n      log.warn(\"Vert.x context unavailable to perform healthcheck of reactive datasource `\" + dataSourceName + \"`. This is unlikely to work correctly.\");\n      pgPool.query(healthCheckSQL).execute(ar -> {\n        checkFailure(ar,builder,dataSourceName);\n        databaseConnectionAttempt.complete(null);\n      }\n);\n    }\n    databaseConnectionAttempt.get(20,TimeUnit.SECONDS);\n    builder.withData(dataSourceName,\"up\");\n  }\n catch (  RuntimeException|ExecutionException exception) {\n    operationsError(dataSourceName,exception);\n    builder.down();\n    builder.withData(dataSourceName,\"down - connection failed: \" + exception.getMessage());\n  }\ncatch (  InterruptedException e) {\n    log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n    Thread.currentThread().interrupt();\n    return builder.build();\n  }\ncatch (  TimeoutException e) {\n    log.warn(\"Timed out while waiting for an available connection to perform healthcheck of datasource \" + dataSourceName);\n    builder.down();\n    builder.withData(dataSourceName,\"timed out, unable to obtain connection to perform healthcheck of datasource\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2595,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,Pool> pgPoolEntry : pools.entrySet()) {\n  final String dataSourceName=pgPoolEntry.getKey();\n  final Pool pgPool=pgPoolEntry.getValue();\n  try {\n    CompletableFuture<Void> databaseConnectionAttempt=new CompletableFuture<>();\n    Context context=Vertx.currentContext();\n    if (context != null) {\n      log.debug(\"Run health check on the current Vert.x context\");\n      context.runOnContext(v -> {\n        pgPool.query(healthCheckSQL).execute(ar -> {\n          checkFailure(ar,builder,dataSourceName);\n          databaseConnectionAttempt.complete(null);\n        }\n);\n      }\n);\n    }\n else {\n      log.warn(\"Vert.x context unavailable to perform healthcheck of reactive datasource `\" + dataSourceName + \"`. This is unlikely to work correctly.\");\n      pgPool.query(healthCheckSQL).execute(ar -> {\n        checkFailure(ar,builder,dataSourceName);\n        databaseConnectionAttempt.complete(null);\n      }\n);\n    }\n    databaseConnectionAttempt.get(20,TimeUnit.SECONDS);\n    builder.withData(dataSourceName,\"up\");\n  }\n catch (  RuntimeException|ExecutionException exception) {\n    operationsError(dataSourceName,exception);\n    builder.down();\n    builder.withData(dataSourceName,\"down - connection failed: \" + exception.getMessage());\n  }\ncatch (  InterruptedException e) {\n    log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n    Thread.currentThread().interrupt();\n    return builder.build();\n  }\ncatch (  TimeoutException e) {\n    log.warn(\"Timed out while waiting for an available connection to perform healthcheck of datasource \" + dataSourceName);\n    builder.down();\n    builder.withData(dataSourceName,\"timed out, unable to obtain connection to perform healthcheck of datasource\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2764,
        "startLineNumber" : 47,
        "startColumnNumber" : 38,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HealthCheckResponseBuilder builder=HealthCheckResponse.named(healthCheckResponseName);\n  builder.up();\n  for (  Map.Entry<String,Pool> pgPoolEntry : pools.entrySet()) {\n    final String dataSourceName=pgPoolEntry.getKey();\n    final Pool pgPool=pgPoolEntry.getValue();\n    try {\n      CompletableFuture<Void> databaseConnectionAttempt=new CompletableFuture<>();\n      Context context=Vertx.currentContext();\n      if (context != null) {\n        log.debug(\"Run health check on the current Vert.x context\");\n        context.runOnContext(v -> {\n          pgPool.query(healthCheckSQL).execute(ar -> {\n            checkFailure(ar,builder,dataSourceName);\n            databaseConnectionAttempt.complete(null);\n          }\n);\n        }\n);\n      }\n else {\n        log.warn(\"Vert.x context unavailable to perform healthcheck of reactive datasource `\" + dataSourceName + \"`. This is unlikely to work correctly.\");\n        pgPool.query(healthCheckSQL).execute(ar -> {\n          checkFailure(ar,builder,dataSourceName);\n          databaseConnectionAttempt.complete(null);\n        }\n);\n      }\n      databaseConnectionAttempt.get(20,TimeUnit.SECONDS);\n      builder.withData(dataSourceName,\"up\");\n    }\n catch (    RuntimeException|ExecutionException exception) {\n      operationsError(dataSourceName,exception);\n      builder.down();\n      builder.withData(dataSourceName,\"down - connection failed: \" + exception.getMessage());\n    }\ncatch (    InterruptedException e) {\n      log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n      Thread.currentThread().interrupt();\n      return builder.build();\n    }\ncatch (    TimeoutException e) {\n      log.warn(\"Timed out while waiting for an available connection to perform healthcheck of datasource \" + dataSourceName);\n      builder.down();\n      builder.withData(dataSourceName,\"timed out, unable to obtain connection to perform healthcheck of datasource\");\n    }\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 233,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2812,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public HealthCheckResponse call(){\n  HealthCheckResponseBuilder builder=HealthCheckResponse.named(healthCheckResponseName);\n  builder.up();\n  for (  Map.Entry<String,Pool> pgPoolEntry : pools.entrySet()) {\n    final String dataSourceName=pgPoolEntry.getKey();\n    final Pool pgPool=pgPoolEntry.getValue();\n    try {\n      CompletableFuture<Void> databaseConnectionAttempt=new CompletableFuture<>();\n      Context context=Vertx.currentContext();\n      if (context != null) {\n        log.debug(\"Run health check on the current Vert.x context\");\n        context.runOnContext(v -> {\n          pgPool.query(healthCheckSQL).execute(ar -> {\n            checkFailure(ar,builder,dataSourceName);\n            databaseConnectionAttempt.complete(null);\n          }\n);\n        }\n);\n      }\n else {\n        log.warn(\"Vert.x context unavailable to perform healthcheck of reactive datasource `\" + dataSourceName + \"`. This is unlikely to work correctly.\");\n        pgPool.query(healthCheckSQL).execute(ar -> {\n          checkFailure(ar,builder,dataSourceName);\n          databaseConnectionAttempt.complete(null);\n        }\n);\n      }\n      databaseConnectionAttempt.get(20,TimeUnit.SECONDS);\n      builder.withData(dataSourceName,\"up\");\n    }\n catch (    RuntimeException|ExecutionException exception) {\n      operationsError(dataSourceName,exception);\n      builder.down();\n      builder.withData(dataSourceName,\"down - connection failed: \" + exception.getMessage());\n    }\ncatch (    InterruptedException e) {\n      log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n      Thread.currentThread().interrupt();\n      return builder.build();\n    }\ncatch (    TimeoutException e) {\n      log.warn(\"Timed out while waiting for an available connection to perform healthcheck of datasource \" + dataSourceName);\n      builder.down();\n      builder.withData(dataSourceName,\"timed out, unable to obtain connection to perform healthcheck of datasource\");\n    }\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 124
      },
      "nodeContext" : "log.warn(\"Interrupted while obtaining database connection for healthcheck of datasource \" + dataSourceName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 9,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 97,
    "startLineNumber" : 85,
    "startColumnNumber" : 25,
    "endLineNumber" : 85,
    "endColumnNumber" : 122
  } ],
  "layoutRelationDataList" : [ ]
}