{
  "id" : 26,
  "expression" : "null",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "152ab88643b944f1f063ba26fbe83e8b3d4dac8a",
  "filePath" : "profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/JavassistClass.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 386,
      "startColumnNumber" : 71,
      "endLineNumber" : 386,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 386,
        "startColumnNumber" : 31,
        "endLineNumber" : 386,
        "endColumnNumber" : 76
      },
      "nodeContext" : "CtNewMethod.copy(getterMethod,ctClass,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 386,
        "startColumnNumber" : 16,
        "endLineNumber" : 386,
        "endColumnNumber" : 76
      },
      "nodeContext" : "getterMethod=CtNewMethod.copy(getterMethod,ctClass,null)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 386,
        "startColumnNumber" : 16,
        "endLineNumber" : 386,
        "endColumnNumber" : 77
      },
      "nodeContext" : "getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 385,
        "startColumnNumber" : 61,
        "endLineNumber" : 387,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 385,
        "startColumnNumber" : 12,
        "endLineNumber" : 387,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (getterMethod.getDeclaringClass() != ctClass) {\n  getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 371,
        "startColumnNumber" : 12,
        "endLineNumber" : 393,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class<?> getterType=pluginContext.injectClass(classLoader,getterTypeName);\n  GetterDetails getterDetails=new GetterAnalyzer().analyze(getterType);\n  CtField field=ctClass.getField(fieldName);\n  String fieldTypeName=JavaAssistUtils.javaClassNameToObjectName(getterDetails.getFieldType().getName());\n  if (!field.getType().getName().equals(fieldTypeName)) {\n    throw new IllegalArgumentException(\"Return type of the getter is different with the field type. getterMethod: \" + getterDetails.getGetter() + \", fieldType: \"+ field.getType().getName());\n  }\n  CtMethod getterMethod=CtNewMethod.getter(getterDetails.getGetter().getName(),field);\n  if (getterMethod.getDeclaringClass() != ctClass) {\n    getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);\n  }\n  ctClass.addMethod(getterMethod);\n  CtClass ctInterface=ctClass.getClassPool().get(getterTypeName);\n  ctClass.addInterface(ctInterface);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1203,
        "startLineNumber" : 371,
        "startColumnNumber" : 8,
        "endLineNumber" : 395,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Class<?> getterType=pluginContext.injectClass(classLoader,getterTypeName);\n  GetterDetails getterDetails=new GetterAnalyzer().analyze(getterType);\n  CtField field=ctClass.getField(fieldName);\n  String fieldTypeName=JavaAssistUtils.javaClassNameToObjectName(getterDetails.getFieldType().getName());\n  if (!field.getType().getName().equals(fieldTypeName)) {\n    throw new IllegalArgumentException(\"Return type of the getter is different with the field type. getterMethod: \" + getterDetails.getGetter() + \", fieldType: \"+ field.getType().getName());\n  }\n  CtMethod getterMethod=CtNewMethod.getter(getterDetails.getGetter().getName(),field);\n  if (getterMethod.getDeclaringClass() != ctClass) {\n    getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);\n  }\n  ctClass.addMethod(getterMethod);\n  CtClass ctInterface=ctClass.getClassPool().get(getterTypeName);\n  ctClass.addInterface(ctInterface);\n}\n catch (Exception e) {\n  throw new InstrumentException(\"Failed to add getter: \" + getterTypeName,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1219,
        "startLineNumber" : 370,
        "startColumnNumber" : 94,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    Class<?> getterType=pluginContext.injectClass(classLoader,getterTypeName);\n    GetterDetails getterDetails=new GetterAnalyzer().analyze(getterType);\n    CtField field=ctClass.getField(fieldName);\n    String fieldTypeName=JavaAssistUtils.javaClassNameToObjectName(getterDetails.getFieldType().getName());\n    if (!field.getType().getName().equals(fieldTypeName)) {\n      throw new IllegalArgumentException(\"Return type of the getter is different with the field type. getterMethod: \" + getterDetails.getGetter() + \", fieldType: \"+ field.getType().getName());\n    }\n    CtMethod getterMethod=CtNewMethod.getter(getterDetails.getGetter().getName(),field);\n    if (getterMethod.getDeclaringClass() != ctClass) {\n      getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);\n    }\n    ctClass.addMethod(getterMethod);\n    CtClass ctInterface=ctClass.getClassPool().get(getterTypeName);\n    ctClass.addInterface(ctInterface);\n  }\n catch (  Exception e) {\n    throw new InstrumentException(\"Failed to add getter: \" + getterTypeName,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1323,
        "startLineNumber" : 369,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void addGetter(String getterTypeName,String fieldName) throws InstrumentException {\n  try {\n    Class<?> getterType=pluginContext.injectClass(classLoader,getterTypeName);\n    GetterDetails getterDetails=new GetterAnalyzer().analyze(getterType);\n    CtField field=ctClass.getField(fieldName);\n    String fieldTypeName=JavaAssistUtils.javaClassNameToObjectName(getterDetails.getFieldType().getName());\n    if (!field.getType().getName().equals(fieldTypeName)) {\n      throw new IllegalArgumentException(\"Return type of the getter is different with the field type. getterMethod: \" + getterDetails.getGetter() + \", fieldType: \"+ field.getType().getName());\n    }\n    CtMethod getterMethod=CtNewMethod.getter(getterDetails.getGetter().getName(),field);\n    if (getterMethod.getDeclaringClass() != ctClass) {\n      getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);\n    }\n    ctClass.addMethod(getterMethod);\n    CtClass ctInterface=ctClass.getClassPool().get(getterTypeName);\n    ctClass.addInterface(ctInterface);\n  }\n catch (  Exception e) {\n    throw new InstrumentException(\"Failed to add getter: \" + getterTypeName,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 155,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 386,
        "startColumnNumber" : 16,
        "endLineNumber" : 386,
        "endColumnNumber" : 77
      },
      "nodeContext" : "getterMethod=CtNewMethod.copy(getterMethod,ctClass,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 386,
    "startColumnNumber" : 71,
    "endLineNumber" : 386,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}