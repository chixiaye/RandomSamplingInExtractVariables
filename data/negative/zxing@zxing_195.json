{
  "id" : 195,
  "expression" : "i < numDataCodewords",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/datamatrix/decoder/Decoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < numDataCodewords",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 98,
      "startColumnNumber" : 22,
      "endLineNumber" : 98,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 98,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < numDataCodewords; i++) {\n  resultBytes[i * dataBlocksCount + j]=codewordBytes[i];\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 93,
        "startColumnNumber" : 46,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataBlock dataBlock=dataBlocks[j];\n  byte[] codewordBytes=dataBlock.getCodewords();\n  int numDataCodewords=dataBlock.getNumDataCodewords();\n  correctErrors(codewordBytes,numDataCodewords);\n  for (int i=0; i < numDataCodewords; i++) {\n    resultBytes[i * dataBlocksCount + j]=codewordBytes[i];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int j=0; j < dataBlocksCount; j++) {\n  DataBlock dataBlock=dataBlocks[j];\n  byte[] codewordBytes=dataBlock.getCodewords();\n  int numDataCodewords=dataBlock.getNumDataCodewords();\n  correctErrors(codewordBytes,numDataCodewords);\n  for (int i=0; i < numDataCodewords; i++) {\n    resultBytes[i * dataBlocksCount + j]=codewordBytes[i];\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1263,
        "startLineNumber" : 72,
        "startColumnNumber" : 88,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BitMatrixParser parser=new BitMatrixParser(bits);\n  Version version=parser.getVersion();\n  byte[] codewords=parser.readCodewords();\n  DataBlock[] dataBlocks=DataBlock.getDataBlocks(codewords,version);\n  int dataBlocksCount=dataBlocks.length;\n  int totalBytes=0;\n  for (int i=0; i < dataBlocksCount; i++) {\n    totalBytes+=dataBlocks[i].getNumDataCodewords();\n  }\n  byte[] resultBytes=new byte[totalBytes];\n  for (int j=0; j < dataBlocksCount; j++) {\n    DataBlock dataBlock=dataBlocks[j];\n    byte[] codewordBytes=dataBlock.getCodewords();\n    int numDataCodewords=dataBlock.getNumDataCodewords();\n    correctErrors(codewordBytes,numDataCodewords);\n    for (int i=0; i < numDataCodewords; i++) {\n      resultBytes[i * dataBlocksCount + j]=codewordBytes[i];\n    }\n  }\n  return DecodedBitStreamParser.decode(resultBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1770,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p>Decodes a Data Matrix Code represented as a  {@link BitMatrix}. A 1 or \"true\" is taken to mean a black module.</p>\n * @param bits booleans representing white/black Data Matrix Code modules\n * @return text and bytes encoded within the Data Matrix Code\n * @throws FormatException if the Data Matrix Code cannot be decoded\n * @throws ChecksumException if error correction fails\n */\npublic DecoderResult decode(BitMatrix bits) throws FormatException, ChecksumException {\n  BitMatrixParser parser=new BitMatrixParser(bits);\n  Version version=parser.getVersion();\n  byte[] codewords=parser.readCodewords();\n  DataBlock[] dataBlocks=DataBlock.getDataBlocks(codewords,version);\n  int dataBlocksCount=dataBlocks.length;\n  int totalBytes=0;\n  for (int i=0; i < dataBlocksCount; i++) {\n    totalBytes+=dataBlocks[i].getNumDataCodewords();\n  }\n  byte[] resultBytes=new byte[totalBytes];\n  for (int j=0; j < dataBlocksCount; j++) {\n    DataBlock dataBlock=dataBlocks[j];\n    byte[] codewordBytes=dataBlock.getCodewords();\n    int numDataCodewords=dataBlock.getNumDataCodewords();\n    correctErrors(codewordBytes,numDataCodewords);\n    for (int i=0; i < numDataCodewords; i++) {\n      resultBytes[i * dataBlocksCount + j]=codewordBytes[i];\n    }\n  }\n  return DecodedBitStreamParser.decode(resultBytes);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 98,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < numDataCodewords; i++) {\n  resultBytes[i * dataBlocksCount + j]=codewordBytes[i];\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 98,
    "startColumnNumber" : 22,
    "endLineNumber" : 98,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}