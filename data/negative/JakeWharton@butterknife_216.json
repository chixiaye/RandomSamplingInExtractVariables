{
  "id" : 216,
  "expression" : "element",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "cdc587f9c9e62f5f7e7c8f821cb5c6362fa8a386",
  "filePath" : "butterknife/src/main/java/butterknife/Views.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 178,
      "startColumnNumber" : 53,
      "endLineNumber" : 178,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 178,
        "startColumnNumber" : 53,
        "endLineNumber" : 178,
        "endColumnNumber" : 82
      },
      "nodeContext" : "element.getEnclosingElement()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 178,
        "startColumnNumber" : 39,
        "endLineNumber" : 178,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(TypeElement)element.getEnclosingElement()",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 178,
        "startColumnNumber" : 20,
        "endLineNumber" : 178,
        "endColumnNumber" : 82
      },
      "nodeContext" : "enclosingElement=(TypeElement)element.getEnclosingElement()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 83
      },
      "nodeContext" : "TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 83
      },
      "nodeContext" : "TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 181,
      "startColumnNumber" : 33,
      "endLineNumber" : 181,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 181,
        "startColumnNumber" : 33,
        "endLineNumber" : 181,
        "endColumnNumber" : 49
      },
      "nodeContext" : "element.asType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 181,
        "startColumnNumber" : 13,
        "endLineNumber" : 181,
        "endColumnNumber" : 60
      },
      "nodeContext" : "typeUtils.isSubtype(element.asType(),viewType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 181,
        "startColumnNumber" : 12,
        "endLineNumber" : 181,
        "endColumnNumber" : 60
      },
      "nodeContext" : "!typeUtils.isSubtype(element.asType(),viewType)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!typeUtils.isSubtype(element.asType(),viewType)) {\n  error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 181,
        "startColumnNumber" : 12,
        "endLineNumber" : 181,
        "endColumnNumber" : 60
      },
      "nodeContext" : "!typeUtils.isSubtype(element.asType(),viewType)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 182,
      "startColumnNumber" : 16,
      "endLineNumber" : 182,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 182,
        "startColumnNumber" : 10,
        "endLineNumber" : 183,
        "endColumnNumber" : 59
      },
      "nodeContext" : "error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 182,
        "startColumnNumber" : 10,
        "endLineNumber" : 183,
        "endColumnNumber" : 60
      },
      "nodeContext" : "error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 181,
        "startColumnNumber" : 62,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!typeUtils.isSubtype(element.asType(),viewType)) {\n  error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 182,
        "startColumnNumber" : 10,
        "endLineNumber" : 183,
        "endColumnNumber" : 59
      },
      "nodeContext" : "error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 183,
      "startColumnNumber" : 51,
      "endLineNumber" : 183,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 182,
        "startColumnNumber" : 10,
        "endLineNumber" : 183,
        "endColumnNumber" : 59
      },
      "nodeContext" : "error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 182,
        "startColumnNumber" : 10,
        "endLineNumber" : 183,
        "endColumnNumber" : 60
      },
      "nodeContext" : "error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 181,
        "startColumnNumber" : 62,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!typeUtils.isSubtype(element.asType(),viewType)) {\n  error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 182,
        "startColumnNumber" : 10,
        "endLineNumber" : 183,
        "endColumnNumber" : 59
      },
      "nodeContext" : "error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 188,
      "startColumnNumber" : 34,
      "endLineNumber" : 188,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 188,
        "startColumnNumber" : 34,
        "endLineNumber" : 188,
        "endColumnNumber" : 56
      },
      "nodeContext" : "element.getModifiers()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 188,
        "startColumnNumber" : 22,
        "endLineNumber" : 188,
        "endColumnNumber" : 56
      },
      "nodeContext" : "modifiers=element.getModifiers()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 188,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Set<Modifier> modifiers=element.getModifiers();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 188,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Set<Modifier> modifiers=element.getModifiers();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 190,
      "startColumnNumber" : 16,
      "endLineNumber" : 190,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 190,
        "startColumnNumber" : 10,
        "endLineNumber" : 191,
        "endColumnNumber" : 59
      },
      "nodeContext" : "error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 190,
        "startColumnNumber" : 10,
        "endLineNumber" : 191,
        "endColumnNumber" : 60
      },
      "nodeContext" : "error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 189,
        "startColumnNumber" : 71,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n  error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 190,
        "startColumnNumber" : 10,
        "endLineNumber" : 191,
        "endColumnNumber" : 59
      },
      "nodeContext" : "error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 191,
      "startColumnNumber" : 51,
      "endLineNumber" : 191,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 190,
        "startColumnNumber" : 10,
        "endLineNumber" : 191,
        "endColumnNumber" : 59
      },
      "nodeContext" : "error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 190,
        "startColumnNumber" : 10,
        "endLineNumber" : 191,
        "endColumnNumber" : 60
      },
      "nodeContext" : "error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 189,
        "startColumnNumber" : 71,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n  error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 190,
        "startColumnNumber" : 10,
        "endLineNumber" : 191,
        "endColumnNumber" : 59
      },
      "nodeContext" : "error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 197,
      "startColumnNumber" : 16,
      "endLineNumber" : 197,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 197,
        "startColumnNumber" : 10,
        "endLineNumber" : 198,
        "endColumnNumber" : 31
      },
      "nodeContext" : "error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 197,
        "startColumnNumber" : 10,
        "endLineNumber" : 198,
        "endColumnNumber" : 32
      },
      "nodeContext" : "error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 196,
        "startColumnNumber" : 49,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (enclosingElement.getKind() != CLASS) {\n  error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 197,
        "startColumnNumber" : 10,
        "endLineNumber" : 198,
        "endColumnNumber" : 31
      },
      "nodeContext" : "error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 204,
      "startColumnNumber" : 16,
      "endLineNumber" : 204,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 204,
        "startColumnNumber" : 10,
        "endLineNumber" : 205,
        "endColumnNumber" : 31
      },
      "nodeContext" : "error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 204,
        "startColumnNumber" : 10,
        "endLineNumber" : 205,
        "endColumnNumber" : 32
      },
      "nodeContext" : "error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 203,
        "startColumnNumber" : 63,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 203,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (enclosingElement.getModifiers().contains(PRIVATE)) {\n  error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 204,
        "startColumnNumber" : 10,
        "endLineNumber" : 205,
        "endColumnNumber" : 31
      },
      "nodeContext" : "error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 217,
      "startColumnNumber" : 30,
      "endLineNumber" : 217,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 217,
        "startColumnNumber" : 30,
        "endLineNumber" : 217,
        "endColumnNumber" : 53
      },
      "nodeContext" : "element.getSimpleName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 217,
        "startColumnNumber" : 30,
        "endLineNumber" : 217,
        "endColumnNumber" : 64
      },
      "nodeContext" : "element.getSimpleName().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 217,
        "startColumnNumber" : 15,
        "endLineNumber" : 217,
        "endColumnNumber" : 64
      },
      "nodeContext" : "variableName=element.getSimpleName().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 217,
        "endColumnNumber" : 65
      },
      "nodeContext" : "String variableName=element.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 217,
        "endColumnNumber" : 65
      },
      "nodeContext" : "String variableName=element.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 218,
      "startColumnNumber" : 20,
      "endLineNumber" : 218,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 218,
        "startColumnNumber" : 20,
        "endLineNumber" : 218,
        "endColumnNumber" : 59
      },
      "nodeContext" : "element.getAnnotation(InjectView.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 218,
        "startColumnNumber" : 20,
        "endLineNumber" : 218,
        "endColumnNumber" : 67
      },
      "nodeContext" : "element.getAnnotation(InjectView.class).value()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 67
      },
      "nodeContext" : "value=element.getAnnotation(InjectView.class).value()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 68
      },
      "nodeContext" : "int value=element.getAnnotation(InjectView.class).value();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 68
      },
      "nodeContext" : "int value=element.getAnnotation(InjectView.class).value();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  }, {
    "nodeContext" : "element",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 219,
      "startColumnNumber" : 22,
      "endLineNumber" : 219,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 219,
        "startColumnNumber" : 22,
        "endLineNumber" : 219,
        "endColumnNumber" : 38
      },
      "nodeContext" : "element.asType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 219,
        "startColumnNumber" : 22,
        "endLineNumber" : 219,
        "endColumnNumber" : 49
      },
      "nodeContext" : "element.asType().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 219,
        "startColumnNumber" : 15,
        "endLineNumber" : 219,
        "endColumnNumber" : 49
      },
      "nodeContext" : "type=element.asType().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 50
      },
      "nodeContext" : "String type=element.asType().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 50
      },
      "nodeContext" : "String type=element.asType().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.Element"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 178,
    "startColumnNumber" : 53,
    "endLineNumber" : 178,
    "endColumnNumber" : 60
  }, {
    "charLength" : 7,
    "startLineNumber" : 181,
    "startColumnNumber" : 33,
    "endLineNumber" : 181,
    "endColumnNumber" : 40
  }, {
    "charLength" : 7,
    "startLineNumber" : 182,
    "startColumnNumber" : 16,
    "endLineNumber" : 182,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 183,
    "startColumnNumber" : 51,
    "endLineNumber" : 183,
    "endColumnNumber" : 58
  }, {
    "charLength" : 7,
    "startLineNumber" : 188,
    "startColumnNumber" : 34,
    "endLineNumber" : 188,
    "endColumnNumber" : 41
  }, {
    "charLength" : 7,
    "startLineNumber" : 190,
    "startColumnNumber" : 16,
    "endLineNumber" : 190,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 191,
    "startColumnNumber" : 51,
    "endLineNumber" : 191,
    "endColumnNumber" : 58
  }, {
    "charLength" : 7,
    "startLineNumber" : 197,
    "startColumnNumber" : 16,
    "endLineNumber" : 197,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 204,
    "startColumnNumber" : 16,
    "endLineNumber" : 204,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 217,
    "startColumnNumber" : 30,
    "endLineNumber" : 217,
    "endColumnNumber" : 37
  }, {
    "charLength" : 7,
    "startLineNumber" : 218,
    "startColumnNumber" : 20,
    "endLineNumber" : 218,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 219,
    "startColumnNumber" : 22,
    "endLineNumber" : 219,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 0
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 0
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  } ]
}