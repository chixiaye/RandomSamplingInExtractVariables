{
  "id" : 30,
  "expression" : "murmur3_32().hashString(str,Charsets.UTF_16)",
  "projectName" : "google@guava",
  "commitID" : "a36f08fe312ec16ad86b9206290929f0686d3b02",
  "filePath" : "guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "murmur3_32().hashString(str,Charsets.UTF_16)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 138,
      "startColumnNumber" : 30,
      "endLineNumber" : 138,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertEquals(hashUtf16,murmur3_32().hashString(str,Charsets.UTF_16))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(hashUtf16,murmur3_32().hashString(str,Charsets.UTF_16));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1324,
        "startLineNumber" : 115,
        "startColumnNumber" : 34,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String str;\n  int[] codePoints=new int[rng.nextInt(8)];\n  for (int i=0; i < codePoints.length; i++) {\n    do {\n      codePoints[i]=rng.nextInt(0x800);\n    }\n while (!Character.isValidCodePoint(codePoints[i]) || (codePoints[i] >= Character.MIN_SURROGATE && codePoints[i] <= Character.MAX_SURROGATE));\n  }\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < codePoints.length; i++) {\n    builder.appendCodePoint(codePoints[i]);\n  }\n  str=builder.toString();\n  HashCode hashUtf8=murmur3_32().hashBytes(str.getBytes(Charsets.UTF_8));\n  assertEquals(hashUtf8,murmur3_32().newHasher().putBytes(str.getBytes(Charsets.UTF_8)).hash());\n  assertEquals(hashUtf8,murmur3_32().hashString(str,Charsets.UTF_8));\n  assertEquals(hashUtf8,murmur3_32().newHasher().putString(str,Charsets.UTF_8).hash());\n  HashCode hashUtf16=murmur3_32().hashBytes(str.getBytes(Charsets.UTF_16));\n  assertEquals(hashUtf16,murmur3_32().newHasher().putBytes(str.getBytes(Charsets.UTF_16)).hash());\n  assertEquals(hashUtf16,murmur3_32().hashString(str,Charsets.UTF_16));\n  assertEquals(hashUtf16,murmur3_32().newHasher().putString(str,Charsets.UTF_16).hash());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int z=0; z < 100; z++) {\n  String str;\n  int[] codePoints=new int[rng.nextInt(8)];\n  for (int i=0; i < codePoints.length; i++) {\n    do {\n      codePoints[i]=rng.nextInt(0x800);\n    }\n while (!Character.isValidCodePoint(codePoints[i]) || (codePoints[i] >= Character.MIN_SURROGATE && codePoints[i] <= Character.MAX_SURROGATE));\n  }\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < codePoints.length; i++) {\n    builder.appendCodePoint(codePoints[i]);\n  }\n  str=builder.toString();\n  HashCode hashUtf8=murmur3_32().hashBytes(str.getBytes(Charsets.UTF_8));\n  assertEquals(hashUtf8,murmur3_32().newHasher().putBytes(str.getBytes(Charsets.UTF_8)).hash());\n  assertEquals(hashUtf8,murmur3_32().hashString(str,Charsets.UTF_8));\n  assertEquals(hashUtf8,murmur3_32().newHasher().putString(str,Charsets.UTF_8).hash());\n  HashCode hashUtf16=murmur3_32().hashBytes(str.getBytes(Charsets.UTF_16));\n  assertEquals(hashUtf16,murmur3_32().newHasher().putBytes(str.getBytes(Charsets.UTF_16)).hash());\n  assertEquals(hashUtf16,murmur3_32().hashString(str,Charsets.UTF_16));\n  assertEquals(hashUtf16,murmur3_32().newHasher().putString(str,Charsets.UTF_16).hash());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 237,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1399,
        "startLineNumber" : 113,
        "startColumnNumber" : 40,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Random rng=new Random(0);\n  for (int z=0; z < 100; z++) {\n    String str;\n    int[] codePoints=new int[rng.nextInt(8)];\n    for (int i=0; i < codePoints.length; i++) {\n      do {\n        codePoints[i]=rng.nextInt(0x800);\n      }\n while (!Character.isValidCodePoint(codePoints[i]) || (codePoints[i] >= Character.MIN_SURROGATE && codePoints[i] <= Character.MAX_SURROGATE));\n    }\n    StringBuilder builder=new StringBuilder();\n    for (int i=0; i < codePoints.length; i++) {\n      builder.appendCodePoint(codePoints[i]);\n    }\n    str=builder.toString();\n    HashCode hashUtf8=murmur3_32().hashBytes(str.getBytes(Charsets.UTF_8));\n    assertEquals(hashUtf8,murmur3_32().newHasher().putBytes(str.getBytes(Charsets.UTF_8)).hash());\n    assertEquals(hashUtf8,murmur3_32().hashString(str,Charsets.UTF_8));\n    assertEquals(hashUtf8,murmur3_32().newHasher().putString(str,Charsets.UTF_8).hash());\n    HashCode hashUtf16=murmur3_32().hashBytes(str.getBytes(Charsets.UTF_16));\n    assertEquals(hashUtf16,murmur3_32().newHasher().putBytes(str.getBytes(Charsets.UTF_16)).hash());\n    assertEquals(hashUtf16,murmur3_32().hashString(str,Charsets.UTF_16));\n    assertEquals(hashUtf16,murmur3_32().newHasher().putString(str,Charsets.UTF_16).hash());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1473,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") public void testEncodedStringInputs(){\n  Random rng=new Random(0);\n  for (int z=0; z < 100; z++) {\n    String str;\n    int[] codePoints=new int[rng.nextInt(8)];\n    for (int i=0; i < codePoints.length; i++) {\n      do {\n        codePoints[i]=rng.nextInt(0x800);\n      }\n while (!Character.isValidCodePoint(codePoints[i]) || (codePoints[i] >= Character.MIN_SURROGATE && codePoints[i] <= Character.MAX_SURROGATE));\n    }\n    StringBuilder builder=new StringBuilder();\n    for (int i=0; i < codePoints.length; i++) {\n      builder.appendCodePoint(codePoints[i]);\n    }\n    str=builder.toString();\n    HashCode hashUtf8=murmur3_32().hashBytes(str.getBytes(Charsets.UTF_8));\n    assertEquals(hashUtf8,murmur3_32().newHasher().putBytes(str.getBytes(Charsets.UTF_8)).hash());\n    assertEquals(hashUtf8,murmur3_32().hashString(str,Charsets.UTF_8));\n    assertEquals(hashUtf8,murmur3_32().newHasher().putString(str,Charsets.UTF_8).hash());\n    HashCode hashUtf16=murmur3_32().hashBytes(str.getBytes(Charsets.UTF_16));\n    assertEquals(hashUtf16,murmur3_32().newHasher().putBytes(str.getBytes(Charsets.UTF_16)).hash());\n    assertEquals(hashUtf16,murmur3_32().hashString(str,Charsets.UTF_16));\n    assertEquals(hashUtf16,murmur3_32().newHasher().putString(str,Charsets.UTF_16).hash());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(hashUtf16,murmur3_32().hashString(str,Charsets.UTF_16));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "com.google.common.hash.HashCode"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 138,
    "startColumnNumber" : 30,
    "endLineNumber" : 138,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}