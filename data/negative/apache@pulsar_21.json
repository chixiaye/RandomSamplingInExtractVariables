{
  "id" : 21,
  "expression" : "0",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/WorkerUtilsTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 66,
      "startColumnNumber" : 118,
      "endLineNumber" : 66,
      "endColumnNumber" : 119
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 66,
        "startColumnNumber" : 16,
        "endLineNumber" : 66,
        "endColumnNumber" : 120
      },
      "nodeContext" : "WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 120
      },
      "nodeContext" : "p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 121
      },
      "nodeContext" : "p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n}\n catch (WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  fail();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2378,
        "startLineNumber" : 49,
        "startColumnNumber" : 55,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Producer<byte[]> producer=mock(Producer.class);\n  ProducerBuilder<byte[]> builder=mock(ProducerBuilder.class);\n  when(builder.topic(anyString())).thenReturn(builder);\n  when(builder.producerName(anyString())).thenReturn(builder);\n  when(builder.enableBatching(anyBoolean())).thenReturn(builder);\n  when(builder.blockIfQueueFull(anyBoolean())).thenReturn(builder);\n  when(builder.compressionType(any(CompressionType.class))).thenReturn(builder);\n  when(builder.sendTimeout(anyInt(),any(TimeUnit.class))).thenReturn(builder);\n  when(builder.accessMode(any())).thenReturn(builder);\n  when(builder.createAsync()).thenReturn(CompletableFuture.completedFuture(producer));\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  when(pulsarClient.newProducer()).thenReturn(builder);\n  Producer<byte[]> p=null;\n  try {\n    p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n    fail();\n  }\n  assertNotNull(p);\n  verify(builder,times(1)).topic(eq(\"test-topic\"));\n  verify(builder,times(1)).producerName(eq(\"test-producer\"));\n  verify(builder,times(1)).accessMode(eq(ProducerAccessMode.Exclusive));\n  CompletableFuture completableFuture=new CompletableFuture();\n  completableFuture.completeExceptionally(new PulsarClientException.ProducerFencedException(\"test\"));\n  when(builder.createAsync()).thenReturn(completableFuture);\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n  AtomicInteger i=new AtomicInteger();\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n      @Override public Boolean get(){\n        if (i.getAndIncrement() < 6) {\n          return true;\n        }\n        return false;\n      }\n    }\n,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 327,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2439,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCreateExclusiveProducerWithRetry(){\n  Producer<byte[]> producer=mock(Producer.class);\n  ProducerBuilder<byte[]> builder=mock(ProducerBuilder.class);\n  when(builder.topic(anyString())).thenReturn(builder);\n  when(builder.producerName(anyString())).thenReturn(builder);\n  when(builder.enableBatching(anyBoolean())).thenReturn(builder);\n  when(builder.blockIfQueueFull(anyBoolean())).thenReturn(builder);\n  when(builder.compressionType(any(CompressionType.class))).thenReturn(builder);\n  when(builder.sendTimeout(anyInt(),any(TimeUnit.class))).thenReturn(builder);\n  when(builder.accessMode(any())).thenReturn(builder);\n  when(builder.createAsync()).thenReturn(CompletableFuture.completedFuture(producer));\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  when(pulsarClient.newProducer()).thenReturn(builder);\n  Producer<byte[]> p=null;\n  try {\n    p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n    fail();\n  }\n  assertNotNull(p);\n  verify(builder,times(1)).topic(eq(\"test-topic\"));\n  verify(builder,times(1)).producerName(eq(\"test-producer\"));\n  verify(builder,times(1)).accessMode(eq(ProducerAccessMode.Exclusive));\n  CompletableFuture completableFuture=new CompletableFuture();\n  completableFuture.completeExceptionally(new PulsarClientException.ProducerFencedException(\"test\"));\n  when(builder.createAsync()).thenReturn(completableFuture);\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n  AtomicInteger i=new AtomicInteger();\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n      @Override public Boolean get(){\n        if (i.getAndIncrement() < 6) {\n          return true;\n        }\n        return false;\n      }\n    }\n,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 333,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 121
      },
      "nodeContext" : "p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 79,
      "startColumnNumber" : 115,
      "endLineNumber" : 79,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 117
      },
      "nodeContext" : "WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 118
      },
      "nodeContext" : "WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n  fail();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n  fail();\n}\n catch (WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2378,
        "startLineNumber" : 49,
        "startColumnNumber" : 55,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Producer<byte[]> producer=mock(Producer.class);\n  ProducerBuilder<byte[]> builder=mock(ProducerBuilder.class);\n  when(builder.topic(anyString())).thenReturn(builder);\n  when(builder.producerName(anyString())).thenReturn(builder);\n  when(builder.enableBatching(anyBoolean())).thenReturn(builder);\n  when(builder.blockIfQueueFull(anyBoolean())).thenReturn(builder);\n  when(builder.compressionType(any(CompressionType.class))).thenReturn(builder);\n  when(builder.sendTimeout(anyInt(),any(TimeUnit.class))).thenReturn(builder);\n  when(builder.accessMode(any())).thenReturn(builder);\n  when(builder.createAsync()).thenReturn(CompletableFuture.completedFuture(producer));\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  when(pulsarClient.newProducer()).thenReturn(builder);\n  Producer<byte[]> p=null;\n  try {\n    p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n    fail();\n  }\n  assertNotNull(p);\n  verify(builder,times(1)).topic(eq(\"test-topic\"));\n  verify(builder,times(1)).producerName(eq(\"test-producer\"));\n  verify(builder,times(1)).accessMode(eq(ProducerAccessMode.Exclusive));\n  CompletableFuture completableFuture=new CompletableFuture();\n  completableFuture.completeExceptionally(new PulsarClientException.ProducerFencedException(\"test\"));\n  when(builder.createAsync()).thenReturn(completableFuture);\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n  AtomicInteger i=new AtomicInteger();\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n      @Override public Boolean get(){\n        if (i.getAndIncrement() < 6) {\n          return true;\n        }\n        return false;\n      }\n    }\n,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 327,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2439,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCreateExclusiveProducerWithRetry(){\n  Producer<byte[]> producer=mock(Producer.class);\n  ProducerBuilder<byte[]> builder=mock(ProducerBuilder.class);\n  when(builder.topic(anyString())).thenReturn(builder);\n  when(builder.producerName(anyString())).thenReturn(builder);\n  when(builder.enableBatching(anyBoolean())).thenReturn(builder);\n  when(builder.blockIfQueueFull(anyBoolean())).thenReturn(builder);\n  when(builder.compressionType(any(CompressionType.class))).thenReturn(builder);\n  when(builder.sendTimeout(anyInt(),any(TimeUnit.class))).thenReturn(builder);\n  when(builder.accessMode(any())).thenReturn(builder);\n  when(builder.createAsync()).thenReturn(CompletableFuture.completedFuture(producer));\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  when(pulsarClient.newProducer()).thenReturn(builder);\n  Producer<byte[]> p=null;\n  try {\n    p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n    fail();\n  }\n  assertNotNull(p);\n  verify(builder,times(1)).topic(eq(\"test-topic\"));\n  verify(builder,times(1)).producerName(eq(\"test-producer\"));\n  verify(builder,times(1)).accessMode(eq(ProducerAccessMode.Exclusive));\n  CompletableFuture completableFuture=new CompletableFuture();\n  completableFuture.completeExceptionally(new PulsarClientException.ProducerFencedException(\"test\"));\n  when(builder.createAsync()).thenReturn(completableFuture);\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n  AtomicInteger i=new AtomicInteger();\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n      @Override public Boolean get(){\n        if (i.getAndIncrement() < 6) {\n          return true;\n        }\n        return false;\n      }\n    }\n,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 333,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 118
      },
      "nodeContext" : "WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 96,
      "startColumnNumber" : 15,
      "endLineNumber" : 96,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 361,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 17
      },
      "nodeContext" : "WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n  @Override public Boolean get(){\n    if (i.getAndIncrement() < 6) {\n      return true;\n    }\n    return false;\n  }\n}\n,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 18
      },
      "nodeContext" : "WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n  @Override public Boolean get(){\n    if (i.getAndIncrement() < 6) {\n      return true;\n    }\n    return false;\n  }\n}\n,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 34,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n    @Override public Boolean get(){\n      if (i.getAndIncrement() < 6) {\n        return true;\n      }\n      return false;\n    }\n  }\n,0);\n  fail();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 477,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n    @Override public Boolean get(){\n      if (i.getAndIncrement() < 6) {\n        return true;\n      }\n      return false;\n    }\n  }\n,0);\n  fail();\n}\n catch (WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 47,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2378,
        "startLineNumber" : 49,
        "startColumnNumber" : 55,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Producer<byte[]> producer=mock(Producer.class);\n  ProducerBuilder<byte[]> builder=mock(ProducerBuilder.class);\n  when(builder.topic(anyString())).thenReturn(builder);\n  when(builder.producerName(anyString())).thenReturn(builder);\n  when(builder.enableBatching(anyBoolean())).thenReturn(builder);\n  when(builder.blockIfQueueFull(anyBoolean())).thenReturn(builder);\n  when(builder.compressionType(any(CompressionType.class))).thenReturn(builder);\n  when(builder.sendTimeout(anyInt(),any(TimeUnit.class))).thenReturn(builder);\n  when(builder.accessMode(any())).thenReturn(builder);\n  when(builder.createAsync()).thenReturn(CompletableFuture.completedFuture(producer));\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  when(pulsarClient.newProducer()).thenReturn(builder);\n  Producer<byte[]> p=null;\n  try {\n    p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n    fail();\n  }\n  assertNotNull(p);\n  verify(builder,times(1)).topic(eq(\"test-topic\"));\n  verify(builder,times(1)).producerName(eq(\"test-producer\"));\n  verify(builder,times(1)).accessMode(eq(ProducerAccessMode.Exclusive));\n  CompletableFuture completableFuture=new CompletableFuture();\n  completableFuture.completeExceptionally(new PulsarClientException.ProducerFencedException(\"test\"));\n  when(builder.createAsync()).thenReturn(completableFuture);\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n  AtomicInteger i=new AtomicInteger();\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n      @Override public Boolean get(){\n        if (i.getAndIncrement() < 6) {\n          return true;\n        }\n        return false;\n      }\n    }\n,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 327,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2439,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCreateExclusiveProducerWithRetry(){\n  Producer<byte[]> producer=mock(Producer.class);\n  ProducerBuilder<byte[]> builder=mock(ProducerBuilder.class);\n  when(builder.topic(anyString())).thenReturn(builder);\n  when(builder.producerName(anyString())).thenReturn(builder);\n  when(builder.enableBatching(anyBoolean())).thenReturn(builder);\n  when(builder.blockIfQueueFull(anyBoolean())).thenReturn(builder);\n  when(builder.compressionType(any(CompressionType.class))).thenReturn(builder);\n  when(builder.sendTimeout(anyInt(),any(TimeUnit.class))).thenReturn(builder);\n  when(builder.accessMode(any())).thenReturn(builder);\n  when(builder.createAsync()).thenReturn(CompletableFuture.completedFuture(producer));\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  when(pulsarClient.newProducer()).thenReturn(builder);\n  Producer<byte[]> p=null;\n  try {\n    p=WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> true,0);\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n    fail();\n  }\n  assertNotNull(p);\n  verify(builder,times(1)).topic(eq(\"test-topic\"));\n  verify(builder,times(1)).producerName(eq(\"test-producer\"));\n  verify(builder,times(1)).accessMode(eq(ProducerAccessMode.Exclusive));\n  CompletableFuture completableFuture=new CompletableFuture();\n  completableFuture.completeExceptionally(new PulsarClientException.ProducerFencedException(\"test\"));\n  when(builder.createAsync()).thenReturn(completableFuture);\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",() -> false,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n  AtomicInteger i=new AtomicInteger();\n  try {\n    WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n      @Override public Boolean get(){\n        if (i.getAndIncrement() < 6) {\n          return true;\n        }\n        return false;\n      }\n    }\n,0);\n    fail();\n  }\n catch (  WorkerUtils.NotLeaderAnymore notLeaderAnymore) {\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 333,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 361,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 17
      },
      "nodeContext" : "WorkerUtils.createExclusiveProducerWithRetry(pulsarClient,\"test-topic\",\"test-producer\",new Supplier<Boolean>(){\n  @Override public Boolean get(){\n    if (i.getAndIncrement() < 6) {\n      return true;\n    }\n    return false;\n  }\n}\n,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 66,
    "startColumnNumber" : 118,
    "endLineNumber" : 66,
    "endColumnNumber" : 119
  }, {
    "charLength" : 1,
    "startLineNumber" : 79,
    "startColumnNumber" : 115,
    "endLineNumber" : 79,
    "endColumnNumber" : 116
  }, {
    "charLength" : 1,
    "startLineNumber" : 96,
    "startColumnNumber" : 15,
    "endLineNumber" : 96,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}