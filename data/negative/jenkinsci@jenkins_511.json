{
  "id" : 511,
  "expression" : "\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/WebAppMain.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 78,
      "startLineNumber" : 189,
      "startColumnNumber" : 24,
      "endLineNumber" : 189,
      "endColumnNumber" : 102
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 189,
        "startColumnNumber" : 12,
        "endLineNumber" : 189,
        "endColumnNumber" : 103
      },
      "nodeContext" : "LOGGER.info(\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 189,
        "startColumnNumber" : 12,
        "endLineNumber" : 189,
        "endColumnNumber" : 104
      },
      "nodeContext" : "LOGGER.info(\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8095,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 321,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LocaleProvider.setProvider(new LocaleProvider(){\n    public Locale get(){\n      return Functions.getCurrentLocale();\n    }\n  }\n);\n  JVM jvm;\n  try {\n    jvm=new JVM();\n    new URLClassLoader(new URL[0],getClass().getClassLoader());\n  }\n catch (  SecurityException e) {\n    throw new InsufficientPermissionDetected(e);\n  }\n  try {\n    Security.removeProvider(\"SunPKCS11-Solaris\");\n  }\n catch (  SecurityException e) {\n  }\n  installLogger();\n  final FileAndDescription describedHomeDir=getHomeDir(event);\n  home=describedHomeDir.file.getAbsoluteFile();\n  home.mkdirs();\n  LOGGER.info(\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description);\n  if (!home.exists())   throw new NoHomeDir(home);\n  recordBootAttempt(home);\n  if (jvm.bestReflectionProvider().getClass() == PureJavaReflectionProvider.class) {\n    throw new IncompatibleVMDetected();\n  }\n  try {\n    ServletResponse.class.getMethod(\"setCharacterEncoding\",String.class);\n  }\n catch (  NoSuchMethodException e) {\n    throw new IncompatibleServletVersionDetected(ServletResponse.class);\n  }\n  try {\n    FileSet.class.getMethod(\"getDirectoryScanner\");\n  }\n catch (  NoSuchMethodException e) {\n    throw new IncompatibleAntVersionDetected(FileSet.class);\n  }\n  if (ChartUtil.awtProblemCause != null) {\n    throw new AWTProblem(ChartUtil.awtProblemCause);\n  }\n  try {\n    File f=File.createTempFile(\"test\",\"test\");\n    boolean result=f.delete();\n    if (!result) {\n      LOGGER.log(FINE,\"Temp file test.test could not be deleted.\");\n    }\n  }\n catch (  IOException e) {\n    throw new NoTempDir(e);\n  }\n  try {\n    TransformerFactory.newInstance();\n  }\n catch (  TransformerFactoryConfigurationError x) {\n    LOGGER.log(WARNING,\"XSLT not configured correctly. Hudson will try to fix this. See http://issues.apache.org/bugzilla/show_bug.cgi?id=40895 for more details\",x);\n    System.setProperty(TransformerFactory.class.getName(),\"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\");\n    try {\n      TransformerFactory.newInstance();\n      LOGGER.info(\"XSLT is set to the JAXP RI in JRE\");\n    }\n catch (    TransformerFactoryConfigurationError y) {\n      LOGGER.log(SEVERE,\"Failed to correct the problem.\");\n    }\n  }\n  installExpressionFactory(event);\n  context.setAttribute(APP,new HudsonIsLoading());\n  if (SystemProperties.getBoolean(FORCE_SESSION_TRACKING_BY_COOKIE_PROP,true)) {\n    context.setSessionTrackingModes(EnumSet.of(SessionTrackingMode.COOKIE));\n  }\n  final File _home=home;\n  initThread=new Thread(\"Jenkins initialization thread\"){\n    @Override public void run(){\n      boolean success=false;\n      try {\n        Jenkins instance=new Hudson(_home,context);\n        if (Thread.interrupted())         throw new InterruptedException();\n        context.setAttribute(APP,instance);\n        BootFailure.getBootFailureFile(_home).delete();\n        LOGGER.info(\"Jenkins is fully up and running\");\n        success=true;\n      }\n catch (      Error e) {\n        new HudsonFailedToLoad(e).publish(context,_home);\n        throw e;\n      }\ncatch (      Exception e) {\n        new HudsonFailedToLoad(e).publish(context,_home);\n      }\n finally {\n        Jenkins instance=Jenkins.getInstanceOrNull();\n        if (!success && instance != null)         instance.cleanUp();\n      }\n    }\n  }\n;\n  initThread.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8310,
        "startLineNumber" : 160,
        "startColumnNumber" : 8,
        "endLineNumber" : 326,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  LocaleProvider.setProvider(new LocaleProvider(){\n    public Locale get(){\n      return Functions.getCurrentLocale();\n    }\n  }\n);\n  JVM jvm;\n  try {\n    jvm=new JVM();\n    new URLClassLoader(new URL[0],getClass().getClassLoader());\n  }\n catch (  SecurityException e) {\n    throw new InsufficientPermissionDetected(e);\n  }\n  try {\n    Security.removeProvider(\"SunPKCS11-Solaris\");\n  }\n catch (  SecurityException e) {\n  }\n  installLogger();\n  final FileAndDescription describedHomeDir=getHomeDir(event);\n  home=describedHomeDir.file.getAbsoluteFile();\n  home.mkdirs();\n  LOGGER.info(\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description);\n  if (!home.exists())   throw new NoHomeDir(home);\n  recordBootAttempt(home);\n  if (jvm.bestReflectionProvider().getClass() == PureJavaReflectionProvider.class) {\n    throw new IncompatibleVMDetected();\n  }\n  try {\n    ServletResponse.class.getMethod(\"setCharacterEncoding\",String.class);\n  }\n catch (  NoSuchMethodException e) {\n    throw new IncompatibleServletVersionDetected(ServletResponse.class);\n  }\n  try {\n    FileSet.class.getMethod(\"getDirectoryScanner\");\n  }\n catch (  NoSuchMethodException e) {\n    throw new IncompatibleAntVersionDetected(FileSet.class);\n  }\n  if (ChartUtil.awtProblemCause != null) {\n    throw new AWTProblem(ChartUtil.awtProblemCause);\n  }\n  try {\n    File f=File.createTempFile(\"test\",\"test\");\n    boolean result=f.delete();\n    if (!result) {\n      LOGGER.log(FINE,\"Temp file test.test could not be deleted.\");\n    }\n  }\n catch (  IOException e) {\n    throw new NoTempDir(e);\n  }\n  try {\n    TransformerFactory.newInstance();\n  }\n catch (  TransformerFactoryConfigurationError x) {\n    LOGGER.log(WARNING,\"XSLT not configured correctly. Hudson will try to fix this. See http://issues.apache.org/bugzilla/show_bug.cgi?id=40895 for more details\",x);\n    System.setProperty(TransformerFactory.class.getName(),\"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\");\n    try {\n      TransformerFactory.newInstance();\n      LOGGER.info(\"XSLT is set to the JAXP RI in JRE\");\n    }\n catch (    TransformerFactoryConfigurationError y) {\n      LOGGER.log(SEVERE,\"Failed to correct the problem.\");\n    }\n  }\n  installExpressionFactory(event);\n  context.setAttribute(APP,new HudsonIsLoading());\n  if (SystemProperties.getBoolean(FORCE_SESSION_TRACKING_BY_COOKIE_PROP,true)) {\n    context.setSessionTrackingModes(EnumSet.of(SessionTrackingMode.COOKIE));\n  }\n  final File _home=home;\n  initThread=new Thread(\"Jenkins initialization thread\"){\n    @Override public void run(){\n      boolean success=false;\n      try {\n        Jenkins instance=new Hudson(_home,context);\n        if (Thread.interrupted())         throw new InterruptedException();\n        context.setAttribute(APP,instance);\n        BootFailure.getBootFailureFile(_home).delete();\n        LOGGER.info(\"Jenkins is fully up and running\");\n        success=true;\n      }\n catch (      Error e) {\n        new HudsonFailedToLoad(e).publish(context,_home);\n        throw e;\n      }\ncatch (      Exception e) {\n        new HudsonFailedToLoad(e).publish(context,_home);\n      }\n finally {\n        Jenkins instance=Jenkins.getInstanceOrNull();\n        if (!success && instance != null)         instance.cleanUp();\n      }\n    }\n  }\n;\n  initThread.start();\n}\n catch (BootFailure e) {\n  e.publish(context,home);\n}\ncatch (Error|RuntimeException e) {\n  LOGGER.log(SEVERE,\"Failed to initialize Jenkins\",e);\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 472,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9250,
        "startLineNumber" : 140,
        "startColumnNumber" : 62,
        "endLineNumber" : 327,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (Main.isDevelopmentMode && System.getProperty(\"java.util.logging.config.file\") == null) {\n    try {\n      Formatter formatter=(Formatter)Class.forName(\"io.jenkins.lib.support_log_formatter.SupportLogFormatter\").newInstance();\n      for (      Handler h : java.util.logging.Logger.getLogger(\"\").getHandlers()) {\n        if (h instanceof ConsoleHandler) {\n          ((ConsoleHandler)h).setFormatter(formatter);\n        }\n      }\n    }\n catch (    ClassNotFoundException x) {\n    }\ncatch (    Exception x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n  }\n  JenkinsJVMAccess._setJenkinsJVM(true);\n  final ServletContext context=event.getServletContext();\n  File home=null;\n  try {\n    LocaleProvider.setProvider(new LocaleProvider(){\n      public Locale get(){\n        return Functions.getCurrentLocale();\n      }\n    }\n);\n    JVM jvm;\n    try {\n      jvm=new JVM();\n      new URLClassLoader(new URL[0],getClass().getClassLoader());\n    }\n catch (    SecurityException e) {\n      throw new InsufficientPermissionDetected(e);\n    }\n    try {\n      Security.removeProvider(\"SunPKCS11-Solaris\");\n    }\n catch (    SecurityException e) {\n    }\n    installLogger();\n    final FileAndDescription describedHomeDir=getHomeDir(event);\n    home=describedHomeDir.file.getAbsoluteFile();\n    home.mkdirs();\n    LOGGER.info(\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description);\n    if (!home.exists())     throw new NoHomeDir(home);\n    recordBootAttempt(home);\n    if (jvm.bestReflectionProvider().getClass() == PureJavaReflectionProvider.class) {\n      throw new IncompatibleVMDetected();\n    }\n    try {\n      ServletResponse.class.getMethod(\"setCharacterEncoding\",String.class);\n    }\n catch (    NoSuchMethodException e) {\n      throw new IncompatibleServletVersionDetected(ServletResponse.class);\n    }\n    try {\n      FileSet.class.getMethod(\"getDirectoryScanner\");\n    }\n catch (    NoSuchMethodException e) {\n      throw new IncompatibleAntVersionDetected(FileSet.class);\n    }\n    if (ChartUtil.awtProblemCause != null) {\n      throw new AWTProblem(ChartUtil.awtProblemCause);\n    }\n    try {\n      File f=File.createTempFile(\"test\",\"test\");\n      boolean result=f.delete();\n      if (!result) {\n        LOGGER.log(FINE,\"Temp file test.test could not be deleted.\");\n      }\n    }\n catch (    IOException e) {\n      throw new NoTempDir(e);\n    }\n    try {\n      TransformerFactory.newInstance();\n    }\n catch (    TransformerFactoryConfigurationError x) {\n      LOGGER.log(WARNING,\"XSLT not configured correctly. Hudson will try to fix this. See http://issues.apache.org/bugzilla/show_bug.cgi?id=40895 for more details\",x);\n      System.setProperty(TransformerFactory.class.getName(),\"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\");\n      try {\n        TransformerFactory.newInstance();\n        LOGGER.info(\"XSLT is set to the JAXP RI in JRE\");\n      }\n catch (      TransformerFactoryConfigurationError y) {\n        LOGGER.log(SEVERE,\"Failed to correct the problem.\");\n      }\n    }\n    installExpressionFactory(event);\n    context.setAttribute(APP,new HudsonIsLoading());\n    if (SystemProperties.getBoolean(FORCE_SESSION_TRACKING_BY_COOKIE_PROP,true)) {\n      context.setSessionTrackingModes(EnumSet.of(SessionTrackingMode.COOKIE));\n    }\n    final File _home=home;\n    initThread=new Thread(\"Jenkins initialization thread\"){\n      @Override public void run(){\n        boolean success=false;\n        try {\n          Jenkins instance=new Hudson(_home,context);\n          if (Thread.interrupted())           throw new InterruptedException();\n          context.setAttribute(APP,instance);\n          BootFailure.getBootFailureFile(_home).delete();\n          LOGGER.info(\"Jenkins is fully up and running\");\n          success=true;\n        }\n catch (        Error e) {\n          new HudsonFailedToLoad(e).publish(context,_home);\n          throw e;\n        }\ncatch (        Exception e) {\n          new HudsonFailedToLoad(e).publish(context,_home);\n        }\n finally {\n          Jenkins instance=Jenkins.getInstanceOrNull();\n          if (!success && instance != null)           instance.cleanUp();\n        }\n      }\n    }\n;\n    initThread.start();\n  }\n catch (  BootFailure e) {\n    e.publish(context,home);\n  }\ncatch (  Error|RuntimeException e) {\n    LOGGER.log(SEVERE,\"Failed to initialize Jenkins\",e);\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 575,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9455,
        "startLineNumber" : 136,
        "startColumnNumber" : 4,
        "endLineNumber" : 327,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates the sole instance of  {@link jenkins.model.Jenkins} and register it to the {@link ServletContext}.\n */\n@Override public void contextInitialized(ServletContextEvent event){\n  if (Main.isDevelopmentMode && System.getProperty(\"java.util.logging.config.file\") == null) {\n    try {\n      Formatter formatter=(Formatter)Class.forName(\"io.jenkins.lib.support_log_formatter.SupportLogFormatter\").newInstance();\n      for (      Handler h : java.util.logging.Logger.getLogger(\"\").getHandlers()) {\n        if (h instanceof ConsoleHandler) {\n          ((ConsoleHandler)h).setFormatter(formatter);\n        }\n      }\n    }\n catch (    ClassNotFoundException x) {\n    }\ncatch (    Exception x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n  }\n  JenkinsJVMAccess._setJenkinsJVM(true);\n  final ServletContext context=event.getServletContext();\n  File home=null;\n  try {\n    LocaleProvider.setProvider(new LocaleProvider(){\n      public Locale get(){\n        return Functions.getCurrentLocale();\n      }\n    }\n);\n    JVM jvm;\n    try {\n      jvm=new JVM();\n      new URLClassLoader(new URL[0],getClass().getClassLoader());\n    }\n catch (    SecurityException e) {\n      throw new InsufficientPermissionDetected(e);\n    }\n    try {\n      Security.removeProvider(\"SunPKCS11-Solaris\");\n    }\n catch (    SecurityException e) {\n    }\n    installLogger();\n    final FileAndDescription describedHomeDir=getHomeDir(event);\n    home=describedHomeDir.file.getAbsoluteFile();\n    home.mkdirs();\n    LOGGER.info(\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description);\n    if (!home.exists())     throw new NoHomeDir(home);\n    recordBootAttempt(home);\n    if (jvm.bestReflectionProvider().getClass() == PureJavaReflectionProvider.class) {\n      throw new IncompatibleVMDetected();\n    }\n    try {\n      ServletResponse.class.getMethod(\"setCharacterEncoding\",String.class);\n    }\n catch (    NoSuchMethodException e) {\n      throw new IncompatibleServletVersionDetected(ServletResponse.class);\n    }\n    try {\n      FileSet.class.getMethod(\"getDirectoryScanner\");\n    }\n catch (    NoSuchMethodException e) {\n      throw new IncompatibleAntVersionDetected(FileSet.class);\n    }\n    if (ChartUtil.awtProblemCause != null) {\n      throw new AWTProblem(ChartUtil.awtProblemCause);\n    }\n    try {\n      File f=File.createTempFile(\"test\",\"test\");\n      boolean result=f.delete();\n      if (!result) {\n        LOGGER.log(FINE,\"Temp file test.test could not be deleted.\");\n      }\n    }\n catch (    IOException e) {\n      throw new NoTempDir(e);\n    }\n    try {\n      TransformerFactory.newInstance();\n    }\n catch (    TransformerFactoryConfigurationError x) {\n      LOGGER.log(WARNING,\"XSLT not configured correctly. Hudson will try to fix this. See http://issues.apache.org/bugzilla/show_bug.cgi?id=40895 for more details\",x);\n      System.setProperty(TransformerFactory.class.getName(),\"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\");\n      try {\n        TransformerFactory.newInstance();\n        LOGGER.info(\"XSLT is set to the JAXP RI in JRE\");\n      }\n catch (      TransformerFactoryConfigurationError y) {\n        LOGGER.log(SEVERE,\"Failed to correct the problem.\");\n      }\n    }\n    installExpressionFactory(event);\n    context.setAttribute(APP,new HudsonIsLoading());\n    if (SystemProperties.getBoolean(FORCE_SESSION_TRACKING_BY_COOKIE_PROP,true)) {\n      context.setSessionTrackingModes(EnumSet.of(SessionTrackingMode.COOKIE));\n    }\n    final File _home=home;\n    initThread=new Thread(\"Jenkins initialization thread\"){\n      @Override public void run(){\n        boolean success=false;\n        try {\n          Jenkins instance=new Hudson(_home,context);\n          if (Thread.interrupted())           throw new InterruptedException();\n          context.setAttribute(APP,instance);\n          BootFailure.getBootFailureFile(_home).delete();\n          LOGGER.info(\"Jenkins is fully up and running\");\n          success=true;\n        }\n catch (        Error e) {\n          new HudsonFailedToLoad(e).publish(context,_home);\n          throw e;\n        }\ncatch (        Exception e) {\n          new HudsonFailedToLoad(e).publish(context,_home);\n        }\n finally {\n          Jenkins instance=Jenkins.getInstanceOrNull();\n          if (!success && instance != null)           instance.cleanUp();\n        }\n      }\n    }\n;\n    initThread.start();\n  }\n catch (  BootFailure e) {\n    e.publish(context,home);\n  }\ncatch (  Error|RuntimeException e) {\n    LOGGER.log(SEVERE,\"Failed to initialize Jenkins\",e);\n    throw e;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 586,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 189,
        "startColumnNumber" : 12,
        "endLineNumber" : 189,
        "endColumnNumber" : 104
      },
      "nodeContext" : "LOGGER.info(\"Jenkins home directory: \" + home + \" found at: \"+ describedHomeDir.description);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 11,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 78,
    "startLineNumber" : 189,
    "startColumnNumber" : 24,
    "endLineNumber" : 189,
    "endColumnNumber" : 102
  } ],
  "layoutRelationDataList" : [ ]
}