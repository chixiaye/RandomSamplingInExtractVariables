{
  "id" : 288,
  "expression" : "cc",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/jute/compiler/CppGenerator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 71,
      "startColumnNumber" : 8,
      "endLineNumber" : 71,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 47
      },
      "nodeContext" : "cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 48
      },
      "nodeContext" : "cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate C++ code. This method only creates the requested file(s) and spits-out file-level elements (such as include statements etc.) record-level code is generated by JRecord.\n */\nvoid genCode() throws IOException {\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 48
      },
      "nodeContext" : "cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.FileWriter"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 75,
      "startColumnNumber" : 30,
      "endLineNumber" : 75,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 33
      },
      "nodeContext" : "jr.genCppCode(hh,cc)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 34
      },
      "nodeContext" : "jr.genCppCode(hh,cc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 73,
        "startColumnNumber" : 61,
        "endLineNumber" : 76,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JRecord jr=(JRecord)i.next();\n  jr.genCppCode(hh,cc);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n  JRecord jr=(JRecord)i.next();\n  jr.genCppCode(hh,cc);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate C++ code. This method only creates the requested file(s) and spits-out file-level elements (such as include statements etc.) record-level code is generated by JRecord.\n */\nvoid genCode() throws IOException {\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 34
      },
      "nodeContext" : "jr.genCppCode(hh,cc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.FileWriter"
  }, {
    "nodeContext" : "cc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 81,
      "startColumnNumber" : 8,
      "endLineNumber" : 81,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 18
      },
      "nodeContext" : "cc.close()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 19
      },
      "nodeContext" : "cc.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate C++ code. This method only creates the requested file(s) and spits-out file-level elements (such as include statements etc.) record-level code is generated by JRecord.\n */\nvoid genCode() throws IOException {\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 19
      },
      "nodeContext" : "cc.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.FileWriter"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 71,
    "startColumnNumber" : 8,
    "endLineNumber" : 71,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 75,
    "startColumnNumber" : 30,
    "endLineNumber" : 75,
    "endColumnNumber" : 32
  }, {
    "charLength" : 2,
    "startLineNumber" : 81,
    "startColumnNumber" : 8,
    "endLineNumber" : 81,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}