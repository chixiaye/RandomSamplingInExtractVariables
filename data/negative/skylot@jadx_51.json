{
  "id" : 51,
  "expression" : "new MethodInlineVisitor()",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/Jadx.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new MethodInlineVisitor()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 103,
      "startColumnNumber" : 14,
      "endLineNumber" : 103,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 103,
        "startColumnNumber" : 3,
        "endLineNumber" : 103,
        "endColumnNumber" : 40
      },
      "nodeContext" : "passes.add(new MethodInlineVisitor())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 103,
        "startColumnNumber" : 3,
        "endLineNumber" : 103,
        "endColumnNumber" : 41
      },
      "nodeContext" : "passes.add(new MethodInlineVisitor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1427,
        "startLineNumber" : 62,
        "startColumnNumber" : 9,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  passes.add(new BlockSplitter());\n  passes.add(new BlockProcessor());\n  passes.add(new BlockExceptionHandler());\n  passes.add(new BlockFinallyExtract());\n  passes.add(new BlockFinish());\n  passes.add(new SSATransform());\n  if (args.isDebugInfo()) {\n    passes.add(new DebugInfoVisitor());\n  }\n  passes.add(new TypeInference());\n  if (args.isRawCFGOutput()) {\n    passes.add(DotGraphVisitor.dumpRaw());\n  }\n  passes.add(new ConstInlineVisitor());\n  passes.add(new FinishTypeInference());\n  passes.add(new EliminatePhiNodes());\n  passes.add(new ModVisitor());\n  passes.add(new CodeShrinker());\n  passes.add(new ReSugarCode());\n  if (args.isCfgOutput()) {\n    passes.add(DotGraphVisitor.dump());\n  }\n  passes.add(new RegionMakerVisitor());\n  passes.add(new IfRegionVisitor());\n  passes.add(new ReturnVisitor());\n  passes.add(new CodeShrinker());\n  passes.add(new SimplifyVisitor());\n  passes.add(new CheckRegions());\n  passes.add(new ExtractFieldInit());\n  passes.add(new FixAccessModifiers());\n  passes.add(new ClassModifier());\n  passes.add(new MethodInlineVisitor());\n  passes.add(new EnumVisitor());\n  passes.add(new PrepareForCodeGen());\n  passes.add(new LoopRegionVisitor());\n  passes.add(new ProcessVariables());\n  if (args.isCfgOutput()) {\n    passes.add(DotGraphVisitor.dumpRegions());\n  }\n  passes.add(new DependencyCollector());\n  passes.add(new RenameVisitor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1507,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (args.isFallbackMode()) {\n  passes.add(new FallbackModeVisitor());\n}\n else {\n  passes.add(new BlockSplitter());\n  passes.add(new BlockProcessor());\n  passes.add(new BlockExceptionHandler());\n  passes.add(new BlockFinallyExtract());\n  passes.add(new BlockFinish());\n  passes.add(new SSATransform());\n  if (args.isDebugInfo()) {\n    passes.add(new DebugInfoVisitor());\n  }\n  passes.add(new TypeInference());\n  if (args.isRawCFGOutput()) {\n    passes.add(DotGraphVisitor.dumpRaw());\n  }\n  passes.add(new ConstInlineVisitor());\n  passes.add(new FinishTypeInference());\n  passes.add(new EliminatePhiNodes());\n  passes.add(new ModVisitor());\n  passes.add(new CodeShrinker());\n  passes.add(new ReSugarCode());\n  if (args.isCfgOutput()) {\n    passes.add(DotGraphVisitor.dump());\n  }\n  passes.add(new RegionMakerVisitor());\n  passes.add(new IfRegionVisitor());\n  passes.add(new ReturnVisitor());\n  passes.add(new CodeShrinker());\n  passes.add(new SimplifyVisitor());\n  passes.add(new CheckRegions());\n  passes.add(new ExtractFieldInit());\n  passes.add(new FixAccessModifiers());\n  passes.add(new ClassModifier());\n  passes.add(new MethodInlineVisitor());\n  passes.add(new EnumVisitor());\n  passes.add(new PrepareForCodeGen());\n  passes.add(new LoopRegionVisitor());\n  passes.add(new ProcessVariables());\n  if (args.isCfgOutput()) {\n    passes.add(DotGraphVisitor.dumpRegions());\n  }\n  passes.add(new DependencyCollector());\n  passes.add(new RenameVisitor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 264,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1583,
        "startLineNumber" : 58,
        "startColumnNumber" : 66,
        "endLineNumber" : 118,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<IDexTreeVisitor> passes=new ArrayList<>();\n  if (args.isFallbackMode()) {\n    passes.add(new FallbackModeVisitor());\n  }\n else {\n    passes.add(new BlockSplitter());\n    passes.add(new BlockProcessor());\n    passes.add(new BlockExceptionHandler());\n    passes.add(new BlockFinallyExtract());\n    passes.add(new BlockFinish());\n    passes.add(new SSATransform());\n    if (args.isDebugInfo()) {\n      passes.add(new DebugInfoVisitor());\n    }\n    passes.add(new TypeInference());\n    if (args.isRawCFGOutput()) {\n      passes.add(DotGraphVisitor.dumpRaw());\n    }\n    passes.add(new ConstInlineVisitor());\n    passes.add(new FinishTypeInference());\n    passes.add(new EliminatePhiNodes());\n    passes.add(new ModVisitor());\n    passes.add(new CodeShrinker());\n    passes.add(new ReSugarCode());\n    if (args.isCfgOutput()) {\n      passes.add(DotGraphVisitor.dump());\n    }\n    passes.add(new RegionMakerVisitor());\n    passes.add(new IfRegionVisitor());\n    passes.add(new ReturnVisitor());\n    passes.add(new CodeShrinker());\n    passes.add(new SimplifyVisitor());\n    passes.add(new CheckRegions());\n    passes.add(new ExtractFieldInit());\n    passes.add(new FixAccessModifiers());\n    passes.add(new ClassModifier());\n    passes.add(new MethodInlineVisitor());\n    passes.add(new EnumVisitor());\n    passes.add(new PrepareForCodeGen());\n    passes.add(new LoopRegionVisitor());\n    passes.add(new ProcessVariables());\n    if (args.isCfgOutput()) {\n      passes.add(DotGraphVisitor.dumpRegions());\n    }\n    passes.add(new DependencyCollector());\n    passes.add(new RenameVisitor());\n  }\n  return passes;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 279,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1648,
        "startLineNumber" : 58,
        "startColumnNumber" : 1,
        "endLineNumber" : 118,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static List<IDexTreeVisitor> getPassesList(JadxArgs args){\n  List<IDexTreeVisitor> passes=new ArrayList<>();\n  if (args.isFallbackMode()) {\n    passes.add(new FallbackModeVisitor());\n  }\n else {\n    passes.add(new BlockSplitter());\n    passes.add(new BlockProcessor());\n    passes.add(new BlockExceptionHandler());\n    passes.add(new BlockFinallyExtract());\n    passes.add(new BlockFinish());\n    passes.add(new SSATransform());\n    if (args.isDebugInfo()) {\n      passes.add(new DebugInfoVisitor());\n    }\n    passes.add(new TypeInference());\n    if (args.isRawCFGOutput()) {\n      passes.add(DotGraphVisitor.dumpRaw());\n    }\n    passes.add(new ConstInlineVisitor());\n    passes.add(new FinishTypeInference());\n    passes.add(new EliminatePhiNodes());\n    passes.add(new ModVisitor());\n    passes.add(new CodeShrinker());\n    passes.add(new ReSugarCode());\n    if (args.isCfgOutput()) {\n      passes.add(DotGraphVisitor.dump());\n    }\n    passes.add(new RegionMakerVisitor());\n    passes.add(new IfRegionVisitor());\n    passes.add(new ReturnVisitor());\n    passes.add(new CodeShrinker());\n    passes.add(new SimplifyVisitor());\n    passes.add(new CheckRegions());\n    passes.add(new ExtractFieldInit());\n    passes.add(new FixAccessModifiers());\n    passes.add(new ClassModifier());\n    passes.add(new MethodInlineVisitor());\n    passes.add(new EnumVisitor());\n    passes.add(new PrepareForCodeGen());\n    passes.add(new LoopRegionVisitor());\n    passes.add(new ProcessVariables());\n    if (args.isCfgOutput()) {\n      passes.add(DotGraphVisitor.dumpRegions());\n    }\n    passes.add(new DependencyCollector());\n    passes.add(new RenameVisitor());\n  }\n  return passes;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 292,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 103,
        "startColumnNumber" : 3,
        "endLineNumber" : 103,
        "endColumnNumber" : 41
      },
      "nodeContext" : "passes.add(new MethodInlineVisitor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.visitors.MethodInlineVisitor"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 103,
    "startColumnNumber" : 14,
    "endLineNumber" : 103,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}