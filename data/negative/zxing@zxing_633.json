{
  "id" : 633,
  "expression" : "currentPossible",
  "projectName" : "zxing@zxing",
  "commitID" : "27194b053a3e7b5fe01f2387629201510929d051",
  "filePath" : "android/src/com/google/zxing/client/android/ViewfinderView.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "currentPossible",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 125,
      "startColumnNumber" : 10,
      "endLineNumber" : 125,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 125,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 35
      },
      "nodeContext" : "currentPossible.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 611,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 139,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (currentPossible.isEmpty()) {\n  lastPossibleResultPoints=null;\n}\n else {\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2745,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      float radius=POINT_SIZE / 2.0f;\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2955,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      float radius=POINT_SIZE / 2.0f;\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 391,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3536,
        "startLineNumber" : 82,
        "startColumnNumber" : 36,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        float radius=POINT_SIZE / 2.0f;\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3582,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        float radius=POINT_SIZE / 2.0f;\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 125,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 35
      },
      "nodeContext" : "currentPossible.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.google.zxing.ResultPoint>"
  }, {
    "nodeContext" : "currentPossible",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 129,
      "startColumnNumber" : 35,
      "endLineNumber" : 129,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 50
      },
      "nodeContext" : "lastPossibleResultPoints=currentPossible",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 51
      },
      "nodeContext" : "lastPossibleResultPoints=currentPossible;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 127,
        "startColumnNumber" : 13,
        "endLineNumber" : 139,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 611,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 139,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (currentPossible.isEmpty()) {\n  lastPossibleResultPoints=null;\n}\n else {\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2745,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      float radius=POINT_SIZE / 2.0f;\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2955,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      float radius=POINT_SIZE / 2.0f;\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 391,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3536,
        "startLineNumber" : 82,
        "startColumnNumber" : 36,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        float radius=POINT_SIZE / 2.0f;\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3582,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        float radius=POINT_SIZE / 2.0f;\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 51
      },
      "nodeContext" : "lastPossibleResultPoints=currentPossible;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.google.zxing.ResultPoint>"
  }, {
    "nodeContext" : "currentPossible",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 132,
      "startColumnNumber" : 22,
      "endLineNumber" : 132,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (currentPossible) {\n  for (  ResultPoint point : currentPossible) {\n    canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 36,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 127,
        "startColumnNumber" : 13,
        "endLineNumber" : 139,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 611,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 139,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (currentPossible.isEmpty()) {\n  lastPossibleResultPoints=null;\n}\n else {\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2745,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      float radius=POINT_SIZE / 2.0f;\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2955,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      float radius=POINT_SIZE / 2.0f;\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 391,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3536,
        "startLineNumber" : 82,
        "startColumnNumber" : 36,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        float radius=POINT_SIZE / 2.0f;\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3582,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        float radius=POINT_SIZE / 2.0f;\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (currentPossible) {\n  for (  ResultPoint point : currentPossible) {\n    canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 36,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.google.zxing.ResultPoint>"
  }, {
    "nodeContext" : "currentPossible",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 133,
      "startColumnNumber" : 35,
      "endLineNumber" : 133,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 133,
        "startColumnNumber" : 10,
        "endLineNumber" : 137,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (ResultPoint point : currentPossible) {\n  canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 132,
        "startColumnNumber" : 39,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  ResultPoint point : currentPossible) {\n    canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (currentPossible) {\n  for (  ResultPoint point : currentPossible) {\n    canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 36,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 127,
        "startColumnNumber" : 13,
        "endLineNumber" : 139,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 611,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 139,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (currentPossible.isEmpty()) {\n  lastPossibleResultPoints=null;\n}\n else {\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2745,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      float radius=POINT_SIZE / 2.0f;\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2955,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      float radius=POINT_SIZE / 2.0f;\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 391,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3536,
        "startLineNumber" : 82,
        "startColumnNumber" : 36,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        float radius=POINT_SIZE / 2.0f;\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3582,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        float radius=POINT_SIZE / 2.0f;\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),radius,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 133,
        "startColumnNumber" : 10,
        "endLineNumber" : 137,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (ResultPoint point : currentPossible) {\n  canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.google.zxing.ResultPoint>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 125,
    "startColumnNumber" : 10,
    "endLineNumber" : 125,
    "endColumnNumber" : 25
  }, {
    "charLength" : 15,
    "startLineNumber" : 129,
    "startColumnNumber" : 35,
    "endLineNumber" : 129,
    "endColumnNumber" : 50
  }, {
    "charLength" : 15,
    "startLineNumber" : 132,
    "startColumnNumber" : 22,
    "endLineNumber" : 132,
    "endColumnNumber" : 37
  }, {
    "charLength" : 15,
    "startLineNumber" : 133,
    "startColumnNumber" : 35,
    "endLineNumber" : 133,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}