{
  "id" : 43,
  "expression" : "bestEpochTravelCost <= bestTravelCost",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/ai/GeneticAlgorithm_travelingSalesman.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bestEpochTravelCost <= bestTravelCost",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 90,
      "startColumnNumber" : 14,
      "endLineNumber" : 90,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 90,
        "startColumnNumber" : 10,
        "endLineNumber" : 94,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (bestEpochTravelCost <= bestTravelCost) {\n  tour=in.cities.clone();\n  fittestIndv=in;\n  fittestIndvFitness=bestEpochTravelCost;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 588,
        "startLineNumber" : 79,
        "startColumnNumber" : 43,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  bestEpochIndv=in;\n  bestEpochFitness=fitness[i];\n  if (fittestIndv == null)   fittestIndv=in;\n  double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n  double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n  if (bestEpochTravelCost <= bestTravelCost) {\n    tour=in.cities.clone();\n    fittestIndv=in;\n    fittestIndvFitness=bestEpochTravelCost;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 623,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (fitness[i] > bestEpochFitness) {\n  bestEpochIndv=in;\n  bestEpochFitness=fitness[i];\n  if (fittestIndv == null)   fittestIndv=in;\n  double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n  double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n  if (bestEpochTravelCost <= bestTravelCost) {\n    tour=in.cities.clone();\n    fittestIndv=in;\n    fittestIndvFitness=bestEpochTravelCost;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 64,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 72,
        "startColumnNumber" : 35,
        "endLineNumber" : 96,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Individual in=generation[i];\n  double norm=fitness[i] / fitnessSum;\n  lo[i]=hi[i - 1]=lo[i - 1] + norm;\n  if (fitness[i] > bestEpochFitness) {\n    bestEpochIndv=in;\n    bestEpochFitness=fitness[i];\n    if (fittestIndv == null)     fittestIndv=in;\n    double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n    double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n    if (bestEpochTravelCost <= bestTravelCost) {\n      tour=in.cities.clone();\n      fittestIndv=in;\n      fittestIndvFitness=bestEpochTravelCost;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=1; i <= P; i++) {\n  Individual in=generation[i];\n  double norm=fitness[i] / fitnessSum;\n  lo[i]=hi[i - 1]=lo[i - 1] + norm;\n  if (fitness[i] > bestEpochFitness) {\n    bestEpochIndv=in;\n    bestEpochFitness=fitness[i];\n    if (fittestIndv == null)     fittestIndv=in;\n    double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n    double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n    if (bestEpochTravelCost <= bestTravelCost) {\n      tour=in.cities.clone();\n      fittestIndv=in;\n      fittestIndvFitness=bestEpochTravelCost;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2288,
        "startLineNumber" : 54,
        "startColumnNumber" : 73,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double fitnessSum=0;\n  for (int i=1; i <= P; i++) {\n    Individual in=generation[i];\n    fitness[i]=fitness(in,adjacencyMatrix,max,N);\n    fitnessSum+=fitness[i];\n    lo[i]=hi[i]=0;\n  }\n  Individual bestEpochIndv=null;\n  double bestEpochFitness=Double.NEGATIVE_INFINITY;\n  for (int i=1; i <= P; i++) {\n    Individual in=generation[i];\n    double norm=fitness[i] / fitnessSum;\n    lo[i]=hi[i - 1]=lo[i - 1] + norm;\n    if (fitness[i] > bestEpochFitness) {\n      bestEpochIndv=in;\n      bestEpochFitness=fitness[i];\n      if (fittestIndv == null)       fittestIndv=in;\n      double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n      double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n      if (bestEpochTravelCost <= bestTravelCost) {\n        tour=in.cities.clone();\n        fittestIndv=in;\n        fittestIndvFitness=bestEpochTravelCost;\n      }\n    }\n  }\n  double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n  double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n  if (epoch % 100 == 0)   System.out.printf(\"Epoch: %d, %.0f, %.0f\\n\",epoch,bestEpochTravelCost,bestTravelCost);\n  for (int i=1; i <= P; i++) {\n    Individual parent1=selectIndividual(generation,lo,hi);\n    Individual parent2=selectIndividual(generation,lo,hi);\n    Individual child=crossover(parent1,parent2,N);\n    for (int j=0; j < N; j++) {\n      if (Math.random() < MUTATION_RATE) {\n        mutate(child);\n      }\n    }\n    nextGeneration[i]=child;\n  }\n  generation=nextGeneration;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n  double fitnessSum=0;\n  for (int i=1; i <= P; i++) {\n    Individual in=generation[i];\n    fitness[i]=fitness(in,adjacencyMatrix,max,N);\n    fitnessSum+=fitness[i];\n    lo[i]=hi[i]=0;\n  }\n  Individual bestEpochIndv=null;\n  double bestEpochFitness=Double.NEGATIVE_INFINITY;\n  for (int i=1; i <= P; i++) {\n    Individual in=generation[i];\n    double norm=fitness[i] / fitnessSum;\n    lo[i]=hi[i - 1]=lo[i - 1] + norm;\n    if (fitness[i] > bestEpochFitness) {\n      bestEpochIndv=in;\n      bestEpochFitness=fitness[i];\n      if (fittestIndv == null)       fittestIndv=in;\n      double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n      double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n      if (bestEpochTravelCost <= bestTravelCost) {\n        tour=in.cities.clone();\n        fittestIndv=in;\n        fittestIndvFitness=bestEpochTravelCost;\n      }\n    }\n  }\n  double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n  double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n  if (epoch % 100 == 0)   System.out.printf(\"Epoch: %d, %.0f, %.0f\\n\",epoch,bestEpochTravelCost,bestTravelCost);\n  for (int i=1; i <= P; i++) {\n    Individual parent1=selectIndividual(generation,lo,hi);\n    Individual parent2=selectIndividual(generation,lo,hi);\n    Individual child=crossover(parent1,parent2,N);\n    for (int j=0; j < N; j++) {\n      if (Math.random() < MUTATION_RATE) {\n        mutate(child);\n      }\n    }\n    nextGeneration[i]=child;\n  }\n  generation=nextGeneration;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 300,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3239,
        "startLineNumber" : 26,
        "startColumnNumber" : 48,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  power=1.0;\n  final int N=adjacencyMatrix.length;\n  double max=Double.NEGATIVE_INFINITY;\n  for (  double[] row : adjacencyMatrix) {\n    for (    double elem : row) {\n      max=Math.max(max,elem);\n    }\n  }\n  Individual[] generation=new Individual[P + 1];\n  Individual[] nextGeneration=new Individual[P + 1];\n  for (int i=1; i <= P; i++)   generation[i]=new Individual(N);\n  double[] lo=new double[P + 1];\n  double[] hi=new double[P + 1];\n  double[] fitness=new double[P + 1];\n  int[] tour=null;\n  Individual fittestIndv=null;\n  double fittestIndvFitness=Double.NEGATIVE_INFINITY;\n  for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n    double fitnessSum=0;\n    for (int i=1; i <= P; i++) {\n      Individual in=generation[i];\n      fitness[i]=fitness(in,adjacencyMatrix,max,N);\n      fitnessSum+=fitness[i];\n      lo[i]=hi[i]=0;\n    }\n    Individual bestEpochIndv=null;\n    double bestEpochFitness=Double.NEGATIVE_INFINITY;\n    for (int i=1; i <= P; i++) {\n      Individual in=generation[i];\n      double norm=fitness[i] / fitnessSum;\n      lo[i]=hi[i - 1]=lo[i - 1] + norm;\n      if (fitness[i] > bestEpochFitness) {\n        bestEpochIndv=in;\n        bestEpochFitness=fitness[i];\n        if (fittestIndv == null)         fittestIndv=in;\n        double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n        double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n        if (bestEpochTravelCost <= bestTravelCost) {\n          tour=in.cities.clone();\n          fittestIndv=in;\n          fittestIndvFitness=bestEpochTravelCost;\n        }\n      }\n    }\n    double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n    double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n    if (epoch % 100 == 0)     System.out.printf(\"Epoch: %d, %.0f, %.0f\\n\",epoch,bestEpochTravelCost,bestTravelCost);\n    for (int i=1; i <= P; i++) {\n      Individual parent1=selectIndividual(generation,lo,hi);\n      Individual parent2=selectIndividual(generation,lo,hi);\n      Individual child=crossover(parent1,parent2,N);\n      for (int j=0; j < N; j++) {\n        if (Math.random() < MUTATION_RATE) {\n          mutate(child);\n        }\n      }\n      nextGeneration[i]=child;\n    }\n    generation=nextGeneration;\n  }\n  return trueTravelCost(fittestIndv,adjacencyMatrix,N);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 457,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3285,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static double tsp(double[][] adjacencyMatrix){\n  power=1.0;\n  final int N=adjacencyMatrix.length;\n  double max=Double.NEGATIVE_INFINITY;\n  for (  double[] row : adjacencyMatrix) {\n    for (    double elem : row) {\n      max=Math.max(max,elem);\n    }\n  }\n  Individual[] generation=new Individual[P + 1];\n  Individual[] nextGeneration=new Individual[P + 1];\n  for (int i=1; i <= P; i++)   generation[i]=new Individual(N);\n  double[] lo=new double[P + 1];\n  double[] hi=new double[P + 1];\n  double[] fitness=new double[P + 1];\n  int[] tour=null;\n  Individual fittestIndv=null;\n  double fittestIndvFitness=Double.NEGATIVE_INFINITY;\n  for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n    double fitnessSum=0;\n    for (int i=1; i <= P; i++) {\n      Individual in=generation[i];\n      fitness[i]=fitness(in,adjacencyMatrix,max,N);\n      fitnessSum+=fitness[i];\n      lo[i]=hi[i]=0;\n    }\n    Individual bestEpochIndv=null;\n    double bestEpochFitness=Double.NEGATIVE_INFINITY;\n    for (int i=1; i <= P; i++) {\n      Individual in=generation[i];\n      double norm=fitness[i] / fitnessSum;\n      lo[i]=hi[i - 1]=lo[i - 1] + norm;\n      if (fitness[i] > bestEpochFitness) {\n        bestEpochIndv=in;\n        bestEpochFitness=fitness[i];\n        if (fittestIndv == null)         fittestIndv=in;\n        double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n        double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n        if (bestEpochTravelCost <= bestTravelCost) {\n          tour=in.cities.clone();\n          fittestIndv=in;\n          fittestIndvFitness=bestEpochTravelCost;\n        }\n      }\n    }\n    double bestEpochTravelCost=trueTravelCost(bestEpochIndv,adjacencyMatrix,N);\n    double bestTravelCost=trueTravelCost(fittestIndv,adjacencyMatrix,N);\n    if (epoch % 100 == 0)     System.out.printf(\"Epoch: %d, %.0f, %.0f\\n\",epoch,bestEpochTravelCost,bestTravelCost);\n    for (int i=1; i <= P; i++) {\n      Individual parent1=selectIndividual(generation,lo,hi);\n      Individual parent2=selectIndividual(generation,lo,hi);\n      Individual child=crossover(parent1,parent2,N);\n      for (int j=0; j < N; j++) {\n        if (Math.random() < MUTATION_RATE) {\n          mutate(child);\n        }\n      }\n      nextGeneration[i]=child;\n    }\n    generation=nextGeneration;\n  }\n  return trueTravelCost(fittestIndv,adjacencyMatrix,N);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 467,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 90,
        "startColumnNumber" : 10,
        "endLineNumber" : 94,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (bestEpochTravelCost <= bestTravelCost) {\n  tour=in.cities.clone();\n  fittestIndv=in;\n  fittestIndvFitness=bestEpochTravelCost;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 90,
    "startColumnNumber" : 14,
    "endLineNumber" : 90,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}