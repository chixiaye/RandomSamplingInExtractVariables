{
  "id" : 19,
  "expression" : "C2.class",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-samples/src/main/java/jadx/samples/TestAnnotationsParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "C2.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 33,
      "startColumnNumber" : 9,
      "endLineNumber" : 33,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 33,
        "startColumnNumber" : 9,
        "endLineNumber" : 33,
        "endColumnNumber" : 40
      },
      "nodeContext" : "C2.class.getAnnotation(A.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 40
      },
      "nodeContext" : "c2=C2.class.getAnnotation(A.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 41
      },
      "nodeContext" : "A c2=C2.class.getAnnotation(A.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 28,
        "startColumnNumber" : 26,
        "endLineNumber" : 37,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  A c1=C1.class.getAnnotation(A.class);\n  assertEquals(c1.i(),-1);\n  assertEquals(c1.f(),C1.FLOAT_CONST);\n  A c2=C2.class.getAnnotation(A.class);\n  assertEquals(c2.i(),-1025);\n  assertEquals(c2.f(),C2.FLOAT_CONST);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 28,
        "startColumnNumber" : 1,
        "endLineNumber" : 37,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public boolean testRun(){\n  A c1=C1.class.getAnnotation(A.class);\n  assertEquals(c1.i(),-1);\n  assertEquals(c1.f(),C1.FLOAT_CONST);\n  A c2=C2.class.getAnnotation(A.class);\n  assertEquals(c2.i(),-1025);\n  assertEquals(c2.f(),C2.FLOAT_CONST);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 67,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 41
      },
      "nodeContext" : "A c2=C2.class.getAnnotation(A.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<jadx.samples.TestAnnotationsParser.C2>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 33,
    "startColumnNumber" : 9,
    "endLineNumber" : 33,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}