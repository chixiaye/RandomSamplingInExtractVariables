{
  "id" : 493,
  "expression" : "result.getStatus()",
  "projectName" : "netty@netty",
  "commitID" : "f8796c7eafcc7e55b4b3939ab608e3c7b6fb01a0",
  "filePath" : "handler/src/main/java/io/netty/handler/ssl/SslHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "result.getStatus()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 1340,
      "startColumnNumber" : 38,
      "endLineNumber" : 1340,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 1340,
        "startColumnNumber" : 29,
        "endLineNumber" : 1340,
        "endColumnNumber" : 56
      },
      "nodeContext" : "status=result.getStatus()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 1340,
        "startColumnNumber" : 16,
        "endLineNumber" : 1340,
        "endColumnNumber" : 57
      },
      "nodeContext" : "final Status status=result.getStatus();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 5121,
        "startLineNumber" : 1338,
        "startColumnNumber" : 15,
        "endLineNumber" : 1424,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final SSLEngineResult result=engineType.unwrap(this,packet,length,decodeOut);\n  final Status status=result.getStatus();\n  final HandshakeStatus handshakeStatus=result.getHandshakeStatus();\n  final int produced=result.bytesProduced();\n  final int consumed=result.bytesConsumed();\n  packet.skipBytes(consumed);\n  length-=consumed;\n  if (handshakeStatus == HandshakeStatus.FINISHED || handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n    wrapLater|=(decodeOut.isReadable() ? setHandshakeSuccessUnwrapMarkReentry() : setHandshakeSuccess()) || handshakeStatus == HandshakeStatus.FINISHED;\n  }\n  if (decodeOut.isReadable()) {\n    setState(STATE_FIRE_CHANNEL_READ);\n    if (isStateSet(STATE_UNWRAP_REENTRY)) {\n      executedRead=true;\n      executeChannelRead(ctx,decodeOut);\n    }\n else {\n      ctx.fireChannelRead(decodeOut);\n    }\n    decodeOut=null;\n  }\n  if (status == Status.CLOSED) {\n    notifyClosure=true;\n  }\n else   if (status == Status.BUFFER_OVERFLOW) {\n    if (decodeOut != null) {\n      decodeOut.release();\n    }\n    final int applicationBufferSize=engine.getSession().getApplicationBufferSize();\n    decodeOut=allocate(ctx,engineType.calculatePendingData(this,applicationBufferSize < produced ? applicationBufferSize : applicationBufferSize - produced));\n    continue;\n  }\n  if (handshakeStatus == HandshakeStatus.NEED_TASK) {\n    boolean pending=runDelegatedTasks(true);\n    if (!pending) {\n      wrapLater=false;\n      break;\n    }\n  }\n else   if (handshakeStatus == HandshakeStatus.NEED_WRAP) {\n    if (wrapNonAppData(ctx,true) && length == 0) {\n      break;\n    }\n  }\n  if (status == Status.BUFFER_UNDERFLOW || handshakeStatus != HandshakeStatus.NEED_TASK && (consumed == 0 && produced == 0 || (length == 0 && handshakeStatus == HandshakeStatus.NOT_HANDSHAKING))) {\n    if (handshakeStatus == HandshakeStatus.NEED_UNWRAP) {\n      readIfNeeded(ctx);\n    }\n    break;\n  }\n else   if (decodeOut == null) {\n    decodeOut=allocate(ctx,length);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5150,
        "startLineNumber" : 1338,
        "startColumnNumber" : 12,
        "endLineNumber" : 1424,
        "endColumnNumber" : 39
      },
      "nodeContext" : "do {\n  final SSLEngineResult result=engineType.unwrap(this,packet,length,decodeOut);\n  final Status status=result.getStatus();\n  final HandshakeStatus handshakeStatus=result.getHandshakeStatus();\n  final int produced=result.bytesProduced();\n  final int consumed=result.bytesConsumed();\n  packet.skipBytes(consumed);\n  length-=consumed;\n  if (handshakeStatus == HandshakeStatus.FINISHED || handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n    wrapLater|=(decodeOut.isReadable() ? setHandshakeSuccessUnwrapMarkReentry() : setHandshakeSuccess()) || handshakeStatus == HandshakeStatus.FINISHED;\n  }\n  if (decodeOut.isReadable()) {\n    setState(STATE_FIRE_CHANNEL_READ);\n    if (isStateSet(STATE_UNWRAP_REENTRY)) {\n      executedRead=true;\n      executeChannelRead(ctx,decodeOut);\n    }\n else {\n      ctx.fireChannelRead(decodeOut);\n    }\n    decodeOut=null;\n  }\n  if (status == Status.CLOSED) {\n    notifyClosure=true;\n  }\n else   if (status == Status.BUFFER_OVERFLOW) {\n    if (decodeOut != null) {\n      decodeOut.release();\n    }\n    final int applicationBufferSize=engine.getSession().getApplicationBufferSize();\n    decodeOut=allocate(ctx,engineType.calculatePendingData(this,applicationBufferSize < produced ? applicationBufferSize : applicationBufferSize - produced));\n    continue;\n  }\n  if (handshakeStatus == HandshakeStatus.NEED_TASK) {\n    boolean pending=runDelegatedTasks(true);\n    if (!pending) {\n      wrapLater=false;\n      break;\n    }\n  }\n else   if (handshakeStatus == HandshakeStatus.NEED_WRAP) {\n    if (wrapNonAppData(ctx,true) && length == 0) {\n      break;\n    }\n  }\n  if (status == Status.BUFFER_UNDERFLOW || handshakeStatus != HandshakeStatus.NEED_TASK && (consumed == 0 && produced == 0 || (length == 0 && handshakeStatus == HandshakeStatus.NOT_HANDSHAKING))) {\n    if (handshakeStatus == HandshakeStatus.NEED_UNWRAP) {\n      readIfNeeded(ctx);\n    }\n    break;\n  }\n else   if (decodeOut == null) {\n    decodeOut=allocate(ctx,length);\n  }\n}\n while (!ctx.isRemoved());\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 280,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5851,
        "startLineNumber" : 1335,
        "startColumnNumber" : 12,
        "endLineNumber" : 1438,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  do {\n    final SSLEngineResult result=engineType.unwrap(this,packet,length,decodeOut);\n    final Status status=result.getStatus();\n    final HandshakeStatus handshakeStatus=result.getHandshakeStatus();\n    final int produced=result.bytesProduced();\n    final int consumed=result.bytesConsumed();\n    packet.skipBytes(consumed);\n    length-=consumed;\n    if (handshakeStatus == HandshakeStatus.FINISHED || handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n      wrapLater|=(decodeOut.isReadable() ? setHandshakeSuccessUnwrapMarkReentry() : setHandshakeSuccess()) || handshakeStatus == HandshakeStatus.FINISHED;\n    }\n    if (decodeOut.isReadable()) {\n      setState(STATE_FIRE_CHANNEL_READ);\n      if (isStateSet(STATE_UNWRAP_REENTRY)) {\n        executedRead=true;\n        executeChannelRead(ctx,decodeOut);\n      }\n else {\n        ctx.fireChannelRead(decodeOut);\n      }\n      decodeOut=null;\n    }\n    if (status == Status.CLOSED) {\n      notifyClosure=true;\n    }\n else     if (status == Status.BUFFER_OVERFLOW) {\n      if (decodeOut != null) {\n        decodeOut.release();\n      }\n      final int applicationBufferSize=engine.getSession().getApplicationBufferSize();\n      decodeOut=allocate(ctx,engineType.calculatePendingData(this,applicationBufferSize < produced ? applicationBufferSize : applicationBufferSize - produced));\n      continue;\n    }\n    if (handshakeStatus == HandshakeStatus.NEED_TASK) {\n      boolean pending=runDelegatedTasks(true);\n      if (!pending) {\n        wrapLater=false;\n        break;\n      }\n    }\n else     if (handshakeStatus == HandshakeStatus.NEED_WRAP) {\n      if (wrapNonAppData(ctx,true) && length == 0) {\n        break;\n      }\n    }\n    if (status == Status.BUFFER_UNDERFLOW || handshakeStatus != HandshakeStatus.NEED_TASK && (consumed == 0 && produced == 0 || (length == 0 && handshakeStatus == HandshakeStatus.NOT_HANDSHAKING))) {\n      if (handshakeStatus == HandshakeStatus.NEED_UNWRAP) {\n        readIfNeeded(ctx);\n      }\n      break;\n    }\n else     if (decodeOut == null) {\n      decodeOut=allocate(ctx,length);\n    }\n  }\n while (!ctx.isRemoved());\n  if (isStateSet(STATE_FLUSHED_BEFORE_HANDSHAKE) && handshakePromise.isDone()) {\n    clearState(STATE_FLUSHED_BEFORE_HANDSHAKE);\n    wrapLater=true;\n  }\n  if (wrapLater) {\n    wrap(ctx,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6200,
        "startLineNumber" : 1335,
        "startColumnNumber" : 8,
        "endLineNumber" : 1450,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  do {\n    final SSLEngineResult result=engineType.unwrap(this,packet,length,decodeOut);\n    final Status status=result.getStatus();\n    final HandshakeStatus handshakeStatus=result.getHandshakeStatus();\n    final int produced=result.bytesProduced();\n    final int consumed=result.bytesConsumed();\n    packet.skipBytes(consumed);\n    length-=consumed;\n    if (handshakeStatus == HandshakeStatus.FINISHED || handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n      wrapLater|=(decodeOut.isReadable() ? setHandshakeSuccessUnwrapMarkReentry() : setHandshakeSuccess()) || handshakeStatus == HandshakeStatus.FINISHED;\n    }\n    if (decodeOut.isReadable()) {\n      setState(STATE_FIRE_CHANNEL_READ);\n      if (isStateSet(STATE_UNWRAP_REENTRY)) {\n        executedRead=true;\n        executeChannelRead(ctx,decodeOut);\n      }\n else {\n        ctx.fireChannelRead(decodeOut);\n      }\n      decodeOut=null;\n    }\n    if (status == Status.CLOSED) {\n      notifyClosure=true;\n    }\n else     if (status == Status.BUFFER_OVERFLOW) {\n      if (decodeOut != null) {\n        decodeOut.release();\n      }\n      final int applicationBufferSize=engine.getSession().getApplicationBufferSize();\n      decodeOut=allocate(ctx,engineType.calculatePendingData(this,applicationBufferSize < produced ? applicationBufferSize : applicationBufferSize - produced));\n      continue;\n    }\n    if (handshakeStatus == HandshakeStatus.NEED_TASK) {\n      boolean pending=runDelegatedTasks(true);\n      if (!pending) {\n        wrapLater=false;\n        break;\n      }\n    }\n else     if (handshakeStatus == HandshakeStatus.NEED_WRAP) {\n      if (wrapNonAppData(ctx,true) && length == 0) {\n        break;\n      }\n    }\n    if (status == Status.BUFFER_UNDERFLOW || handshakeStatus != HandshakeStatus.NEED_TASK && (consumed == 0 && produced == 0 || (length == 0 && handshakeStatus == HandshakeStatus.NOT_HANDSHAKING))) {\n      if (handshakeStatus == HandshakeStatus.NEED_UNWRAP) {\n        readIfNeeded(ctx);\n      }\n      break;\n    }\n else     if (decodeOut == null) {\n      decodeOut=allocate(ctx,length);\n    }\n  }\n while (!ctx.isRemoved());\n  if (isStateSet(STATE_FLUSHED_BEFORE_HANDSHAKE) && handshakePromise.isDone()) {\n    clearState(STATE_FLUSHED_BEFORE_HANDSHAKE);\n    wrapLater=true;\n  }\n  if (wrapLater) {\n    wrap(ctx,true);\n  }\n}\n  finally {\n  if (decodeOut != null) {\n    decodeOut.release();\n  }\n  if (notifyClosure) {\n    if (executedRead) {\n      executeNotifyClosePromise(ctx);\n    }\n else {\n      notifyClosePromise(null);\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6470,
        "startLineNumber" : 1329,
        "startColumnNumber" : 98,
        "endLineNumber" : 1452,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int originalLength=length;\n  boolean wrapLater=false;\n  boolean notifyClosure=false;\n  boolean executedRead=false;\n  ByteBuf decodeOut=allocate(ctx,length);\n  try {\n    do {\n      final SSLEngineResult result=engineType.unwrap(this,packet,length,decodeOut);\n      final Status status=result.getStatus();\n      final HandshakeStatus handshakeStatus=result.getHandshakeStatus();\n      final int produced=result.bytesProduced();\n      final int consumed=result.bytesConsumed();\n      packet.skipBytes(consumed);\n      length-=consumed;\n      if (handshakeStatus == HandshakeStatus.FINISHED || handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n        wrapLater|=(decodeOut.isReadable() ? setHandshakeSuccessUnwrapMarkReentry() : setHandshakeSuccess()) || handshakeStatus == HandshakeStatus.FINISHED;\n      }\n      if (decodeOut.isReadable()) {\n        setState(STATE_FIRE_CHANNEL_READ);\n        if (isStateSet(STATE_UNWRAP_REENTRY)) {\n          executedRead=true;\n          executeChannelRead(ctx,decodeOut);\n        }\n else {\n          ctx.fireChannelRead(decodeOut);\n        }\n        decodeOut=null;\n      }\n      if (status == Status.CLOSED) {\n        notifyClosure=true;\n      }\n else       if (status == Status.BUFFER_OVERFLOW) {\n        if (decodeOut != null) {\n          decodeOut.release();\n        }\n        final int applicationBufferSize=engine.getSession().getApplicationBufferSize();\n        decodeOut=allocate(ctx,engineType.calculatePendingData(this,applicationBufferSize < produced ? applicationBufferSize : applicationBufferSize - produced));\n        continue;\n      }\n      if (handshakeStatus == HandshakeStatus.NEED_TASK) {\n        boolean pending=runDelegatedTasks(true);\n        if (!pending) {\n          wrapLater=false;\n          break;\n        }\n      }\n else       if (handshakeStatus == HandshakeStatus.NEED_WRAP) {\n        if (wrapNonAppData(ctx,true) && length == 0) {\n          break;\n        }\n      }\n      if (status == Status.BUFFER_UNDERFLOW || handshakeStatus != HandshakeStatus.NEED_TASK && (consumed == 0 && produced == 0 || (length == 0 && handshakeStatus == HandshakeStatus.NOT_HANDSHAKING))) {\n        if (handshakeStatus == HandshakeStatus.NEED_UNWRAP) {\n          readIfNeeded(ctx);\n        }\n        break;\n      }\n else       if (decodeOut == null) {\n        decodeOut=allocate(ctx,length);\n      }\n    }\n while (!ctx.isRemoved());\n    if (isStateSet(STATE_FLUSHED_BEFORE_HANDSHAKE) && handshakePromise.isDone()) {\n      clearState(STATE_FLUSHED_BEFORE_HANDSHAKE);\n      wrapLater=true;\n    }\n    if (wrapLater) {\n      wrap(ctx,true);\n    }\n  }\n  finally {\n    if (decodeOut != null) {\n      decodeOut.release();\n    }\n    if (notifyClosure) {\n      if (executedRead) {\n        executeNotifyClosePromise(ctx);\n      }\n else {\n        notifyClosePromise(null);\n      }\n    }\n  }\n  return originalLength - length;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 367,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6619,
        "startLineNumber" : 1326,
        "startColumnNumber" : 4,
        "endLineNumber" : 1452,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Unwraps inbound SSL records.\n */\nprivate int unwrap(ChannelHandlerContext ctx,ByteBuf packet,int length) throws SSLException {\n  final int originalLength=length;\n  boolean wrapLater=false;\n  boolean notifyClosure=false;\n  boolean executedRead=false;\n  ByteBuf decodeOut=allocate(ctx,length);\n  try {\n    do {\n      final SSLEngineResult result=engineType.unwrap(this,packet,length,decodeOut);\n      final Status status=result.getStatus();\n      final HandshakeStatus handshakeStatus=result.getHandshakeStatus();\n      final int produced=result.bytesProduced();\n      final int consumed=result.bytesConsumed();\n      packet.skipBytes(consumed);\n      length-=consumed;\n      if (handshakeStatus == HandshakeStatus.FINISHED || handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n        wrapLater|=(decodeOut.isReadable() ? setHandshakeSuccessUnwrapMarkReentry() : setHandshakeSuccess()) || handshakeStatus == HandshakeStatus.FINISHED;\n      }\n      if (decodeOut.isReadable()) {\n        setState(STATE_FIRE_CHANNEL_READ);\n        if (isStateSet(STATE_UNWRAP_REENTRY)) {\n          executedRead=true;\n          executeChannelRead(ctx,decodeOut);\n        }\n else {\n          ctx.fireChannelRead(decodeOut);\n        }\n        decodeOut=null;\n      }\n      if (status == Status.CLOSED) {\n        notifyClosure=true;\n      }\n else       if (status == Status.BUFFER_OVERFLOW) {\n        if (decodeOut != null) {\n          decodeOut.release();\n        }\n        final int applicationBufferSize=engine.getSession().getApplicationBufferSize();\n        decodeOut=allocate(ctx,engineType.calculatePendingData(this,applicationBufferSize < produced ? applicationBufferSize : applicationBufferSize - produced));\n        continue;\n      }\n      if (handshakeStatus == HandshakeStatus.NEED_TASK) {\n        boolean pending=runDelegatedTasks(true);\n        if (!pending) {\n          wrapLater=false;\n          break;\n        }\n      }\n else       if (handshakeStatus == HandshakeStatus.NEED_WRAP) {\n        if (wrapNonAppData(ctx,true) && length == 0) {\n          break;\n        }\n      }\n      if (status == Status.BUFFER_UNDERFLOW || handshakeStatus != HandshakeStatus.NEED_TASK && (consumed == 0 && produced == 0 || (length == 0 && handshakeStatus == HandshakeStatus.NOT_HANDSHAKING))) {\n        if (handshakeStatus == HandshakeStatus.NEED_UNWRAP) {\n          readIfNeeded(ctx);\n        }\n        break;\n      }\n else       if (decodeOut == null) {\n        decodeOut=allocate(ctx,length);\n      }\n    }\n while (!ctx.isRemoved());\n    if (isStateSet(STATE_FLUSHED_BEFORE_HANDSHAKE) && handshakePromise.isDone()) {\n      clearState(STATE_FLUSHED_BEFORE_HANDSHAKE);\n      wrapLater=true;\n    }\n    if (wrapLater) {\n      wrap(ctx,true);\n    }\n  }\n  finally {\n    if (decodeOut != null) {\n      decodeOut.release();\n    }\n    if (notifyClosure) {\n      if (executedRead) {\n        executeNotifyClosePromise(ctx);\n      }\n else {\n        notifyClosePromise(null);\n      }\n    }\n  }\n  return originalLength - length;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 385,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 1340,
        "startColumnNumber" : 16,
        "endLineNumber" : 1340,
        "endColumnNumber" : 57
      },
      "nodeContext" : "final Status status=result.getStatus();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "javax.net.ssl.SSLEngineResult.Status"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 1340,
    "startColumnNumber" : 38,
    "endLineNumber" : 1340,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}