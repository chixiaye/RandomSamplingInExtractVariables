{
  "id" : 143,
  "expression" : "errorResponse.getErrors()",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "23306a36bb8f0585427e2399eb3ee6fba109a019",
  "filePath" : "jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobChecker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "errorResponse.getErrors()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 82,
      "startColumnNumber" : 42,
      "endLineNumber" : 82,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 82,
        "startColumnNumber" : 33,
        "endLineNumber" : 82,
        "endColumnNumber" : 67
      },
      "nodeContext" : "errors=errorResponse.getErrors()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 68
      },
      "nodeContext" : "List<ErrorEntryTemplate> errors=errorResponse.getErrors();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 79,
        "startColumnNumber" : 10,
        "endLineNumber" : 95,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  ErrorResponseTemplate errorResponse=JsonTemplateMapper.readJson(errorContent,ErrorResponseTemplate.class);\n  List<ErrorEntryTemplate> errors=errorResponse.getErrors();\n  if (errors.size() == 1) {\n    String errorCodeString=errors.get(0).getCode();\n    if (errorCodeString == null) {\n      throw httpResponseException;\n    }\n    ErrorCodes errorCode=ErrorCodes.valueOf(errorCodeString);\n    if (errorCode.equals(ErrorCodes.BLOB_UNKNOWN)) {\n      return null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 79,
        "startColumnNumber" : 6,
        "endLineNumber" : 99,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  ErrorResponseTemplate errorResponse=JsonTemplateMapper.readJson(errorContent,ErrorResponseTemplate.class);\n  List<ErrorEntryTemplate> errors=errorResponse.getErrors();\n  if (errors.size() == 1) {\n    String errorCodeString=errors.get(0).getCode();\n    if (errorCodeString == null) {\n      throw httpResponseException;\n    }\n    ErrorCodes errorCode=ErrorCodes.valueOf(errorCodeString);\n    if (errorCode.equals(ErrorCodes.BLOB_UNKNOWN)) {\n      return null;\n    }\n  }\n}\n catch (IOException ex) {\n  throw new RegistryErrorExceptionBuilder(getActionDescription(),ex).addReason(\"Failed to parse registry error response body\").build();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 87,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 78,
        "startColumnNumber" : 11,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ErrorResponseTemplate errorResponse=JsonTemplateMapper.readJson(errorContent,ErrorResponseTemplate.class);\n    List<ErrorEntryTemplate> errors=errorResponse.getErrors();\n    if (errors.size() == 1) {\n      String errorCodeString=errors.get(0).getCode();\n      if (errorCodeString == null) {\n        throw httpResponseException;\n      }\n      ErrorCodes errorCode=ErrorCodes.valueOf(errorCodeString);\n      if (errorCode.equals(ErrorCodes.BLOB_UNKNOWN)) {\n        return null;\n      }\n    }\n  }\n catch (  IOException ex) {\n    throw new RegistryErrorExceptionBuilder(getActionDescription(),ex).addReason(\"Failed to parse registry error response body\").build();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (errorContent == null) {\n  return null;\n}\n else {\n  try {\n    ErrorResponseTemplate errorResponse=JsonTemplateMapper.readJson(errorContent,ErrorResponseTemplate.class);\n    List<ErrorEntryTemplate> errors=errorResponse.getErrors();\n    if (errors.size() == 1) {\n      String errorCodeString=errors.get(0).getCode();\n      if (errorCodeString == null) {\n        throw httpResponseException;\n      }\n      ErrorCodes errorCode=ErrorCodes.valueOf(errorCodeString);\n      if (errorCode.equals(ErrorCodes.BLOB_UNKNOWN)) {\n        return null;\n      }\n    }\n  }\n catch (  IOException ex) {\n    throw new RegistryErrorExceptionBuilder(getActionDescription(),ex).addReason(\"Failed to parse registry error response body\").build();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 66,
        "startColumnNumber" : 59,
        "endLineNumber" : 104,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (httpResponseException.getStatusCode() != HttpStatusCodes.STATUS_CODE_NOT_FOUND) {\n    throw httpResponseException;\n  }\n  String errorContent=httpResponseException.getContent();\n  if (errorContent == null) {\n    return null;\n  }\n else {\n    try {\n      ErrorResponseTemplate errorResponse=JsonTemplateMapper.readJson(errorContent,ErrorResponseTemplate.class);\n      List<ErrorEntryTemplate> errors=errorResponse.getErrors();\n      if (errors.size() == 1) {\n        String errorCodeString=errors.get(0).getCode();\n        if (errorCodeString == null) {\n          throw httpResponseException;\n        }\n        ErrorCodes errorCode=ErrorCodes.valueOf(errorCodeString);\n        if (errorCode.equals(ErrorCodes.BLOB_UNKNOWN)) {\n          return null;\n        }\n      }\n    }\n catch (    IOException ex) {\n      throw new RegistryErrorExceptionBuilder(getActionDescription(),ex).addReason(\"Failed to parse registry error response body\").build();\n    }\n  }\n  throw httpResponseException;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1565,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 104,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override @Nullable public BlobDescriptor handleHttpResponseException(HttpResponseException httpResponseException) throws RegistryErrorException, HttpResponseException {\n  if (httpResponseException.getStatusCode() != HttpStatusCodes.STATUS_CODE_NOT_FOUND) {\n    throw httpResponseException;\n  }\n  String errorContent=httpResponseException.getContent();\n  if (errorContent == null) {\n    return null;\n  }\n else {\n    try {\n      ErrorResponseTemplate errorResponse=JsonTemplateMapper.readJson(errorContent,ErrorResponseTemplate.class);\n      List<ErrorEntryTemplate> errors=errorResponse.getErrors();\n      if (errors.size() == 1) {\n        String errorCodeString=errors.get(0).getCode();\n        if (errorCodeString == null) {\n          throw httpResponseException;\n        }\n        ErrorCodes errorCode=ErrorCodes.valueOf(errorCodeString);\n        if (errorCode.equals(ErrorCodes.BLOB_UNKNOWN)) {\n          return null;\n        }\n      }\n    }\n catch (    IOException ex) {\n      throw new RegistryErrorExceptionBuilder(getActionDescription(),ex).addReason(\"Failed to parse registry error response body\").build();\n    }\n  }\n  throw httpResponseException;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 68
      },
      "nodeContext" : "List<ErrorEntryTemplate> errors=errorResponse.getErrors();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<com.google.cloud.tools.jib.registry.json.ErrorEntryTemplate>"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 82,
    "startColumnNumber" : 42,
    "endLineNumber" : 82,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}