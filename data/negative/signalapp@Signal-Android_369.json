{
  "id" : 369,
  "expression" : "MANUAL_SHORTCODE_6.contains(localCountryCode)",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/phonenumbers/PhoneNumberFormatter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MANUAL_SHORTCODE_6.contains(localCountryCode)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 124,
      "startColumnNumber" : 36,
      "endLineNumber" : 124,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 81
      },
      "nodeContext" : "bareNumber.length() <= 6 && MANUAL_SHORTCODE_6.contains(localCountryCode)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (bareNumber.length() <= 6 && MANUAL_SHORTCODE_6.contains(localCountryCode)) {\n  return bareNumber;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1688,
        "startLineNumber" : 112,
        "startColumnNumber" : 48,
        "endLineNumber" : 158,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (number == null)   return \"Unknown\";\n  if (GroupId.isEncodedGroup(number))   return number;\n  if (ALPHA_PATTERN.matcher(number).find())   return number.trim();\n  String bareNumber=number.replaceAll(\"[^0-9+]\",\"\");\n  if (bareNumber.length() == 0) {\n    if (number.trim().length() == 0)     return \"Unknown\";\n else     return number.trim();\n  }\n  if (bareNumber.length() <= 6 && MANUAL_SHORTCODE_6.contains(localCountryCode)) {\n    return bareNumber;\n  }\n  if (bareNumber.length() <= 4 && !EXCLUDE_FROM_MANUAL_SHORTCODE_4.contains(localCountryCode)) {\n    return bareNumber;\n  }\n  if (isShortCode(bareNumber,localCountryCode)) {\n    return bareNumber;\n  }\n  String processedNumber=applyAreaCodeRules(localNumber,bareNumber);\n  try {\n    Phonenumber.PhoneNumber parsedNumber=phoneNumberUtil.parse(processedNumber,localCountryCode);\n    return phoneNumberUtil.format(parsedNumber,PhoneNumberUtil.PhoneNumberFormat.E164);\n  }\n catch (  NumberParseException e) {\n    Log.w(TAG,e);\n    if (bareNumber.charAt(0) == '+')     return bareNumber;\n    String localNumberImprecise=localNumber.isPresent() ? localNumber.get().getE164Number() : \"\";\n    if (localNumberImprecise.charAt(0) == '+')     localNumberImprecise=localNumberImprecise.substring(1);\n    if (localNumberImprecise.length() == bareNumber.length() || bareNumber.length() > localNumberImprecise.length())     return \"+\" + number;\n    int difference=localNumberImprecise.length() - bareNumber.length();\n    return \"+\" + localNumberImprecise.substring(0,difference) + bareNumber;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public String format(@Nullable String number){\n  if (number == null)   return \"Unknown\";\n  if (GroupId.isEncodedGroup(number))   return number;\n  if (ALPHA_PATTERN.matcher(number).find())   return number.trim();\n  String bareNumber=number.replaceAll(\"[^0-9+]\",\"\");\n  if (bareNumber.length() == 0) {\n    if (number.trim().length() == 0)     return \"Unknown\";\n else     return number.trim();\n  }\n  if (bareNumber.length() <= 6 && MANUAL_SHORTCODE_6.contains(localCountryCode)) {\n    return bareNumber;\n  }\n  if (bareNumber.length() <= 4 && !EXCLUDE_FROM_MANUAL_SHORTCODE_4.contains(localCountryCode)) {\n    return bareNumber;\n  }\n  if (isShortCode(bareNumber,localCountryCode)) {\n    return bareNumber;\n  }\n  String processedNumber=applyAreaCodeRules(localNumber,bareNumber);\n  try {\n    Phonenumber.PhoneNumber parsedNumber=phoneNumberUtil.parse(processedNumber,localCountryCode);\n    return phoneNumberUtil.format(parsedNumber,PhoneNumberUtil.PhoneNumberFormat.E164);\n  }\n catch (  NumberParseException e) {\n    Log.w(TAG,e);\n    if (bareNumber.charAt(0) == '+')     return bareNumber;\n    String localNumberImprecise=localNumber.isPresent() ? localNumber.get().getE164Number() : \"\";\n    if (localNumberImprecise.charAt(0) == '+')     localNumberImprecise=localNumberImprecise.substring(1);\n    if (localNumberImprecise.length() == bareNumber.length() || bareNumber.length() > localNumberImprecise.length())     return \"+\" + number;\n    int difference=localNumberImprecise.length() - bareNumber.length();\n    return \"+\" + localNumberImprecise.substring(0,difference) + bareNumber;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 81
      },
      "nodeContext" : "bareNumber.length() <= 6 && MANUAL_SHORTCODE_6.contains(localCountryCode)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 124,
    "startColumnNumber" : 36,
    "endLineNumber" : 124,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}