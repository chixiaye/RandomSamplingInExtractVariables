{
  "id" : 328,
  "expression" : "Integer.toHexString('中')",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/parser/JSONScannerTest_singQuoteString.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Integer.toHexString('中')",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 39,
      "startColumnNumber" : 48,
      "endLineNumber" : 39,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 39,
        "startColumnNumber" : 19,
        "endLineNumber" : 39,
        "endColumnNumber" : 72
      },
      "nodeContext" : "\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\t\\\\u\" + Integer.toHexString('中')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 73
      },
      "nodeContext" : "buf.append(\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\t\\\\u\" + Integer.toHexString('中'))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 74
      },
      "nodeContext" : "buf.append(\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\t\\\\u\" + Integer.toHexString('中'));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1366,
        "startLineNumber" : 16,
        "startColumnNumber" : 47,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n{\n    JSONLexer lexer=new JSONLexer(\"\\'中国\\'\");\n    lexer.config(Feature.AllowSingleQuotes,true);\n    lexer.nextToken();\n    Assert.assertEquals(\"中国\",lexer.stringVal());\n  }\n{\n    JSONLexer lexer=new JSONLexer(\"'中国\\t\\\\'\\\\\\\"'\");\n    lexer.config(Feature.AllowSingleQuotes,true);\n    lexer.nextToken();\n    Assert.assertEquals(\"中国\\t'\\\"\",lexer.stringVal());\n  }\n{\n    JSONLexer lexer=new JSONLexer(\"\\'中国\\tV5\\'\");\n    lexer.config(Feature.AllowSingleQuotes,true);\n    lexer.nextToken();\n    Assert.assertEquals(\"中国\\tV5\",lexer.stringVal());\n  }\n  StringBuilder buf=new StringBuilder();\n  buf.append('\\'');\n  buf.append(\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\t\\\\u\" + Integer.toHexString('中'));\n  buf.append('\\'');\n  buf.append('\\u2001');\n  String text=buf.toString();\n  JSONLexer lexer=new JSONLexer(text.toCharArray(),text.length() - 1);\n  lexer.config(Feature.AllowSingleQuotes,true);\n  lexer.nextToken();\n  Assert.assertEquals(0,pos(lexer));\n  String stringVal=lexer.stringVal();\n  Assert.assertEquals(\"\\\"\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\\\t中\\\"\",JSON.toJSONString(stringVal));\n  JSON.toJSONString(stringVal);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_string() throws Exception {\n{\n    JSONLexer lexer=new JSONLexer(\"\\'中国\\'\");\n    lexer.config(Feature.AllowSingleQuotes,true);\n    lexer.nextToken();\n    Assert.assertEquals(\"中国\",lexer.stringVal());\n  }\n{\n    JSONLexer lexer=new JSONLexer(\"'中国\\t\\\\'\\\\\\\"'\");\n    lexer.config(Feature.AllowSingleQuotes,true);\n    lexer.nextToken();\n    Assert.assertEquals(\"中国\\t'\\\"\",lexer.stringVal());\n  }\n{\n    JSONLexer lexer=new JSONLexer(\"\\'中国\\tV5\\'\");\n    lexer.config(Feature.AllowSingleQuotes,true);\n    lexer.nextToken();\n    Assert.assertEquals(\"中国\\tV5\",lexer.stringVal());\n  }\n  StringBuilder buf=new StringBuilder();\n  buf.append('\\'');\n  buf.append(\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\t\\\\u\" + Integer.toHexString('中'));\n  buf.append('\\'');\n  buf.append('\\u2001');\n  String text=buf.toString();\n  JSONLexer lexer=new JSONLexer(text.toCharArray(),text.length() - 1);\n  lexer.config(Feature.AllowSingleQuotes,true);\n  lexer.nextToken();\n  Assert.assertEquals(0,pos(lexer));\n  String stringVal=lexer.stringVal();\n  Assert.assertEquals(\"\\\"\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\\\t中\\\"\",JSON.toJSONString(stringVal));\n  JSON.toJSONString(stringVal);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 74
      },
      "nodeContext" : "buf.append(\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\t\\\\u\" + Integer.toHexString('中'));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 39,
    "startColumnNumber" : 48,
    "endLineNumber" : 39,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}