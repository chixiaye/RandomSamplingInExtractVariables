{
  "id" : 333,
  "expression" : "0",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 93,
      "startColumnNumber" : 14,
      "endLineNumber" : 93,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 93,
        "startColumnNumber" : 10,
        "endLineNumber" : 93,
        "endColumnNumber" : 15
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 16
      },
      "nodeContext" : "int i=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1065,
        "startLineNumber" : 85,
        "startColumnNumber" : 57,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (in.peek() == JsonToken.NULL) {\n    in.nextNull();\n    return null;\n  }\n  BitSet bitset=new BitSet();\n  in.beginArray();\n  int i=0;\n  JsonToken tokenType=in.peek();\n  while (tokenType != JsonToken.END_ARRAY) {\n    boolean set;\nswitch (tokenType) {\ncase NUMBER:      set=in.nextInt() != 0;\n    break;\ncase BOOLEAN:  set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\nin.endArray();\nreturn bitset;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1118,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public BitSet read(JsonReader in) throws IOException {\n  if (in.peek() == JsonToken.NULL) {\n    in.nextNull();\n    return null;\n  }\n  BitSet bitset=new BitSet();\n  in.beginArray();\n  int i=0;\n  JsonToken tokenType=in.peek();\n  while (tokenType != JsonToken.END_ARRAY) {\n    boolean set;\nswitch (tokenType) {\ncase NUMBER:      set=in.nextInt() != 0;\n    break;\ncase BOOLEAN:  set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\nin.endArray();\nreturn bitset;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 16
      },
      "nodeContext" : "int i=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 99,
      "startColumnNumber" : 32,
      "endLineNumber" : 99,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 99,
        "startColumnNumber" : 16,
        "endLineNumber" : 99,
        "endColumnNumber" : 33
      },
      "nodeContext" : "in.nextInt() != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 33
      },
      "nodeContext" : "set=in.nextInt() != 0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 34
      },
      "nodeContext" : "set=in.nextInt() != 0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (tokenType) {\ncase NUMBER:  set=in.nextInt() != 0;\nbreak;\ncase BOOLEAN:set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 95,
        "startColumnNumber" : 47,
        "endLineNumber" : 121,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean set;\nswitch (tokenType) {\ncase NUMBER:    set=in.nextInt() != 0;\n  break;\ncase BOOLEAN:set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 121,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (tokenType != JsonToken.END_ARRAY) {\n  boolean set;\nswitch (tokenType) {\ncase NUMBER:    set=in.nextInt() != 0;\n  break;\ncase BOOLEAN:set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1065,
        "startLineNumber" : 85,
        "startColumnNumber" : 57,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (in.peek() == JsonToken.NULL) {\n    in.nextNull();\n    return null;\n  }\n  BitSet bitset=new BitSet();\n  in.beginArray();\n  int i=0;\n  JsonToken tokenType=in.peek();\n  while (tokenType != JsonToken.END_ARRAY) {\n    boolean set;\nswitch (tokenType) {\ncase NUMBER:      set=in.nextInt() != 0;\n    break;\ncase BOOLEAN:  set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\nin.endArray();\nreturn bitset;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1118,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public BitSet read(JsonReader in) throws IOException {\n  if (in.peek() == JsonToken.NULL) {\n    in.nextNull();\n    return null;\n  }\n  BitSet bitset=new BitSet();\n  in.beginArray();\n  int i=0;\n  JsonToken tokenType=in.peek();\n  while (tokenType != JsonToken.END_ARRAY) {\n    boolean set;\nswitch (tokenType) {\ncase NUMBER:      set=in.nextInt() != 0;\n    break;\ncase BOOLEAN:  set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\nin.endArray();\nreturn bitset;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 34
      },
      "nodeContext" : "set=in.nextInt() != 0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 107,
      "startColumnNumber" : 51,
      "endLineNumber" : 107,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 107,
        "startColumnNumber" : 18,
        "endLineNumber" : 107,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Integer.parseInt(stringValue) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 52
      },
      "nodeContext" : "set=Integer.parseInt(stringValue) != 0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 53
      },
      "nodeContext" : "set=Integer.parseInt(stringValue) != 0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 106,
        "startColumnNumber" : 14,
        "endLineNumber" : 108,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  set=Integer.parseInt(stringValue) != 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 106,
        "startColumnNumber" : 10,
        "endLineNumber" : 111,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  set=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\n  throw new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (tokenType) {\ncase NUMBER:  set=in.nextInt() != 0;\nbreak;\ncase BOOLEAN:set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 95,
        "startColumnNumber" : 47,
        "endLineNumber" : 121,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean set;\nswitch (tokenType) {\ncase NUMBER:    set=in.nextInt() != 0;\n  break;\ncase BOOLEAN:set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 121,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (tokenType != JsonToken.END_ARRAY) {\n  boolean set;\nswitch (tokenType) {\ncase NUMBER:    set=in.nextInt() != 0;\n  break;\ncase BOOLEAN:set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1065,
        "startLineNumber" : 85,
        "startColumnNumber" : 57,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (in.peek() == JsonToken.NULL) {\n    in.nextNull();\n    return null;\n  }\n  BitSet bitset=new BitSet();\n  in.beginArray();\n  int i=0;\n  JsonToken tokenType=in.peek();\n  while (tokenType != JsonToken.END_ARRAY) {\n    boolean set;\nswitch (tokenType) {\ncase NUMBER:      set=in.nextInt() != 0;\n    break;\ncase BOOLEAN:  set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\nin.endArray();\nreturn bitset;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1118,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public BitSet read(JsonReader in) throws IOException {\n  if (in.peek() == JsonToken.NULL) {\n    in.nextNull();\n    return null;\n  }\n  BitSet bitset=new BitSet();\n  in.beginArray();\n  int i=0;\n  JsonToken tokenType=in.peek();\n  while (tokenType != JsonToken.END_ARRAY) {\n    boolean set;\nswitch (tokenType) {\ncase NUMBER:      set=in.nextInt() != 0;\n    break;\ncase BOOLEAN:  set=in.nextBoolean();\nbreak;\ncase STRING:String stringValue=in.nextString();\ntry {\nset=Integer.parseInt(stringValue) != 0;\n}\n catch (NumberFormatException e) {\nthrow new JsonSyntaxException(\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n}\nbreak;\ndefault:throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n}\nif (set) {\nbitset.set(i);\n}\n++i;\ntokenType=in.peek();\n}\nin.endArray();\nreturn bitset;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 53
      },
      "nodeContext" : "set=Integer.parseInt(stringValue) != 0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 93,
    "startColumnNumber" : 14,
    "endLineNumber" : 93,
    "endColumnNumber" : 15
  }, {
    "charLength" : 1,
    "startLineNumber" : 99,
    "startColumnNumber" : 32,
    "endLineNumber" : 99,
    "endColumnNumber" : 33
  }, {
    "charLength" : 1,
    "startLineNumber" : 107,
    "startColumnNumber" : 51,
    "endLineNumber" : 107,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}