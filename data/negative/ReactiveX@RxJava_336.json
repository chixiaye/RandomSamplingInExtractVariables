{
  "id" : 336,
  "expression" : "1",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/BlockingOperatorMostRecentTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 80,
      "startColumnNumber" : 58,
      "endLineNumber" : 80,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 80,
        "startColumnNumber" : 40,
        "endLineNumber" : 80,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Flowable.interval(1,TimeUnit.SECONDS,scheduler)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 80,
        "startColumnNumber" : 40,
        "endLineNumber" : 80,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 80,
        "startColumnNumber" : 40,
        "endLineNumber" : 80,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 80,
        "startColumnNumber" : 31,
        "endLineNumber" : 80,
        "endColumnNumber" : 111
      },
      "nodeContext" : "source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 112
      },
      "nodeContext" : "BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 78,
        "startColumnNumber" : 48,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestScheduler scheduler=new TestScheduler();\n  BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.mostRecent(-1L);\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    Assert.assertEquals(Long.valueOf(-1),it.next());\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=1000) public void testSingleSourceManyIterators(){\n  TestScheduler scheduler=new TestScheduler();\n  BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.mostRecent(-1L);\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    Assert.assertEquals(Long.valueOf(-1),it.next());\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 112
      },
      "nodeContext" : "BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 87,
      "startColumnNumber" : 46,
      "endLineNumber" : 87,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2,
        "startLineNumber" : 87,
        "startColumnNumber" : 45,
        "endLineNumber" : 87,
        "endColumnNumber" : 47
      },
      "nodeContext" : "-1",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 87,
        "startColumnNumber" : 32,
        "endLineNumber" : 87,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Long.valueOf(-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Assert.assertEquals(Long.valueOf(-1),it.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Assert.assertEquals(Long.valueOf(-1),it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 84,
        "startColumnNumber" : 36,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Iterator<Long> it=iter.iterator();\n  Assert.assertEquals(Long.valueOf(-1),it.next());\n  for (int i=0; i < 9; i++) {\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(true,it.hasNext());\n    Assert.assertEquals(Long.valueOf(i),it.next());\n  }\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < 3; j++) {\n  Iterator<Long> it=iter.iterator();\n  Assert.assertEquals(Long.valueOf(-1),it.next());\n  for (int i=0; i < 9; i++) {\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(true,it.hasNext());\n    Assert.assertEquals(Long.valueOf(i),it.next());\n  }\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 78,
        "startColumnNumber" : 48,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestScheduler scheduler=new TestScheduler();\n  BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.mostRecent(-1L);\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    Assert.assertEquals(Long.valueOf(-1),it.next());\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=1000) public void testSingleSourceManyIterators(){\n  TestScheduler scheduler=new TestScheduler();\n  BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.mostRecent(-1L);\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    Assert.assertEquals(Long.valueOf(-1),it.next());\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Assert.assertEquals(Long.valueOf(-1),it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 90,
      "startColumnNumber" : 40,
      "endLineNumber" : 90,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 60
      },
      "nodeContext" : "scheduler.advanceTimeBy(1,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 61
      },
      "nodeContext" : "scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 89,
        "startColumnNumber" : 40,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(true,it.hasNext());\n  Assert.assertEquals(Long.valueOf(i),it.next());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 9; i++) {\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(true,it.hasNext());\n  Assert.assertEquals(Long.valueOf(i),it.next());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 84,
        "startColumnNumber" : 36,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Iterator<Long> it=iter.iterator();\n  Assert.assertEquals(Long.valueOf(-1),it.next());\n  for (int i=0; i < 9; i++) {\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(true,it.hasNext());\n    Assert.assertEquals(Long.valueOf(i),it.next());\n  }\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < 3; j++) {\n  Iterator<Long> it=iter.iterator();\n  Assert.assertEquals(Long.valueOf(-1),it.next());\n  for (int i=0; i < 9; i++) {\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(true,it.hasNext());\n    Assert.assertEquals(Long.valueOf(i),it.next());\n  }\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 78,
        "startColumnNumber" : 48,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestScheduler scheduler=new TestScheduler();\n  BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.mostRecent(-1L);\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    Assert.assertEquals(Long.valueOf(-1),it.next());\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=1000) public void testSingleSourceManyIterators(){\n  TestScheduler scheduler=new TestScheduler();\n  BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.mostRecent(-1L);\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    Assert.assertEquals(Long.valueOf(-1),it.next());\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 61
      },
      "nodeContext" : "scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 95,
      "startColumnNumber" : 36,
      "endLineNumber" : 95,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 56
      },
      "nodeContext" : "scheduler.advanceTimeBy(1,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 57
      },
      "nodeContext" : "scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 84,
        "startColumnNumber" : 36,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Iterator<Long> it=iter.iterator();\n  Assert.assertEquals(Long.valueOf(-1),it.next());\n  for (int i=0; i < 9; i++) {\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(true,it.hasNext());\n    Assert.assertEquals(Long.valueOf(i),it.next());\n  }\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < 3; j++) {\n  Iterator<Long> it=iter.iterator();\n  Assert.assertEquals(Long.valueOf(-1),it.next());\n  for (int i=0; i < 9; i++) {\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(true,it.hasNext());\n    Assert.assertEquals(Long.valueOf(i),it.next());\n  }\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 78,
        "startColumnNumber" : 48,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestScheduler scheduler=new TestScheduler();\n  BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.mostRecent(-1L);\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    Assert.assertEquals(Long.valueOf(-1),it.next());\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=1000) public void testSingleSourceManyIterators(){\n  TestScheduler scheduler=new TestScheduler();\n  BlockingFlowable<Long> source=Flowable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.mostRecent(-1L);\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    Assert.assertEquals(Long.valueOf(-1),it.next());\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 57
      },
      "nodeContext" : "scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 80,
    "startColumnNumber" : 58,
    "endLineNumber" : 80,
    "endColumnNumber" : 59
  }, {
    "charLength" : 1,
    "startLineNumber" : 87,
    "startColumnNumber" : 46,
    "endLineNumber" : 87,
    "endColumnNumber" : 47
  }, {
    "charLength" : 1,
    "startLineNumber" : 90,
    "startColumnNumber" : 40,
    "endLineNumber" : 90,
    "endColumnNumber" : 41
  }, {
    "charLength" : 1,
    "startLineNumber" : 95,
    "startColumnNumber" : 36,
    "endLineNumber" : 95,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}