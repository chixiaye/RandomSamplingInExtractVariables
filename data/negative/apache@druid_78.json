{
  "id" : 78,
  "expression" : "Collectors.toList()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/incremental/IncrementalIndexCreator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collectors.toList()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 90,
      "startColumnNumber" : 94,
      "endLineNumber" : 90,
      "endColumnNumber" : 113
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 90,
        "startColumnNumber" : 11,
        "endLineNumber" : 90,
        "endColumnNumber" : 114
      },
      "nodeContext" : "types.stream().map(NamedType::getName).filter(Objects::nonNull).distinct().collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 115
      },
      "nodeContext" : "return types.stream().map(NamedType::getName).filter(Objects::nonNull).distinct().collect(Collectors.toList());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  SubtypeResolver resolver=JSON_MAPPER.getSubtypeResolver();\n  MapperConfig<?> config=JSON_MAPPER.getDeserializationConfig();\n  AnnotatedClass cls=AnnotatedClassResolver.resolveWithoutSuperTypes(config,AppendableIndexSpec.class);\n  Collection<NamedType> types=resolver.collectAndResolveSubtypesByClass(config,cls);\n  return types.stream().map(NamedType::getName).filter(Objects::nonNull).distinct().collect(Collectors.toList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 831,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Fetch all the available incremental-index implementations. It can be used to parametrize the test. If more parameters are needed, use indexTypeCartesianProduct().\n * @see #indexTypeCartesianProduct(Collection[]).\n * @return a list of all the incremental-index implementations types (String)\n */\npublic static List<String> getAppendableIndexTypes(){\n  SubtypeResolver resolver=JSON_MAPPER.getSubtypeResolver();\n  MapperConfig<?> config=JSON_MAPPER.getDeserializationConfig();\n  AnnotatedClass cls=AnnotatedClassResolver.resolveWithoutSuperTypes(config,AppendableIndexSpec.class);\n  Collection<NamedType> types=resolver.collectAndResolveSubtypesByClass(config,cls);\n  return types.stream().map(NamedType::getName).filter(Objects::nonNull).distinct().collect(Collectors.toList());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 75,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 115
      },
      "nodeContext" : "return types.stream().map(NamedType::getName).filter(Objects::nonNull).distinct().collect(Collectors.toList());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.util.stream.Collector<java.lang.Object,,java.util.List<java.lang.Object>>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 90,
    "startColumnNumber" : 94,
    "endLineNumber" : 90,
    "endColumnNumber" : 113
  } ],
  "layoutRelationDataList" : [ ]
}