{
  "id" : 43,
  "expression" : "namespacesBelongToAppId",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/util/WatchKeysUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "namespacesBelongToAppId",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 55,
      "startColumnNumber" : 65,
      "endLineNumber" : 55,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 55,
        "startColumnNumber" : 37,
        "endLineNumber" : 55,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Sets.difference(namespaces,namespacesBelongToAppId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 55,
        "startColumnNumber" : 18,
        "endLineNumber" : 55,
        "endColumnNumber" : 89
      },
      "nodeContext" : "publicNamespaces=Sets.difference(namespaces,namespacesBelongToAppId)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Set<String> publicNamespaces=Sets.difference(namespaces,namespacesBelongToAppId);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 53,
        "startColumnNumber" : 94,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Set<String> namespacesBelongToAppId=namespacesBelongToAppId(appId,namespaces);\n  Set<String> publicNamespaces=Sets.difference(namespaces,namespacesBelongToAppId);\n  if (!publicNamespaces.isEmpty()) {\n    watchedKeysMap.putAll(findPublicConfigWatchKeys(appId,clusterName,publicNamespaces,dataCenter));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 508,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!(namespaces.size() == 1 && namespaces.contains(ConfigConsts.NAMESPACE_APPLICATION))) {\n  Set<String> namespacesBelongToAppId=namespacesBelongToAppId(appId,namespaces);\n  Set<String> publicNamespaces=Sets.difference(namespaces,namespacesBelongToAppId);\n  if (!publicNamespaces.isEmpty()) {\n    watchedKeysMap.putAll(findPublicConfigWatchKeys(appId,clusterName,publicNamespaces,dataCenter));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 711,
        "startLineNumber" : 48,
        "startColumnNumber" : 74,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Multimap<String,String> watchedKeysMap=assembleWatchKeys(appId,clusterName,namespaces,dataCenter);\n  if (!(namespaces.size() == 1 && namespaces.contains(ConfigConsts.NAMESPACE_APPLICATION))) {\n    Set<String> namespacesBelongToAppId=namespacesBelongToAppId(appId,namespaces);\n    Set<String> publicNamespaces=Sets.difference(namespaces,namespacesBelongToAppId);\n    if (!publicNamespaces.isEmpty()) {\n      watchedKeysMap.putAll(findPublicConfigWatchKeys(appId,clusterName,publicNamespaces,dataCenter));\n    }\n  }\n  return watchedKeysMap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1136,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Assemble watch keys for the given appId, cluster, namespaces, dataCenter combination\n * @return a multimap with namespace as the key and watch keys as the value\n */\npublic Multimap<String,String> assembleAllWatchKeys(String appId,String clusterName,Set<String> namespaces,String dataCenter){\n  Multimap<String,String> watchedKeysMap=assembleWatchKeys(appId,clusterName,namespaces,dataCenter);\n  if (!(namespaces.size() == 1 && namespaces.contains(ConfigConsts.NAMESPACE_APPLICATION))) {\n    Set<String> namespacesBelongToAppId=namespacesBelongToAppId(appId,namespaces);\n    Set<String> publicNamespaces=Sets.difference(namespaces,namespacesBelongToAppId);\n    if (!publicNamespaces.isEmpty()) {\n      watchedKeysMap.putAll(findPublicConfigWatchKeys(appId,clusterName,publicNamespaces,dataCenter));\n    }\n  }\n  return watchedKeysMap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 106,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Set<String> publicNamespaces=Sets.difference(namespaces,namespacesBelongToAppId);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 55,
    "startColumnNumber" : 65,
    "endLineNumber" : 55,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}