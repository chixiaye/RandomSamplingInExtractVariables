{
  "id" : 320,
  "expression" : "this",
  "projectName" : "Netflix@eureka",
  "commitID" : "295f257424f0952b17a6903940bbd4e2f2fced03",
  "filePath" : "eureka-core/src/main/java/com/netflix/eureka/RemoteRegionRegistry.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 74,
      "startColumnNumber" : 8,
      "endLineNumber" : 74,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 28
      },
      "nodeContext" : "this.remoteRegionURL",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.remoteRegionURL=remoteRegionURL",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 47
      },
      "nodeContext" : "this.remoteRegionURL=remoteRegionURL;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 47
      },
      "nodeContext" : "this.remoteRegionURL=remoteRegionURL;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.RemoteRegionRegistry"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 75,
      "startColumnNumber" : 8,
      "endLineNumber" : 75,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 31
      },
      "nodeContext" : "this.fetchRegistryTimer",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 52
      },
      "nodeContext" : "this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 53
      },
      "nodeContext" : "this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 31
      },
      "nodeContext" : "this.fetchRegistryTimer",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.RemoteRegionRegistry"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 75,
      "startColumnNumber" : 52,
      "endLineNumber" : 75,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 75,
        "endColumnNumber" : 72
      },
      "nodeContext" : "this.remoteRegionURL",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 76,
        "endColumnNumber" : 27
      },
      "nodeContext" : "this.remoteRegionURL.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 76,
        "endColumnNumber" : 51
      },
      "nodeContext" : "this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 75,
        "startColumnNumber" : 34,
        "endLineNumber" : 76,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 52
      },
      "nodeContext" : "this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 53
      },
      "nodeContext" : "this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 75,
        "startColumnNumber" : 52,
        "endLineNumber" : 75,
        "endColumnNumber" : 72
      },
      "nodeContext" : "this.remoteRegionURL",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.RemoteRegionRegistry"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 122,
      "startColumnNumber" : 16,
      "endLineNumber" : 122,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 122,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.readyForServingData",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 122,
        "endColumnNumber" : 47
      },
      "nodeContext" : "this.readyForServingData=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 122,
        "endColumnNumber" : 48
      },
      "nodeContext" : "this.readyForServingData=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 121,
        "startColumnNumber" : 33,
        "endLineNumber" : 123,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  this.readyForServingData=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (fetchRegistry()) {\n  this.readyForServingData=true;\n}\n else {\n  logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (fetchRegistry()) {\n    this.readyForServingData=true;\n  }\n else {\n    logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 396,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (fetchRegistry()) {\n    this.readyForServingData=true;\n  }\n else {\n    logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n  }\n}\n catch (Throwable e) {\n  logger.error(\"Problem fetching registry information :\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 122,
        "endColumnNumber" : 48
      },
      "nodeContext" : "this.readyForServingData=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.RemoteRegionRegistry"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 74,
    "startColumnNumber" : 8,
    "endLineNumber" : 74,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 75,
    "startColumnNumber" : 8,
    "endLineNumber" : 75,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 75,
    "startColumnNumber" : 52,
    "endLineNumber" : 75,
    "endColumnNumber" : 56
  }, {
    "charLength" : 4,
    "startLineNumber" : 122,
    "startColumnNumber" : 16,
    "endLineNumber" : 122,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  } ]
}