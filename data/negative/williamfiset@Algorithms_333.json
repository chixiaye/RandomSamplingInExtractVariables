{
  "id" : 333,
  "expression" : "Arrays",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "81d084f7eae21b9e01022004c8b5cac5729ec593",
  "filePath" : "com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Arrays",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 54,
      "startColumnNumber" : 4,
      "endLineNumber" : 54,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Arrays.fill(level,-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 27
      },
      "nodeContext" : "Arrays.fill(level,-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 53,
        "startColumnNumber" : 24,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(level,-1);\n  level[s]=0;\n  Deque<Integer> q=new ArrayDeque<>(n);\n  q.offer(s);\n  while (!q.isEmpty()) {\n    int node=q.poll();\n    for (    Edge edge : graph[node]) {\n      final long cap=edge.capacity - edge.flow;\n      if (cap > 0 && level[edge.to] == -1) {\n        level[edge.to]=level[node] + 1;\n        q.offer(edge.to);\n      }\n    }\n  }\n  return level[t] != -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean bfs(){\n  Arrays.fill(level,-1);\n  level[s]=0;\n  Deque<Integer> q=new ArrayDeque<>(n);\n  q.offer(s);\n  while (!q.isEmpty()) {\n    int node=q.poll();\n    for (    Edge edge : graph[node]) {\n      final long cap=edge.capacity - edge.flow;\n      if (cap > 0 && level[edge.to] == -1) {\n        level[edge.to]=level[node] + 1;\n        q.offer(edge.to);\n      }\n    }\n  }\n  return level[t] != -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 110,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 27
      },
      "nodeContext" : "Arrays.fill(level,-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Arrays"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 54,
    "startColumnNumber" : 4,
    "endLineNumber" : 54,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ ]
}