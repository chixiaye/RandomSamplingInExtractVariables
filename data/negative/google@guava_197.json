{
  "id" : 197,
  "expression" : "oldHead != Waiter.TOMBSTONE",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "oldHead != Waiter.TOMBSTONE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 446,
      "startColumnNumber" : 10,
      "endLineNumber" : 446,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 446,
        "startColumnNumber" : 6,
        "endLineNumber" : 477,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (oldHead != Waiter.TOMBSTONE) {\n  Waiter node=new Waiter();\n  do {\n    node.setNext(oldHead);\n    if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n      while (true) {\n        OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n        if (Thread.interrupted()) {\n          removeWaiter(node);\n          throw new InterruptedException();\n        }\n        localValue=value;\n        if (localValue != null & !(localValue instanceof SetFuture)) {\n          return getDoneValue(localValue);\n        }\n        remainingNanos=endNanos - System.nanoTime();\n        if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n          removeWaiter(node);\n          break long_wait_loop;\n        }\n      }\n    }\n    oldHead=waiters;\n  }\n while (oldHead != Waiter.TOMBSTONE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1650,
        "startLineNumber" : 444,
        "startColumnNumber" : 48,
        "endLineNumber" : 482,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Waiter oldHead=waiters;\n  if (oldHead != Waiter.TOMBSTONE) {\n    Waiter node=new Waiter();\n    do {\n      node.setNext(oldHead);\n      if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n        while (true) {\n          OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n          if (Thread.interrupted()) {\n            removeWaiter(node);\n            throw new InterruptedException();\n          }\n          localValue=value;\n          if (localValue != null & !(localValue instanceof SetFuture)) {\n            return getDoneValue(localValue);\n          }\n          remainingNanos=endNanos - System.nanoTime();\n          if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n            removeWaiter(node);\n            break long_wait_loop;\n          }\n        }\n      }\n      oldHead=waiters;\n    }\n while (oldHead != Waiter.TOMBSTONE);\n  }\n  return getDoneValue(requireNonNull(value));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 1694,
        "startLineNumber" : 444,
        "startColumnNumber" : 4,
        "endLineNumber" : 482,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n  Waiter oldHead=waiters;\n  if (oldHead != Waiter.TOMBSTONE) {\n    Waiter node=new Waiter();\n    do {\n      node.setNext(oldHead);\n      if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n        while (true) {\n          OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n          if (Thread.interrupted()) {\n            removeWaiter(node);\n            throw new InterruptedException();\n          }\n          localValue=value;\n          if (localValue != null & !(localValue instanceof SetFuture)) {\n            return getDoneValue(localValue);\n          }\n          remainingNanos=endNanos - System.nanoTime();\n          if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n            removeWaiter(node);\n            break long_wait_loop;\n          }\n        }\n      }\n      oldHead=waiters;\n    }\n while (oldHead != Waiter.TOMBSTONE);\n  }\n  return getDoneValue(requireNonNull(value));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1715,
        "startLineNumber" : 443,
        "startColumnNumber" : 4,
        "endLineNumber" : 482,
        "endColumnNumber" : 5
      },
      "nodeContext" : "long_wait_loop: if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n  Waiter oldHead=waiters;\n  if (oldHead != Waiter.TOMBSTONE) {\n    Waiter node=new Waiter();\n    do {\n      node.setNext(oldHead);\n      if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n        while (true) {\n          OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n          if (Thread.interrupted()) {\n            removeWaiter(node);\n            throw new InterruptedException();\n          }\n          localValue=value;\n          if (localValue != null & !(localValue instanceof SetFuture)) {\n            return getDoneValue(localValue);\n          }\n          remainingNanos=endNanos - System.nanoTime();\n          if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n            removeWaiter(node);\n            break long_wait_loop;\n          }\n        }\n      }\n      oldHead=waiters;\n    }\n while (oldHead != Waiter.TOMBSTONE);\n  }\n  return getDoneValue(requireNonNull(value));\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 119,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4426,
        "startLineNumber" : 429,
        "startColumnNumber" : 72,
        "endLineNumber" : 528,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final long timeoutNanos=unit.toNanos(timeout);\n  long remainingNanos=timeoutNanos;\n  if (Thread.interrupted()) {\n    throw new InterruptedException();\n  }\n  Object localValue=value;\n  if (localValue != null & !(localValue instanceof SetFuture)) {\n    return getDoneValue(localValue);\n  }\n  final long endNanos=remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n  long_wait_loop:   if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n    Waiter oldHead=waiters;\n    if (oldHead != Waiter.TOMBSTONE) {\n      Waiter node=new Waiter();\n      do {\n        node.setNext(oldHead);\n        if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n          while (true) {\n            OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n            if (Thread.interrupted()) {\n              removeWaiter(node);\n              throw new InterruptedException();\n            }\n            localValue=value;\n            if (localValue != null & !(localValue instanceof SetFuture)) {\n              return getDoneValue(localValue);\n            }\n            remainingNanos=endNanos - System.nanoTime();\n            if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n              removeWaiter(node);\n              break long_wait_loop;\n            }\n          }\n        }\n        oldHead=waiters;\n      }\n while (oldHead != Waiter.TOMBSTONE);\n    }\n    return getDoneValue(requireNonNull(value));\n  }\n  while (remainingNanos > 0) {\n    localValue=value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    remainingNanos=endNanos - System.nanoTime();\n  }\n  String futureToString=toString();\n  final String unitString=unit.toString().toLowerCase(Locale.ROOT);\n  String message=\"Waited \" + timeout + \" \"+ unit.toString().toLowerCase(Locale.ROOT);\n  if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n    message+=\" (plus \";\n    long overWaitNanos=-remainingNanos;\n    long overWaitUnits=unit.convert(overWaitNanos,TimeUnit.NANOSECONDS);\n    long overWaitLeftoverNanos=overWaitNanos - unit.toNanos(overWaitUnits);\n    boolean shouldShowExtraNanos=overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n    if (overWaitUnits > 0) {\n      message+=overWaitUnits + \" \" + unitString;\n      if (shouldShowExtraNanos) {\n        message+=\",\";\n      }\n      message+=\" \";\n    }\n    if (shouldShowExtraNanos) {\n      message+=overWaitLeftoverNanos + \" nanoseconds \";\n    }\n    message+=\"delay)\";\n  }\n  if (isDone()) {\n    throw new TimeoutException(message + \" but future completed as timeout expired\");\n  }\n  throw new TimeoutException(message + \" for \" + futureToString);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 364,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4893,
        "startLineNumber" : 417,
        "startColumnNumber" : 2,
        "endLineNumber" : 528,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * {@inheritDoc}<p>The default  {@link AbstractFuture} implementation throws {@code InterruptedException} if thecurrent thread is interrupted during the call, even if the value is already available.\n * @throws CancellationException {@inheritDoc}\n */\n@CanIgnoreReturnValue @Override @ParametricNullness public V get(long timeout,TimeUnit unit) throws InterruptedException, TimeoutException, ExecutionException {\n  final long timeoutNanos=unit.toNanos(timeout);\n  long remainingNanos=timeoutNanos;\n  if (Thread.interrupted()) {\n    throw new InterruptedException();\n  }\n  Object localValue=value;\n  if (localValue != null & !(localValue instanceof SetFuture)) {\n    return getDoneValue(localValue);\n  }\n  final long endNanos=remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n  long_wait_loop:   if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n    Waiter oldHead=waiters;\n    if (oldHead != Waiter.TOMBSTONE) {\n      Waiter node=new Waiter();\n      do {\n        node.setNext(oldHead);\n        if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n          while (true) {\n            OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n            if (Thread.interrupted()) {\n              removeWaiter(node);\n              throw new InterruptedException();\n            }\n            localValue=value;\n            if (localValue != null & !(localValue instanceof SetFuture)) {\n              return getDoneValue(localValue);\n            }\n            remainingNanos=endNanos - System.nanoTime();\n            if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n              removeWaiter(node);\n              break long_wait_loop;\n            }\n          }\n        }\n        oldHead=waiters;\n      }\n while (oldHead != Waiter.TOMBSTONE);\n    }\n    return getDoneValue(requireNonNull(value));\n  }\n  while (remainingNanos > 0) {\n    localValue=value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    remainingNanos=endNanos - System.nanoTime();\n  }\n  String futureToString=toString();\n  final String unitString=unit.toString().toLowerCase(Locale.ROOT);\n  String message=\"Waited \" + timeout + \" \"+ unit.toString().toLowerCase(Locale.ROOT);\n  if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n    message+=\" (plus \";\n    long overWaitNanos=-remainingNanos;\n    long overWaitUnits=unit.convert(overWaitNanos,TimeUnit.NANOSECONDS);\n    long overWaitLeftoverNanos=overWaitNanos - unit.toNanos(overWaitUnits);\n    boolean shouldShowExtraNanos=overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n    if (overWaitUnits > 0) {\n      message+=overWaitUnits + \" \" + unitString;\n      if (shouldShowExtraNanos) {\n        message+=\",\";\n      }\n      message+=\" \";\n    }\n    if (shouldShowExtraNanos) {\n      message+=overWaitLeftoverNanos + \" nanoseconds \";\n    }\n    message+=\"delay)\";\n  }\n  if (isDone()) {\n    throw new TimeoutException(message + \" but future completed as timeout expired\");\n  }\n  throw new TimeoutException(message + \" for \" + futureToString);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 446,
        "startColumnNumber" : 6,
        "endLineNumber" : 477,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (oldHead != Waiter.TOMBSTONE) {\n  Waiter node=new Waiter();\n  do {\n    node.setNext(oldHead);\n    if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n      while (true) {\n        OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n        if (Thread.interrupted()) {\n          removeWaiter(node);\n          throw new InterruptedException();\n        }\n        localValue=value;\n        if (localValue != null & !(localValue instanceof SetFuture)) {\n          return getDoneValue(localValue);\n        }\n        remainingNanos=endNanos - System.nanoTime();\n        if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n          removeWaiter(node);\n          break long_wait_loop;\n        }\n      }\n    }\n    oldHead=waiters;\n  }\n while (oldHead != Waiter.TOMBSTONE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 15
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "oldHead != Waiter.TOMBSTONE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 476,
      "startColumnNumber" : 17,
      "endLineNumber" : 476,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1262,
        "startLineNumber" : 448,
        "startColumnNumber" : 8,
        "endLineNumber" : 476,
        "endColumnNumber" : 46
      },
      "nodeContext" : "do {\n  node.setNext(oldHead);\n  if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n    while (true) {\n      OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n      if (Thread.interrupted()) {\n        removeWaiter(node);\n        throw new InterruptedException();\n      }\n      localValue=value;\n      if (localValue != null & !(localValue instanceof SetFuture)) {\n        return getDoneValue(localValue);\n      }\n      remainingNanos=endNanos - System.nanoTime();\n      if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n        removeWaiter(node);\n        break long_wait_loop;\n      }\n    }\n  }\n  oldHead=waiters;\n}\n while (oldHead != Waiter.TOMBSTONE);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 85,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1319,
        "startLineNumber" : 446,
        "startColumnNumber" : 39,
        "endLineNumber" : 477,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Waiter node=new Waiter();\n  do {\n    node.setNext(oldHead);\n    if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n      while (true) {\n        OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n        if (Thread.interrupted()) {\n          removeWaiter(node);\n          throw new InterruptedException();\n        }\n        localValue=value;\n        if (localValue != null & !(localValue instanceof SetFuture)) {\n          return getDoneValue(localValue);\n        }\n        remainingNanos=endNanos - System.nanoTime();\n        if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n          removeWaiter(node);\n          break long_wait_loop;\n        }\n      }\n    }\n    oldHead=waiters;\n  }\n while (oldHead != Waiter.TOMBSTONE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 446,
        "startColumnNumber" : 6,
        "endLineNumber" : 477,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (oldHead != Waiter.TOMBSTONE) {\n  Waiter node=new Waiter();\n  do {\n    node.setNext(oldHead);\n    if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n      while (true) {\n        OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n        if (Thread.interrupted()) {\n          removeWaiter(node);\n          throw new InterruptedException();\n        }\n        localValue=value;\n        if (localValue != null & !(localValue instanceof SetFuture)) {\n          return getDoneValue(localValue);\n        }\n        remainingNanos=endNanos - System.nanoTime();\n        if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n          removeWaiter(node);\n          break long_wait_loop;\n        }\n      }\n    }\n    oldHead=waiters;\n  }\n while (oldHead != Waiter.TOMBSTONE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1650,
        "startLineNumber" : 444,
        "startColumnNumber" : 48,
        "endLineNumber" : 482,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Waiter oldHead=waiters;\n  if (oldHead != Waiter.TOMBSTONE) {\n    Waiter node=new Waiter();\n    do {\n      node.setNext(oldHead);\n      if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n        while (true) {\n          OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n          if (Thread.interrupted()) {\n            removeWaiter(node);\n            throw new InterruptedException();\n          }\n          localValue=value;\n          if (localValue != null & !(localValue instanceof SetFuture)) {\n            return getDoneValue(localValue);\n          }\n          remainingNanos=endNanos - System.nanoTime();\n          if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n            removeWaiter(node);\n            break long_wait_loop;\n          }\n        }\n      }\n      oldHead=waiters;\n    }\n while (oldHead != Waiter.TOMBSTONE);\n  }\n  return getDoneValue(requireNonNull(value));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 1694,
        "startLineNumber" : 444,
        "startColumnNumber" : 4,
        "endLineNumber" : 482,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n  Waiter oldHead=waiters;\n  if (oldHead != Waiter.TOMBSTONE) {\n    Waiter node=new Waiter();\n    do {\n      node.setNext(oldHead);\n      if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n        while (true) {\n          OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n          if (Thread.interrupted()) {\n            removeWaiter(node);\n            throw new InterruptedException();\n          }\n          localValue=value;\n          if (localValue != null & !(localValue instanceof SetFuture)) {\n            return getDoneValue(localValue);\n          }\n          remainingNanos=endNanos - System.nanoTime();\n          if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n            removeWaiter(node);\n            break long_wait_loop;\n          }\n        }\n      }\n      oldHead=waiters;\n    }\n while (oldHead != Waiter.TOMBSTONE);\n  }\n  return getDoneValue(requireNonNull(value));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1715,
        "startLineNumber" : 443,
        "startColumnNumber" : 4,
        "endLineNumber" : 482,
        "endColumnNumber" : 5
      },
      "nodeContext" : "long_wait_loop: if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n  Waiter oldHead=waiters;\n  if (oldHead != Waiter.TOMBSTONE) {\n    Waiter node=new Waiter();\n    do {\n      node.setNext(oldHead);\n      if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n        while (true) {\n          OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n          if (Thread.interrupted()) {\n            removeWaiter(node);\n            throw new InterruptedException();\n          }\n          localValue=value;\n          if (localValue != null & !(localValue instanceof SetFuture)) {\n            return getDoneValue(localValue);\n          }\n          remainingNanos=endNanos - System.nanoTime();\n          if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n            removeWaiter(node);\n            break long_wait_loop;\n          }\n        }\n      }\n      oldHead=waiters;\n    }\n while (oldHead != Waiter.TOMBSTONE);\n  }\n  return getDoneValue(requireNonNull(value));\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 119,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4426,
        "startLineNumber" : 429,
        "startColumnNumber" : 72,
        "endLineNumber" : 528,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final long timeoutNanos=unit.toNanos(timeout);\n  long remainingNanos=timeoutNanos;\n  if (Thread.interrupted()) {\n    throw new InterruptedException();\n  }\n  Object localValue=value;\n  if (localValue != null & !(localValue instanceof SetFuture)) {\n    return getDoneValue(localValue);\n  }\n  final long endNanos=remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n  long_wait_loop:   if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n    Waiter oldHead=waiters;\n    if (oldHead != Waiter.TOMBSTONE) {\n      Waiter node=new Waiter();\n      do {\n        node.setNext(oldHead);\n        if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n          while (true) {\n            OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n            if (Thread.interrupted()) {\n              removeWaiter(node);\n              throw new InterruptedException();\n            }\n            localValue=value;\n            if (localValue != null & !(localValue instanceof SetFuture)) {\n              return getDoneValue(localValue);\n            }\n            remainingNanos=endNanos - System.nanoTime();\n            if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n              removeWaiter(node);\n              break long_wait_loop;\n            }\n          }\n        }\n        oldHead=waiters;\n      }\n while (oldHead != Waiter.TOMBSTONE);\n    }\n    return getDoneValue(requireNonNull(value));\n  }\n  while (remainingNanos > 0) {\n    localValue=value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    remainingNanos=endNanos - System.nanoTime();\n  }\n  String futureToString=toString();\n  final String unitString=unit.toString().toLowerCase(Locale.ROOT);\n  String message=\"Waited \" + timeout + \" \"+ unit.toString().toLowerCase(Locale.ROOT);\n  if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n    message+=\" (plus \";\n    long overWaitNanos=-remainingNanos;\n    long overWaitUnits=unit.convert(overWaitNanos,TimeUnit.NANOSECONDS);\n    long overWaitLeftoverNanos=overWaitNanos - unit.toNanos(overWaitUnits);\n    boolean shouldShowExtraNanos=overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n    if (overWaitUnits > 0) {\n      message+=overWaitUnits + \" \" + unitString;\n      if (shouldShowExtraNanos) {\n        message+=\",\";\n      }\n      message+=\" \";\n    }\n    if (shouldShowExtraNanos) {\n      message+=overWaitLeftoverNanos + \" nanoseconds \";\n    }\n    message+=\"delay)\";\n  }\n  if (isDone()) {\n    throw new TimeoutException(message + \" but future completed as timeout expired\");\n  }\n  throw new TimeoutException(message + \" for \" + futureToString);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 364,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4893,
        "startLineNumber" : 417,
        "startColumnNumber" : 2,
        "endLineNumber" : 528,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * {@inheritDoc}<p>The default  {@link AbstractFuture} implementation throws {@code InterruptedException} if thecurrent thread is interrupted during the call, even if the value is already available.\n * @throws CancellationException {@inheritDoc}\n */\n@CanIgnoreReturnValue @Override @ParametricNullness public V get(long timeout,TimeUnit unit) throws InterruptedException, TimeoutException, ExecutionException {\n  final long timeoutNanos=unit.toNanos(timeout);\n  long remainingNanos=timeoutNanos;\n  if (Thread.interrupted()) {\n    throw new InterruptedException();\n  }\n  Object localValue=value;\n  if (localValue != null & !(localValue instanceof SetFuture)) {\n    return getDoneValue(localValue);\n  }\n  final long endNanos=remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n  long_wait_loop:   if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n    Waiter oldHead=waiters;\n    if (oldHead != Waiter.TOMBSTONE) {\n      Waiter node=new Waiter();\n      do {\n        node.setNext(oldHead);\n        if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n          while (true) {\n            OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n            if (Thread.interrupted()) {\n              removeWaiter(node);\n              throw new InterruptedException();\n            }\n            localValue=value;\n            if (localValue != null & !(localValue instanceof SetFuture)) {\n              return getDoneValue(localValue);\n            }\n            remainingNanos=endNanos - System.nanoTime();\n            if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n              removeWaiter(node);\n              break long_wait_loop;\n            }\n          }\n        }\n        oldHead=waiters;\n      }\n while (oldHead != Waiter.TOMBSTONE);\n    }\n    return getDoneValue(requireNonNull(value));\n  }\n  while (remainingNanos > 0) {\n    localValue=value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    remainingNanos=endNanos - System.nanoTime();\n  }\n  String futureToString=toString();\n  final String unitString=unit.toString().toLowerCase(Locale.ROOT);\n  String message=\"Waited \" + timeout + \" \"+ unit.toString().toLowerCase(Locale.ROOT);\n  if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n    message+=\" (plus \";\n    long overWaitNanos=-remainingNanos;\n    long overWaitUnits=unit.convert(overWaitNanos,TimeUnit.NANOSECONDS);\n    long overWaitLeftoverNanos=overWaitNanos - unit.toNanos(overWaitUnits);\n    boolean shouldShowExtraNanos=overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n    if (overWaitUnits > 0) {\n      message+=overWaitUnits + \" \" + unitString;\n      if (shouldShowExtraNanos) {\n        message+=\",\";\n      }\n      message+=\" \";\n    }\n    if (shouldShowExtraNanos) {\n      message+=overWaitLeftoverNanos + \" nanoseconds \";\n    }\n    message+=\"delay)\";\n  }\n  if (isDone()) {\n    throw new TimeoutException(message + \" but future completed as timeout expired\");\n  }\n  throw new TimeoutException(message + \" for \" + futureToString);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1262,
        "startLineNumber" : 448,
        "startColumnNumber" : 8,
        "endLineNumber" : 476,
        "endColumnNumber" : 46
      },
      "nodeContext" : "do {\n  node.setNext(oldHead);\n  if (ATOMIC_HELPER.casWaiters(this,oldHead,node)) {\n    while (true) {\n      OverflowAvoidingLockSupport.parkNanos(this,remainingNanos);\n      if (Thread.interrupted()) {\n        removeWaiter(node);\n        throw new InterruptedException();\n      }\n      localValue=value;\n      if (localValue != null & !(localValue instanceof SetFuture)) {\n        return getDoneValue(localValue);\n      }\n      remainingNanos=endNanos - System.nanoTime();\n      if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n        removeWaiter(node);\n        break long_wait_loop;\n      }\n    }\n  }\n  oldHead=waiters;\n}\n while (oldHead != Waiter.TOMBSTONE);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 85,
      "astHeight" : 13
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 446,
    "startColumnNumber" : 10,
    "endLineNumber" : 446,
    "endColumnNumber" : 37
  }, {
    "charLength" : 27,
    "startLineNumber" : 476,
    "startColumnNumber" : 17,
    "endLineNumber" : 476,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}