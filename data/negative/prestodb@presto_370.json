{
  "id" : 370,
  "expression" : "2",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/metadata/OperatorNotFoundException.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 57,
      "startColumnNumber" : 135,
      "endLineNumber" : 57,
      "endColumnNumber" : 136
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 57,
        "startColumnNumber" : 117,
        "endLineNumber" : 57,
        "endColumnNumber" : 137
      },
      "nodeContext" : "argumentTypes.get(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 57,
        "startColumnNumber" : 23,
        "endLineNumber" : 57,
        "endColumnNumber" : 138
      },
      "nodeContext" : "format(\"Cannot check if %s is BETWEEN %s and %s\",argumentTypes.get(0),argumentTypes.get(1),argumentTypes.get(2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 139
      },
      "nodeContext" : "return format(\"Cannot check if %s is BETWEEN %s and %s\",argumentTypes.get(0),argumentTypes.get(1),argumentTypes.get(2));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 523,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (operatorType) {\ncase BETWEEN:  return format(\"Cannot check if %s is BETWEEN %s and %s\",argumentTypes.get(0),argumentTypes.get(1),argumentTypes.get(2));\ncase CAST:operatorString=format(\"%s%s\",operatorType.getOperator(),returnType.map(value -> \" to \" + value).orElse(\"\"));\nbreak;\ndefault:operatorString=format(\"'%s'%s\",operatorType.getOperator(),returnType.map(value -> \":\" + value).orElse(\"\"));\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 676,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String operatorString;\nswitch (operatorType) {\ncase BETWEEN:    return format(\"Cannot check if %s is BETWEEN %s and %s\",argumentTypes.get(0),argumentTypes.get(1),argumentTypes.get(2));\ncase CAST:  operatorString=format(\"%s%s\",operatorType.getOperator(),returnType.map(value -> \" to \" + value).orElse(\"\"));\nbreak;\ndefault:operatorString=format(\"'%s'%s\",operatorType.getOperator(),returnType.map(value -> \":\" + value).orElse(\"\"));\n}\nreturn format(\"%s cannot be applied to %s\",operatorString,Joiner.on(\", \").join(argumentTypes));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 819,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static String formatErrorMessage(OperatorType operatorType,List<TypeSignature> argumentTypes,Optional<TypeSignature> returnType){\n  String operatorString;\nswitch (operatorType) {\ncase BETWEEN:    return format(\"Cannot check if %s is BETWEEN %s and %s\",argumentTypes.get(0),argumentTypes.get(1),argumentTypes.get(2));\ncase CAST:  operatorString=format(\"%s%s\",operatorType.getOperator(),returnType.map(value -> \" to \" + value).orElse(\"\"));\nbreak;\ndefault:operatorString=format(\"'%s'%s\",operatorType.getOperator(),returnType.map(value -> \":\" + value).orElse(\"\"));\n}\nreturn format(\"%s cannot be applied to %s\",operatorString,Joiner.on(\", \").join(argumentTypes));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 139
      },
      "nodeContext" : "return format(\"Cannot check if %s is BETWEEN %s and %s\",argumentTypes.get(0),argumentTypes.get(1),argumentTypes.get(2));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 57,
    "startColumnNumber" : 135,
    "endLineNumber" : 57,
    "endColumnNumber" : 136
  } ],
  "layoutRelationDataList" : [ ]
}