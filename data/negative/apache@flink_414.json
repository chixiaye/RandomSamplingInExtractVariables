{
  "id" : 414,
  "expression" : "expectedOutput",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-python/src/test/java/org/apache/flink/table/runtime/operators/python/aggregate/arrow/batch/BatchArrowPythonGroupWindowAggregateFunctionOperatorTest.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expectedOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 79,
      "startColumnNumber" : 8,
      "endLineNumber" : 79,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 71
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3044,
        "startLineNumber" : 60,
        "startColumnNumber" : 62,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGroupAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 71
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ConcurrentLinkedQueue<java.lang.Object>"
  }, {
    "nodeContext" : "expectedOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 87,
      "startColumnNumber" : 8,
      "endLineNumber" : 87,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 73
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3044,
        "startLineNumber" : 60,
        "startColumnNumber" : 62,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGroupAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ConcurrentLinkedQueue<java.lang.Object>"
  }, {
    "nodeContext" : "expectedOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 95,
      "startColumnNumber" : 8,
      "endLineNumber" : 95,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 73
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3044,
        "startLineNumber" : 60,
        "startColumnNumber" : 62,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGroupAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ConcurrentLinkedQueue<java.lang.Object>"
  }, {
    "nodeContext" : "expectedOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 103,
      "startColumnNumber" : 8,
      "endLineNumber" : 103,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 73
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3044,
        "startLineNumber" : 60,
        "startColumnNumber" : 62,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGroupAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ConcurrentLinkedQueue<java.lang.Object>"
  }, {
    "nodeContext" : "expectedOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 112,
      "startColumnNumber" : 8,
      "endLineNumber" : 112,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 71
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3044,
        "startLineNumber" : 60,
        "startColumnNumber" : 62,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGroupAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 71
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ConcurrentLinkedQueue<java.lang.Object>"
  }, {
    "nodeContext" : "expectedOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 120,
      "startColumnNumber" : 8,
      "endLineNumber" : 120,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 73
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3044,
        "startLineNumber" : 60,
        "startColumnNumber" : 62,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGroupAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ConcurrentLinkedQueue<java.lang.Object>"
  }, {
    "nodeContext" : "expectedOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 129,
      "startColumnNumber" : 54,
      "endLineNumber" : 129,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 94
      },
      "nodeContext" : "assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 95
      },
      "nodeContext" : "assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3044,
        "startLineNumber" : 60,
        "startColumnNumber" : 62,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGroupAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,0L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,6000L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10000L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,0L),initialTime + 3));\n  testHarness.close();\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",0L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",1L,TimestampData.fromEpochMillis(5000L),TimestampData.fromEpochMillis(15000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",2L,TimestampData.fromEpochMillis(10000L),TimestampData.fromEpochMillis(20000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(-5000L),TimestampData.fromEpochMillis(5000L))));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",3L,TimestampData.fromEpochMillis(0L),TimestampData.fromEpochMillis(10000L))));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 95
      },
      "nodeContext" : "assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ConcurrentLinkedQueue<java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 79,
    "startColumnNumber" : 8,
    "endLineNumber" : 79,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 87,
    "startColumnNumber" : 8,
    "endLineNumber" : 87,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 95,
    "startColumnNumber" : 8,
    "endLineNumber" : 95,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 103,
    "startColumnNumber" : 8,
    "endLineNumber" : 103,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 112,
    "startColumnNumber" : 8,
    "endLineNumber" : 112,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 120,
    "startColumnNumber" : 8,
    "endLineNumber" : 120,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 129,
    "startColumnNumber" : 54,
    "endLineNumber" : 129,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  } ]
}