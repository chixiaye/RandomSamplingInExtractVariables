{
  "id" : 253,
  "expression" : "clusterInfo",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/tools/src/test/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clusterInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 145,
      "startColumnNumber" : 8,
      "endLineNumber" : 145,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 55
      },
      "nodeContext" : "clusterInfo.setBrokerAddrTable(brokerAddrTable)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 56
      },
      "nodeContext" : "clusterInfo.setBrokerAddrTable(brokerAddrTable);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7609,
        "startLineNumber" : 97,
        "startColumnNumber" : 47,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mQClientAPIImpl=mock(MQClientAPIImpl.class);\n  defaultMQAdminExt=new DefaultMQAdminExt();\n  defaultMQAdminExtImpl=new DefaultMQAdminExtImpl(defaultMQAdminExt,1000);\n  Field field=DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExtImpl,mqClientInstance);\n  field=MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n  field.setAccessible(true);\n  field.set(mqClientInstance,mQClientAPIImpl);\n  field=DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExt,defaultMQAdminExtImpl);\n  properties.setProperty(\"maxMessageSize\",\"5000000\");\n  properties.setProperty(\"flushDelayOffsetInterval\",\"15000\");\n  properties.setProperty(\"serverSocketRcvBufSize\",\"655350\");\n  when(mQClientAPIImpl.getBrokerConfig(anyString(),anyLong())).thenReturn(properties);\n  Set<String> topicSet=new HashSet<>();\n  topicSet.add(\"topic_one\");\n  topicSet.add(\"topic_two\");\n  topicList.setTopicList(topicSet);\n  when(mQClientAPIImpl.getTopicListFromNameServer(anyLong())).thenReturn(topicList);\n  List<BrokerData> brokerDatas=new ArrayList<>();\n  HashMap<Long,String> brokerAddrs=new HashMap<>();\n  brokerAddrs.put(1234l,\"127.0.0.1:10911\");\n  BrokerData brokerData=new BrokerData();\n  brokerData.setCluster(\"default-cluster\");\n  brokerData.setBrokerName(\"default-broker\");\n  brokerData.setBrokerAddrs(brokerAddrs);\n  brokerDatas.add(brokerData);\n  topicRouteData.setBrokerDatas(brokerDatas);\n  topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n  topicRouteData.setFilterServerTable(new HashMap<String,List<String>>());\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  HashMap<String,String> result=new HashMap<>();\n  result.put(\"id\",\"1234\");\n  result.put(\"brokerName\",\"default-broker\");\n  kvTable.setTable(result);\n  when(mQClientAPIImpl.getBrokerRuntimeInfo(anyString(),anyLong())).thenReturn(kvTable);\n  HashMap<String,BrokerData> brokerAddrTable=new HashMap<>();\n  brokerAddrTable.put(\"default-broker\",brokerData);\n  brokerAddrTable.put(\"broker-test\",new BrokerData());\n  clusterInfo.setBrokerAddrTable(brokerAddrTable);\n  clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>());\n  when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n  when(mQClientAPIImpl.cleanExpiredConsumeQueue(anyString(),anyLong())).thenReturn(true);\n  Set<String> clusterList=new HashSet<>();\n  clusterList.add(\"default-cluster-one\");\n  clusterList.add(\"default-cluster-two\");\n  when(mQClientAPIImpl.getClusterList(anyString(),anyLong())).thenReturn(clusterList);\n  GroupList groupList=new GroupList();\n  HashSet<String> groups=new HashSet<>();\n  groups.add(\"consumer-group-one\");\n  groups.add(\"consumer-group-two\");\n  groupList.setGroupList(groups);\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  when(mQClientAPIImpl.queryTopicConsumeByWho(anyString(),anyString(),anyLong())).thenReturn(groupList);\n  SubscriptionGroupWrapper subscriptionGroupWrapper=new SubscriptionGroupWrapper();\n  ConcurrentHashMap<String,SubscriptionGroupConfig> subscriptions=new ConcurrentHashMap<>();\n  SubscriptionGroupConfig subscriptionGroupConfig=new SubscriptionGroupConfig();\n  subscriptionGroupConfig.setConsumeBroadcastEnable(true);\n  subscriptionGroupConfig.setBrokerId(1234);\n  subscriptionGroupConfig.setGroupName(\"Consumer-group-one\");\n  subscriptions.put(\"Consumer-group-one\",subscriptionGroupConfig);\n  subscriptionGroupWrapper.setSubscriptionGroupTable(subscriptions);\n  when(mQClientAPIImpl.getAllSubscriptionGroup(anyString(),anyLong())).thenReturn(subscriptionGroupWrapper);\n  String topicListConfig=\"topicListConfig\";\n  when(mQClientAPIImpl.getKVConfigValue(anyString(),anyString(),anyLong())).thenReturn(topicListConfig);\n  KVTable kvTable=new KVTable();\n  HashMap<String,String> kv=new HashMap<>();\n  kv.put(\"broker-name\",\"broker-one\");\n  kv.put(\"cluster-name\",\"default-cluster\");\n  kvTable.setTable(kv);\n  when(mQClientAPIImpl.getKVListByNamespace(anyString(),anyLong())).thenReturn(kvTable);\n  ConsumeStats consumeStats=new ConsumeStats();\n  consumeStats.setConsumeTps(1234);\n  MessageQueue messageQueue=new MessageQueue();\n  OffsetWrapper offsetWrapper=new OffsetWrapper();\n  HashMap<MessageQueue,OffsetWrapper> stats=new HashMap<>();\n  stats.put(messageQueue,offsetWrapper);\n  consumeStats.setOffsetTable(stats);\n  when(mQClientAPIImpl.getConsumeStats(anyString(),anyString(),anyString(),anyLong())).thenReturn(consumeStats);\n  ConsumerConnection consumerConnection=new ConsumerConnection();\n  consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n  consumerConnection.setMessageModel(MessageModel.CLUSTERING);\n  HashSet<Connection> connections=new HashSet<>();\n  connections.add(new Connection());\n  consumerConnection.setConnectionSet(connections);\n  consumerConnection.setSubscriptionTable(new ConcurrentHashMap<String,SubscriptionData>());\n  consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n  when(mQClientAPIImpl.getConsumerConnectionList(anyString(),anyString(),anyLong())).thenReturn(consumerConnection);\n  ProducerConnection producerConnection=new ProducerConnection();\n  Connection connection=new Connection();\n  connection.setClientAddr(\"127.0.0.1:9898\");\n  connection.setClientId(\"PID_12345\");\n  HashSet<Connection> connectionSet=new HashSet<Connection>();\n  connectionSet.add(connection);\n  producerConnection.setConnectionSet(connectionSet);\n  when(mQClientAPIImpl.getProducerConnectionList(anyString(),anyString(),anyLong())).thenReturn(producerConnection);\n  when(mQClientAPIImpl.wipeWritePermOfBroker(anyString(),anyString(),anyLong())).thenReturn(6);\n  TopicStatsTable topicStatsTable=new TopicStatsTable();\n  topicStatsTable.setOffsetTable(new HashMap<MessageQueue,TopicOffset>());\n  Map<String,Map<MessageQueue,Long>> consumerStatus=new HashMap<>();\n  when(mQClientAPIImpl.invokeBrokerToGetConsumerStatus(anyString(),anyString(),anyString(),anyString(),anyLong())).thenReturn(consumerStatus);\n  List<QueueTimeSpan> queueTimeSpanList=new ArrayList<>();\n  when(mQClientAPIImpl.queryConsumeTimeSpan(anyString(),anyString(),anyString(),anyLong())).thenReturn(queueTimeSpanList);\n  ConsumerRunningInfo consumerRunningInfo=new ConsumerRunningInfo();\n  consumerRunningInfo.setJstack(\"test\");\n  consumerRunningInfo.setMqTable(new TreeMap<MessageQueue,ProcessQueueInfo>());\n  consumerRunningInfo.setStatusTable(new TreeMap<String,ConsumeStatus>());\n  consumerRunningInfo.setSubscriptionSet(new TreeSet<SubscriptionData>());\n  when(mQClientAPIImpl.getConsumerRunningInfo(anyString(),anyString(),anyString(),anyBoolean(),anyLong())).thenReturn(consumerRunningInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 997,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7669,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BeforeClass public static void init() throws Exception {\n  mQClientAPIImpl=mock(MQClientAPIImpl.class);\n  defaultMQAdminExt=new DefaultMQAdminExt();\n  defaultMQAdminExtImpl=new DefaultMQAdminExtImpl(defaultMQAdminExt,1000);\n  Field field=DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExtImpl,mqClientInstance);\n  field=MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n  field.setAccessible(true);\n  field.set(mqClientInstance,mQClientAPIImpl);\n  field=DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExt,defaultMQAdminExtImpl);\n  properties.setProperty(\"maxMessageSize\",\"5000000\");\n  properties.setProperty(\"flushDelayOffsetInterval\",\"15000\");\n  properties.setProperty(\"serverSocketRcvBufSize\",\"655350\");\n  when(mQClientAPIImpl.getBrokerConfig(anyString(),anyLong())).thenReturn(properties);\n  Set<String> topicSet=new HashSet<>();\n  topicSet.add(\"topic_one\");\n  topicSet.add(\"topic_two\");\n  topicList.setTopicList(topicSet);\n  when(mQClientAPIImpl.getTopicListFromNameServer(anyLong())).thenReturn(topicList);\n  List<BrokerData> brokerDatas=new ArrayList<>();\n  HashMap<Long,String> brokerAddrs=new HashMap<>();\n  brokerAddrs.put(1234l,\"127.0.0.1:10911\");\n  BrokerData brokerData=new BrokerData();\n  brokerData.setCluster(\"default-cluster\");\n  brokerData.setBrokerName(\"default-broker\");\n  brokerData.setBrokerAddrs(brokerAddrs);\n  brokerDatas.add(brokerData);\n  topicRouteData.setBrokerDatas(brokerDatas);\n  topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n  topicRouteData.setFilterServerTable(new HashMap<String,List<String>>());\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  HashMap<String,String> result=new HashMap<>();\n  result.put(\"id\",\"1234\");\n  result.put(\"brokerName\",\"default-broker\");\n  kvTable.setTable(result);\n  when(mQClientAPIImpl.getBrokerRuntimeInfo(anyString(),anyLong())).thenReturn(kvTable);\n  HashMap<String,BrokerData> brokerAddrTable=new HashMap<>();\n  brokerAddrTable.put(\"default-broker\",brokerData);\n  brokerAddrTable.put(\"broker-test\",new BrokerData());\n  clusterInfo.setBrokerAddrTable(brokerAddrTable);\n  clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>());\n  when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n  when(mQClientAPIImpl.cleanExpiredConsumeQueue(anyString(),anyLong())).thenReturn(true);\n  Set<String> clusterList=new HashSet<>();\n  clusterList.add(\"default-cluster-one\");\n  clusterList.add(\"default-cluster-two\");\n  when(mQClientAPIImpl.getClusterList(anyString(),anyLong())).thenReturn(clusterList);\n  GroupList groupList=new GroupList();\n  HashSet<String> groups=new HashSet<>();\n  groups.add(\"consumer-group-one\");\n  groups.add(\"consumer-group-two\");\n  groupList.setGroupList(groups);\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  when(mQClientAPIImpl.queryTopicConsumeByWho(anyString(),anyString(),anyLong())).thenReturn(groupList);\n  SubscriptionGroupWrapper subscriptionGroupWrapper=new SubscriptionGroupWrapper();\n  ConcurrentHashMap<String,SubscriptionGroupConfig> subscriptions=new ConcurrentHashMap<>();\n  SubscriptionGroupConfig subscriptionGroupConfig=new SubscriptionGroupConfig();\n  subscriptionGroupConfig.setConsumeBroadcastEnable(true);\n  subscriptionGroupConfig.setBrokerId(1234);\n  subscriptionGroupConfig.setGroupName(\"Consumer-group-one\");\n  subscriptions.put(\"Consumer-group-one\",subscriptionGroupConfig);\n  subscriptionGroupWrapper.setSubscriptionGroupTable(subscriptions);\n  when(mQClientAPIImpl.getAllSubscriptionGroup(anyString(),anyLong())).thenReturn(subscriptionGroupWrapper);\n  String topicListConfig=\"topicListConfig\";\n  when(mQClientAPIImpl.getKVConfigValue(anyString(),anyString(),anyLong())).thenReturn(topicListConfig);\n  KVTable kvTable=new KVTable();\n  HashMap<String,String> kv=new HashMap<>();\n  kv.put(\"broker-name\",\"broker-one\");\n  kv.put(\"cluster-name\",\"default-cluster\");\n  kvTable.setTable(kv);\n  when(mQClientAPIImpl.getKVListByNamespace(anyString(),anyLong())).thenReturn(kvTable);\n  ConsumeStats consumeStats=new ConsumeStats();\n  consumeStats.setConsumeTps(1234);\n  MessageQueue messageQueue=new MessageQueue();\n  OffsetWrapper offsetWrapper=new OffsetWrapper();\n  HashMap<MessageQueue,OffsetWrapper> stats=new HashMap<>();\n  stats.put(messageQueue,offsetWrapper);\n  consumeStats.setOffsetTable(stats);\n  when(mQClientAPIImpl.getConsumeStats(anyString(),anyString(),anyString(),anyLong())).thenReturn(consumeStats);\n  ConsumerConnection consumerConnection=new ConsumerConnection();\n  consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n  consumerConnection.setMessageModel(MessageModel.CLUSTERING);\n  HashSet<Connection> connections=new HashSet<>();\n  connections.add(new Connection());\n  consumerConnection.setConnectionSet(connections);\n  consumerConnection.setSubscriptionTable(new ConcurrentHashMap<String,SubscriptionData>());\n  consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n  when(mQClientAPIImpl.getConsumerConnectionList(anyString(),anyString(),anyLong())).thenReturn(consumerConnection);\n  ProducerConnection producerConnection=new ProducerConnection();\n  Connection connection=new Connection();\n  connection.setClientAddr(\"127.0.0.1:9898\");\n  connection.setClientId(\"PID_12345\");\n  HashSet<Connection> connectionSet=new HashSet<Connection>();\n  connectionSet.add(connection);\n  producerConnection.setConnectionSet(connectionSet);\n  when(mQClientAPIImpl.getProducerConnectionList(anyString(),anyString(),anyLong())).thenReturn(producerConnection);\n  when(mQClientAPIImpl.wipeWritePermOfBroker(anyString(),anyString(),anyLong())).thenReturn(6);\n  TopicStatsTable topicStatsTable=new TopicStatsTable();\n  topicStatsTable.setOffsetTable(new HashMap<MessageQueue,TopicOffset>());\n  Map<String,Map<MessageQueue,Long>> consumerStatus=new HashMap<>();\n  when(mQClientAPIImpl.invokeBrokerToGetConsumerStatus(anyString(),anyString(),anyString(),anyString(),anyLong())).thenReturn(consumerStatus);\n  List<QueueTimeSpan> queueTimeSpanList=new ArrayList<>();\n  when(mQClientAPIImpl.queryConsumeTimeSpan(anyString(),anyString(),anyString(),anyLong())).thenReturn(queueTimeSpanList);\n  ConsumerRunningInfo consumerRunningInfo=new ConsumerRunningInfo();\n  consumerRunningInfo.setJstack(\"test\");\n  consumerRunningInfo.setMqTable(new TreeMap<MessageQueue,ProcessQueueInfo>());\n  consumerRunningInfo.setStatusTable(new TreeMap<String,ConsumeStatus>());\n  consumerRunningInfo.setSubscriptionSet(new TreeSet<SubscriptionData>());\n  when(mQClientAPIImpl.getConsumerRunningInfo(anyString(),anyString(),anyString(),anyBoolean(),anyLong())).thenReturn(consumerRunningInfo);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1006,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 56
      },
      "nodeContext" : "clusterInfo.setBrokerAddrTable(brokerAddrTable);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.common.protocol.body.ClusterInfo"
  }, {
    "nodeContext" : "clusterInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 146,
      "startColumnNumber" : 8,
      "endLineNumber" : 146,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 75
      },
      "nodeContext" : "clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 76
      },
      "nodeContext" : "clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7609,
        "startLineNumber" : 97,
        "startColumnNumber" : 47,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mQClientAPIImpl=mock(MQClientAPIImpl.class);\n  defaultMQAdminExt=new DefaultMQAdminExt();\n  defaultMQAdminExtImpl=new DefaultMQAdminExtImpl(defaultMQAdminExt,1000);\n  Field field=DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExtImpl,mqClientInstance);\n  field=MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n  field.setAccessible(true);\n  field.set(mqClientInstance,mQClientAPIImpl);\n  field=DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExt,defaultMQAdminExtImpl);\n  properties.setProperty(\"maxMessageSize\",\"5000000\");\n  properties.setProperty(\"flushDelayOffsetInterval\",\"15000\");\n  properties.setProperty(\"serverSocketRcvBufSize\",\"655350\");\n  when(mQClientAPIImpl.getBrokerConfig(anyString(),anyLong())).thenReturn(properties);\n  Set<String> topicSet=new HashSet<>();\n  topicSet.add(\"topic_one\");\n  topicSet.add(\"topic_two\");\n  topicList.setTopicList(topicSet);\n  when(mQClientAPIImpl.getTopicListFromNameServer(anyLong())).thenReturn(topicList);\n  List<BrokerData> brokerDatas=new ArrayList<>();\n  HashMap<Long,String> brokerAddrs=new HashMap<>();\n  brokerAddrs.put(1234l,\"127.0.0.1:10911\");\n  BrokerData brokerData=new BrokerData();\n  brokerData.setCluster(\"default-cluster\");\n  brokerData.setBrokerName(\"default-broker\");\n  brokerData.setBrokerAddrs(brokerAddrs);\n  brokerDatas.add(brokerData);\n  topicRouteData.setBrokerDatas(brokerDatas);\n  topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n  topicRouteData.setFilterServerTable(new HashMap<String,List<String>>());\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  HashMap<String,String> result=new HashMap<>();\n  result.put(\"id\",\"1234\");\n  result.put(\"brokerName\",\"default-broker\");\n  kvTable.setTable(result);\n  when(mQClientAPIImpl.getBrokerRuntimeInfo(anyString(),anyLong())).thenReturn(kvTable);\n  HashMap<String,BrokerData> brokerAddrTable=new HashMap<>();\n  brokerAddrTable.put(\"default-broker\",brokerData);\n  brokerAddrTable.put(\"broker-test\",new BrokerData());\n  clusterInfo.setBrokerAddrTable(brokerAddrTable);\n  clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>());\n  when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n  when(mQClientAPIImpl.cleanExpiredConsumeQueue(anyString(),anyLong())).thenReturn(true);\n  Set<String> clusterList=new HashSet<>();\n  clusterList.add(\"default-cluster-one\");\n  clusterList.add(\"default-cluster-two\");\n  when(mQClientAPIImpl.getClusterList(anyString(),anyLong())).thenReturn(clusterList);\n  GroupList groupList=new GroupList();\n  HashSet<String> groups=new HashSet<>();\n  groups.add(\"consumer-group-one\");\n  groups.add(\"consumer-group-two\");\n  groupList.setGroupList(groups);\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  when(mQClientAPIImpl.queryTopicConsumeByWho(anyString(),anyString(),anyLong())).thenReturn(groupList);\n  SubscriptionGroupWrapper subscriptionGroupWrapper=new SubscriptionGroupWrapper();\n  ConcurrentHashMap<String,SubscriptionGroupConfig> subscriptions=new ConcurrentHashMap<>();\n  SubscriptionGroupConfig subscriptionGroupConfig=new SubscriptionGroupConfig();\n  subscriptionGroupConfig.setConsumeBroadcastEnable(true);\n  subscriptionGroupConfig.setBrokerId(1234);\n  subscriptionGroupConfig.setGroupName(\"Consumer-group-one\");\n  subscriptions.put(\"Consumer-group-one\",subscriptionGroupConfig);\n  subscriptionGroupWrapper.setSubscriptionGroupTable(subscriptions);\n  when(mQClientAPIImpl.getAllSubscriptionGroup(anyString(),anyLong())).thenReturn(subscriptionGroupWrapper);\n  String topicListConfig=\"topicListConfig\";\n  when(mQClientAPIImpl.getKVConfigValue(anyString(),anyString(),anyLong())).thenReturn(topicListConfig);\n  KVTable kvTable=new KVTable();\n  HashMap<String,String> kv=new HashMap<>();\n  kv.put(\"broker-name\",\"broker-one\");\n  kv.put(\"cluster-name\",\"default-cluster\");\n  kvTable.setTable(kv);\n  when(mQClientAPIImpl.getKVListByNamespace(anyString(),anyLong())).thenReturn(kvTable);\n  ConsumeStats consumeStats=new ConsumeStats();\n  consumeStats.setConsumeTps(1234);\n  MessageQueue messageQueue=new MessageQueue();\n  OffsetWrapper offsetWrapper=new OffsetWrapper();\n  HashMap<MessageQueue,OffsetWrapper> stats=new HashMap<>();\n  stats.put(messageQueue,offsetWrapper);\n  consumeStats.setOffsetTable(stats);\n  when(mQClientAPIImpl.getConsumeStats(anyString(),anyString(),anyString(),anyLong())).thenReturn(consumeStats);\n  ConsumerConnection consumerConnection=new ConsumerConnection();\n  consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n  consumerConnection.setMessageModel(MessageModel.CLUSTERING);\n  HashSet<Connection> connections=new HashSet<>();\n  connections.add(new Connection());\n  consumerConnection.setConnectionSet(connections);\n  consumerConnection.setSubscriptionTable(new ConcurrentHashMap<String,SubscriptionData>());\n  consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n  when(mQClientAPIImpl.getConsumerConnectionList(anyString(),anyString(),anyLong())).thenReturn(consumerConnection);\n  ProducerConnection producerConnection=new ProducerConnection();\n  Connection connection=new Connection();\n  connection.setClientAddr(\"127.0.0.1:9898\");\n  connection.setClientId(\"PID_12345\");\n  HashSet<Connection> connectionSet=new HashSet<Connection>();\n  connectionSet.add(connection);\n  producerConnection.setConnectionSet(connectionSet);\n  when(mQClientAPIImpl.getProducerConnectionList(anyString(),anyString(),anyLong())).thenReturn(producerConnection);\n  when(mQClientAPIImpl.wipeWritePermOfBroker(anyString(),anyString(),anyLong())).thenReturn(6);\n  TopicStatsTable topicStatsTable=new TopicStatsTable();\n  topicStatsTable.setOffsetTable(new HashMap<MessageQueue,TopicOffset>());\n  Map<String,Map<MessageQueue,Long>> consumerStatus=new HashMap<>();\n  when(mQClientAPIImpl.invokeBrokerToGetConsumerStatus(anyString(),anyString(),anyString(),anyString(),anyLong())).thenReturn(consumerStatus);\n  List<QueueTimeSpan> queueTimeSpanList=new ArrayList<>();\n  when(mQClientAPIImpl.queryConsumeTimeSpan(anyString(),anyString(),anyString(),anyLong())).thenReturn(queueTimeSpanList);\n  ConsumerRunningInfo consumerRunningInfo=new ConsumerRunningInfo();\n  consumerRunningInfo.setJstack(\"test\");\n  consumerRunningInfo.setMqTable(new TreeMap<MessageQueue,ProcessQueueInfo>());\n  consumerRunningInfo.setStatusTable(new TreeMap<String,ConsumeStatus>());\n  consumerRunningInfo.setSubscriptionSet(new TreeSet<SubscriptionData>());\n  when(mQClientAPIImpl.getConsumerRunningInfo(anyString(),anyString(),anyString(),anyBoolean(),anyLong())).thenReturn(consumerRunningInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 997,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7669,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BeforeClass public static void init() throws Exception {\n  mQClientAPIImpl=mock(MQClientAPIImpl.class);\n  defaultMQAdminExt=new DefaultMQAdminExt();\n  defaultMQAdminExtImpl=new DefaultMQAdminExtImpl(defaultMQAdminExt,1000);\n  Field field=DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExtImpl,mqClientInstance);\n  field=MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n  field.setAccessible(true);\n  field.set(mqClientInstance,mQClientAPIImpl);\n  field=DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExt,defaultMQAdminExtImpl);\n  properties.setProperty(\"maxMessageSize\",\"5000000\");\n  properties.setProperty(\"flushDelayOffsetInterval\",\"15000\");\n  properties.setProperty(\"serverSocketRcvBufSize\",\"655350\");\n  when(mQClientAPIImpl.getBrokerConfig(anyString(),anyLong())).thenReturn(properties);\n  Set<String> topicSet=new HashSet<>();\n  topicSet.add(\"topic_one\");\n  topicSet.add(\"topic_two\");\n  topicList.setTopicList(topicSet);\n  when(mQClientAPIImpl.getTopicListFromNameServer(anyLong())).thenReturn(topicList);\n  List<BrokerData> brokerDatas=new ArrayList<>();\n  HashMap<Long,String> brokerAddrs=new HashMap<>();\n  brokerAddrs.put(1234l,\"127.0.0.1:10911\");\n  BrokerData brokerData=new BrokerData();\n  brokerData.setCluster(\"default-cluster\");\n  brokerData.setBrokerName(\"default-broker\");\n  brokerData.setBrokerAddrs(brokerAddrs);\n  brokerDatas.add(brokerData);\n  topicRouteData.setBrokerDatas(brokerDatas);\n  topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n  topicRouteData.setFilterServerTable(new HashMap<String,List<String>>());\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  HashMap<String,String> result=new HashMap<>();\n  result.put(\"id\",\"1234\");\n  result.put(\"brokerName\",\"default-broker\");\n  kvTable.setTable(result);\n  when(mQClientAPIImpl.getBrokerRuntimeInfo(anyString(),anyLong())).thenReturn(kvTable);\n  HashMap<String,BrokerData> brokerAddrTable=new HashMap<>();\n  brokerAddrTable.put(\"default-broker\",brokerData);\n  brokerAddrTable.put(\"broker-test\",new BrokerData());\n  clusterInfo.setBrokerAddrTable(brokerAddrTable);\n  clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>());\n  when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n  when(mQClientAPIImpl.cleanExpiredConsumeQueue(anyString(),anyLong())).thenReturn(true);\n  Set<String> clusterList=new HashSet<>();\n  clusterList.add(\"default-cluster-one\");\n  clusterList.add(\"default-cluster-two\");\n  when(mQClientAPIImpl.getClusterList(anyString(),anyLong())).thenReturn(clusterList);\n  GroupList groupList=new GroupList();\n  HashSet<String> groups=new HashSet<>();\n  groups.add(\"consumer-group-one\");\n  groups.add(\"consumer-group-two\");\n  groupList.setGroupList(groups);\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  when(mQClientAPIImpl.queryTopicConsumeByWho(anyString(),anyString(),anyLong())).thenReturn(groupList);\n  SubscriptionGroupWrapper subscriptionGroupWrapper=new SubscriptionGroupWrapper();\n  ConcurrentHashMap<String,SubscriptionGroupConfig> subscriptions=new ConcurrentHashMap<>();\n  SubscriptionGroupConfig subscriptionGroupConfig=new SubscriptionGroupConfig();\n  subscriptionGroupConfig.setConsumeBroadcastEnable(true);\n  subscriptionGroupConfig.setBrokerId(1234);\n  subscriptionGroupConfig.setGroupName(\"Consumer-group-one\");\n  subscriptions.put(\"Consumer-group-one\",subscriptionGroupConfig);\n  subscriptionGroupWrapper.setSubscriptionGroupTable(subscriptions);\n  when(mQClientAPIImpl.getAllSubscriptionGroup(anyString(),anyLong())).thenReturn(subscriptionGroupWrapper);\n  String topicListConfig=\"topicListConfig\";\n  when(mQClientAPIImpl.getKVConfigValue(anyString(),anyString(),anyLong())).thenReturn(topicListConfig);\n  KVTable kvTable=new KVTable();\n  HashMap<String,String> kv=new HashMap<>();\n  kv.put(\"broker-name\",\"broker-one\");\n  kv.put(\"cluster-name\",\"default-cluster\");\n  kvTable.setTable(kv);\n  when(mQClientAPIImpl.getKVListByNamespace(anyString(),anyLong())).thenReturn(kvTable);\n  ConsumeStats consumeStats=new ConsumeStats();\n  consumeStats.setConsumeTps(1234);\n  MessageQueue messageQueue=new MessageQueue();\n  OffsetWrapper offsetWrapper=new OffsetWrapper();\n  HashMap<MessageQueue,OffsetWrapper> stats=new HashMap<>();\n  stats.put(messageQueue,offsetWrapper);\n  consumeStats.setOffsetTable(stats);\n  when(mQClientAPIImpl.getConsumeStats(anyString(),anyString(),anyString(),anyLong())).thenReturn(consumeStats);\n  ConsumerConnection consumerConnection=new ConsumerConnection();\n  consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n  consumerConnection.setMessageModel(MessageModel.CLUSTERING);\n  HashSet<Connection> connections=new HashSet<>();\n  connections.add(new Connection());\n  consumerConnection.setConnectionSet(connections);\n  consumerConnection.setSubscriptionTable(new ConcurrentHashMap<String,SubscriptionData>());\n  consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n  when(mQClientAPIImpl.getConsumerConnectionList(anyString(),anyString(),anyLong())).thenReturn(consumerConnection);\n  ProducerConnection producerConnection=new ProducerConnection();\n  Connection connection=new Connection();\n  connection.setClientAddr(\"127.0.0.1:9898\");\n  connection.setClientId(\"PID_12345\");\n  HashSet<Connection> connectionSet=new HashSet<Connection>();\n  connectionSet.add(connection);\n  producerConnection.setConnectionSet(connectionSet);\n  when(mQClientAPIImpl.getProducerConnectionList(anyString(),anyString(),anyLong())).thenReturn(producerConnection);\n  when(mQClientAPIImpl.wipeWritePermOfBroker(anyString(),anyString(),anyLong())).thenReturn(6);\n  TopicStatsTable topicStatsTable=new TopicStatsTable();\n  topicStatsTable.setOffsetTable(new HashMap<MessageQueue,TopicOffset>());\n  Map<String,Map<MessageQueue,Long>> consumerStatus=new HashMap<>();\n  when(mQClientAPIImpl.invokeBrokerToGetConsumerStatus(anyString(),anyString(),anyString(),anyString(),anyLong())).thenReturn(consumerStatus);\n  List<QueueTimeSpan> queueTimeSpanList=new ArrayList<>();\n  when(mQClientAPIImpl.queryConsumeTimeSpan(anyString(),anyString(),anyString(),anyLong())).thenReturn(queueTimeSpanList);\n  ConsumerRunningInfo consumerRunningInfo=new ConsumerRunningInfo();\n  consumerRunningInfo.setJstack(\"test\");\n  consumerRunningInfo.setMqTable(new TreeMap<MessageQueue,ProcessQueueInfo>());\n  consumerRunningInfo.setStatusTable(new TreeMap<String,ConsumeStatus>());\n  consumerRunningInfo.setSubscriptionSet(new TreeSet<SubscriptionData>());\n  when(mQClientAPIImpl.getConsumerRunningInfo(anyString(),anyString(),anyString(),anyBoolean(),anyLong())).thenReturn(consumerRunningInfo);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1006,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 76
      },
      "nodeContext" : "clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.common.protocol.body.ClusterInfo"
  }, {
    "nodeContext" : "clusterInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 147,
      "startColumnNumber" : 73,
      "endLineNumber" : 147,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 85
      },
      "nodeContext" : "when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 86
      },
      "nodeContext" : "when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7609,
        "startLineNumber" : 97,
        "startColumnNumber" : 47,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mQClientAPIImpl=mock(MQClientAPIImpl.class);\n  defaultMQAdminExt=new DefaultMQAdminExt();\n  defaultMQAdminExtImpl=new DefaultMQAdminExtImpl(defaultMQAdminExt,1000);\n  Field field=DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExtImpl,mqClientInstance);\n  field=MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n  field.setAccessible(true);\n  field.set(mqClientInstance,mQClientAPIImpl);\n  field=DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExt,defaultMQAdminExtImpl);\n  properties.setProperty(\"maxMessageSize\",\"5000000\");\n  properties.setProperty(\"flushDelayOffsetInterval\",\"15000\");\n  properties.setProperty(\"serverSocketRcvBufSize\",\"655350\");\n  when(mQClientAPIImpl.getBrokerConfig(anyString(),anyLong())).thenReturn(properties);\n  Set<String> topicSet=new HashSet<>();\n  topicSet.add(\"topic_one\");\n  topicSet.add(\"topic_two\");\n  topicList.setTopicList(topicSet);\n  when(mQClientAPIImpl.getTopicListFromNameServer(anyLong())).thenReturn(topicList);\n  List<BrokerData> brokerDatas=new ArrayList<>();\n  HashMap<Long,String> brokerAddrs=new HashMap<>();\n  brokerAddrs.put(1234l,\"127.0.0.1:10911\");\n  BrokerData brokerData=new BrokerData();\n  brokerData.setCluster(\"default-cluster\");\n  brokerData.setBrokerName(\"default-broker\");\n  brokerData.setBrokerAddrs(brokerAddrs);\n  brokerDatas.add(brokerData);\n  topicRouteData.setBrokerDatas(brokerDatas);\n  topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n  topicRouteData.setFilterServerTable(new HashMap<String,List<String>>());\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  HashMap<String,String> result=new HashMap<>();\n  result.put(\"id\",\"1234\");\n  result.put(\"brokerName\",\"default-broker\");\n  kvTable.setTable(result);\n  when(mQClientAPIImpl.getBrokerRuntimeInfo(anyString(),anyLong())).thenReturn(kvTable);\n  HashMap<String,BrokerData> brokerAddrTable=new HashMap<>();\n  brokerAddrTable.put(\"default-broker\",brokerData);\n  brokerAddrTable.put(\"broker-test\",new BrokerData());\n  clusterInfo.setBrokerAddrTable(brokerAddrTable);\n  clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>());\n  when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n  when(mQClientAPIImpl.cleanExpiredConsumeQueue(anyString(),anyLong())).thenReturn(true);\n  Set<String> clusterList=new HashSet<>();\n  clusterList.add(\"default-cluster-one\");\n  clusterList.add(\"default-cluster-two\");\n  when(mQClientAPIImpl.getClusterList(anyString(),anyLong())).thenReturn(clusterList);\n  GroupList groupList=new GroupList();\n  HashSet<String> groups=new HashSet<>();\n  groups.add(\"consumer-group-one\");\n  groups.add(\"consumer-group-two\");\n  groupList.setGroupList(groups);\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  when(mQClientAPIImpl.queryTopicConsumeByWho(anyString(),anyString(),anyLong())).thenReturn(groupList);\n  SubscriptionGroupWrapper subscriptionGroupWrapper=new SubscriptionGroupWrapper();\n  ConcurrentHashMap<String,SubscriptionGroupConfig> subscriptions=new ConcurrentHashMap<>();\n  SubscriptionGroupConfig subscriptionGroupConfig=new SubscriptionGroupConfig();\n  subscriptionGroupConfig.setConsumeBroadcastEnable(true);\n  subscriptionGroupConfig.setBrokerId(1234);\n  subscriptionGroupConfig.setGroupName(\"Consumer-group-one\");\n  subscriptions.put(\"Consumer-group-one\",subscriptionGroupConfig);\n  subscriptionGroupWrapper.setSubscriptionGroupTable(subscriptions);\n  when(mQClientAPIImpl.getAllSubscriptionGroup(anyString(),anyLong())).thenReturn(subscriptionGroupWrapper);\n  String topicListConfig=\"topicListConfig\";\n  when(mQClientAPIImpl.getKVConfigValue(anyString(),anyString(),anyLong())).thenReturn(topicListConfig);\n  KVTable kvTable=new KVTable();\n  HashMap<String,String> kv=new HashMap<>();\n  kv.put(\"broker-name\",\"broker-one\");\n  kv.put(\"cluster-name\",\"default-cluster\");\n  kvTable.setTable(kv);\n  when(mQClientAPIImpl.getKVListByNamespace(anyString(),anyLong())).thenReturn(kvTable);\n  ConsumeStats consumeStats=new ConsumeStats();\n  consumeStats.setConsumeTps(1234);\n  MessageQueue messageQueue=new MessageQueue();\n  OffsetWrapper offsetWrapper=new OffsetWrapper();\n  HashMap<MessageQueue,OffsetWrapper> stats=new HashMap<>();\n  stats.put(messageQueue,offsetWrapper);\n  consumeStats.setOffsetTable(stats);\n  when(mQClientAPIImpl.getConsumeStats(anyString(),anyString(),anyString(),anyLong())).thenReturn(consumeStats);\n  ConsumerConnection consumerConnection=new ConsumerConnection();\n  consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n  consumerConnection.setMessageModel(MessageModel.CLUSTERING);\n  HashSet<Connection> connections=new HashSet<>();\n  connections.add(new Connection());\n  consumerConnection.setConnectionSet(connections);\n  consumerConnection.setSubscriptionTable(new ConcurrentHashMap<String,SubscriptionData>());\n  consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n  when(mQClientAPIImpl.getConsumerConnectionList(anyString(),anyString(),anyLong())).thenReturn(consumerConnection);\n  ProducerConnection producerConnection=new ProducerConnection();\n  Connection connection=new Connection();\n  connection.setClientAddr(\"127.0.0.1:9898\");\n  connection.setClientId(\"PID_12345\");\n  HashSet<Connection> connectionSet=new HashSet<Connection>();\n  connectionSet.add(connection);\n  producerConnection.setConnectionSet(connectionSet);\n  when(mQClientAPIImpl.getProducerConnectionList(anyString(),anyString(),anyLong())).thenReturn(producerConnection);\n  when(mQClientAPIImpl.wipeWritePermOfBroker(anyString(),anyString(),anyLong())).thenReturn(6);\n  TopicStatsTable topicStatsTable=new TopicStatsTable();\n  topicStatsTable.setOffsetTable(new HashMap<MessageQueue,TopicOffset>());\n  Map<String,Map<MessageQueue,Long>> consumerStatus=new HashMap<>();\n  when(mQClientAPIImpl.invokeBrokerToGetConsumerStatus(anyString(),anyString(),anyString(),anyString(),anyLong())).thenReturn(consumerStatus);\n  List<QueueTimeSpan> queueTimeSpanList=new ArrayList<>();\n  when(mQClientAPIImpl.queryConsumeTimeSpan(anyString(),anyString(),anyString(),anyLong())).thenReturn(queueTimeSpanList);\n  ConsumerRunningInfo consumerRunningInfo=new ConsumerRunningInfo();\n  consumerRunningInfo.setJstack(\"test\");\n  consumerRunningInfo.setMqTable(new TreeMap<MessageQueue,ProcessQueueInfo>());\n  consumerRunningInfo.setStatusTable(new TreeMap<String,ConsumeStatus>());\n  consumerRunningInfo.setSubscriptionSet(new TreeSet<SubscriptionData>());\n  when(mQClientAPIImpl.getConsumerRunningInfo(anyString(),anyString(),anyString(),anyBoolean(),anyLong())).thenReturn(consumerRunningInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 997,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7669,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BeforeClass public static void init() throws Exception {\n  mQClientAPIImpl=mock(MQClientAPIImpl.class);\n  defaultMQAdminExt=new DefaultMQAdminExt();\n  defaultMQAdminExtImpl=new DefaultMQAdminExtImpl(defaultMQAdminExt,1000);\n  Field field=DefaultMQAdminExtImpl.class.getDeclaredField(\"mqClientInstance\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExtImpl,mqClientInstance);\n  field=MQClientInstance.class.getDeclaredField(\"mQClientAPIImpl\");\n  field.setAccessible(true);\n  field.set(mqClientInstance,mQClientAPIImpl);\n  field=DefaultMQAdminExt.class.getDeclaredField(\"defaultMQAdminExtImpl\");\n  field.setAccessible(true);\n  field.set(defaultMQAdminExt,defaultMQAdminExtImpl);\n  properties.setProperty(\"maxMessageSize\",\"5000000\");\n  properties.setProperty(\"flushDelayOffsetInterval\",\"15000\");\n  properties.setProperty(\"serverSocketRcvBufSize\",\"655350\");\n  when(mQClientAPIImpl.getBrokerConfig(anyString(),anyLong())).thenReturn(properties);\n  Set<String> topicSet=new HashSet<>();\n  topicSet.add(\"topic_one\");\n  topicSet.add(\"topic_two\");\n  topicList.setTopicList(topicSet);\n  when(mQClientAPIImpl.getTopicListFromNameServer(anyLong())).thenReturn(topicList);\n  List<BrokerData> brokerDatas=new ArrayList<>();\n  HashMap<Long,String> brokerAddrs=new HashMap<>();\n  brokerAddrs.put(1234l,\"127.0.0.1:10911\");\n  BrokerData brokerData=new BrokerData();\n  brokerData.setCluster(\"default-cluster\");\n  brokerData.setBrokerName(\"default-broker\");\n  brokerData.setBrokerAddrs(brokerAddrs);\n  brokerDatas.add(brokerData);\n  topicRouteData.setBrokerDatas(brokerDatas);\n  topicRouteData.setQueueDatas(new ArrayList<QueueData>());\n  topicRouteData.setFilterServerTable(new HashMap<String,List<String>>());\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  HashMap<String,String> result=new HashMap<>();\n  result.put(\"id\",\"1234\");\n  result.put(\"brokerName\",\"default-broker\");\n  kvTable.setTable(result);\n  when(mQClientAPIImpl.getBrokerRuntimeInfo(anyString(),anyLong())).thenReturn(kvTable);\n  HashMap<String,BrokerData> brokerAddrTable=new HashMap<>();\n  brokerAddrTable.put(\"default-broker\",brokerData);\n  brokerAddrTable.put(\"broker-test\",new BrokerData());\n  clusterInfo.setBrokerAddrTable(brokerAddrTable);\n  clusterInfo.setClusterAddrTable(new HashMap<String,Set<String>>());\n  when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n  when(mQClientAPIImpl.cleanExpiredConsumeQueue(anyString(),anyLong())).thenReturn(true);\n  Set<String> clusterList=new HashSet<>();\n  clusterList.add(\"default-cluster-one\");\n  clusterList.add(\"default-cluster-two\");\n  when(mQClientAPIImpl.getClusterList(anyString(),anyLong())).thenReturn(clusterList);\n  GroupList groupList=new GroupList();\n  HashSet<String> groups=new HashSet<>();\n  groups.add(\"consumer-group-one\");\n  groups.add(\"consumer-group-two\");\n  groupList.setGroupList(groups);\n  when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(),anyLong())).thenReturn(topicRouteData);\n  when(mQClientAPIImpl.queryTopicConsumeByWho(anyString(),anyString(),anyLong())).thenReturn(groupList);\n  SubscriptionGroupWrapper subscriptionGroupWrapper=new SubscriptionGroupWrapper();\n  ConcurrentHashMap<String,SubscriptionGroupConfig> subscriptions=new ConcurrentHashMap<>();\n  SubscriptionGroupConfig subscriptionGroupConfig=new SubscriptionGroupConfig();\n  subscriptionGroupConfig.setConsumeBroadcastEnable(true);\n  subscriptionGroupConfig.setBrokerId(1234);\n  subscriptionGroupConfig.setGroupName(\"Consumer-group-one\");\n  subscriptions.put(\"Consumer-group-one\",subscriptionGroupConfig);\n  subscriptionGroupWrapper.setSubscriptionGroupTable(subscriptions);\n  when(mQClientAPIImpl.getAllSubscriptionGroup(anyString(),anyLong())).thenReturn(subscriptionGroupWrapper);\n  String topicListConfig=\"topicListConfig\";\n  when(mQClientAPIImpl.getKVConfigValue(anyString(),anyString(),anyLong())).thenReturn(topicListConfig);\n  KVTable kvTable=new KVTable();\n  HashMap<String,String> kv=new HashMap<>();\n  kv.put(\"broker-name\",\"broker-one\");\n  kv.put(\"cluster-name\",\"default-cluster\");\n  kvTable.setTable(kv);\n  when(mQClientAPIImpl.getKVListByNamespace(anyString(),anyLong())).thenReturn(kvTable);\n  ConsumeStats consumeStats=new ConsumeStats();\n  consumeStats.setConsumeTps(1234);\n  MessageQueue messageQueue=new MessageQueue();\n  OffsetWrapper offsetWrapper=new OffsetWrapper();\n  HashMap<MessageQueue,OffsetWrapper> stats=new HashMap<>();\n  stats.put(messageQueue,offsetWrapper);\n  consumeStats.setOffsetTable(stats);\n  when(mQClientAPIImpl.getConsumeStats(anyString(),anyString(),anyString(),anyLong())).thenReturn(consumeStats);\n  ConsumerConnection consumerConnection=new ConsumerConnection();\n  consumerConnection.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n  consumerConnection.setMessageModel(MessageModel.CLUSTERING);\n  HashSet<Connection> connections=new HashSet<>();\n  connections.add(new Connection());\n  consumerConnection.setConnectionSet(connections);\n  consumerConnection.setSubscriptionTable(new ConcurrentHashMap<String,SubscriptionData>());\n  consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n  when(mQClientAPIImpl.getConsumerConnectionList(anyString(),anyString(),anyLong())).thenReturn(consumerConnection);\n  ProducerConnection producerConnection=new ProducerConnection();\n  Connection connection=new Connection();\n  connection.setClientAddr(\"127.0.0.1:9898\");\n  connection.setClientId(\"PID_12345\");\n  HashSet<Connection> connectionSet=new HashSet<Connection>();\n  connectionSet.add(connection);\n  producerConnection.setConnectionSet(connectionSet);\n  when(mQClientAPIImpl.getProducerConnectionList(anyString(),anyString(),anyLong())).thenReturn(producerConnection);\n  when(mQClientAPIImpl.wipeWritePermOfBroker(anyString(),anyString(),anyLong())).thenReturn(6);\n  TopicStatsTable topicStatsTable=new TopicStatsTable();\n  topicStatsTable.setOffsetTable(new HashMap<MessageQueue,TopicOffset>());\n  Map<String,Map<MessageQueue,Long>> consumerStatus=new HashMap<>();\n  when(mQClientAPIImpl.invokeBrokerToGetConsumerStatus(anyString(),anyString(),anyString(),anyString(),anyLong())).thenReturn(consumerStatus);\n  List<QueueTimeSpan> queueTimeSpanList=new ArrayList<>();\n  when(mQClientAPIImpl.queryConsumeTimeSpan(anyString(),anyString(),anyString(),anyLong())).thenReturn(queueTimeSpanList);\n  ConsumerRunningInfo consumerRunningInfo=new ConsumerRunningInfo();\n  consumerRunningInfo.setJstack(\"test\");\n  consumerRunningInfo.setMqTable(new TreeMap<MessageQueue,ProcessQueueInfo>());\n  consumerRunningInfo.setStatusTable(new TreeMap<String,ConsumeStatus>());\n  consumerRunningInfo.setSubscriptionSet(new TreeSet<SubscriptionData>());\n  when(mQClientAPIImpl.getConsumerRunningInfo(anyString(),anyString(),anyString(),anyBoolean(),anyLong())).thenReturn(consumerRunningInfo);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1006,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 86
      },
      "nodeContext" : "when(mQClientAPIImpl.getBrokerClusterInfo(anyLong())).thenReturn(clusterInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.common.protocol.body.ClusterInfo"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 145,
    "startColumnNumber" : 8,
    "endLineNumber" : 145,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 146,
    "startColumnNumber" : 8,
    "endLineNumber" : 146,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 147,
    "startColumnNumber" : 73,
    "endLineNumber" : 147,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}