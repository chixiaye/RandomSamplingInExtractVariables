{
  "id" : 202,
  "expression" : "numGoodQueries % size",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/collect/CollectionBenchmarkSampleData.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "numGoodQueries % size",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 72,
      "startColumnNumber" : 19,
      "endLineNumber" : 72,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 72,
        "startColumnNumber" : 10,
        "endLineNumber" : 72,
        "endColumnNumber" : 40
      },
      "nodeContext" : "extras=numGoodQueries % size",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int extras=numGoodQueries % size;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 70,
        "startColumnNumber" : 18,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int minCopiesOfEachGoodQuery=numGoodQueries / size;\n  int extras=numGoodQueries % size;\n  for (int i=0; i < minCopiesOfEachGoodQuery; i++) {\n    queryList.addAll(elementsInSet);\n  }\n  List<Element> tmp=Lists.newArrayList(elementsInSet);\n  Collections.shuffle(tmp,random);\n  queryList.addAll(tmp.subList(0,extras));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (size > 0) {\n  int minCopiesOfEachGoodQuery=numGoodQueries / size;\n  int extras=numGoodQueries % size;\n  for (int i=0; i < minCopiesOfEachGoodQuery; i++) {\n    queryList.addAll(elementsInSet);\n  }\n  List<Element> tmp=Lists.newArrayList(elementsInSet);\n  Collections.shuffle(tmp,random);\n  queryList.addAll(tmp.subList(0,extras));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 915,
        "startLineNumber" : 63,
        "startColumnNumber" : 78,
        "endLineNumber" : 91,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Element> queryList=Lists.newArrayListWithCapacity(numQueries);\n  int numGoodQueries=(int)(numQueries * hitRate + 0.5);\n  int size=elementsInSet.size();\n  if (size > 0) {\n    int minCopiesOfEachGoodQuery=numGoodQueries / size;\n    int extras=numGoodQueries % size;\n    for (int i=0; i < minCopiesOfEachGoodQuery; i++) {\n      queryList.addAll(elementsInSet);\n    }\n    List<Element> tmp=Lists.newArrayList(elementsInSet);\n    Collections.shuffle(tmp,random);\n    queryList.addAll(tmp.subList(0,extras));\n  }\n  while (queryList.size() < numQueries) {\n    Element candidate=newElement();\n    if (!elementsInSet.contains(candidate)) {\n      queryList.add(candidate);\n    }\n  }\n  Collections.shuffle(queryList,random);\n  return queryList.toArray(new Element[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private Element[] createQueries(Set<Element> elementsInSet,int numQueries){\n  List<Element> queryList=Lists.newArrayListWithCapacity(numQueries);\n  int numGoodQueries=(int)(numQueries * hitRate + 0.5);\n  int size=elementsInSet.size();\n  if (size > 0) {\n    int minCopiesOfEachGoodQuery=numGoodQueries / size;\n    int extras=numGoodQueries % size;\n    for (int i=0; i < minCopiesOfEachGoodQuery; i++) {\n      queryList.addAll(elementsInSet);\n    }\n    List<Element> tmp=Lists.newArrayList(elementsInSet);\n    Collections.shuffle(tmp,random);\n    queryList.addAll(tmp.subList(0,extras));\n  }\n  while (queryList.size() < numQueries) {\n    Element candidate=newElement();\n    if (!elementsInSet.contains(candidate)) {\n      queryList.add(candidate);\n    }\n  }\n  Collections.shuffle(queryList,random);\n  return queryList.toArray(new Element[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int extras=numGoodQueries % size;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 72,
    "startColumnNumber" : 19,
    "endLineNumber" : 72,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}