{
  "id" : 213,
  "expression" : "false",
  "projectName" : "apache@pulsar",
  "commitID" : "403b57a8bc56e1715b08d974847c82242729bb34",
  "filePath" : "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 919,
      "startColumnNumber" : 72,
      "endLineNumber" : 919,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 919,
        "startColumnNumber" : 16,
        "endLineNumber" : 919,
        "endColumnNumber" : 78
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 919,
        "startColumnNumber" : 16,
        "endLineNumber" : 919,
        "endColumnNumber" : 87
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false).metadata",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 919,
        "startColumnNumber" : 16,
        "endLineNumber" : 919,
        "endColumnNumber" : 98
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 918,
        "startColumnNumber" : 8,
        "endLineNumber" : 919,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 918,
        "startColumnNumber" : 8,
        "endLineNumber" : 919,
        "endColumnNumber" : 100
      },
      "nodeContext" : "assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9359,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9492,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 919,
        "startColumnNumber" : 16,
        "endLineNumber" : 919,
        "endColumnNumber" : 98
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 921,
      "startColumnNumber" : 78,
      "endLineNumber" : 921,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 921,
        "startColumnNumber" : 21,
        "endLineNumber" : 921,
        "endColumnNumber" : 84
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 921,
        "startColumnNumber" : 21,
        "endLineNumber" : 921,
        "endColumnNumber" : 95
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false).partitions",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 921,
        "startColumnNumber" : 21,
        "endLineNumber" : 921,
        "endColumnNumber" : 102
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 921,
        "startColumnNumber" : 8,
        "endLineNumber" : 922,
        "endColumnNumber" : 18
      },
      "nodeContext" : "assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 921,
        "startColumnNumber" : 8,
        "endLineNumber" : 922,
        "endColumnNumber" : 19
      },
      "nodeContext" : "assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9359,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9492,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 921,
        "startColumnNumber" : 21,
        "endLineNumber" : 921,
        "endColumnNumber" : 102
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 970,
      "startColumnNumber" : 32,
      "endLineNumber" : 970,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 968,
        "startColumnNumber" : 36,
        "endLineNumber" : 970,
        "endColumnNumber" : 38
      },
      "nodeContext" : "client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 968,
        "startColumnNumber" : 36,
        "endLineNumber" : 971,
        "endColumnNumber" : 75
      },
      "nodeContext" : "client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 218,
        "startLineNumber" : 968,
        "startColumnNumber" : 36,
        "endLineNumber" : 972,
        "endColumnNumber" : 25
      },
      "nodeContext" : "client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 968,
        "startColumnNumber" : 25,
        "endLineNumber" : 972,
        "endColumnNumber" : 25
      },
      "nodeContext" : "producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 968,
        "startColumnNumber" : 8,
        "endLineNumber" : 972,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9359,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9492,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 968,
        "startColumnNumber" : 36,
        "endLineNumber" : 970,
        "endColumnNumber" : 38
      },
      "nodeContext" : "client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 984,
      "startColumnNumber" : 100,
      "endLineNumber" : 984,
      "endColumnNumber" : 105
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 984,
        "startColumnNumber" : 43,
        "endLineNumber" : 984,
        "endColumnNumber" : 106
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 984,
        "startColumnNumber" : 30,
        "endLineNumber" : 984,
        "endColumnNumber" : 106
      },
      "nodeContext" : "topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 984,
        "startColumnNumber" : 8,
        "endLineNumber" : 984,
        "endColumnNumber" : 107
      },
      "nodeContext" : "PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9359,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9492,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 984,
        "startColumnNumber" : 8,
        "endLineNumber" : 984,
        "endColumnNumber" : 107
      },
      "nodeContext" : "PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 1018,
      "startColumnNumber" : 82,
      "endLineNumber" : 1018,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 1018,
        "startColumnNumber" : 25,
        "endLineNumber" : 1018,
        "endColumnNumber" : 88
      },
      "nodeContext" : "admin.topics().getPartitionedStats(partitionedTopicName,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 1018,
        "startColumnNumber" : 12,
        "endLineNumber" : 1018,
        "endColumnNumber" : 88
      },
      "nodeContext" : "topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 1018,
        "startColumnNumber" : 12,
        "endLineNumber" : 1018,
        "endColumnNumber" : 89
      },
      "nodeContext" : "topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 1015,
        "startColumnNumber" : 26,
        "endLineNumber" : 1020,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 1015,
        "startColumnNumber" : 8,
        "endLineNumber" : 1020,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isPersistent) {\n  admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9359,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9492,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 1018,
        "startColumnNumber" : 12,
        "endLineNumber" : 1018,
        "endColumnNumber" : 89
      },
      "nodeContext" : "topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 1039,
      "startColumnNumber" : 32,
      "endLineNumber" : 1039,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 1037,
        "startColumnNumber" : 19,
        "endLineNumber" : 1039,
        "endColumnNumber" : 38
      },
      "nodeContext" : "client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 1037,
        "startColumnNumber" : 19,
        "endLineNumber" : 1040,
        "endColumnNumber" : 71
      },
      "nodeContext" : "client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 1037,
        "startColumnNumber" : 19,
        "endLineNumber" : 1041,
        "endColumnNumber" : 25
      },
      "nodeContext" : "client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 1037,
        "startColumnNumber" : 8,
        "endLineNumber" : 1041,
        "endColumnNumber" : 25
      },
      "nodeContext" : "producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 1037,
        "startColumnNumber" : 8,
        "endLineNumber" : 1041,
        "endColumnNumber" : 26
      },
      "nodeContext" : "producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9359,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9492,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String namespace=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + namespace+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + namespace+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(namespace),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(namespace)),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(namespace);\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 1037,
        "startColumnNumber" : 19,
        "endLineNumber" : 1039,
        "endColumnNumber" : 38
      },
      "nodeContext" : "client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 919,
    "startColumnNumber" : 72,
    "endLineNumber" : 919,
    "endColumnNumber" : 77
  }, {
    "charLength" : 5,
    "startLineNumber" : 921,
    "startColumnNumber" : 78,
    "endLineNumber" : 921,
    "endColumnNumber" : 83
  }, {
    "charLength" : 5,
    "startLineNumber" : 970,
    "startColumnNumber" : 32,
    "endLineNumber" : 970,
    "endColumnNumber" : 37
  }, {
    "charLength" : 5,
    "startLineNumber" : 984,
    "startColumnNumber" : 100,
    "endLineNumber" : 984,
    "endColumnNumber" : 105
  }, {
    "charLength" : 5,
    "startLineNumber" : 1018,
    "startColumnNumber" : 82,
    "endLineNumber" : 1018,
    "endColumnNumber" : 87
  }, {
    "charLength" : 5,
    "startLineNumber" : 1039,
    "startColumnNumber" : 32,
    "endLineNumber" : 1039,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  } ]
}