{
  "id" : 70,
  "expression" : "kafkaMetrics.messages()",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-transports/kafka/src/test/java/zipkin/kafka/KafkaCollectorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "kafkaMetrics.messages()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 76,
      "startColumnNumber" : 15,
      "endLineNumber" : 76,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertThat(kafkaMetrics.messages())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(kafkaMetrics.messages()).isEqualTo(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThat(kafkaMetrics.messages()).isEqualTo(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 488,
        "startLineNumber" : 66,
        "startColumnNumber" : 61,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Builder builder=builder(\"single_span\");\n  byte[] bytes=Codec.THRIFT.writeSpan(TRACE.get(0));\n  producer.send(new KeyedMessage<>(builder.topic,bytes));\n  try (KafkaCollector processor=newKafkaTransport(builder,consumer)){\n    assertThat(recvdSpans.take()).containsExactly(TRACE.get(0));\n  }\n   assertThat(kafkaMetrics.messages()).isEqualTo(1);\n  assertThat(kafkaMetrics.bytes()).isEqualTo(bytes.length);\n  assertThat(kafkaMetrics.spans()).isEqualTo(1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 633,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Ensures legacy encoding works: a single TBinaryProtocol encoded span \n */\n@Test public void messageWithSingleThriftSpan() throws Exception {\n  Builder builder=builder(\"single_span\");\n  byte[] bytes=Codec.THRIFT.writeSpan(TRACE.get(0));\n  producer.send(new KeyedMessage<>(builder.topic,bytes));\n  try (KafkaCollector processor=newKafkaTransport(builder,consumer)){\n    assertThat(recvdSpans.take()).containsExactly(TRACE.get(0));\n  }\n   assertThat(kafkaMetrics.messages()).isEqualTo(1);\n  assertThat(kafkaMetrics.bytes()).isEqualTo(bytes.length);\n  assertThat(kafkaMetrics.spans()).isEqualTo(1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 97,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThat(kafkaMetrics.messages()).isEqualTo(1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 76,
    "startColumnNumber" : 15,
    "endLineNumber" : 76,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}