{
  "id" : 431,
  "expression" : "secondStateStore.readElectionState()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/raft/src/test/java/org/apache/kafka/raft/FileBasedStateStoreTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "secondStateStore.readElectionState()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 53,
      "startColumnNumber" : 79,
      "endLineNumber" : 53,
      "endColumnNumber" : 115
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 116
      },
      "nodeContext" : "assertEquals(ElectionState.withElectedLeader(epoch,leaderId,voters),secondStateStore.readElectionState())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 117
      },
      "nodeContext" : "assertEquals(ElectionState.withElectedLeader(epoch,leaderId,voters),secondStateStore.readElectionState());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 38,
        "startColumnNumber" : 59,
        "endLineNumber" : 54,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final File stateFile=TestUtils.tempFile();\n  stateStore=new FileBasedStateStore(stateFile);\n  final int leaderId=1;\n  final int epoch=2;\n  Set<Integer> voters=Utils.mkSet(leaderId);\n  stateStore.writeElectionState(ElectionState.withElectedLeader(epoch,leaderId,voters));\n  assertTrue(stateFile.exists());\n  assertEquals(ElectionState.withElectedLeader(epoch,leaderId,voters),stateStore.readElectionState());\n  final FileBasedStateStore secondStateStore=new FileBasedStateStore(stateFile);\n  assertEquals(ElectionState.withElectedLeader(epoch,leaderId,voters),secondStateStore.readElectionState());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 829,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReadElectionState() throws IOException {\n  final File stateFile=TestUtils.tempFile();\n  stateStore=new FileBasedStateStore(stateFile);\n  final int leaderId=1;\n  final int epoch=2;\n  Set<Integer> voters=Utils.mkSet(leaderId);\n  stateStore.writeElectionState(ElectionState.withElectedLeader(epoch,leaderId,voters));\n  assertTrue(stateFile.exists());\n  assertEquals(ElectionState.withElectedLeader(epoch,leaderId,voters),stateStore.readElectionState());\n  final FileBasedStateStore secondStateStore=new FileBasedStateStore(stateFile);\n  assertEquals(ElectionState.withElectedLeader(epoch,leaderId,voters),secondStateStore.readElectionState());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 99,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 117
      },
      "nodeContext" : "assertEquals(ElectionState.withElectedLeader(epoch,leaderId,voters),secondStateStore.readElectionState());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.kafka.raft.ElectionState"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 53,
    "startColumnNumber" : 79,
    "endLineNumber" : 53,
    "endColumnNumber" : 115
  } ],
  "layoutRelationDataList" : [ ]
}