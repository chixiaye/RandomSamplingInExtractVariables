{
  "id" : 448,
  "expression" : "\"Expect task to fail with AmazonS3Exception\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/integration-tests/src/test/java/org/apache/druid/tests/indexer/ITS3OverrideCredentialsIndexTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Expect task to fail with AmazonS3Exception\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 196,
      "startColumnNumber" : 10,
      "endLineNumber" : 196,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 194,
        "startColumnNumber" : 6,
        "endLineNumber" : 196,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertTrue(taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\"Expect task to fail with AmazonS3Exception\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 194,
        "startColumnNumber" : 6,
        "endLineNumber" : 196,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertTrue(taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\"Expect task to fail with AmazonS3Exception\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2130,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Function<String,String> s3PropsTransform=spec -> {\n    try {\n      String inputSourceValue=jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n      inputSourceValue=StringUtils.replace(inputSourceValue,\"%%BUCKET%%\",config.getCloudBucket());\n      inputSourceValue=StringUtils.replace(inputSourceValue,\"%%PATH%%\",config.getCloudPath());\n      spec=StringUtils.replace(spec,\"%%INPUT_SOURCE_TYPE%%\",\"s3\");\n      spec=StringUtils.replace(spec,\"%%INPUT_SOURCE_PROPERTY_KEY%%\",INPUT_SOURCE_OBJECTS_KEY);\n      return StringUtils.replace(spec,\"%%INPUT_SOURCE_PROPERTY_VALUE%%\",inputSourceValue);\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n;\n  final String fullDatasourceName=indexDatasource + config.getExtraDatasourceNameSuffix();\n  final String taskSpec=s3PropsTransform.apply(StringUtils.replace(getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\"%%DATASOURCE%%\",fullDatasourceName));\n  final String taskID=indexer.submitTask(taskSpec);\n  indexer.waitUntilTaskFails(taskID);\n  TaskStatusPlus taskStatusPlus=indexer.getTaskStatus(taskID);\n  Assert.assertEquals(taskStatusPlus.getStatusCode(),TaskState.FAILED);\n  Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n  Assert.assertTrue(taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\"Expect task to fail with AmazonS3Exception\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2306,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  final Function<String,String> s3PropsTransform=spec -> {\n    try {\n      String inputSourceValue=jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n      inputSourceValue=StringUtils.replace(inputSourceValue,\"%%BUCKET%%\",config.getCloudBucket());\n      inputSourceValue=StringUtils.replace(inputSourceValue,\"%%PATH%%\",config.getCloudPath());\n      spec=StringUtils.replace(spec,\"%%INPUT_SOURCE_TYPE%%\",\"s3\");\n      spec=StringUtils.replace(spec,\"%%INPUT_SOURCE_PROPERTY_KEY%%\",INPUT_SOURCE_OBJECTS_KEY);\n      return StringUtils.replace(spec,\"%%INPUT_SOURCE_PROPERTY_VALUE%%\",inputSourceValue);\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n;\n  final String fullDatasourceName=indexDatasource + config.getExtraDatasourceNameSuffix();\n  final String taskSpec=s3PropsTransform.apply(StringUtils.replace(getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\"%%DATASOURCE%%\",fullDatasourceName));\n  final String taskID=indexer.submitTask(taskSpec);\n  indexer.waitUntilTaskFails(taskID);\n  TaskStatusPlus taskStatusPlus=indexer.getTaskStatus(taskID);\n  Assert.assertEquals(taskStatusPlus.getStatusCode(),TaskState.FAILED);\n  Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n  Assert.assertTrue(taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\"Expect task to fail with AmazonS3Exception\");\n}\n  finally {\n  closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 177,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2396,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 202,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String indexDatasource=\"wikipedia_index_test_\" + UUID.randomUUID();\n  try {\n    final Function<String,String> s3PropsTransform=spec -> {\n      try {\n        String inputSourceValue=jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n        inputSourceValue=StringUtils.replace(inputSourceValue,\"%%BUCKET%%\",config.getCloudBucket());\n        inputSourceValue=StringUtils.replace(inputSourceValue,\"%%PATH%%\",config.getCloudPath());\n        spec=StringUtils.replace(spec,\"%%INPUT_SOURCE_TYPE%%\",\"s3\");\n        spec=StringUtils.replace(spec,\"%%INPUT_SOURCE_PROPERTY_KEY%%\",INPUT_SOURCE_OBJECTS_KEY);\n        return StringUtils.replace(spec,\"%%INPUT_SOURCE_PROPERTY_VALUE%%\",inputSourceValue);\n      }\n catch (      Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n;\n    final String fullDatasourceName=indexDatasource + config.getExtraDatasourceNameSuffix();\n    final String taskSpec=s3PropsTransform.apply(StringUtils.replace(getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\"%%DATASOURCE%%\",fullDatasourceName));\n    final String taskID=indexer.submitTask(taskSpec);\n    indexer.waitUntilTaskFails(taskID);\n    TaskStatusPlus taskStatusPlus=indexer.getTaskStatus(taskID);\n    Assert.assertEquals(taskStatusPlus.getStatusCode(),TaskState.FAILED);\n    Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n    Assert.assertTrue(taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\"Expect task to fail with AmazonS3Exception\");\n  }\n  finally {\n    closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2491,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 202,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testS3WithoutOverrideCredentialsIndexDataShouldFailed() throws Exception {\n  final String indexDatasource=\"wikipedia_index_test_\" + UUID.randomUUID();\n  try {\n    final Function<String,String> s3PropsTransform=spec -> {\n      try {\n        String inputSourceValue=jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n        inputSourceValue=StringUtils.replace(inputSourceValue,\"%%BUCKET%%\",config.getCloudBucket());\n        inputSourceValue=StringUtils.replace(inputSourceValue,\"%%PATH%%\",config.getCloudPath());\n        spec=StringUtils.replace(spec,\"%%INPUT_SOURCE_TYPE%%\",\"s3\");\n        spec=StringUtils.replace(spec,\"%%INPUT_SOURCE_PROPERTY_KEY%%\",INPUT_SOURCE_OBJECTS_KEY);\n        return StringUtils.replace(spec,\"%%INPUT_SOURCE_PROPERTY_VALUE%%\",inputSourceValue);\n      }\n catch (      Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n;\n    final String fullDatasourceName=indexDatasource + config.getExtraDatasourceNameSuffix();\n    final String taskSpec=s3PropsTransform.apply(StringUtils.replace(getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\"%%DATASOURCE%%\",fullDatasourceName));\n    final String taskID=indexer.submitTask(taskSpec);\n    indexer.waitUntilTaskFails(taskID);\n    TaskStatusPlus taskStatusPlus=indexer.getTaskStatus(taskID);\n    Assert.assertEquals(taskStatusPlus.getStatusCode(),TaskState.FAILED);\n    Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n    Assert.assertTrue(taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\"Expect task to fail with AmazonS3Exception\");\n  }\n  finally {\n    closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 197,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 194,
        "startColumnNumber" : 6,
        "endLineNumber" : 196,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertTrue(taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\"Expect task to fail with AmazonS3Exception\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 196,
    "startColumnNumber" : 10,
    "endLineNumber" : 196,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}