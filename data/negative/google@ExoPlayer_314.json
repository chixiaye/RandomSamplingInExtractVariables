{
  "id" : 314,
  "expression" : "videoReader",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "videoReader",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 204,
      "startColumnNumber" : 20,
      "endLineNumber" : 204,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 204,
        "startColumnNumber" : 20,
        "endLineNumber" : 204,
        "endColumnNumber" : 39
      },
      "nodeContext" : "videoReader == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 39
      },
      "nodeContext" : "hasVideo && videoReader == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (hasVideo && videoReader == null) {\n  videoReader=new VideoTagPayloadReader(extractorOutput.track(TAG_TYPE_VIDEO,C.TRACK_TYPE_VIDEO));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 953,
        "startLineNumber" : 189,
        "startColumnNumber" : 73,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!input.readFully(headerBuffer.getData(),0,FLV_HEADER_SIZE,true)) {\n    return false;\n  }\n  headerBuffer.setPosition(0);\n  headerBuffer.skipBytes(4);\n  int flags=headerBuffer.readUnsignedByte();\n  boolean hasAudio=(flags & 0x04) != 0;\n  boolean hasVideo=(flags & 0x01) != 0;\n  if (hasAudio && audioReader == null) {\n    audioReader=new AudioTagPayloadReader(extractorOutput.track(TAG_TYPE_AUDIO,C.TRACK_TYPE_AUDIO));\n  }\n  if (hasVideo && videoReader == null) {\n    videoReader=new VideoTagPayloadReader(extractorOutput.track(TAG_TYPE_VIDEO,C.TRACK_TYPE_VIDEO));\n  }\n  extractorOutput.endTracks();\n  bytesToNextTagHeader=headerBuffer.readInt() - FLV_HEADER_SIZE + 4;\n  state=STATE_SKIPPING_TO_TAG_HEADER;\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1399,
        "startLineNumber" : 181,
        "startColumnNumber" : 2,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Reads an FLV container header from the provided  {@link ExtractorInput}.\n * @param input The {@link ExtractorInput} from which to read.\n * @return True if header was read successfully. False if the end of stream was reached.\n * @throws IOException If an error occurred reading or parsing data from the source.\n */\n@RequiresNonNull(\"extractorOutput\") private boolean readFlvHeader(ExtractorInput input) throws IOException {\n  if (!input.readFully(headerBuffer.getData(),0,FLV_HEADER_SIZE,true)) {\n    return false;\n  }\n  headerBuffer.setPosition(0);\n  headerBuffer.skipBytes(4);\n  int flags=headerBuffer.readUnsignedByte();\n  boolean hasAudio=(flags & 0x04) != 0;\n  boolean hasVideo=(flags & 0x01) != 0;\n  if (hasAudio && audioReader == null) {\n    audioReader=new AudioTagPayloadReader(extractorOutput.track(TAG_TYPE_AUDIO,C.TRACK_TYPE_AUDIO));\n  }\n  if (hasVideo && videoReader == null) {\n    videoReader=new VideoTagPayloadReader(extractorOutput.track(TAG_TYPE_VIDEO,C.TRACK_TYPE_VIDEO));\n  }\n  extractorOutput.endTracks();\n  bytesToNextTagHeader=headerBuffer.readInt() - FLV_HEADER_SIZE + 4;\n  state=STATE_SKIPPING_TO_TAG_HEADER;\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 39
      },
      "nodeContext" : "hasVideo && videoReader == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 204,
    "startColumnNumber" : 20,
    "endLineNumber" : 204,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}