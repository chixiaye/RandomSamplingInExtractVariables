{
  "id" : 477,
  "expression" : "-1",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/RestAdapter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 305,
      "startColumnNumber" : 27,
      "endLineNumber" : 305,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 305,
        "startColumnNumber" : 14,
        "endLineNumber" : 305,
        "endColumnNumber" : 29
      },
      "nodeContext" : "substrEnd == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 305,
        "startColumnNumber" : 10,
        "endLineNumber" : 307,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (substrEnd == -1) {\n  substrEnd=url.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 302,
        "startColumnNumber" : 39,
        "endLineNumber" : 310,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int substrEnd=url.indexOf(\"?\",serverUrl.length());\n  if (substrEnd == -1) {\n    substrEnd=url.length();\n  }\n  Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length(),substrEnd));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 302,
        "startColumnNumber" : 8,
        "endLineNumber" : 310,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!methodInfo.isSynchronous) {\n  int substrEnd=url.indexOf(\"?\",serverUrl.length());\n  if (substrEnd == -1) {\n    substrEnd=url.length();\n  }\n  Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length(),substrEnd));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3259,
        "startLineNumber" : 290,
        "startColumnNumber" : 10,
        "endLineNumber" : 375,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  methodInfo.init();\n  String serverUrl=server.getUrl();\n  RequestBuilder requestBuilder=new RequestBuilder(serverUrl,methodInfo,converter);\n  requestBuilder.setArguments(args);\n  requestInterceptor.intercept(requestBuilder);\n  Request request=requestBuilder.build();\n  url=request.getUrl();\n  if (!methodInfo.isSynchronous) {\n    int substrEnd=url.indexOf(\"?\",serverUrl.length());\n    if (substrEnd == -1) {\n      substrEnd=url.length();\n    }\n    Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length(),substrEnd));\n  }\n  if (logLevel.log()) {\n    request=logAndReplaceRequest(\"HTTP\",request,args);\n  }\n  long start=System.nanoTime();\n  Response response=client.execute(request);\n  long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  if (logLevel.log()) {\n    response=logAndReplaceResponse(url,response,elapsedTime);\n  }\n  Type type=methodInfo.responseObjectType;\n  int statusCode=response.getStatus();\n  if (statusCode >= 200 && statusCode < 300) {\n    if (type.equals(Response.class)) {\n      if (!methodInfo.isStreaming) {\n        response=Utils.readBodyToBytesIfNecessary(response);\n      }\n      if (methodInfo.isSynchronous) {\n        return response;\n      }\n      return new ResponseWrapper(response,response);\n    }\n    TypedInput body=response.getBody();\n    if (body == null) {\n      if (methodInfo.isSynchronous) {\n        return null;\n      }\n      return new ResponseWrapper(response,null);\n    }\n    ExceptionCatchingTypedInput wrapped=new ExceptionCatchingTypedInput(body);\n    try {\n      Object convert=converter.fromBody(wrapped,type);\n      logResponseBody(body,convert);\n      if (methodInfo.isSynchronous) {\n        return convert;\n      }\n      return new ResponseWrapper(response,convert);\n    }\n catch (    ConversionException e) {\n      if (wrapped.threwException()) {\n        throw wrapped.getThrownException();\n      }\n      response=Utils.replaceResponseBody(response,null);\n      throw RetrofitError.conversionError(url,response,converter,type,e);\n    }\n  }\n  response=Utils.readBodyToBytesIfNecessary(response);\n  throw RetrofitError.httpError(url,response,converter,type);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3784,
        "startLineNumber" : 290,
        "startColumnNumber" : 6,
        "endLineNumber" : 391,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  methodInfo.init();\n  String serverUrl=server.getUrl();\n  RequestBuilder requestBuilder=new RequestBuilder(serverUrl,methodInfo,converter);\n  requestBuilder.setArguments(args);\n  requestInterceptor.intercept(requestBuilder);\n  Request request=requestBuilder.build();\n  url=request.getUrl();\n  if (!methodInfo.isSynchronous) {\n    int substrEnd=url.indexOf(\"?\",serverUrl.length());\n    if (substrEnd == -1) {\n      substrEnd=url.length();\n    }\n    Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length(),substrEnd));\n  }\n  if (logLevel.log()) {\n    request=logAndReplaceRequest(\"HTTP\",request,args);\n  }\n  long start=System.nanoTime();\n  Response response=client.execute(request);\n  long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  if (logLevel.log()) {\n    response=logAndReplaceResponse(url,response,elapsedTime);\n  }\n  Type type=methodInfo.responseObjectType;\n  int statusCode=response.getStatus();\n  if (statusCode >= 200 && statusCode < 300) {\n    if (type.equals(Response.class)) {\n      if (!methodInfo.isStreaming) {\n        response=Utils.readBodyToBytesIfNecessary(response);\n      }\n      if (methodInfo.isSynchronous) {\n        return response;\n      }\n      return new ResponseWrapper(response,response);\n    }\n    TypedInput body=response.getBody();\n    if (body == null) {\n      if (methodInfo.isSynchronous) {\n        return null;\n      }\n      return new ResponseWrapper(response,null);\n    }\n    ExceptionCatchingTypedInput wrapped=new ExceptionCatchingTypedInput(body);\n    try {\n      Object convert=converter.fromBody(wrapped,type);\n      logResponseBody(body,convert);\n      if (methodInfo.isSynchronous) {\n        return convert;\n      }\n      return new ResponseWrapper(response,convert);\n    }\n catch (    ConversionException e) {\n      if (wrapped.threwException()) {\n        throw wrapped.getThrownException();\n      }\n      response=Utils.replaceResponseBody(response,null);\n      throw RetrofitError.conversionError(url,response,converter,type,e);\n    }\n  }\n  response=Utils.readBodyToBytesIfNecessary(response);\n  throw RetrofitError.httpError(url,response,converter,type);\n}\n catch (RetrofitError e) {\n  throw e;\n}\ncatch (IOException e) {\n  if (logLevel.log()) {\n    logException(e,url);\n  }\n  throw RetrofitError.networkError(url,e);\n}\ncatch (Throwable t) {\n  if (logLevel.log()) {\n    logException(t,url);\n  }\n  throw RetrofitError.unexpectedError(url,t);\n}\n finally {\n  if (!methodInfo.isSynchronous) {\n    Thread.currentThread().setName(IDLE_THREAD_NAME);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 385,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3823,
        "startLineNumber" : 288,
        "startColumnNumber" : 23,
        "endLineNumber" : 392,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String url=null;\n  try {\n    methodInfo.init();\n    String serverUrl=server.getUrl();\n    RequestBuilder requestBuilder=new RequestBuilder(serverUrl,methodInfo,converter);\n    requestBuilder.setArguments(args);\n    requestInterceptor.intercept(requestBuilder);\n    Request request=requestBuilder.build();\n    url=request.getUrl();\n    if (!methodInfo.isSynchronous) {\n      int substrEnd=url.indexOf(\"?\",serverUrl.length());\n      if (substrEnd == -1) {\n        substrEnd=url.length();\n      }\n      Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length(),substrEnd));\n    }\n    if (logLevel.log()) {\n      request=logAndReplaceRequest(\"HTTP\",request,args);\n    }\n    long start=System.nanoTime();\n    Response response=client.execute(request);\n    long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    if (logLevel.log()) {\n      response=logAndReplaceResponse(url,response,elapsedTime);\n    }\n    Type type=methodInfo.responseObjectType;\n    int statusCode=response.getStatus();\n    if (statusCode >= 200 && statusCode < 300) {\n      if (type.equals(Response.class)) {\n        if (!methodInfo.isStreaming) {\n          response=Utils.readBodyToBytesIfNecessary(response);\n        }\n        if (methodInfo.isSynchronous) {\n          return response;\n        }\n        return new ResponseWrapper(response,response);\n      }\n      TypedInput body=response.getBody();\n      if (body == null) {\n        if (methodInfo.isSynchronous) {\n          return null;\n        }\n        return new ResponseWrapper(response,null);\n      }\n      ExceptionCatchingTypedInput wrapped=new ExceptionCatchingTypedInput(body);\n      try {\n        Object convert=converter.fromBody(wrapped,type);\n        logResponseBody(body,convert);\n        if (methodInfo.isSynchronous) {\n          return convert;\n        }\n        return new ResponseWrapper(response,convert);\n      }\n catch (      ConversionException e) {\n        if (wrapped.threwException()) {\n          throw wrapped.getThrownException();\n        }\n        response=Utils.replaceResponseBody(response,null);\n        throw RetrofitError.conversionError(url,response,converter,type,e);\n      }\n    }\n    response=Utils.readBodyToBytesIfNecessary(response);\n    throw RetrofitError.httpError(url,response,converter,type);\n  }\n catch (  RetrofitError e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    if (logLevel.log()) {\n      logException(e,url);\n    }\n    throw RetrofitError.networkError(url,e);\n  }\ncatch (  Throwable t) {\n    if (logLevel.log()) {\n      logException(t,url);\n    }\n    throw RetrofitError.unexpectedError(url,t);\n  }\n finally {\n    if (!methodInfo.isSynchronous) {\n      Thread.currentThread().setName(IDLE_THREAD_NAME);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 392,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4149,
        "startLineNumber" : 281,
        "startColumnNumber" : 4,
        "endLineNumber" : 392,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute an HTTP request.\n * @return HTTP response object of specified {@code type} or {@code null}.\n * @throws RetrofitError if any error occurs during the HTTP request.\n */\nprivate Object invokeRequest(RequestInterceptor requestInterceptor,RestMethodInfo methodInfo,Object[] args){\n  String url=null;\n  try {\n    methodInfo.init();\n    String serverUrl=server.getUrl();\n    RequestBuilder requestBuilder=new RequestBuilder(serverUrl,methodInfo,converter);\n    requestBuilder.setArguments(args);\n    requestInterceptor.intercept(requestBuilder);\n    Request request=requestBuilder.build();\n    url=request.getUrl();\n    if (!methodInfo.isSynchronous) {\n      int substrEnd=url.indexOf(\"?\",serverUrl.length());\n      if (substrEnd == -1) {\n        substrEnd=url.length();\n      }\n      Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length(),substrEnd));\n    }\n    if (logLevel.log()) {\n      request=logAndReplaceRequest(\"HTTP\",request,args);\n    }\n    long start=System.nanoTime();\n    Response response=client.execute(request);\n    long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    if (logLevel.log()) {\n      response=logAndReplaceResponse(url,response,elapsedTime);\n    }\n    Type type=methodInfo.responseObjectType;\n    int statusCode=response.getStatus();\n    if (statusCode >= 200 && statusCode < 300) {\n      if (type.equals(Response.class)) {\n        if (!methodInfo.isStreaming) {\n          response=Utils.readBodyToBytesIfNecessary(response);\n        }\n        if (methodInfo.isSynchronous) {\n          return response;\n        }\n        return new ResponseWrapper(response,response);\n      }\n      TypedInput body=response.getBody();\n      if (body == null) {\n        if (methodInfo.isSynchronous) {\n          return null;\n        }\n        return new ResponseWrapper(response,null);\n      }\n      ExceptionCatchingTypedInput wrapped=new ExceptionCatchingTypedInput(body);\n      try {\n        Object convert=converter.fromBody(wrapped,type);\n        logResponseBody(body,convert);\n        if (methodInfo.isSynchronous) {\n          return convert;\n        }\n        return new ResponseWrapper(response,convert);\n      }\n catch (      ConversionException e) {\n        if (wrapped.threwException()) {\n          throw wrapped.getThrownException();\n        }\n        response=Utils.replaceResponseBody(response,null);\n        throw RetrofitError.conversionError(url,response,converter,type,e);\n      }\n    }\n    response=Utils.readBodyToBytesIfNecessary(response);\n    throw RetrofitError.httpError(url,response,converter,type);\n  }\n catch (  RetrofitError e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    if (logLevel.log()) {\n      logException(e,url);\n    }\n    throw RetrofitError.networkError(url,e);\n  }\ncatch (  Throwable t) {\n    if (logLevel.log()) {\n      logException(t,url);\n    }\n    throw RetrofitError.unexpectedError(url,t);\n  }\n finally {\n    if (!methodInfo.isSynchronous) {\n      Thread.currentThread().setName(IDLE_THREAD_NAME);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 305,
        "startColumnNumber" : 14,
        "endLineNumber" : 305,
        "endColumnNumber" : 29
      },
      "nodeContext" : "substrEnd == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 305,
    "startColumnNumber" : 27,
    "endLineNumber" : 305,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}