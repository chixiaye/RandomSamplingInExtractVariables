{
  "id" : 130,
  "expression" : "index2",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/org/jbox2d/collision/broadphase/DynamicTree.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "index2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 441,
      "startColumnNumber" : 39,
      "endLineNumber" : 441,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 441,
        "startColumnNumber" : 31,
        "endLineNumber" : 441,
        "endColumnNumber" : 46
      },
      "nodeContext" : "m_nodes[index2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 441,
        "startColumnNumber" : 22,
        "endLineNumber" : 441,
        "endColumnNumber" : 46
      },
      "nodeContext" : "child2=m_nodes[index2]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 441,
        "startColumnNumber" : 6,
        "endLineNumber" : 441,
        "endColumnNumber" : 47
      },
      "nodeContext" : "DynamicTreeNode child2=m_nodes[index2];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 420,
        "startColumnNumber" : 22,
        "endLineNumber" : 456,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float minCost=Float.MAX_VALUE;\n  int iMin=-1, jMin=-1;\n  for (int i=0; i < count; ++i) {\n    AABB aabbi=m_nodes[nodes[i]].aabb;\n    for (int j=i + 1; j < count; ++j) {\n      AABB aabbj=m_nodes[nodes[j]].aabb;\n      b.combine(aabbi,aabbj);\n      float cost=b.getPerimeter();\n      if (cost < minCost) {\n        iMin=i;\n        jMin=j;\n        minCost=cost;\n      }\n    }\n  }\n  int index1=nodes[iMin];\n  int index2=nodes[jMin];\n  DynamicTreeNode child1=m_nodes[index1];\n  DynamicTreeNode child2=m_nodes[index2];\n  DynamicTreeNode parent=allocateNode();\n  parent.child1=child1;\n  parent.child2=child2;\n  parent.height=1 + MathUtils.max(child1.height,child2.height);\n  parent.aabb.combine(child1.aabb,child2.aabb);\n  parent.parent=null;\n  child1.parent=parent;\n  child2.parent=parent;\n  nodes[jMin]=nodes[count - 1];\n  nodes[iMin]=parent.id;\n  --count;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 420,
        "startColumnNumber" : 4,
        "endLineNumber" : 456,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (count > 1) {\n  float minCost=Float.MAX_VALUE;\n  int iMin=-1, jMin=-1;\n  for (int i=0; i < count; ++i) {\n    AABB aabbi=m_nodes[nodes[i]].aabb;\n    for (int j=i + 1; j < count; ++j) {\n      AABB aabbj=m_nodes[nodes[j]].aabb;\n      b.combine(aabbi,aabbj);\n      float cost=b.getPerimeter();\n      if (cost < minCost) {\n        iMin=i;\n        jMin=j;\n        minCost=cost;\n      }\n    }\n  }\n  int index1=nodes[iMin];\n  int index2=nodes[jMin];\n  DynamicTreeNode child1=m_nodes[index1];\n  DynamicTreeNode child2=m_nodes[index2];\n  DynamicTreeNode parent=allocateNode();\n  parent.child1=child1;\n  parent.child2=child2;\n  parent.height=1 + MathUtils.max(child1.height,child2.height);\n  parent.aabb.combine(child1.aabb,child2.aabb);\n  parent.parent=null;\n  child1.parent=parent;\n  child2.parent=parent;\n  nodes[jMin]=nodes[count - 1];\n  nodes[iMin]=parent.id;\n  --count;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 218,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1579,
        "startLineNumber" : 398,
        "startColumnNumber" : 32,
        "endLineNumber" : 461,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] nodes=new int[m_nodeCount];\n  int count=0;\n  for (int i=0; i < m_nodeCapacity; ++i) {\n    if (m_nodes[i].height < 0) {\n      continue;\n    }\n    DynamicTreeNode node=m_nodes[i];\n    if (node.child1 == null) {\n      node.parent=null;\n      nodes[count]=i;\n      ++count;\n    }\n else {\n      freeNode(node);\n    }\n  }\n  AABB b=new AABB();\n  while (count > 1) {\n    float minCost=Float.MAX_VALUE;\n    int iMin=-1, jMin=-1;\n    for (int i=0; i < count; ++i) {\n      AABB aabbi=m_nodes[nodes[i]].aabb;\n      for (int j=i + 1; j < count; ++j) {\n        AABB aabbj=m_nodes[nodes[j]].aabb;\n        b.combine(aabbi,aabbj);\n        float cost=b.getPerimeter();\n        if (cost < minCost) {\n          iMin=i;\n          jMin=j;\n          minCost=cost;\n        }\n      }\n    }\n    int index1=nodes[iMin];\n    int index2=nodes[jMin];\n    DynamicTreeNode child1=m_nodes[index1];\n    DynamicTreeNode child2=m_nodes[index2];\n    DynamicTreeNode parent=allocateNode();\n    parent.child1=child1;\n    parent.child2=child2;\n    parent.height=1 + MathUtils.max(child1.height,child2.height);\n    parent.aabb.combine(child1.aabb,child2.aabb);\n    parent.parent=null;\n    child1.parent=parent;\n    child2.parent=parent;\n    nodes[jMin]=nodes[count - 1];\n    nodes[iMin]=parent.id;\n    --count;\n  }\n  m_root=m_nodes[nodes[0]];\n  validate();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1678,
        "startLineNumber" : 395,
        "startColumnNumber" : 2,
        "endLineNumber" : 461,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Build an optimal tree. Very expensive. For testing.\n */\npublic void rebuildBottomUp(){\n  int[] nodes=new int[m_nodeCount];\n  int count=0;\n  for (int i=0; i < m_nodeCapacity; ++i) {\n    if (m_nodes[i].height < 0) {\n      continue;\n    }\n    DynamicTreeNode node=m_nodes[i];\n    if (node.child1 == null) {\n      node.parent=null;\n      nodes[count]=i;\n      ++count;\n    }\n else {\n      freeNode(node);\n    }\n  }\n  AABB b=new AABB();\n  while (count > 1) {\n    float minCost=Float.MAX_VALUE;\n    int iMin=-1, jMin=-1;\n    for (int i=0; i < count; ++i) {\n      AABB aabbi=m_nodes[nodes[i]].aabb;\n      for (int j=i + 1; j < count; ++j) {\n        AABB aabbj=m_nodes[nodes[j]].aabb;\n        b.combine(aabbi,aabbj);\n        float cost=b.getPerimeter();\n        if (cost < minCost) {\n          iMin=i;\n          jMin=j;\n          minCost=cost;\n        }\n      }\n    }\n    int index1=nodes[iMin];\n    int index2=nodes[jMin];\n    DynamicTreeNode child1=m_nodes[index1];\n    DynamicTreeNode child2=m_nodes[index2];\n    DynamicTreeNode parent=allocateNode();\n    parent.child1=child1;\n    parent.child2=child2;\n    parent.height=1 + MathUtils.max(child1.height,child2.height);\n    parent.aabb.combine(child1.aabb,child2.aabb);\n    parent.parent=null;\n    child1.parent=parent;\n    child2.parent=parent;\n    nodes[jMin]=nodes[count - 1];\n    nodes[iMin]=parent.id;\n    --count;\n  }\n  m_root=m_nodes[nodes[0]];\n  validate();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 441,
        "startColumnNumber" : 6,
        "endLineNumber" : 441,
        "endColumnNumber" : 47
      },
      "nodeContext" : "DynamicTreeNode child2=m_nodes[index2];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 441,
    "startColumnNumber" : 39,
    "endLineNumber" : 441,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}