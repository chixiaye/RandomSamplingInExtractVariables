{
  "id" : 354,
  "expression" : "EUREKA_SERVER_CONFIG",
  "projectName" : "Netflix@eureka",
  "commitID" : "295f257424f0952b17a6903940bbd4e2f2fced03",
  "filePath" : "eureka-core/src/main/java/com/netflix/eureka/RemoteRegionRegistry.java",
  "occurrences" : 15,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 81,
      "startColumnNumber" : 20,
      "endLineNumber" : 81,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 74
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 88
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 78,
        "startColumnNumber" : 58,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 74
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 82,
      "startColumnNumber" : 20,
      "endLineNumber" : 82,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 82,
        "startColumnNumber" : 20,
        "endLineNumber" : 82,
        "endColumnNumber" : 71
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 88
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 78,
        "startColumnNumber" : 58,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 82,
        "startColumnNumber" : 20,
        "endLineNumber" : 82,
        "endColumnNumber" : 71
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 83,
      "startColumnNumber" : 20,
      "endLineNumber" : 83,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 83,
        "startColumnNumber" : 20,
        "endLineNumber" : 83,
        "endColumnNumber" : 81
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 88
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 78,
        "startColumnNumber" : 58,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 83,
        "startColumnNumber" : 20,
        "endLineNumber" : 83,
        "endColumnNumber" : 81
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 84,
      "startColumnNumber" : 20,
      "endLineNumber" : 84,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 74
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 88
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 78,
        "startColumnNumber" : 58,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 74
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 85,
      "startColumnNumber" : 20,
      "endLineNumber" : 85,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 85,
        "startColumnNumber" : 20,
        "endLineNumber" : 85,
        "endColumnNumber" : 86
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 87
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 88
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 78,
        "startColumnNumber" : 58,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 85,
        "startColumnNumber" : 20,
        "endLineNumber" : 85,
        "endColumnNumber" : 86
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 91,
      "startColumnNumber" : 28,
      "endLineNumber" : 91,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 91,
        "startColumnNumber" : 28,
        "endLineNumber" : 91,
        "endColumnNumber" : 82
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 86
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 91,
        "startColumnNumber" : 28,
        "endLineNumber" : 91,
        "endColumnNumber" : 82
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 92,
      "startColumnNumber" : 28,
      "endLineNumber" : 92,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 92,
        "endColumnNumber" : 79
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 86
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 92,
        "endColumnNumber" : 79
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 93,
      "startColumnNumber" : 28,
      "endLineNumber" : 93,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 93,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 89
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 86
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 93,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 89
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 94,
      "startColumnNumber" : 28,
      "endLineNumber" : 94,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 94,
        "endColumnNumber" : 82
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 86
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 94,
        "endColumnNumber" : 82
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 95,
      "startColumnNumber" : 28,
      "endLineNumber" : 95,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 95,
        "startColumnNumber" : 28,
        "endLineNumber" : 95,
        "endColumnNumber" : 94
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 86
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 95,
        "startColumnNumber" : 28,
        "endLineNumber" : 95,
        "endColumnNumber" : 94
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 96,
      "startColumnNumber" : 28,
      "endLineNumber" : 96,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 96,
        "startColumnNumber" : 28,
        "endLineNumber" : 96,
        "endColumnNumber" : 76
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 86
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 96,
        "startColumnNumber" : 28,
        "endLineNumber" : 96,
        "endColumnNumber" : 76
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 97,
      "startColumnNumber" : 28,
      "endLineNumber" : 97,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 97,
        "startColumnNumber" : 28,
        "endLineNumber" : 97,
        "endColumnNumber" : 84
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 85
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 86
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remoteRegionURL.getProtocol().equals(\"http\")) {\n  jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n}\n else {\n  jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n  discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 97,
        "startColumnNumber" : 28,
        "endLineNumber" : 97,
        "endColumnNumber" : 84
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 103,
      "startColumnNumber" : 12,
      "endLineNumber" : 103,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 68
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n  discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 68
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 151,
      "startColumnNumber" : 24,
      "endLineNumber" : 151,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 151,
        "startColumnNumber" : 24,
        "endLineNumber" : 152,
        "endColumnNumber" : 71
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 151,
        "startColumnNumber" : 24,
        "endLineNumber" : 152,
        "endColumnNumber" : 78
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 79
      },
      "nodeContext" : "remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n  @Override public void run(){\n    try {\n      if (fetchRegistry()) {\n        readyForServingData=true;\n      }\n else {\n        logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n      }\n    }\n catch (    Throwable e) {\n      logger.error(\"Error getting from remote registry :\",e);\n    }\n  }\n}\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 54,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 80
      },
      "nodeContext" : "remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n  @Override public void run(){\n    try {\n      if (fetchRegistry()) {\n        readyForServingData=true;\n      }\n else {\n        logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n      }\n    }\n catch (    Throwable e) {\n      logger.error(\"Error getting from remote registry :\",e);\n    }\n  }\n}\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 55,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 151,
        "startColumnNumber" : 24,
        "endLineNumber" : 152,
        "endColumnNumber" : 71
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  }, {
    "nodeContext" : "EUREKA_SERVER_CONFIG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 153,
      "startColumnNumber" : 24,
      "endLineNumber" : 153,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 153,
        "startColumnNumber" : 24,
        "endLineNumber" : 154,
        "endColumnNumber" : 71
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 153,
        "startColumnNumber" : 24,
        "endLineNumber" : 154,
        "endColumnNumber" : 78
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 79
      },
      "nodeContext" : "remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n  @Override public void run(){\n    try {\n      if (fetchRegistry()) {\n        readyForServingData=true;\n      }\n else {\n        logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n      }\n    }\n catch (    Throwable e) {\n      logger.error(\"Error getting from remote registry :\",e);\n    }\n  }\n}\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 54,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 80
      },
      "nodeContext" : "remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n  @Override public void run(){\n    try {\n      if (fetchRegistry()) {\n        readyForServingData=true;\n      }\n else {\n        logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n      }\n    }\n catch (    Throwable e) {\n      logger.error(\"Error getting from remote registry :\",e);\n    }\n  }\n}\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 55,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 153,
        "startColumnNumber" : 24,
        "endLineNumber" : 154,
        "endColumnNumber" : 71
      },
      "nodeContext" : "EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "com.netflix.eureka.EurekaServerConfig"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 81,
    "startColumnNumber" : 20,
    "endLineNumber" : 81,
    "endColumnNumber" : 40
  }, {
    "charLength" : 20,
    "startLineNumber" : 82,
    "startColumnNumber" : 20,
    "endLineNumber" : 82,
    "endColumnNumber" : 40
  }, {
    "charLength" : 20,
    "startLineNumber" : 83,
    "startColumnNumber" : 20,
    "endLineNumber" : 83,
    "endColumnNumber" : 40
  }, {
    "charLength" : 20,
    "startLineNumber" : 84,
    "startColumnNumber" : 20,
    "endLineNumber" : 84,
    "endColumnNumber" : 40
  }, {
    "charLength" : 20,
    "startLineNumber" : 85,
    "startColumnNumber" : 20,
    "endLineNumber" : 85,
    "endColumnNumber" : 40
  }, {
    "charLength" : 20,
    "startLineNumber" : 91,
    "startColumnNumber" : 28,
    "endLineNumber" : 91,
    "endColumnNumber" : 48
  }, {
    "charLength" : 20,
    "startLineNumber" : 92,
    "startColumnNumber" : 28,
    "endLineNumber" : 92,
    "endColumnNumber" : 48
  }, {
    "charLength" : 20,
    "startLineNumber" : 93,
    "startColumnNumber" : 28,
    "endLineNumber" : 93,
    "endColumnNumber" : 48
  }, {
    "charLength" : 20,
    "startLineNumber" : 94,
    "startColumnNumber" : 28,
    "endLineNumber" : 94,
    "endColumnNumber" : 48
  }, {
    "charLength" : 20,
    "startLineNumber" : 95,
    "startColumnNumber" : 28,
    "endLineNumber" : 95,
    "endColumnNumber" : 48
  }, {
    "charLength" : 20,
    "startLineNumber" : 96,
    "startColumnNumber" : 28,
    "endLineNumber" : 96,
    "endColumnNumber" : 48
  }, {
    "charLength" : 20,
    "startLineNumber" : 97,
    "startColumnNumber" : 28,
    "endLineNumber" : 97,
    "endColumnNumber" : 48
  }, {
    "charLength" : 20,
    "startLineNumber" : 103,
    "startColumnNumber" : 12,
    "endLineNumber" : 103,
    "endColumnNumber" : 32
  }, {
    "charLength" : 20,
    "startLineNumber" : 151,
    "startColumnNumber" : 24,
    "endLineNumber" : 151,
    "endColumnNumber" : 44
  }, {
    "charLength" : 20,
    "startLineNumber" : 153,
    "startColumnNumber" : 24,
    "endLineNumber" : 153,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 2
  } ]
}