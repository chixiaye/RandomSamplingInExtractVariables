{
  "id" : 31,
  "expression" : "sqlAlterTable instanceof SqlAlterTableOptions",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/operations/SqlToOperationConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sqlAlterTable instanceof SqlAlterTableOptions",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 454,
      "startColumnNumber" : 19,
      "endLineNumber" : 454,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5088,
        "startLineNumber" : 454,
        "startColumnNumber" : 15,
        "endLineNumber" : 543,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sqlAlterTable instanceof SqlAlterTableOptions) {\n  return convertAlterTableOptions(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableOptions)sqlAlterTable);\n}\n else if (sqlAlterTable instanceof SqlAlterTableReset) {\n  return convertAlterTableReset(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableReset)sqlAlterTable);\n}\n else if (sqlAlterTable instanceof SqlAlterTableAddConstraint) {\n  SqlTableConstraint constraint=((SqlAlterTableAddConstraint)sqlAlterTable).getConstraint();\n  validateTableConstraint(constraint);\n  TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n  TableSchema.Builder builder=TableSchemaUtils.builderWithGivenSchema(oriSchema);\n  if (constraint.getConstraintName().isPresent()) {\n    builder.primaryKey(constraint.getConstraintName().get(),constraint.getColumnNames());\n  }\n else {\n    builder.primaryKey(constraint.getColumnNames());\n  }\n  builder.build();\n  return new AlterTableAddConstraintOperation(tableIdentifier,constraint.getConstraintName().orElse(null),constraint.getColumnNames());\n}\n else if (sqlAlterTable instanceof SqlAlterTableDropConstraint) {\n  SqlAlterTableDropConstraint dropConstraint=((SqlAlterTableDropConstraint)sqlAlterTable);\n  String constraintName=dropConstraint.getConstraintName().getSimple();\n  TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n  if (!oriSchema.getPrimaryKey().filter(pk -> pk.getName().equals(constraintName)).isPresent()) {\n    throw new ValidationException(String.format(\"CONSTRAINT [%s] does not exist\",constraintName));\n  }\n  return new AlterTableDropConstraintOperation(tableIdentifier,constraintName);\n}\n else if (sqlAlterTable instanceof SqlAddReplaceColumns) {\n  return OperationConverterUtils.convertAddReplaceColumns(tableIdentifier,(SqlAddReplaceColumns)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n}\n else if (sqlAlterTable instanceof SqlChangeColumn) {\n  return OperationConverterUtils.convertChangeColumn(tableIdentifier,(SqlChangeColumn)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n}\n else if (sqlAlterTable instanceof SqlAddPartitions) {\n  List<CatalogPartitionSpec> specs=new ArrayList<>();\n  List<CatalogPartition> partitions=new ArrayList<>();\n  SqlAddPartitions addPartitions=(SqlAddPartitions)sqlAlterTable;\n  for (int i=0; i < addPartitions.getPartSpecs().size(); i++) {\n    specs.add(new CatalogPartitionSpec(addPartitions.getPartitionKVs(i)));\n    Map<String,String> props=OperationConverterUtils.extractProperties(addPartitions.getPartProps().get(i));\n    partitions.add(new CatalogPartitionImpl(props,null));\n  }\n  return new AddPartitionsOperation(tableIdentifier,addPartitions.ifNotExists(),specs,partitions);\n}\n else if (sqlAlterTable instanceof SqlDropPartitions) {\n  SqlDropPartitions dropPartitions=(SqlDropPartitions)sqlAlterTable;\n  List<CatalogPartitionSpec> specs=new ArrayList<>();\n  for (int i=0; i < dropPartitions.getPartSpecs().size(); i++) {\n    specs.add(new CatalogPartitionSpec(dropPartitions.getPartitionKVs(i)));\n  }\n  return new DropPartitionsOperation(tableIdentifier,dropPartitions.ifExists(),specs);\n}\n else if (sqlAlterTable instanceof SqlAlterTableCompact) {\n  return convertAlterTableCompact(tableIdentifier,optionalCatalogTable.get(),(SqlAlterTableCompact)sqlAlterTable);\n}\n else {\n  throw new ValidationException(String.format(\"[%s] needs to implement\",sqlAlterTable.toSqlString(CalciteSqlDialect.DEFAULT)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 449,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5562,
        "startLineNumber" : 447,
        "startColumnNumber" : 8,
        "endLineNumber" : 543,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sqlAlterTable instanceof SqlAlterTableRename) {\n  UnresolvedIdentifier newUnresolvedIdentifier=UnresolvedIdentifier.of(((SqlAlterTableRename)sqlAlterTable).fullNewTableName());\n  ObjectIdentifier newTableIdentifier=catalogManager.qualifyIdentifier(newUnresolvedIdentifier);\n  return new AlterTableRenameOperation(tableIdentifier,newTableIdentifier);\n}\n else if (sqlAlterTable instanceof SqlAlterTableOptions) {\n  return convertAlterTableOptions(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableOptions)sqlAlterTable);\n}\n else if (sqlAlterTable instanceof SqlAlterTableReset) {\n  return convertAlterTableReset(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableReset)sqlAlterTable);\n}\n else if (sqlAlterTable instanceof SqlAlterTableAddConstraint) {\n  SqlTableConstraint constraint=((SqlAlterTableAddConstraint)sqlAlterTable).getConstraint();\n  validateTableConstraint(constraint);\n  TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n  TableSchema.Builder builder=TableSchemaUtils.builderWithGivenSchema(oriSchema);\n  if (constraint.getConstraintName().isPresent()) {\n    builder.primaryKey(constraint.getConstraintName().get(),constraint.getColumnNames());\n  }\n else {\n    builder.primaryKey(constraint.getColumnNames());\n  }\n  builder.build();\n  return new AlterTableAddConstraintOperation(tableIdentifier,constraint.getConstraintName().orElse(null),constraint.getColumnNames());\n}\n else if (sqlAlterTable instanceof SqlAlterTableDropConstraint) {\n  SqlAlterTableDropConstraint dropConstraint=((SqlAlterTableDropConstraint)sqlAlterTable);\n  String constraintName=dropConstraint.getConstraintName().getSimple();\n  TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n  if (!oriSchema.getPrimaryKey().filter(pk -> pk.getName().equals(constraintName)).isPresent()) {\n    throw new ValidationException(String.format(\"CONSTRAINT [%s] does not exist\",constraintName));\n  }\n  return new AlterTableDropConstraintOperation(tableIdentifier,constraintName);\n}\n else if (sqlAlterTable instanceof SqlAddReplaceColumns) {\n  return OperationConverterUtils.convertAddReplaceColumns(tableIdentifier,(SqlAddReplaceColumns)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n}\n else if (sqlAlterTable instanceof SqlChangeColumn) {\n  return OperationConverterUtils.convertChangeColumn(tableIdentifier,(SqlChangeColumn)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n}\n else if (sqlAlterTable instanceof SqlAddPartitions) {\n  List<CatalogPartitionSpec> specs=new ArrayList<>();\n  List<CatalogPartition> partitions=new ArrayList<>();\n  SqlAddPartitions addPartitions=(SqlAddPartitions)sqlAlterTable;\n  for (int i=0; i < addPartitions.getPartSpecs().size(); i++) {\n    specs.add(new CatalogPartitionSpec(addPartitions.getPartitionKVs(i)));\n    Map<String,String> props=OperationConverterUtils.extractProperties(addPartitions.getPartProps().get(i));\n    partitions.add(new CatalogPartitionImpl(props,null));\n  }\n  return new AddPartitionsOperation(tableIdentifier,addPartitions.ifNotExists(),specs,partitions);\n}\n else if (sqlAlterTable instanceof SqlDropPartitions) {\n  SqlDropPartitions dropPartitions=(SqlDropPartitions)sqlAlterTable;\n  List<CatalogPartitionSpec> specs=new ArrayList<>();\n  for (int i=0; i < dropPartitions.getPartSpecs().size(); i++) {\n    specs.add(new CatalogPartitionSpec(dropPartitions.getPartitionKVs(i)));\n  }\n  return new DropPartitionsOperation(tableIdentifier,dropPartitions.ifExists(),specs);\n}\n else if (sqlAlterTable instanceof SqlAlterTableCompact) {\n  return convertAlterTableCompact(tableIdentifier,optionalCatalogTable.get(),(SqlAlterTableCompact)sqlAlterTable);\n}\n else {\n  throw new ValidationException(String.format(\"[%s] needs to implement\",sqlAlterTable.toSqlString(CalciteSqlDialect.DEFAULT)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 485,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6418,
        "startLineNumber" : 432,
        "startColumnNumber" : 69,
        "endLineNumber" : 544,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UnresolvedIdentifier unresolvedIdentifier=UnresolvedIdentifier.of(sqlAlterTable.fullTableName());\n  ObjectIdentifier tableIdentifier=catalogManager.qualifyIdentifier(unresolvedIdentifier);\n  Optional<ContextResolvedTable> optionalCatalogTable=catalogManager.getTable(tableIdentifier);\n  if (!optionalCatalogTable.isPresent() || optionalCatalogTable.get().isTemporary()) {\n    throw new ValidationException(String.format(\"Table %s doesn't exist or is a temporary table.\",tableIdentifier));\n  }\n  CatalogBaseTable baseTable=optionalCatalogTable.get().getTable();\n  if (baseTable instanceof CatalogView) {\n    throw new ValidationException(\"ALTER TABLE for a view is not allowed\");\n  }\n  if (sqlAlterTable instanceof SqlAlterTableRename) {\n    UnresolvedIdentifier newUnresolvedIdentifier=UnresolvedIdentifier.of(((SqlAlterTableRename)sqlAlterTable).fullNewTableName());\n    ObjectIdentifier newTableIdentifier=catalogManager.qualifyIdentifier(newUnresolvedIdentifier);\n    return new AlterTableRenameOperation(tableIdentifier,newTableIdentifier);\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableOptions) {\n    return convertAlterTableOptions(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableOptions)sqlAlterTable);\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableReset) {\n    return convertAlterTableReset(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableReset)sqlAlterTable);\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableAddConstraint) {\n    SqlTableConstraint constraint=((SqlAlterTableAddConstraint)sqlAlterTable).getConstraint();\n    validateTableConstraint(constraint);\n    TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n    TableSchema.Builder builder=TableSchemaUtils.builderWithGivenSchema(oriSchema);\n    if (constraint.getConstraintName().isPresent()) {\n      builder.primaryKey(constraint.getConstraintName().get(),constraint.getColumnNames());\n    }\n else {\n      builder.primaryKey(constraint.getColumnNames());\n    }\n    builder.build();\n    return new AlterTableAddConstraintOperation(tableIdentifier,constraint.getConstraintName().orElse(null),constraint.getColumnNames());\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableDropConstraint) {\n    SqlAlterTableDropConstraint dropConstraint=((SqlAlterTableDropConstraint)sqlAlterTable);\n    String constraintName=dropConstraint.getConstraintName().getSimple();\n    TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n    if (!oriSchema.getPrimaryKey().filter(pk -> pk.getName().equals(constraintName)).isPresent()) {\n      throw new ValidationException(String.format(\"CONSTRAINT [%s] does not exist\",constraintName));\n    }\n    return new AlterTableDropConstraintOperation(tableIdentifier,constraintName);\n  }\n else   if (sqlAlterTable instanceof SqlAddReplaceColumns) {\n    return OperationConverterUtils.convertAddReplaceColumns(tableIdentifier,(SqlAddReplaceColumns)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n  }\n else   if (sqlAlterTable instanceof SqlChangeColumn) {\n    return OperationConverterUtils.convertChangeColumn(tableIdentifier,(SqlChangeColumn)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n  }\n else   if (sqlAlterTable instanceof SqlAddPartitions) {\n    List<CatalogPartitionSpec> specs=new ArrayList<>();\n    List<CatalogPartition> partitions=new ArrayList<>();\n    SqlAddPartitions addPartitions=(SqlAddPartitions)sqlAlterTable;\n    for (int i=0; i < addPartitions.getPartSpecs().size(); i++) {\n      specs.add(new CatalogPartitionSpec(addPartitions.getPartitionKVs(i)));\n      Map<String,String> props=OperationConverterUtils.extractProperties(addPartitions.getPartProps().get(i));\n      partitions.add(new CatalogPartitionImpl(props,null));\n    }\n    return new AddPartitionsOperation(tableIdentifier,addPartitions.ifNotExists(),specs,partitions);\n  }\n else   if (sqlAlterTable instanceof SqlDropPartitions) {\n    SqlDropPartitions dropPartitions=(SqlDropPartitions)sqlAlterTable;\n    List<CatalogPartitionSpec> specs=new ArrayList<>();\n    for (int i=0; i < dropPartitions.getPartSpecs().size(); i++) {\n      specs.add(new CatalogPartitionSpec(dropPartitions.getPartitionKVs(i)));\n    }\n    return new DropPartitionsOperation(tableIdentifier,dropPartitions.ifExists(),specs);\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableCompact) {\n    return convertAlterTableCompact(tableIdentifier,optionalCatalogTable.get(),(SqlAlterTableCompact)sqlAlterTable);\n  }\n else {\n    throw new ValidationException(String.format(\"[%s] needs to implement\",sqlAlterTable.toSqlString(CalciteSqlDialect.DEFAULT)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 560,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6525,
        "startLineNumber" : 431,
        "startColumnNumber" : 4,
        "endLineNumber" : 544,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * convert ALTER TABLE statement. \n */\nprivate Operation convertAlterTable(SqlAlterTable sqlAlterTable){\n  UnresolvedIdentifier unresolvedIdentifier=UnresolvedIdentifier.of(sqlAlterTable.fullTableName());\n  ObjectIdentifier tableIdentifier=catalogManager.qualifyIdentifier(unresolvedIdentifier);\n  Optional<ContextResolvedTable> optionalCatalogTable=catalogManager.getTable(tableIdentifier);\n  if (!optionalCatalogTable.isPresent() || optionalCatalogTable.get().isTemporary()) {\n    throw new ValidationException(String.format(\"Table %s doesn't exist or is a temporary table.\",tableIdentifier));\n  }\n  CatalogBaseTable baseTable=optionalCatalogTable.get().getTable();\n  if (baseTable instanceof CatalogView) {\n    throw new ValidationException(\"ALTER TABLE for a view is not allowed\");\n  }\n  if (sqlAlterTable instanceof SqlAlterTableRename) {\n    UnresolvedIdentifier newUnresolvedIdentifier=UnresolvedIdentifier.of(((SqlAlterTableRename)sqlAlterTable).fullNewTableName());\n    ObjectIdentifier newTableIdentifier=catalogManager.qualifyIdentifier(newUnresolvedIdentifier);\n    return new AlterTableRenameOperation(tableIdentifier,newTableIdentifier);\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableOptions) {\n    return convertAlterTableOptions(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableOptions)sqlAlterTable);\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableReset) {\n    return convertAlterTableReset(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableReset)sqlAlterTable);\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableAddConstraint) {\n    SqlTableConstraint constraint=((SqlAlterTableAddConstraint)sqlAlterTable).getConstraint();\n    validateTableConstraint(constraint);\n    TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n    TableSchema.Builder builder=TableSchemaUtils.builderWithGivenSchema(oriSchema);\n    if (constraint.getConstraintName().isPresent()) {\n      builder.primaryKey(constraint.getConstraintName().get(),constraint.getColumnNames());\n    }\n else {\n      builder.primaryKey(constraint.getColumnNames());\n    }\n    builder.build();\n    return new AlterTableAddConstraintOperation(tableIdentifier,constraint.getConstraintName().orElse(null),constraint.getColumnNames());\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableDropConstraint) {\n    SqlAlterTableDropConstraint dropConstraint=((SqlAlterTableDropConstraint)sqlAlterTable);\n    String constraintName=dropConstraint.getConstraintName().getSimple();\n    TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n    if (!oriSchema.getPrimaryKey().filter(pk -> pk.getName().equals(constraintName)).isPresent()) {\n      throw new ValidationException(String.format(\"CONSTRAINT [%s] does not exist\",constraintName));\n    }\n    return new AlterTableDropConstraintOperation(tableIdentifier,constraintName);\n  }\n else   if (sqlAlterTable instanceof SqlAddReplaceColumns) {\n    return OperationConverterUtils.convertAddReplaceColumns(tableIdentifier,(SqlAddReplaceColumns)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n  }\n else   if (sqlAlterTable instanceof SqlChangeColumn) {\n    return OperationConverterUtils.convertChangeColumn(tableIdentifier,(SqlChangeColumn)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n  }\n else   if (sqlAlterTable instanceof SqlAddPartitions) {\n    List<CatalogPartitionSpec> specs=new ArrayList<>();\n    List<CatalogPartition> partitions=new ArrayList<>();\n    SqlAddPartitions addPartitions=(SqlAddPartitions)sqlAlterTable;\n    for (int i=0; i < addPartitions.getPartSpecs().size(); i++) {\n      specs.add(new CatalogPartitionSpec(addPartitions.getPartitionKVs(i)));\n      Map<String,String> props=OperationConverterUtils.extractProperties(addPartitions.getPartProps().get(i));\n      partitions.add(new CatalogPartitionImpl(props,null));\n    }\n    return new AddPartitionsOperation(tableIdentifier,addPartitions.ifNotExists(),specs,partitions);\n  }\n else   if (sqlAlterTable instanceof SqlDropPartitions) {\n    SqlDropPartitions dropPartitions=(SqlDropPartitions)sqlAlterTable;\n    List<CatalogPartitionSpec> specs=new ArrayList<>();\n    for (int i=0; i < dropPartitions.getPartSpecs().size(); i++) {\n      specs.add(new CatalogPartitionSpec(dropPartitions.getPartitionKVs(i)));\n    }\n    return new DropPartitionsOperation(tableIdentifier,dropPartitions.ifExists(),specs);\n  }\n else   if (sqlAlterTable instanceof SqlAlterTableCompact) {\n    return convertAlterTableCompact(tableIdentifier,optionalCatalogTable.get(),(SqlAlterTableCompact)sqlAlterTable);\n  }\n else {\n    throw new ValidationException(String.format(\"[%s] needs to implement\",sqlAlterTable.toSqlString(CalciteSqlDialect.DEFAULT)));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 570,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5088,
        "startLineNumber" : 454,
        "startColumnNumber" : 15,
        "endLineNumber" : 543,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sqlAlterTable instanceof SqlAlterTableOptions) {\n  return convertAlterTableOptions(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableOptions)sqlAlterTable);\n}\n else if (sqlAlterTable instanceof SqlAlterTableReset) {\n  return convertAlterTableReset(tableIdentifier,(CatalogTable)baseTable,(SqlAlterTableReset)sqlAlterTable);\n}\n else if (sqlAlterTable instanceof SqlAlterTableAddConstraint) {\n  SqlTableConstraint constraint=((SqlAlterTableAddConstraint)sqlAlterTable).getConstraint();\n  validateTableConstraint(constraint);\n  TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n  TableSchema.Builder builder=TableSchemaUtils.builderWithGivenSchema(oriSchema);\n  if (constraint.getConstraintName().isPresent()) {\n    builder.primaryKey(constraint.getConstraintName().get(),constraint.getColumnNames());\n  }\n else {\n    builder.primaryKey(constraint.getColumnNames());\n  }\n  builder.build();\n  return new AlterTableAddConstraintOperation(tableIdentifier,constraint.getConstraintName().orElse(null),constraint.getColumnNames());\n}\n else if (sqlAlterTable instanceof SqlAlterTableDropConstraint) {\n  SqlAlterTableDropConstraint dropConstraint=((SqlAlterTableDropConstraint)sqlAlterTable);\n  String constraintName=dropConstraint.getConstraintName().getSimple();\n  TableSchema oriSchema=TableSchema.fromResolvedSchema(baseTable.getUnresolvedSchema().resolve(catalogManager.getSchemaResolver()));\n  if (!oriSchema.getPrimaryKey().filter(pk -> pk.getName().equals(constraintName)).isPresent()) {\n    throw new ValidationException(String.format(\"CONSTRAINT [%s] does not exist\",constraintName));\n  }\n  return new AlterTableDropConstraintOperation(tableIdentifier,constraintName);\n}\n else if (sqlAlterTable instanceof SqlAddReplaceColumns) {\n  return OperationConverterUtils.convertAddReplaceColumns(tableIdentifier,(SqlAddReplaceColumns)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n}\n else if (sqlAlterTable instanceof SqlChangeColumn) {\n  return OperationConverterUtils.convertChangeColumn(tableIdentifier,(SqlChangeColumn)sqlAlterTable,(CatalogTable)baseTable,flinkPlanner.getOrCreateSqlValidator());\n}\n else if (sqlAlterTable instanceof SqlAddPartitions) {\n  List<CatalogPartitionSpec> specs=new ArrayList<>();\n  List<CatalogPartition> partitions=new ArrayList<>();\n  SqlAddPartitions addPartitions=(SqlAddPartitions)sqlAlterTable;\n  for (int i=0; i < addPartitions.getPartSpecs().size(); i++) {\n    specs.add(new CatalogPartitionSpec(addPartitions.getPartitionKVs(i)));\n    Map<String,String> props=OperationConverterUtils.extractProperties(addPartitions.getPartProps().get(i));\n    partitions.add(new CatalogPartitionImpl(props,null));\n  }\n  return new AddPartitionsOperation(tableIdentifier,addPartitions.ifNotExists(),specs,partitions);\n}\n else if (sqlAlterTable instanceof SqlDropPartitions) {\n  SqlDropPartitions dropPartitions=(SqlDropPartitions)sqlAlterTable;\n  List<CatalogPartitionSpec> specs=new ArrayList<>();\n  for (int i=0; i < dropPartitions.getPartSpecs().size(); i++) {\n    specs.add(new CatalogPartitionSpec(dropPartitions.getPartitionKVs(i)));\n  }\n  return new DropPartitionsOperation(tableIdentifier,dropPartitions.ifExists(),specs);\n}\n else if (sqlAlterTable instanceof SqlAlterTableCompact) {\n  return convertAlterTableCompact(tableIdentifier,optionalCatalogTable.get(),(SqlAlterTableCompact)sqlAlterTable);\n}\n else {\n  throw new ValidationException(String.format(\"[%s] needs to implement\",sqlAlterTable.toSqlString(CalciteSqlDialect.DEFAULT)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 449,
      "astHeight" : 16
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 454,
    "startColumnNumber" : 19,
    "endLineNumber" : 454,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}