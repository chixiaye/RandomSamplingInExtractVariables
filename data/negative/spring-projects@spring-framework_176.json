{
  "id" : 176,
  "expression" : "Class.class",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-test/src/test/java/org/springframework/test/context/junit4/JUnitTestingUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Class.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 92,
      "startColumnNumber" : 59,
      "endLineNumber" : 92,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 92,
        "startColumnNumber" : 32,
        "endLineNumber" : 92,
        "endColumnNumber" : 71
      },
      "nodeContext" : "runnerClass.getConstructor(Class.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 92,
        "startColumnNumber" : 18,
        "endLineNumber" : 92,
        "endColumnNumber" : 71
      },
      "nodeContext" : "constructor=runnerClass.getConstructor(Class.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 92,
        "startColumnNumber" : 3,
        "endLineNumber" : 92,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Constructor<?> constructor=runnerClass.getConstructor(Class.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 91,
        "startColumnNumber" : 27,
        "endLineNumber" : 97,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Constructor<?> constructor=runnerClass.getConstructor(Class.class);\n  Runner runner=(Runner)BeanUtils.instantiateClass(constructor,testClass);\n  RunNotifier notifier=new RunNotifier();\n  notifier.addListener(listener);\n  runner.run(notifier);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 396,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 102,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (runnerClass != null) {\n  Constructor<?> constructor=runnerClass.getConstructor(Class.class);\n  Runner runner=(Runner)BeanUtils.instantiateClass(constructor,testClass);\n  RunNotifier notifier=new RunNotifier();\n  notifier.addListener(listener);\n  runner.run(notifier);\n}\n else {\n  JUnitCore junit=new JUnitCore();\n  junit.addListener(listener);\n  junit.run(testClass);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 87,
        "startColumnNumber" : 55,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TrackingRunListener listener=new TrackingRunListener();\n  if (runnerClass != null) {\n    Constructor<?> constructor=runnerClass.getConstructor(Class.class);\n    Runner runner=(Runner)BeanUtils.instantiateClass(constructor,testClass);\n    RunNotifier notifier=new RunNotifier();\n    notifier.addListener(listener);\n    runner.run(notifier);\n  }\n else {\n    JUnitCore junit=new JUnitCore();\n    junit.addListener(listener);\n    junit.run(testClass);\n  }\n  assertAll(() -> assertEquals(expectedStartedCount,listener.getTestStartedCount(),\"tests started for [\" + testClass + \"]\"),() -> assertEquals(expectedFailedCount,listener.getTestFailureCount(),\"tests failed for [\" + testClass + \"]\"),() -> assertEquals(expectedFinishedCount,listener.getTestFinishedCount(),\"tests finished for [\" + testClass + \"]\"),() -> assertEquals(expectedIgnoredCount,listener.getTestIgnoredCount(),\"tests ignored for [\" + testClass + \"]\"),() -> assertEquals(expectedAssumptionFailedCount,listener.getTestAssumptionFailureCount(),\"failed assumptions for [\" + testClass + \"]\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2360,
        "startLineNumber" : 67,
        "startColumnNumber" : 1,
        "endLineNumber" : 113,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Run the tests in the supplied  {@code testClass}, using the specified {@link Runner}, and assert the expectations of the test execution. <p>If the specified  {@code runnerClass} is {@code null}, the tests will be run with the runner that the test class is configured with (i.e., via  {@link RunWith @RunWith}) or the default JUnit runner.\n * @param runnerClass the explicit runner class to use or {@code null}if the default JUnit runner should be used\n * @param testClass the test class to run with JUnit\n * @param expectedStartedCount the expected number of tests that started\n * @param expectedFailedCount the expected number of tests that failed\n * @param expectedFinishedCount the expected number of tests that finished\n * @param expectedIgnoredCount the expected number of tests that were ignored\n * @param expectedAssumptionFailedCount the expected number of tests thatresulted in a failed assumption\n */\npublic static void runTestsAndAssertCounters(Class<? extends Runner> runnerClass,Class<?> testClass,int expectedStartedCount,int expectedFailedCount,int expectedFinishedCount,int expectedIgnoredCount,int expectedAssumptionFailedCount) throws Exception {\n  TrackingRunListener listener=new TrackingRunListener();\n  if (runnerClass != null) {\n    Constructor<?> constructor=runnerClass.getConstructor(Class.class);\n    Runner runner=(Runner)BeanUtils.instantiateClass(constructor,testClass);\n    RunNotifier notifier=new RunNotifier();\n    notifier.addListener(listener);\n    runner.run(notifier);\n  }\n else {\n    JUnitCore junit=new JUnitCore();\n    junit.addListener(listener);\n    junit.run(testClass);\n  }\n  assertAll(() -> assertEquals(expectedStartedCount,listener.getTestStartedCount(),\"tests started for [\" + testClass + \"]\"),() -> assertEquals(expectedFailedCount,listener.getTestFailureCount(),\"tests failed for [\" + testClass + \"]\"),() -> assertEquals(expectedFinishedCount,listener.getTestFinishedCount(),\"tests finished for [\" + testClass + \"]\"),() -> assertEquals(expectedIgnoredCount,listener.getTestIgnoredCount(),\"tests ignored for [\" + testClass + \"]\"),() -> assertEquals(expectedAssumptionFailedCount,listener.getTestAssumptionFailureCount(),\"failed assumptions for [\" + testClass + \"]\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 92,
        "startColumnNumber" : 3,
        "endLineNumber" : 92,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Constructor<?> constructor=runnerClass.getConstructor(Class.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Class>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 92,
    "startColumnNumber" : 59,
    "endLineNumber" : 92,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}