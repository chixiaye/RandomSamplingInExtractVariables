{
  "id" : 225,
  "expression" : "schemaName",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "ab6d66147b858dca268119456e084a6540512329",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PhpMezzioPathHandlerServerCodegen.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "schemaName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 227,
      "startColumnNumber" : 63,
      "endLineNumber" : 227,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 227,
        "startColumnNumber" : 28,
        "endLineNumber" : 227,
        "endColumnNumber" : 82
      },
      "nodeContext" : "openAPI.getComponents().addSchemas(schemaName,schema)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 227,
        "startColumnNumber" : 28,
        "endLineNumber" : 227,
        "endColumnNumber" : 83
      },
      "nodeContext" : "openAPI.getComponents().addSchemas(schemaName,schema);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1035,
        "startLineNumber" : 219,
        "startColumnNumber" : 56,
        "endLineNumber" : 231,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  ObjectSchema schema=new ObjectSchema();\n  String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n  schema.setDescription(\"Query parameters for \" + operationId);\n  schema.setProperties(propertySchemas);\n  schema.setRequired(requiredProperties);\n  addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n  String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n  openAPI.getComponents().addSchemas(schemaName,schema);\n  String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n  addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n  addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 219,
        "startColumnNumber" : 24,
        "endLineNumber" : 231,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!propertySchemas.isEmpty()) {\n  ObjectSchema schema=new ObjectSchema();\n  String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n  schema.setDescription(\"Query parameters for \" + operationId);\n  schema.setProperties(propertySchemas);\n  schema.setRequired(requiredProperties);\n  addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n  String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n  openAPI.getComponents().addSchemas(schemaName,schema);\n  String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n  addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n  addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2221,
        "startLineNumber" : 200,
        "startColumnNumber" : 68,
        "endLineNumber" : 232,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Operation operation=operationMap.get(method);\n  Map<String,Schema> propertySchemas=new HashMap<>();\n  if (operation == null || operation.getParameters() == null) {\n    continue;\n  }\n  List<String> requiredProperties=new ArrayList<>();\n  for (  Parameter parameter : operation.getParameters()) {\n    Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n    Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n    if (propertySchema != null) {\n      propertySchemas.put(propertySchema.getName(),propertySchema);\n      if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n        requiredProperties.add(propertySchema.getName());\n      }\n    }\n  }\n  if (!propertySchemas.isEmpty()) {\n    ObjectSchema schema=new ObjectSchema();\n    String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n    schema.setDescription(\"Query parameters for \" + operationId);\n    schema.setProperties(propertySchemas);\n    schema.setRequired(requiredProperties);\n    addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n    String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n    openAPI.getComponents().addSchemas(schemaName,schema);\n    String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n    addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n    addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2269,
        "startLineNumber" : 200,
        "startColumnNumber" : 20,
        "endLineNumber" : 232,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (HttpMethod method : operationMap.keySet()) {\n  Operation operation=operationMap.get(method);\n  Map<String,Schema> propertySchemas=new HashMap<>();\n  if (operation == null || operation.getParameters() == null) {\n    continue;\n  }\n  List<String> requiredProperties=new ArrayList<>();\n  for (  Parameter parameter : operation.getParameters()) {\n    Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n    Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n    if (propertySchema != null) {\n      propertySchemas.put(propertySchema.getName(),propertySchema);\n      if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n        requiredProperties.add(propertySchema.getName());\n      }\n    }\n  }\n  if (!propertySchemas.isEmpty()) {\n    ObjectSchema schema=new ObjectSchema();\n    String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n    schema.setDescription(\"Query parameters for \" + operationId);\n    schema.setProperties(propertySchemas);\n    schema.setRequired(requiredProperties);\n    addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n    String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n    openAPI.getComponents().addSchemas(schemaName,schema);\n    String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n    addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n    addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 208,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2309,
        "startLineNumber" : 199,
        "startColumnNumber" : 42,
        "endLineNumber" : 233,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (  HttpMethod method : operationMap.keySet()) {\n    Operation operation=operationMap.get(method);\n    Map<String,Schema> propertySchemas=new HashMap<>();\n    if (operation == null || operation.getParameters() == null) {\n      continue;\n    }\n    List<String> requiredProperties=new ArrayList<>();\n    for (    Parameter parameter : operation.getParameters()) {\n      Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n      Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n      if (propertySchema != null) {\n        propertySchemas.put(propertySchema.getName(),propertySchema);\n        if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n          requiredProperties.add(propertySchema.getName());\n        }\n      }\n    }\n    if (!propertySchemas.isEmpty()) {\n      ObjectSchema schema=new ObjectSchema();\n      String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n      schema.setDescription(\"Query parameters for \" + operationId);\n      schema.setProperties(propertySchemas);\n      schema.setRequired(requiredProperties);\n      addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n      String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n      openAPI.getComponents().addSchemas(schemaName,schema);\n      String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n      addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n      addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2335,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 233,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (operationMap != null) {\n  for (  HttpMethod method : operationMap.keySet()) {\n    Operation operation=operationMap.get(method);\n    Map<String,Schema> propertySchemas=new HashMap<>();\n    if (operation == null || operation.getParameters() == null) {\n      continue;\n    }\n    List<String> requiredProperties=new ArrayList<>();\n    for (    Parameter parameter : operation.getParameters()) {\n      Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n      Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n      if (propertySchema != null) {\n        propertySchemas.put(propertySchema.getName(),propertySchema);\n        if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n          requiredProperties.add(propertySchema.getName());\n        }\n      }\n    }\n    if (!propertySchemas.isEmpty()) {\n      ObjectSchema schema=new ObjectSchema();\n      String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n      schema.setDescription(\"Query parameters for \" + operationId);\n      schema.setProperties(propertySchemas);\n      schema.setRequired(requiredProperties);\n      addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n      String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n      openAPI.getComponents().addSchemas(schemaName,schema);\n      String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n      addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n      addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 213,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 196,
        "startColumnNumber" : 51,
        "endLineNumber" : 234,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  PathItem path=paths.get(pathname);\n  Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n  if (operationMap != null) {\n    for (    HttpMethod method : operationMap.keySet()) {\n      Operation operation=operationMap.get(method);\n      Map<String,Schema> propertySchemas=new HashMap<>();\n      if (operation == null || operation.getParameters() == null) {\n        continue;\n      }\n      List<String> requiredProperties=new ArrayList<>();\n      for (      Parameter parameter : operation.getParameters()) {\n        Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n        Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n        if (propertySchema != null) {\n          propertySchemas.put(propertySchema.getName(),propertySchema);\n          if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n            requiredProperties.add(propertySchema.getName());\n          }\n        }\n      }\n      if (!propertySchemas.isEmpty()) {\n        ObjectSchema schema=new ObjectSchema();\n        String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n        schema.setDescription(\"Query parameters for \" + operationId);\n        schema.setProperties(propertySchemas);\n        schema.setRequired(requiredProperties);\n        addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n        String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n        openAPI.getComponents().addSchemas(schemaName,schema);\n        String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n        addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n        addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2543,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 234,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String pathname : paths.keySet()) {\n  PathItem path=paths.get(pathname);\n  Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n  if (operationMap != null) {\n    for (    HttpMethod method : operationMap.keySet()) {\n      Operation operation=operationMap.get(method);\n      Map<String,Schema> propertySchemas=new HashMap<>();\n      if (operation == null || operation.getParameters() == null) {\n        continue;\n      }\n      List<String> requiredProperties=new ArrayList<>();\n      for (      Parameter parameter : operation.getParameters()) {\n        Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n        Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n        if (propertySchema != null) {\n          propertySchemas.put(propertySchema.getName(),propertySchema);\n          if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n            requiredProperties.add(propertySchema.getName());\n          }\n        }\n      }\n      if (!propertySchemas.isEmpty()) {\n        ObjectSchema schema=new ObjectSchema();\n        String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n        schema.setDescription(\"Query parameters for \" + operationId);\n        schema.setProperties(propertySchemas);\n        schema.setRequired(requiredProperties);\n        addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n        String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n        openAPI.getComponents().addSchemas(schemaName,schema);\n        String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n        addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n        addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 244,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2567,
        "startLineNumber" : 195,
        "startColumnNumber" : 27,
        "endLineNumber" : 235,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  String pathname : paths.keySet()) {\n    PathItem path=paths.get(pathname);\n    Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n    if (operationMap != null) {\n      for (      HttpMethod method : operationMap.keySet()) {\n        Operation operation=operationMap.get(method);\n        Map<String,Schema> propertySchemas=new HashMap<>();\n        if (operation == null || operation.getParameters() == null) {\n          continue;\n        }\n        List<String> requiredProperties=new ArrayList<>();\n        for (        Parameter parameter : operation.getParameters()) {\n          Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n          Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n          if (propertySchema != null) {\n            propertySchemas.put(propertySchema.getName(),propertySchema);\n            if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n              requiredProperties.add(propertySchema.getName());\n            }\n          }\n        }\n        if (!propertySchemas.isEmpty()) {\n          ObjectSchema schema=new ObjectSchema();\n          String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n          schema.setDescription(\"Query parameters for \" + operationId);\n          schema.setProperties(propertySchemas);\n          schema.setRequired(requiredProperties);\n          addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n          String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n          openAPI.getComponents().addSchemas(schemaName,schema);\n          String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n          addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n          addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2586,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 235,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (paths != null) {\n  for (  String pathname : paths.keySet()) {\n    PathItem path=paths.get(pathname);\n    Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n    if (operationMap != null) {\n      for (      HttpMethod method : operationMap.keySet()) {\n        Operation operation=operationMap.get(method);\n        Map<String,Schema> propertySchemas=new HashMap<>();\n        if (operation == null || operation.getParameters() == null) {\n          continue;\n        }\n        List<String> requiredProperties=new ArrayList<>();\n        for (        Parameter parameter : operation.getParameters()) {\n          Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n          Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n          if (propertySchema != null) {\n            propertySchemas.put(propertySchema.getName(),propertySchema);\n            if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n              requiredProperties.add(propertySchema.getName());\n            }\n          }\n        }\n        if (!propertySchemas.isEmpty()) {\n          ObjectSchema schema=new ObjectSchema();\n          String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n          schema.setDescription(\"Query parameters for \" + operationId);\n          schema.setProperties(propertySchemas);\n          schema.setRequired(requiredProperties);\n          addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n          String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n          openAPI.getComponents().addSchemas(schemaName,schema);\n          String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n          addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n          addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2660,
        "startLineNumber" : 193,
        "startColumnNumber" : 61,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,PathItem> paths=openAPI.getPaths();\n  if (paths != null) {\n    for (    String pathname : paths.keySet()) {\n      PathItem path=paths.get(pathname);\n      Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n      if (operationMap != null) {\n        for (        HttpMethod method : operationMap.keySet()) {\n          Operation operation=operationMap.get(method);\n          Map<String,Schema> propertySchemas=new HashMap<>();\n          if (operation == null || operation.getParameters() == null) {\n            continue;\n          }\n          List<String> requiredProperties=new ArrayList<>();\n          for (          Parameter parameter : operation.getParameters()) {\n            Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n            Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n            if (propertySchema != null) {\n              propertySchemas.put(propertySchema.getName(),propertySchema);\n              if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n                requiredProperties.add(propertySchema.getName());\n              }\n            }\n          }\n          if (!propertySchemas.isEmpty()) {\n            ObjectSchema schema=new ObjectSchema();\n            String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n            schema.setDescription(\"Query parameters for \" + operationId);\n            schema.setProperties(propertySchemas);\n            schema.setRequired(requiredProperties);\n            addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n            String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n            openAPI.getComponents().addSchemas(schemaName,schema);\n            String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n            addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n            addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate additional model definitions from query parameters\n * @param openAPI OpenAPI object\n */\nprotected void generateParameterSchemas(OpenAPI openAPI){\n  Map<String,PathItem> paths=openAPI.getPaths();\n  if (paths != null) {\n    for (    String pathname : paths.keySet()) {\n      PathItem path=paths.get(pathname);\n      Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n      if (operationMap != null) {\n        for (        HttpMethod method : operationMap.keySet()) {\n          Operation operation=operationMap.get(method);\n          Map<String,Schema> propertySchemas=new HashMap<>();\n          if (operation == null || operation.getParameters() == null) {\n            continue;\n          }\n          List<String> requiredProperties=new ArrayList<>();\n          for (          Parameter parameter : operation.getParameters()) {\n            Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n            Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n            if (propertySchema != null) {\n              propertySchemas.put(propertySchema.getName(),propertySchema);\n              if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n                requiredProperties.add(propertySchema.getName());\n              }\n            }\n          }\n          if (!propertySchemas.isEmpty()) {\n            ObjectSchema schema=new ObjectSchema();\n            String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n            schema.setDescription(\"Query parameters for \" + operationId);\n            schema.setProperties(propertySchemas);\n            schema.setRequired(requiredProperties);\n            addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n            String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n            openAPI.getComponents().addSchemas(schemaName,schema);\n            String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n            addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n            addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 227,
        "startColumnNumber" : 28,
        "endLineNumber" : 227,
        "endColumnNumber" : 83
      },
      "nodeContext" : "openAPI.getComponents().addSchemas(schemaName,schema);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "schemaName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 228,
      "startColumnNumber" : 83,
      "endLineNumber" : 228,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 228,
        "startColumnNumber" : 71,
        "endLineNumber" : 228,
        "endColumnNumber" : 94
      },
      "nodeContext" : "toModelName(schemaName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 228,
        "startColumnNumber" : 52,
        "endLineNumber" : 228,
        "endColumnNumber" : 95
      },
      "nodeContext" : "getTypeDeclaration(toModelName(schemaName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 228,
        "startColumnNumber" : 35,
        "endLineNumber" : 228,
        "endColumnNumber" : 95
      },
      "nodeContext" : "schemaDataType=getTypeDeclaration(toModelName(schemaName))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 228,
        "startColumnNumber" : 28,
        "endLineNumber" : 228,
        "endColumnNumber" : 96
      },
      "nodeContext" : "String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1035,
        "startLineNumber" : 219,
        "startColumnNumber" : 56,
        "endLineNumber" : 231,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  ObjectSchema schema=new ObjectSchema();\n  String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n  schema.setDescription(\"Query parameters for \" + operationId);\n  schema.setProperties(propertySchemas);\n  schema.setRequired(requiredProperties);\n  addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n  String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n  openAPI.getComponents().addSchemas(schemaName,schema);\n  String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n  addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n  addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 219,
        "startColumnNumber" : 24,
        "endLineNumber" : 231,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!propertySchemas.isEmpty()) {\n  ObjectSchema schema=new ObjectSchema();\n  String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n  schema.setDescription(\"Query parameters for \" + operationId);\n  schema.setProperties(propertySchemas);\n  schema.setRequired(requiredProperties);\n  addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n  String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n  openAPI.getComponents().addSchemas(schemaName,schema);\n  String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n  addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n  addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2221,
        "startLineNumber" : 200,
        "startColumnNumber" : 68,
        "endLineNumber" : 232,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Operation operation=operationMap.get(method);\n  Map<String,Schema> propertySchemas=new HashMap<>();\n  if (operation == null || operation.getParameters() == null) {\n    continue;\n  }\n  List<String> requiredProperties=new ArrayList<>();\n  for (  Parameter parameter : operation.getParameters()) {\n    Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n    Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n    if (propertySchema != null) {\n      propertySchemas.put(propertySchema.getName(),propertySchema);\n      if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n        requiredProperties.add(propertySchema.getName());\n      }\n    }\n  }\n  if (!propertySchemas.isEmpty()) {\n    ObjectSchema schema=new ObjectSchema();\n    String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n    schema.setDescription(\"Query parameters for \" + operationId);\n    schema.setProperties(propertySchemas);\n    schema.setRequired(requiredProperties);\n    addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n    String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n    openAPI.getComponents().addSchemas(schemaName,schema);\n    String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n    addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n    addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2269,
        "startLineNumber" : 200,
        "startColumnNumber" : 20,
        "endLineNumber" : 232,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (HttpMethod method : operationMap.keySet()) {\n  Operation operation=operationMap.get(method);\n  Map<String,Schema> propertySchemas=new HashMap<>();\n  if (operation == null || operation.getParameters() == null) {\n    continue;\n  }\n  List<String> requiredProperties=new ArrayList<>();\n  for (  Parameter parameter : operation.getParameters()) {\n    Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n    Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n    if (propertySchema != null) {\n      propertySchemas.put(propertySchema.getName(),propertySchema);\n      if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n        requiredProperties.add(propertySchema.getName());\n      }\n    }\n  }\n  if (!propertySchemas.isEmpty()) {\n    ObjectSchema schema=new ObjectSchema();\n    String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n    schema.setDescription(\"Query parameters for \" + operationId);\n    schema.setProperties(propertySchemas);\n    schema.setRequired(requiredProperties);\n    addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n    String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n    openAPI.getComponents().addSchemas(schemaName,schema);\n    String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n    addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n    addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 208,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2309,
        "startLineNumber" : 199,
        "startColumnNumber" : 42,
        "endLineNumber" : 233,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (  HttpMethod method : operationMap.keySet()) {\n    Operation operation=operationMap.get(method);\n    Map<String,Schema> propertySchemas=new HashMap<>();\n    if (operation == null || operation.getParameters() == null) {\n      continue;\n    }\n    List<String> requiredProperties=new ArrayList<>();\n    for (    Parameter parameter : operation.getParameters()) {\n      Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n      Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n      if (propertySchema != null) {\n        propertySchemas.put(propertySchema.getName(),propertySchema);\n        if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n          requiredProperties.add(propertySchema.getName());\n        }\n      }\n    }\n    if (!propertySchemas.isEmpty()) {\n      ObjectSchema schema=new ObjectSchema();\n      String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n      schema.setDescription(\"Query parameters for \" + operationId);\n      schema.setProperties(propertySchemas);\n      schema.setRequired(requiredProperties);\n      addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n      String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n      openAPI.getComponents().addSchemas(schemaName,schema);\n      String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n      addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n      addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2335,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 233,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (operationMap != null) {\n  for (  HttpMethod method : operationMap.keySet()) {\n    Operation operation=operationMap.get(method);\n    Map<String,Schema> propertySchemas=new HashMap<>();\n    if (operation == null || operation.getParameters() == null) {\n      continue;\n    }\n    List<String> requiredProperties=new ArrayList<>();\n    for (    Parameter parameter : operation.getParameters()) {\n      Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n      Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n      if (propertySchema != null) {\n        propertySchemas.put(propertySchema.getName(),propertySchema);\n        if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n          requiredProperties.add(propertySchema.getName());\n        }\n      }\n    }\n    if (!propertySchemas.isEmpty()) {\n      ObjectSchema schema=new ObjectSchema();\n      String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n      schema.setDescription(\"Query parameters for \" + operationId);\n      schema.setProperties(propertySchemas);\n      schema.setRequired(requiredProperties);\n      addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n      String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n      openAPI.getComponents().addSchemas(schemaName,schema);\n      String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n      addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n      addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 213,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 196,
        "startColumnNumber" : 51,
        "endLineNumber" : 234,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  PathItem path=paths.get(pathname);\n  Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n  if (operationMap != null) {\n    for (    HttpMethod method : operationMap.keySet()) {\n      Operation operation=operationMap.get(method);\n      Map<String,Schema> propertySchemas=new HashMap<>();\n      if (operation == null || operation.getParameters() == null) {\n        continue;\n      }\n      List<String> requiredProperties=new ArrayList<>();\n      for (      Parameter parameter : operation.getParameters()) {\n        Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n        Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n        if (propertySchema != null) {\n          propertySchemas.put(propertySchema.getName(),propertySchema);\n          if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n            requiredProperties.add(propertySchema.getName());\n          }\n        }\n      }\n      if (!propertySchemas.isEmpty()) {\n        ObjectSchema schema=new ObjectSchema();\n        String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n        schema.setDescription(\"Query parameters for \" + operationId);\n        schema.setProperties(propertySchemas);\n        schema.setRequired(requiredProperties);\n        addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n        String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n        openAPI.getComponents().addSchemas(schemaName,schema);\n        String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n        addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n        addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2543,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 234,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String pathname : paths.keySet()) {\n  PathItem path=paths.get(pathname);\n  Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n  if (operationMap != null) {\n    for (    HttpMethod method : operationMap.keySet()) {\n      Operation operation=operationMap.get(method);\n      Map<String,Schema> propertySchemas=new HashMap<>();\n      if (operation == null || operation.getParameters() == null) {\n        continue;\n      }\n      List<String> requiredProperties=new ArrayList<>();\n      for (      Parameter parameter : operation.getParameters()) {\n        Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n        Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n        if (propertySchema != null) {\n          propertySchemas.put(propertySchema.getName(),propertySchema);\n          if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n            requiredProperties.add(propertySchema.getName());\n          }\n        }\n      }\n      if (!propertySchemas.isEmpty()) {\n        ObjectSchema schema=new ObjectSchema();\n        String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n        schema.setDescription(\"Query parameters for \" + operationId);\n        schema.setProperties(propertySchemas);\n        schema.setRequired(requiredProperties);\n        addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n        String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n        openAPI.getComponents().addSchemas(schemaName,schema);\n        String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n        addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n        addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 244,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2567,
        "startLineNumber" : 195,
        "startColumnNumber" : 27,
        "endLineNumber" : 235,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  String pathname : paths.keySet()) {\n    PathItem path=paths.get(pathname);\n    Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n    if (operationMap != null) {\n      for (      HttpMethod method : operationMap.keySet()) {\n        Operation operation=operationMap.get(method);\n        Map<String,Schema> propertySchemas=new HashMap<>();\n        if (operation == null || operation.getParameters() == null) {\n          continue;\n        }\n        List<String> requiredProperties=new ArrayList<>();\n        for (        Parameter parameter : operation.getParameters()) {\n          Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n          Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n          if (propertySchema != null) {\n            propertySchemas.put(propertySchema.getName(),propertySchema);\n            if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n              requiredProperties.add(propertySchema.getName());\n            }\n          }\n        }\n        if (!propertySchemas.isEmpty()) {\n          ObjectSchema schema=new ObjectSchema();\n          String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n          schema.setDescription(\"Query parameters for \" + operationId);\n          schema.setProperties(propertySchemas);\n          schema.setRequired(requiredProperties);\n          addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n          String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n          openAPI.getComponents().addSchemas(schemaName,schema);\n          String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n          addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n          addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2586,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 235,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (paths != null) {\n  for (  String pathname : paths.keySet()) {\n    PathItem path=paths.get(pathname);\n    Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n    if (operationMap != null) {\n      for (      HttpMethod method : operationMap.keySet()) {\n        Operation operation=operationMap.get(method);\n        Map<String,Schema> propertySchemas=new HashMap<>();\n        if (operation == null || operation.getParameters() == null) {\n          continue;\n        }\n        List<String> requiredProperties=new ArrayList<>();\n        for (        Parameter parameter : operation.getParameters()) {\n          Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n          Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n          if (propertySchema != null) {\n            propertySchemas.put(propertySchema.getName(),propertySchema);\n            if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n              requiredProperties.add(propertySchema.getName());\n            }\n          }\n        }\n        if (!propertySchemas.isEmpty()) {\n          ObjectSchema schema=new ObjectSchema();\n          String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n          schema.setDescription(\"Query parameters for \" + operationId);\n          schema.setProperties(propertySchemas);\n          schema.setRequired(requiredProperties);\n          addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n          String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n          openAPI.getComponents().addSchemas(schemaName,schema);\n          String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n          addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n          addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2660,
        "startLineNumber" : 193,
        "startColumnNumber" : 61,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,PathItem> paths=openAPI.getPaths();\n  if (paths != null) {\n    for (    String pathname : paths.keySet()) {\n      PathItem path=paths.get(pathname);\n      Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n      if (operationMap != null) {\n        for (        HttpMethod method : operationMap.keySet()) {\n          Operation operation=operationMap.get(method);\n          Map<String,Schema> propertySchemas=new HashMap<>();\n          if (operation == null || operation.getParameters() == null) {\n            continue;\n          }\n          List<String> requiredProperties=new ArrayList<>();\n          for (          Parameter parameter : operation.getParameters()) {\n            Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n            Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n            if (propertySchema != null) {\n              propertySchemas.put(propertySchema.getName(),propertySchema);\n              if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n                requiredProperties.add(propertySchema.getName());\n              }\n            }\n          }\n          if (!propertySchemas.isEmpty()) {\n            ObjectSchema schema=new ObjectSchema();\n            String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n            schema.setDescription(\"Query parameters for \" + operationId);\n            schema.setProperties(propertySchemas);\n            schema.setRequired(requiredProperties);\n            addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n            String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n            openAPI.getComponents().addSchemas(schemaName,schema);\n            String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n            addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n            addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate additional model definitions from query parameters\n * @param openAPI OpenAPI object\n */\nprotected void generateParameterSchemas(OpenAPI openAPI){\n  Map<String,PathItem> paths=openAPI.getPaths();\n  if (paths != null) {\n    for (    String pathname : paths.keySet()) {\n      PathItem path=paths.get(pathname);\n      Map<HttpMethod,Operation> operationMap=path.readOperationsMap();\n      if (operationMap != null) {\n        for (        HttpMethod method : operationMap.keySet()) {\n          Operation operation=operationMap.get(method);\n          Map<String,Schema> propertySchemas=new HashMap<>();\n          if (operation == null || operation.getParameters() == null) {\n            continue;\n          }\n          List<String> requiredProperties=new ArrayList<>();\n          for (          Parameter parameter : operation.getParameters()) {\n            Parameter referencedParameter=ModelUtils.getReferencedParameter(openAPI,parameter);\n            Schema propertySchema=convertParameterToSchema(openAPI,referencedParameter);\n            if (propertySchema != null) {\n              propertySchemas.put(propertySchema.getName(),propertySchema);\n              if (Boolean.TRUE.equals(referencedParameter.getRequired())) {\n                requiredProperties.add(propertySchema.getName());\n              }\n            }\n          }\n          if (!propertySchemas.isEmpty()) {\n            ObjectSchema schema=new ObjectSchema();\n            String operationId=getOrGenerateOperationId(operation,pathname,method.name());\n            schema.setDescription(\"Query parameters for \" + operationId);\n            schema.setProperties(propertySchemas);\n            schema.setRequired(requiredProperties);\n            addInternalExtensionToSchema(schema,VEN_FROM_QUERY,Boolean.TRUE);\n            String schemaName=generateUniqueSchemaName(openAPI,operationId + \"QueryData\");\n            openAPI.getComponents().addSchemas(schemaName,schema);\n            String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n            addInternalExtensionToOperation(operation,VEN_QUERY_DATA_TYPE,schemaDataType);\n            addInternalExtensionToOperation(operation,VEN_HAS_QUERY_DATA,Boolean.TRUE);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 228,
        "startColumnNumber" : 28,
        "endLineNumber" : 228,
        "endColumnNumber" : 96
      },
      "nodeContext" : "String schemaDataType=getTypeDeclaration(toModelName(schemaName));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 227,
    "startColumnNumber" : 63,
    "endLineNumber" : 227,
    "endColumnNumber" : 73
  }, {
    "charLength" : 10,
    "startLineNumber" : 228,
    "startColumnNumber" : 83,
    "endLineNumber" : 228,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}