{
  "id" : 266,
  "expression" : "ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr,consumerGroup)",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr,consumerGroup)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 66,
      "startLineNumber" : 71,
      "startColumnNumber" : 41,
      "endLineNumber" : 71,
      "endColumnNumber" : 107
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 71,
        "startColumnNumber" : 30,
        "endLineNumber" : 71,
        "endColumnNumber" : 107
      },
      "nodeContext" : "consumer=ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr,consumerGroup)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 108
      },
      "nodeContext" : "DefaultMQPullConsumer consumer=ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr,consumerGroup);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2563,
        "startLineNumber" : 54,
        "startColumnNumber" : 57,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String cluster=UUID.randomUUID().toString();\n  String brokerName=UUID.randomUUID().toString();\n  String selfId=\"n0\";\n  String peers=String.format(\"n0-localhost:%d\",nextPort());\n  BrokerConfig brokerConfig=buildBrokerConfig(cluster,brokerName);\n  MessageStoreConfig storeConfig=buildStoreConfig(brokerName,peers,selfId);\n  BrokerController brokerController=IntegrationTestBase.createAndStartBroker(storeConfig,brokerConfig);\n  Thread.sleep(3000);\n  Assert.assertEquals(BrokerRole.SYNC_MASTER,storeConfig.getBrokerRole());\n  String topic=UUID.randomUUID().toString();\n  String consumerGroup=UUID.randomUUID().toString();\n  IntegrationTestBase.initTopic(topic,BaseConf.nsAddr,cluster,1);\n  DefaultMQProducer producer=ProducerFactory.getRMQProducer(BaseConf.nsAddr);\n  DefaultMQPullConsumer consumer=ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr,consumerGroup);\n  for (int i=0; i < 10; i++) {\n    Message message=new Message();\n    message.setTopic(topic);\n    message.setBody((\"Hello\" + i).getBytes());\n    SendResult sendResult=producer.send(message);\n    Assert.assertEquals(SendStatus.SEND_OK,sendResult.getSendStatus());\n    Assert.assertEquals(0,sendResult.getMessageQueue().getQueueId());\n    Assert.assertEquals(brokerName,sendResult.getMessageQueue().getBrokerName());\n    Assert.assertEquals(i,sendResult.getQueueOffset());\n    Assert.assertNotNull(sendResult.getMsgId());\n    Assert.assertNotNull(sendResult.getOffsetMsgId());\n  }\n  Thread.sleep(500);\n  Assert.assertEquals(0,brokerController.getMessageStore().getMinOffsetInQueue(topic,0));\n  Assert.assertEquals(10,brokerController.getMessageStore().getMaxOffsetInQueue(topic,0));\n  MessageQueue messageQueue=new MessageQueue(topic,brokerName,0);\n  PullResult pullResult=consumer.pull(messageQueue,\"*\",0,32);\n  Assert.assertEquals(PullStatus.FOUND,pullResult.getPullStatus());\n  Assert.assertEquals(10,pullResult.getMsgFoundList().size());\n  for (int i=0; i < 10; i++) {\n    MessageExt messageExt=pullResult.getMsgFoundList().get(i);\n    Assert.assertEquals(i,messageExt.getQueueOffset());\n    Assert.assertArrayEquals((\"Hello\" + i).getBytes(),messageExt.getBody());\n  }\n  producer.shutdown();\n  consumer.shutdown();\n  brokerController.shutdown();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 359,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2626,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testProduceAndConsume() throws Exception {\n  String cluster=UUID.randomUUID().toString();\n  String brokerName=UUID.randomUUID().toString();\n  String selfId=\"n0\";\n  String peers=String.format(\"n0-localhost:%d\",nextPort());\n  BrokerConfig brokerConfig=buildBrokerConfig(cluster,brokerName);\n  MessageStoreConfig storeConfig=buildStoreConfig(brokerName,peers,selfId);\n  BrokerController brokerController=IntegrationTestBase.createAndStartBroker(storeConfig,brokerConfig);\n  Thread.sleep(3000);\n  Assert.assertEquals(BrokerRole.SYNC_MASTER,storeConfig.getBrokerRole());\n  String topic=UUID.randomUUID().toString();\n  String consumerGroup=UUID.randomUUID().toString();\n  IntegrationTestBase.initTopic(topic,BaseConf.nsAddr,cluster,1);\n  DefaultMQProducer producer=ProducerFactory.getRMQProducer(BaseConf.nsAddr);\n  DefaultMQPullConsumer consumer=ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr,consumerGroup);\n  for (int i=0; i < 10; i++) {\n    Message message=new Message();\n    message.setTopic(topic);\n    message.setBody((\"Hello\" + i).getBytes());\n    SendResult sendResult=producer.send(message);\n    Assert.assertEquals(SendStatus.SEND_OK,sendResult.getSendStatus());\n    Assert.assertEquals(0,sendResult.getMessageQueue().getQueueId());\n    Assert.assertEquals(brokerName,sendResult.getMessageQueue().getBrokerName());\n    Assert.assertEquals(i,sendResult.getQueueOffset());\n    Assert.assertNotNull(sendResult.getMsgId());\n    Assert.assertNotNull(sendResult.getOffsetMsgId());\n  }\n  Thread.sleep(500);\n  Assert.assertEquals(0,brokerController.getMessageStore().getMinOffsetInQueue(topic,0));\n  Assert.assertEquals(10,brokerController.getMessageStore().getMaxOffsetInQueue(topic,0));\n  MessageQueue messageQueue=new MessageQueue(topic,brokerName,0);\n  PullResult pullResult=consumer.pull(messageQueue,\"*\",0,32);\n  Assert.assertEquals(PullStatus.FOUND,pullResult.getPullStatus());\n  Assert.assertEquals(10,pullResult.getMsgFoundList().size());\n  for (int i=0; i < 10; i++) {\n    MessageExt messageExt=pullResult.getMsgFoundList().get(i);\n    Assert.assertEquals(i,messageExt.getQueueOffset());\n    Assert.assertArrayEquals((\"Hello\" + i).getBytes(),messageExt.getBody());\n  }\n  producer.shutdown();\n  consumer.shutdown();\n  brokerController.shutdown();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 367,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 108
      },
      "nodeContext" : "DefaultMQPullConsumer consumer=ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr,consumerGroup);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "org.apache.rocketmq.client.consumer.DefaultMQPullConsumer"
  } ],
  "positionList" : [ {
    "charLength" : 66,
    "startLineNumber" : 71,
    "startColumnNumber" : 41,
    "endLineNumber" : 71,
    "endColumnNumber" : 107
  } ],
  "layoutRelationDataList" : [ ]
}