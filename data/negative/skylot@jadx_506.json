{
  "id" : 506,
  "expression" : "it",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "jadx-core/src/main/java/jadx/core/codegen/InsnGen.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "it",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 410,
      "startColumnNumber" : 64,
      "endLineNumber" : 410,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 410,
        "startColumnNumber" : 64,
        "endLineNumber" : 410,
        "endColumnNumber" : 76
      },
      "nodeContext" : "it.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 410,
        "startColumnNumber" : 4,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 410,
        "startColumnNumber" : 64,
        "endLineNumber" : 410,
        "endColumnNumber" : 76
      },
      "nodeContext" : "it.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<jadx.core.dex.instructions.args.InsnArg>"
  }, {
    "nodeContext" : "it",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 411,
      "startColumnNumber" : 18,
      "endLineNumber" : 411,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 411,
        "startColumnNumber" : 18,
        "endLineNumber" : 411,
        "endColumnNumber" : 27
      },
      "nodeContext" : "it.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 28
      },
      "nodeContext" : "addArg(code,it.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 29
      },
      "nodeContext" : "addArg(code,it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 410,
        "startColumnNumber" : 80,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 410,
        "startColumnNumber" : 4,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 29
      },
      "nodeContext" : "addArg(code,it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<jadx.core.dex.instructions.args.InsnArg>"
  }, {
    "nodeContext" : "it",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 412,
      "startColumnNumber" : 9,
      "endLineNumber" : 412,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 412,
        "startColumnNumber" : 9,
        "endLineNumber" : 412,
        "endColumnNumber" : 21
      },
      "nodeContext" : "it.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 412,
        "startColumnNumber" : 5,
        "endLineNumber" : 414,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (it.hasNext()) {\n  code.add(\" + \");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 410,
        "startColumnNumber" : 80,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 410,
        "startColumnNumber" : 4,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 412,
        "startColumnNumber" : 9,
        "endLineNumber" : 412,
        "endColumnNumber" : 21
      },
      "nodeContext" : "it.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<jadx.core.dex.instructions.args.InsnArg>"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 410,
    "startColumnNumber" : 64,
    "endLineNumber" : 410,
    "endColumnNumber" : 66
  }, {
    "charLength" : 2,
    "startLineNumber" : 411,
    "startColumnNumber" : 18,
    "endLineNumber" : 411,
    "endColumnNumber" : 20
  }, {
    "charLength" : 2,
    "startLineNumber" : 412,
    "startColumnNumber" : 9,
    "endLineNumber" : 412,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}