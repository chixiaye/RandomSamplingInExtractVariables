{
  "id" : 215,
  "expression" : "st != null",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/main/java/io/seata/rm/datasource/exec/DeleteExecutor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "st != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 115,
      "startColumnNumber" : 16,
      "endLineNumber" : 115,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 115,
        "startColumnNumber" : 12,
        "endLineNumber" : 117,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (st != null) {\n  st.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 111,
        "startColumnNumber" : 18,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (rs != null) {\n    rs.close();\n  }\n  if (st != null) {\n    st.close();\n  }\n  if (ps != null) {\n    ps.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (paramAppender.isEmpty()) {\n    st=statementProxy.getConnection().createStatement();\n    rs=st.executeQuery(selectSQL);\n  }\n else {\n    ps=statementProxy.getConnection().prepareStatement(selectSQL);\n    for (int i=0; i < paramAppender.size(); i++) {\n      ps.setObject(i + 1,paramAppender.get(i));\n    }\n    rs=ps.executeQuery();\n  }\n  beforeImage=TableRecords.buildRecords(tmeta,rs);\n}\n  finally {\n  if (rs != null) {\n    rs.close();\n  }\n  if (st != null) {\n    st.close();\n  }\n  if (ps != null) {\n    ps.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2387,
        "startLineNumber" : 62,
        "startColumnNumber" : 61,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SQLDeleteRecognizer visitor=(SQLDeleteRecognizer)sqlRecognizer;\n  KeywordChecker keywordChecker=KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);\n  TableMeta tmeta=getTableMeta(visitor.getTableName());\n  List<String> columns=new ArrayList<>();\n  for (  String column : tmeta.getAllColumns().keySet()) {\n    columns.add(keywordChecker.checkAndReplace(column));\n  }\n  StringBuffer selectSQLAppender=new StringBuffer(\"SELECT \");\n  for (int i=0; i < columns.size(); i++) {\n    selectSQLAppender.append(getColumnNameInSQL(columns.get(i)));\n    if (i < (columns.size() - 1)) {\n      selectSQLAppender.append(\", \");\n    }\n  }\n  String whereCondition=null;\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  if (statementProxy instanceof ParametersHolder) {\n    whereCondition=visitor.getWhereCondition((ParametersHolder)statementProxy,paramAppender);\n  }\n else {\n    whereCondition=visitor.getWhereCondition();\n  }\n  selectSQLAppender.append(\" FROM \" + keywordChecker.checkAndReplace(getFromTableInSQL()));\n  if (StringUtils.isNotBlank(whereCondition)) {\n    selectSQLAppender.append(\" WHERE \" + whereCondition);\n  }\n  selectSQLAppender.append(\" FOR UPDATE\");\n  String selectSQL=selectSQLAppender.toString();\n  TableRecords beforeImage=null;\n  PreparedStatement ps=null;\n  Statement st=null;\n  ResultSet rs=null;\n  try {\n    if (paramAppender.isEmpty()) {\n      st=statementProxy.getConnection().createStatement();\n      rs=st.executeQuery(selectSQL);\n    }\n else {\n      ps=statementProxy.getConnection().prepareStatement(selectSQL);\n      for (int i=0; i < paramAppender.size(); i++) {\n        ps.setObject(i + 1,paramAppender.get(i));\n      }\n      rs=ps.executeQuery();\n    }\n    beforeImage=TableRecords.buildRecords(tmeta,rs);\n  }\n  finally {\n    if (rs != null) {\n      rs.close();\n    }\n    if (st != null) {\n      st.close();\n    }\n    if (ps != null) {\n      ps.close();\n    }\n  }\n  return beforeImage;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2458,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected TableRecords beforeImage() throws SQLException {\n  SQLDeleteRecognizer visitor=(SQLDeleteRecognizer)sqlRecognizer;\n  KeywordChecker keywordChecker=KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);\n  TableMeta tmeta=getTableMeta(visitor.getTableName());\n  List<String> columns=new ArrayList<>();\n  for (  String column : tmeta.getAllColumns().keySet()) {\n    columns.add(keywordChecker.checkAndReplace(column));\n  }\n  StringBuffer selectSQLAppender=new StringBuffer(\"SELECT \");\n  for (int i=0; i < columns.size(); i++) {\n    selectSQLAppender.append(getColumnNameInSQL(columns.get(i)));\n    if (i < (columns.size() - 1)) {\n      selectSQLAppender.append(\", \");\n    }\n  }\n  String whereCondition=null;\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  if (statementProxy instanceof ParametersHolder) {\n    whereCondition=visitor.getWhereCondition((ParametersHolder)statementProxy,paramAppender);\n  }\n else {\n    whereCondition=visitor.getWhereCondition();\n  }\n  selectSQLAppender.append(\" FROM \" + keywordChecker.checkAndReplace(getFromTableInSQL()));\n  if (StringUtils.isNotBlank(whereCondition)) {\n    selectSQLAppender.append(\" WHERE \" + whereCondition);\n  }\n  selectSQLAppender.append(\" FOR UPDATE\");\n  String selectSQL=selectSQLAppender.toString();\n  TableRecords beforeImage=null;\n  PreparedStatement ps=null;\n  Statement st=null;\n  ResultSet rs=null;\n  try {\n    if (paramAppender.isEmpty()) {\n      st=statementProxy.getConnection().createStatement();\n      rs=st.executeQuery(selectSQL);\n    }\n else {\n      ps=statementProxy.getConnection().prepareStatement(selectSQL);\n      for (int i=0; i < paramAppender.size(); i++) {\n        ps.setObject(i + 1,paramAppender.get(i));\n      }\n      rs=ps.executeQuery();\n    }\n    beforeImage=TableRecords.buildRecords(tmeta,rs);\n  }\n  finally {\n    if (rs != null) {\n      rs.close();\n    }\n    if (st != null) {\n      st.close();\n    }\n    if (ps != null) {\n      ps.close();\n    }\n  }\n  return beforeImage;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 115,
        "startColumnNumber" : 12,
        "endLineNumber" : 117,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (st != null) {\n  st.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 115,
    "startColumnNumber" : 16,
    "endLineNumber" : 115,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}