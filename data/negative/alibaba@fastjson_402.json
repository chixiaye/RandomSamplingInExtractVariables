{
  "id" : 402,
  "expression" : "groups",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/ArrayRefTest2.java",
  "occurrences" : 20,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 23,
      "startColumnNumber" : 12,
      "endLineNumber" : 23,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 26
      },
      "nodeContext" : "groups.add(g0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Group> groups=new ArrayList<Group>();\n  Group g0=new Group(0);\n  Group g1=new Group(1);\n  Group g2=new Group(2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  text=JSON.toJSONString(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 23,
        "startColumnNumber" : 12,
        "endLineNumber" : 23,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.alibaba.json.ArrayRefTest2.Group>"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 24,
      "startColumnNumber" : 12,
      "endLineNumber" : 24,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 26
      },
      "nodeContext" : "groups.add(g1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Group> groups=new ArrayList<Group>();\n  Group g0=new Group(0);\n  Group g1=new Group(1);\n  Group g2=new Group(2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  text=JSON.toJSONString(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.alibaba.json.ArrayRefTest2.Group>"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 25,
      "startColumnNumber" : 12,
      "endLineNumber" : 25,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 26
      },
      "nodeContext" : "groups.add(g2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Group> groups=new ArrayList<Group>();\n  Group g0=new Group(0);\n  Group g1=new Group(1);\n  Group g2=new Group(2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  text=JSON.toJSONString(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.alibaba.json.ArrayRefTest2.Group>"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 26,
      "startColumnNumber" : 12,
      "endLineNumber" : 26,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 26,
        "startColumnNumber" : 12,
        "endLineNumber" : 26,
        "endColumnNumber" : 26
      },
      "nodeContext" : "groups.add(g0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 26,
        "startColumnNumber" : 12,
        "endLineNumber" : 26,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Group> groups=new ArrayList<Group>();\n  Group g0=new Group(0);\n  Group g1=new Group(1);\n  Group g2=new Group(2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  text=JSON.toJSONString(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 26,
        "startColumnNumber" : 12,
        "endLineNumber" : 26,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.alibaba.json.ArrayRefTest2.Group>"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 27,
      "startColumnNumber" : 12,
      "endLineNumber" : 27,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 26
      },
      "nodeContext" : "groups.add(g1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Group> groups=new ArrayList<Group>();\n  Group g0=new Group(0);\n  Group g1=new Group(1);\n  Group g2=new Group(2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  text=JSON.toJSONString(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.alibaba.json.ArrayRefTest2.Group>"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 28,
      "startColumnNumber" : 12,
      "endLineNumber" : 28,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 28,
        "startColumnNumber" : 12,
        "endLineNumber" : 28,
        "endColumnNumber" : 26
      },
      "nodeContext" : "groups.add(g2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 28,
        "startColumnNumber" : 12,
        "endLineNumber" : 28,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Group> groups=new ArrayList<Group>();\n  Group g0=new Group(0);\n  Group g1=new Group(1);\n  Group g2=new Group(2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  text=JSON.toJSONString(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 28,
        "startColumnNumber" : 12,
        "endLineNumber" : 28,
        "endColumnNumber" : 27
      },
      "nodeContext" : "groups.add(g2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.alibaba.json.ArrayRefTest2.Group>"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 30,
      "startColumnNumber" : 37,
      "endLineNumber" : 30,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 30,
        "startColumnNumber" : 19,
        "endLineNumber" : 30,
        "endColumnNumber" : 44
      },
      "nodeContext" : "JSON.toJSONString(groups)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 30,
        "endColumnNumber" : 44
      },
      "nodeContext" : "text=JSON.toJSONString(groups)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 30,
        "endColumnNumber" : 45
      },
      "nodeContext" : "text=JSON.toJSONString(groups);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Group> groups=new ArrayList<Group>();\n  Group g0=new Group(0);\n  Group g1=new Group(1);\n  Group g2=new Group(2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  groups.add(g0);\n  groups.add(g1);\n  groups.add(g2);\n  text=JSON.toJSONString(groups);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 30,
        "endColumnNumber" : 45
      },
      "nodeContext" : "text=JSON.toJSONString(groups);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.alibaba.json.ArrayRefTest2.Group>"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 36,
      "startColumnNumber" : 31,
      "endLineNumber" : 36,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 36,
        "startColumnNumber" : 31,
        "endLineNumber" : 36,
        "endColumnNumber" : 44
      },
      "nodeContext" : "groups.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Assert.assertEquals(6,groups.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Assert.assertEquals(6,groups.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Assert.assertEquals(6,groups.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 38,
      "startColumnNumber" : 29,
      "endLineNumber" : 38,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 38,
        "startColumnNumber" : 29,
        "endLineNumber" : 38,
        "endColumnNumber" : 38
      },
      "nodeContext" : "groups[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assert.assertNotNull(groups[0])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 39,
      "startColumnNumber" : 29,
      "endLineNumber" : 39,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 39,
        "startColumnNumber" : 29,
        "endLineNumber" : 39,
        "endColumnNumber" : 38
      },
      "nodeContext" : "groups[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assert.assertNotNull(groups[1])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 40,
      "startColumnNumber" : 29,
      "endLineNumber" : 40,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 40,
        "startColumnNumber" : 29,
        "endLineNumber" : 40,
        "endColumnNumber" : 38
      },
      "nodeContext" : "groups[2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assert.assertNotNull(groups[2])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[2]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[2]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 41,
      "startColumnNumber" : 29,
      "endLineNumber" : 41,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 41,
        "startColumnNumber" : 29,
        "endLineNumber" : 41,
        "endColumnNumber" : 38
      },
      "nodeContext" : "groups[3]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assert.assertNotNull(groups[3])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[3]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[3]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 42,
      "startColumnNumber" : 29,
      "endLineNumber" : 42,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 42,
        "startColumnNumber" : 29,
        "endLineNumber" : 42,
        "endColumnNumber" : 38
      },
      "nodeContext" : "groups[4]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assert.assertNotNull(groups[4])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[4]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[4]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 43,
      "startColumnNumber" : 29,
      "endLineNumber" : 43,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 43,
        "startColumnNumber" : 29,
        "endLineNumber" : 43,
        "endColumnNumber" : 38
      },
      "nodeContext" : "groups[5]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assert.assertNotNull(groups[5])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[5]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.assertNotNull(groups[5]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 45,
      "startColumnNumber" : 31,
      "endLineNumber" : 45,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 45,
        "startColumnNumber" : 31,
        "endLineNumber" : 45,
        "endColumnNumber" : 40
      },
      "nodeContext" : "groups[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 45,
        "startColumnNumber" : 31,
        "endLineNumber" : 45,
        "endColumnNumber" : 48
      },
      "nodeContext" : "groups[0].getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertEquals(0,groups[0].getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(0,groups[0].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(0,groups[0].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 46,
      "startColumnNumber" : 31,
      "endLineNumber" : 46,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 46,
        "startColumnNumber" : 31,
        "endLineNumber" : 46,
        "endColumnNumber" : 40
      },
      "nodeContext" : "groups[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 46,
        "startColumnNumber" : 31,
        "endLineNumber" : 46,
        "endColumnNumber" : 48
      },
      "nodeContext" : "groups[1].getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertEquals(1,groups[1].getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(1,groups[1].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(1,groups[1].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 47,
      "startColumnNumber" : 31,
      "endLineNumber" : 47,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 47,
        "startColumnNumber" : 31,
        "endLineNumber" : 47,
        "endColumnNumber" : 40
      },
      "nodeContext" : "groups[2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 47,
        "startColumnNumber" : 31,
        "endLineNumber" : 47,
        "endColumnNumber" : 48
      },
      "nodeContext" : "groups[2].getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertEquals(2,groups[2].getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(2,groups[2].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(2,groups[2].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 48,
      "startColumnNumber" : 31,
      "endLineNumber" : 48,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 48,
        "startColumnNumber" : 31,
        "endLineNumber" : 48,
        "endColumnNumber" : 40
      },
      "nodeContext" : "groups[3]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 48,
        "startColumnNumber" : 31,
        "endLineNumber" : 48,
        "endColumnNumber" : 48
      },
      "nodeContext" : "groups[3].getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertEquals(0,groups[3].getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(0,groups[3].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(0,groups[3].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 49,
      "startColumnNumber" : 31,
      "endLineNumber" : 49,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 49,
        "startColumnNumber" : 31,
        "endLineNumber" : 49,
        "endColumnNumber" : 40
      },
      "nodeContext" : "groups[4]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 49,
        "startColumnNumber" : 31,
        "endLineNumber" : 49,
        "endColumnNumber" : 48
      },
      "nodeContext" : "groups[4].getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertEquals(1,groups[4].getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(1,groups[4].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(1,groups[4].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  }, {
    "nodeContext" : "groups",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 50,
      "startColumnNumber" : 31,
      "endLineNumber" : 50,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 50,
        "startColumnNumber" : 31,
        "endLineNumber" : 50,
        "endColumnNumber" : 40
      },
      "nodeContext" : "groups[5]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 50,
        "startColumnNumber" : 31,
        "endLineNumber" : 50,
        "endColumnNumber" : 48
      },
      "nodeContext" : "groups[5].getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertEquals(2,groups[5].getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(2,groups[5].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1220,
        "startLineNumber" : 14,
        "startColumnNumber" : 42,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  String text;\n{\n    List<Group> groups=new ArrayList<Group>();\n    Group g0=new Group(0);\n    Group g1=new Group(1);\n    Group g2=new Group(2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    groups.add(g0);\n    groups.add(g1);\n    groups.add(g2);\n    text=JSON.toJSONString(groups);\n  }\n  System.out.println(text);\n  Group[] groups=JSON.parseObject(text,new TypeReference<Group[]>(){\n  }\n);\n  Assert.assertEquals(6,groups.length);\n  Assert.assertNotNull(groups[0]);\n  Assert.assertNotNull(groups[1]);\n  Assert.assertNotNull(groups[2]);\n  Assert.assertNotNull(groups[3]);\n  Assert.assertNotNull(groups[4]);\n  Assert.assertNotNull(groups[5]);\n  Assert.assertEquals(0,groups[0].getId());\n  Assert.assertEquals(1,groups[1].getId());\n  Assert.assertEquals(2,groups[2].getId());\n  Assert.assertEquals(0,groups[3].getId());\n  Assert.assertEquals(1,groups[4].getId());\n  Assert.assertEquals(2,groups[5].getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Assert.assertEquals(2,groups[5].getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.json.ArrayRefTest2.Group[]"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 23,
    "startColumnNumber" : 12,
    "endLineNumber" : 23,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 24,
    "startColumnNumber" : 12,
    "endLineNumber" : 24,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 25,
    "startColumnNumber" : 12,
    "endLineNumber" : 25,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 26,
    "startColumnNumber" : 12,
    "endLineNumber" : 26,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 27,
    "startColumnNumber" : 12,
    "endLineNumber" : 27,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 28,
    "startColumnNumber" : 12,
    "endLineNumber" : 28,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 30,
    "startColumnNumber" : 37,
    "endLineNumber" : 30,
    "endColumnNumber" : 43
  }, {
    "charLength" : 6,
    "startLineNumber" : 36,
    "startColumnNumber" : 31,
    "endLineNumber" : 36,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 38,
    "startColumnNumber" : 29,
    "endLineNumber" : 38,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 39,
    "startColumnNumber" : 29,
    "endLineNumber" : 39,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 40,
    "startColumnNumber" : 29,
    "endLineNumber" : 40,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 41,
    "startColumnNumber" : 29,
    "endLineNumber" : 41,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 42,
    "startColumnNumber" : 29,
    "endLineNumber" : 42,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 43,
    "startColumnNumber" : 29,
    "endLineNumber" : 43,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 45,
    "startColumnNumber" : 31,
    "endLineNumber" : 45,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 46,
    "startColumnNumber" : 31,
    "endLineNumber" : 46,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 47,
    "startColumnNumber" : 31,
    "endLineNumber" : 47,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 48,
    "startColumnNumber" : 31,
    "endLineNumber" : 48,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 49,
    "startColumnNumber" : 31,
    "endLineNumber" : 49,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 50,
    "startColumnNumber" : 31,
    "endLineNumber" : 50,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 4
  } ]
}