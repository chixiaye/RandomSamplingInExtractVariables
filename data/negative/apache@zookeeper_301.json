{
  "id" : 301,
  "expression" : "EventType.NodeDataChanged",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/WatcherTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "EventType.NodeDataChanged",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 245,
      "startColumnNumber" : 38,
      "endLineNumber" : 245,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 244,
        "startColumnNumber" : 47,
        "endLineNumber" : 247,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n  assertEquals(\"/watchtest/child\",e.getPath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ClientCnxn.disableAutoWatchReset) {\n  assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n  assertEquals(\"/watchtest/child\",e.getPath());\n}\n else {\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.Watcher.Event.EventType"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 245,
    "startColumnNumber" : 38,
    "endLineNumber" : 245,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}