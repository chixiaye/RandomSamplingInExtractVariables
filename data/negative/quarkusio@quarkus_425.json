{
  "id" : 425,
  "expression" : "paramsCount",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "8cd8fbdc57f2069feb1d372e9746bb1ce955980b",
  "filePath" : "extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/MethodNameParser.java",
  "occurrences" : 16,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 230,
      "startColumnNumber" : 75,
      "endLineNumber" : 230,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 230,
        "endColumnNumber" : 87
      },
      "nodeContext" : "where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 230,
        "endColumnNumber" : 107
      },
      "nodeContext" : "where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 230,
        "endColumnNumber" : 108
      },
      "nodeContext" : "where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 228,
        "startColumnNumber" : 93,
        "endLineNumber" : 231,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 230,
        "endColumnNumber" : 108
      },
      "nodeContext" : "where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 236,
      "startColumnNumber" : 53,
      "endLineNumber" : 236,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 236,
        "startColumnNumber" : 24,
        "endLineNumber" : 236,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" <> ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 236,
        "startColumnNumber" : 24,
        "endLineNumber" : 236,
        "endColumnNumber" : 66
      },
      "nodeContext" : "where.append(\" <> ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 236,
        "startColumnNumber" : 24,
        "endLineNumber" : 236,
        "endColumnNumber" : 66
      },
      "nodeContext" : "where.append(\" <> ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 250,
      "startColumnNumber" : 49,
      "endLineNumber" : 250,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 250,
        "startColumnNumber" : 24,
        "endLineNumber" : 250,
        "endColumnNumber" : 61
      },
      "nodeContext" : "where.append(\"?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 250,
        "startColumnNumber" : 24,
        "endLineNumber" : 250,
        "endColumnNumber" : 77
      },
      "nodeContext" : "where.append(\"?\").append(paramsCount).append(\" AND \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 250,
        "startColumnNumber" : 24,
        "endLineNumber" : 250,
        "endColumnNumber" : 78
      },
      "nodeContext" : "where.append(\"?\").append(paramsCount).append(\" AND \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 250,
        "startColumnNumber" : 24,
        "endLineNumber" : 250,
        "endColumnNumber" : 78
      },
      "nodeContext" : "where.append(\"?\").append(paramsCount).append(\" AND \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 252,
      "startColumnNumber" : 49,
      "endLineNumber" : 252,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 252,
        "startColumnNumber" : 24,
        "endLineNumber" : 252,
        "endColumnNumber" : 61
      },
      "nodeContext" : "where.append(\"?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 252,
        "startColumnNumber" : 24,
        "endLineNumber" : 252,
        "endColumnNumber" : 62
      },
      "nodeContext" : "where.append(\"?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 252,
        "startColumnNumber" : 24,
        "endLineNumber" : 252,
        "endColumnNumber" : 62
      },
      "nodeContext" : "where.append(\"?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 259,
      "startColumnNumber" : 52,
      "endLineNumber" : 259,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 259,
        "startColumnNumber" : 24,
        "endLineNumber" : 259,
        "endColumnNumber" : 64
      },
      "nodeContext" : "where.append(\" < ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 259,
        "startColumnNumber" : 24,
        "endLineNumber" : 259,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" < ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 259,
        "startColumnNumber" : 24,
        "endLineNumber" : 259,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" < ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 264,
      "startColumnNumber" : 53,
      "endLineNumber" : 264,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 264,
        "startColumnNumber" : 24,
        "endLineNumber" : 264,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" <= ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 264,
        "startColumnNumber" : 24,
        "endLineNumber" : 264,
        "endColumnNumber" : 66
      },
      "nodeContext" : "where.append(\" <= ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 264,
        "startColumnNumber" : 24,
        "endLineNumber" : 264,
        "endColumnNumber" : 66
      },
      "nodeContext" : "where.append(\" <= ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 271,
      "startColumnNumber" : 52,
      "endLineNumber" : 271,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 271,
        "startColumnNumber" : 24,
        "endLineNumber" : 271,
        "endColumnNumber" : 64
      },
      "nodeContext" : "where.append(\" > ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 271,
        "startColumnNumber" : 24,
        "endLineNumber" : 271,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" > ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 271,
        "startColumnNumber" : 24,
        "endLineNumber" : 271,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" > ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 276,
      "startColumnNumber" : 53,
      "endLineNumber" : 276,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 276,
        "startColumnNumber" : 24,
        "endLineNumber" : 276,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" >= ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 276,
        "startColumnNumber" : 24,
        "endLineNumber" : 276,
        "endColumnNumber" : 66
      },
      "nodeContext" : "where.append(\" >= ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 276,
        "startColumnNumber" : 24,
        "endLineNumber" : 276,
        "endColumnNumber" : 66
      },
      "nodeContext" : "where.append(\" >= ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 281,
      "startColumnNumber" : 55,
      "endLineNumber" : 281,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 281,
        "startColumnNumber" : 24,
        "endLineNumber" : 281,
        "endColumnNumber" : 67
      },
      "nodeContext" : "where.append(\" LIKE ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 281,
        "startColumnNumber" : 24,
        "endLineNumber" : 281,
        "endColumnNumber" : 68
      },
      "nodeContext" : "where.append(\" LIKE ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 281,
        "startColumnNumber" : 24,
        "endLineNumber" : 281,
        "endColumnNumber" : 68
      },
      "nodeContext" : "where.append(\" LIKE ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 286,
      "startColumnNumber" : 59,
      "endLineNumber" : 286,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 286,
        "startColumnNumber" : 24,
        "endLineNumber" : 286,
        "endColumnNumber" : 71
      },
      "nodeContext" : "where.append(\" NOT LIKE ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 286,
        "startColumnNumber" : 24,
        "endLineNumber" : 286,
        "endColumnNumber" : 72
      },
      "nodeContext" : "where.append(\" NOT LIKE ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 286,
        "startColumnNumber" : 24,
        "endLineNumber" : 286,
        "endColumnNumber" : 72
      },
      "nodeContext" : "where.append(\" NOT LIKE ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 292,
      "startColumnNumber" : 93,
      "endLineNumber" : 292,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 292,
        "startColumnNumber" : 24,
        "endLineNumber" : 292,
        "endColumnNumber" : 105
      },
      "nodeContext" : "where.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 292,
        "startColumnNumber" : 24,
        "endLineNumber" : 292,
        "endColumnNumber" : 125
      },
      "nodeContext" : "where.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 292,
        "startColumnNumber" : 24,
        "endLineNumber" : 293,
        "endColumnNumber" : 49
      },
      "nodeContext" : "where.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 292,
        "startColumnNumber" : 24,
        "endLineNumber" : 293,
        "endColumnNumber" : 50
      },
      "nodeContext" : "where.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 292,
        "startColumnNumber" : 24,
        "endLineNumber" : 292,
        "endColumnNumber" : 125
      },
      "nodeContext" : "where.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 299,
      "startColumnNumber" : 98,
      "endLineNumber" : 299,
      "endColumnNumber" : 109
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 299,
        "startColumnNumber" : 24,
        "endLineNumber" : 299,
        "endColumnNumber" : 110
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 299,
        "startColumnNumber" : 24,
        "endLineNumber" : 300,
        "endColumnNumber" : 52
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 299,
        "startColumnNumber" : 24,
        "endLineNumber" : 300,
        "endColumnNumber" : 64
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 299,
        "startColumnNumber" : 24,
        "endLineNumber" : 300,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 299,
        "startColumnNumber" : 24,
        "endLineNumber" : 299,
        "endColumnNumber" : 110
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 306,
      "startColumnNumber" : 98,
      "endLineNumber" : 306,
      "endColumnNumber" : 109
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 306,
        "startColumnNumber" : 24,
        "endLineNumber" : 306,
        "endColumnNumber" : 110
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 306,
        "startColumnNumber" : 24,
        "endLineNumber" : 307,
        "endColumnNumber" : 52
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 306,
        "startColumnNumber" : 24,
        "endLineNumber" : 307,
        "endColumnNumber" : 69
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 306,
        "startColumnNumber" : 24,
        "endLineNumber" : 307,
        "endColumnNumber" : 70
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 306,
        "startColumnNumber" : 24,
        "endLineNumber" : 306,
        "endColumnNumber" : 110
      },
      "nodeContext" : "where.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 316,
      "startColumnNumber" : 53,
      "endLineNumber" : 316,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 316,
        "startColumnNumber" : 24,
        "endLineNumber" : 316,
        "endColumnNumber" : 65
      },
      "nodeContext" : "where.append(\" IN ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 316,
        "startColumnNumber" : 24,
        "endLineNumber" : 316,
        "endColumnNumber" : 66
      },
      "nodeContext" : "where.append(\" IN ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 316,
        "startColumnNumber" : 24,
        "endLineNumber" : 316,
        "endColumnNumber" : 66
      },
      "nodeContext" : "where.append(\" IN ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 321,
      "startColumnNumber" : 57,
      "endLineNumber" : 321,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 321,
        "startColumnNumber" : 24,
        "endLineNumber" : 321,
        "endColumnNumber" : 69
      },
      "nodeContext" : "where.append(\" NOT IN ?\").append(paramsCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 321,
        "startColumnNumber" : 24,
        "endLineNumber" : 321,
        "endColumnNumber" : 70
      },
      "nodeContext" : "where.append(\" NOT IN ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4379,
        "startLineNumber" : 232,
        "startColumnNumber" : 16,
        "endLineNumber" : 331,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (operation) {\ncase \"IsNot\":case \"Not\":  paramsCount++;\nwhere.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 334,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 231,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4653,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 332,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n  paramsCount++;\n  where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n}\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":    paramsCount++;\n  where.append(\" <> ?\").append(paramsCount);\nbreak;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 189,
        "startColumnNumber" : 34,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6601,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String part : parts) {\n  if (part.isEmpty()) {\n    continue;\n  }\n  String fieldName;\n  boolean ignoreCase=false;\n  if (part.endsWith(IGNORE_CASE)) {\n    ignoreCase=true;\n    part=part.replace(IGNORE_CASE,\"\");\n  }\n  String operation=getFieldOperation(part);\n  if (operation == null) {\n    fieldName=lowerFirstLetter(part);\n  }\n else {\n    fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n  }\n  FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n  if (fieldInfo == null) {\n    StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n    fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n    fieldName=fieldPathBuilder.toString();\n  }\n  validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n  if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n    throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n  }\n  if (where.length() > 0) {\n    where.append(containsAnd ? \" AND \" : \" OR \");\n  }\n  String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n  String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n  where.append(upperPrefix).append(fieldName).append(upperSuffix);\n  if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n    paramsCount++;\n    where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n  }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":      paramsCount++;\n    where.append(\" <> ?\").append(paramsCount);\n  break;\ncase \"IsNull\":case \"Null\":where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 571,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 321,
        "startColumnNumber" : 24,
        "endLineNumber" : 321,
        "endColumnNumber" : 70
      },
      "nodeContext" : "where.append(\" NOT IN ?\").append(paramsCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "paramsCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 336,
      "startColumnNumber" : 90,
      "endLineNumber" : 336,
      "endColumnNumber" : 101
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 336,
        "startColumnNumber" : 15,
        "endLineNumber" : 337,
        "endColumnNumber" : 25
      },
      "nodeContext" : "new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 336,
        "startColumnNumber" : 8,
        "endLineNumber" : 337,
        "endColumnNumber" : 26
      },
      "nodeContext" : "return new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 336,
        "startColumnNumber" : 15,
        "endLineNumber" : 337,
        "endColumnNumber" : 25
      },
      "nodeContext" : "new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 230,
    "startColumnNumber" : 75,
    "endLineNumber" : 230,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 236,
    "startColumnNumber" : 53,
    "endLineNumber" : 236,
    "endColumnNumber" : 64
  }, {
    "charLength" : 11,
    "startLineNumber" : 250,
    "startColumnNumber" : 49,
    "endLineNumber" : 250,
    "endColumnNumber" : 60
  }, {
    "charLength" : 11,
    "startLineNumber" : 252,
    "startColumnNumber" : 49,
    "endLineNumber" : 252,
    "endColumnNumber" : 60
  }, {
    "charLength" : 11,
    "startLineNumber" : 259,
    "startColumnNumber" : 52,
    "endLineNumber" : 259,
    "endColumnNumber" : 63
  }, {
    "charLength" : 11,
    "startLineNumber" : 264,
    "startColumnNumber" : 53,
    "endLineNumber" : 264,
    "endColumnNumber" : 64
  }, {
    "charLength" : 11,
    "startLineNumber" : 271,
    "startColumnNumber" : 52,
    "endLineNumber" : 271,
    "endColumnNumber" : 63
  }, {
    "charLength" : 11,
    "startLineNumber" : 276,
    "startColumnNumber" : 53,
    "endLineNumber" : 276,
    "endColumnNumber" : 64
  }, {
    "charLength" : 11,
    "startLineNumber" : 281,
    "startColumnNumber" : 55,
    "endLineNumber" : 281,
    "endColumnNumber" : 66
  }, {
    "charLength" : 11,
    "startLineNumber" : 286,
    "startColumnNumber" : 59,
    "endLineNumber" : 286,
    "endColumnNumber" : 70
  }, {
    "charLength" : 11,
    "startLineNumber" : 292,
    "startColumnNumber" : 93,
    "endLineNumber" : 292,
    "endColumnNumber" : 104
  }, {
    "charLength" : 11,
    "startLineNumber" : 299,
    "startColumnNumber" : 98,
    "endLineNumber" : 299,
    "endColumnNumber" : 109
  }, {
    "charLength" : 11,
    "startLineNumber" : 306,
    "startColumnNumber" : 98,
    "endLineNumber" : 306,
    "endColumnNumber" : 109
  }, {
    "charLength" : 11,
    "startLineNumber" : 316,
    "startColumnNumber" : 53,
    "endLineNumber" : 316,
    "endColumnNumber" : 64
  }, {
    "charLength" : 11,
    "startLineNumber" : 321,
    "startColumnNumber" : 57,
    "endLineNumber" : 321,
    "endColumnNumber" : 68
  }, {
    "charLength" : 11,
    "startLineNumber" : 336,
    "startColumnNumber" : 90,
    "endLineNumber" : 336,
    "endColumnNumber" : 101
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  } ]
}