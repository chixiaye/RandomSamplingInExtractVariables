{
  "id" : 14,
  "expression" : "\" can only parse \"",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/spring/support/AbstractRedissonNamespaceDefinitionParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" can only parse \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 58,
      "startColumnNumber" : 18,
      "endLineNumber" : 58,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 39
      },
      "nodeContext" : "\"Illegal state. \" + this.getClass().getName() + \" can only parse \"+ RedissonNamespaceParserSupport.REDISSON_NAMESPACE+ \" namespace elements\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.state(helper.isRedissonNS(element),\"Illegal state. \" + this.getClass().getName() + \" can only parse \"+ RedissonNamespaceParserSupport.REDISSON_NAMESPACE+ \" namespace elements\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Assert.state(helper.isRedissonNS(element),\"Illegal state. \" + this.getClass().getName() + \" can only parse \"+ RedissonNamespaceParserSupport.REDISSON_NAMESPACE+ \" namespace elements\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 54,
        "startColumnNumber" : 110,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.state(helper.isRedissonNS(element),\"Illegal state. \" + this.getClass().getName() + \" can only parse \"+ RedissonNamespaceParserSupport.REDISSON_NAMESPACE+ \" namespace elements\");\n  Assert.state(element.hasAttribute(parentRefAttribute),\"Illegal state. property \\\"\" + parentRefAttribute + \"\\\" is required in the \\\"\"+ helper.getName(element)+ \"\\\" element.\");\n  helper.populateIdAttribute(element,builder,parserContext);\n  AbstractBeanDefinition bd=builder.getRawBeanDefinition();\n  parseNested(element,parserContext,builder,bd);\n  decorator.decorate(element,parserContext,builder,helper);\n  parserContext.getDelegate().parseQualifierElements(element,bd);\n  if (parserContext.isNested()) {\n    helper.registerBeanDefinition(builder,element,parserContext);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1150,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected final void doParse(Element element,ParserContext parserContext,BeanDefinitionBuilder builder){\n  Assert.state(helper.isRedissonNS(element),\"Illegal state. \" + this.getClass().getName() + \" can only parse \"+ RedissonNamespaceParserSupport.REDISSON_NAMESPACE+ \" namespace elements\");\n  Assert.state(element.hasAttribute(parentRefAttribute),\"Illegal state. property \\\"\" + parentRefAttribute + \"\\\" is required in the \\\"\"+ helper.getName(element)+ \"\\\" element.\");\n  helper.populateIdAttribute(element,builder,parserContext);\n  AbstractBeanDefinition bd=builder.getRawBeanDefinition();\n  parseNested(element,parserContext,builder,bd);\n  decorator.decorate(element,parserContext,builder,helper);\n  parserContext.getDelegate().parseQualifierElements(element,bd);\n  if (parserContext.isNested()) {\n    helper.registerBeanDefinition(builder,element,parserContext);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 39
      },
      "nodeContext" : "\"Illegal state. \" + this.getClass().getName() + \" can only parse \"+ RedissonNamespaceParserSupport.REDISSON_NAMESPACE+ \" namespace elements\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 58,
    "startColumnNumber" : 18,
    "endLineNumber" : 58,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}