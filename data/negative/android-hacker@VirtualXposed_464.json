{
  "id" : 464,
  "expression" : "maxH",
  "projectName" : "android-hacker@VirtualXposed",
  "commitID" : "8e98dd20e6a751089d4eb2642fa6bf088a3e7a79",
  "filePath" : "/VirtualApp/app/src/main/java/io/virtualapp/widgets/CircularAnim.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "maxH",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 157,
      "startColumnNumber" : 58,
      "endLineNumber" : 157,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 157,
        "startColumnNumber" : 58,
        "endLineNumber" : 157,
        "endColumnNumber" : 69
      },
      "nodeContext" : "maxH * maxH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 157,
        "startColumnNumber" : 44,
        "endLineNumber" : 157,
        "endColumnNumber" : 69
      },
      "nodeContext" : "maxW * maxW + maxH * maxH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 157,
        "startColumnNumber" : 34,
        "endLineNumber" : 157,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Math.sqrt(maxW * maxW + maxH * maxH)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 157,
        "startColumnNumber" : 28,
        "endLineNumber" : 157,
        "endColumnNumber" : 70
      },
      "nodeContext" : "(int)Math.sqrt(maxW * maxW + maxH * maxH)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 157,
        "startColumnNumber" : 28,
        "endLineNumber" : 157,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 157,
        "endColumnNumber" : 74
      },
      "nodeContext" : "maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 157,
        "endColumnNumber" : 75
      },
      "nodeContext" : "maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 129,
        "startColumnNumber" : 38,
        "endLineNumber" : 158,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int[] tvLocation=new int[2];\n  mTriggerView.getLocationInWindow(tvLocation);\n  final int tvCX=tvLocation[0] + mTriggerView.getWidth() / 2;\n  final int tvCY=tvLocation[1] + mTriggerView.getHeight() / 2;\n  int[] avLocation=new int[2];\n  mAnimView.getLocationInWindow(avLocation);\n  final int avLX=avLocation[0];\n  final int avTY=avLocation[1];\n  int triggerX=Math.max(avLX,tvCX);\n  triggerX=Math.min(triggerX,avLX + mAnimView.getWidth());\n  int triggerY=Math.max(avTY,tvCY);\n  triggerY=Math.min(triggerY,avTY + mAnimView.getHeight());\n  int avW=mAnimView.getWidth();\n  int avH=mAnimView.getHeight();\n  rippleCX=triggerX - avLX;\n  rippleCY=triggerY - avTY;\n  int maxW=Math.max(rippleCX,avW - rippleCX);\n  int maxH=Math.max(rippleCY,avH - rippleCY);\n  maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 129,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (mTriggerView != null) {\n  int[] tvLocation=new int[2];\n  mTriggerView.getLocationInWindow(tvLocation);\n  final int tvCX=tvLocation[0] + mTriggerView.getWidth() / 2;\n  final int tvCY=tvLocation[1] + mTriggerView.getHeight() / 2;\n  int[] avLocation=new int[2];\n  mAnimView.getLocationInWindow(avLocation);\n  final int avLX=avLocation[0];\n  final int avTY=avLocation[1];\n  int triggerX=Math.max(avLX,tvCX);\n  triggerX=Math.min(triggerX,avLX + mAnimView.getWidth());\n  int triggerY=Math.max(avTY,tvCY);\n  triggerY=Math.min(triggerY,avTY + mAnimView.getHeight());\n  int avW=mAnimView.getWidth();\n  int avH=mAnimView.getHeight();\n  rippleCX=triggerX - avLX;\n  rippleCY=triggerY - avTY;\n  int maxW=Math.max(rippleCX,avW - rippleCX);\n  int maxH=Math.max(rippleCY,avH - rippleCY);\n  maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n}\n else {\n  rippleCX=(mAnimView.getLeft() + mAnimView.getRight()) / 2;\n  rippleCY=(mAnimView.getTop() + mAnimView.getBottom()) / 2;\n  int w=mAnimView.getWidth();\n  int h=mAnimView.getHeight();\n  maxRadius=(int)Math.sqrt(w * w + h * h) + 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 246,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 119,
        "startColumnNumber" : 70,
        "endLineNumber" : 195,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  mOnAnimationEndListener=onAnimationEndListener;\n  if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {\n    doOnEnd();\n    return;\n  }\n  int rippleCX, rippleCY, maxRadius;\n  if (mTriggerView != null) {\n    int[] tvLocation=new int[2];\n    mTriggerView.getLocationInWindow(tvLocation);\n    final int tvCX=tvLocation[0] + mTriggerView.getWidth() / 2;\n    final int tvCY=tvLocation[1] + mTriggerView.getHeight() / 2;\n    int[] avLocation=new int[2];\n    mAnimView.getLocationInWindow(avLocation);\n    final int avLX=avLocation[0];\n    final int avTY=avLocation[1];\n    int triggerX=Math.max(avLX,tvCX);\n    triggerX=Math.min(triggerX,avLX + mAnimView.getWidth());\n    int triggerY=Math.max(avTY,tvCY);\n    triggerY=Math.min(triggerY,avTY + mAnimView.getHeight());\n    int avW=mAnimView.getWidth();\n    int avH=mAnimView.getHeight();\n    rippleCX=triggerX - avLX;\n    rippleCY=triggerY - avTY;\n    int maxW=Math.max(rippleCX,avW - rippleCX);\n    int maxH=Math.max(rippleCY,avH - rippleCY);\n    maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n  }\n else {\n    rippleCX=(mAnimView.getLeft() + mAnimView.getRight()) / 2;\n    rippleCY=(mAnimView.getTop() + mAnimView.getBottom()) / 2;\n    int w=mAnimView.getWidth();\n    int h=mAnimView.getHeight();\n    maxRadius=(int)Math.sqrt(w * w + h * h) + 1;\n  }\n  if (isShow && mEndRadius == null)   mEndRadius=maxRadius + 0F;\n else   if (!isShow && mStartRadius == null)   mStartRadius=maxRadius + 0F;\n  try {\n    Animator anim=ViewAnimationUtils.createCircularReveal(mAnimView,rippleCX,rippleCY,mStartRadius,mEndRadius);\n    mAnimView.setVisibility(View.VISIBLE);\n    anim.setDuration(mDurationMills);\n    anim.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animation){\n        super.onAnimationEnd(animation);\n        doOnEnd();\n      }\n    }\n);\n    anim.start();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    doOnEnd();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 379,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2895,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 9
      },
      "nodeContext" : "public void go(OnAnimationEndListener onAnimationEndListener){\n  mOnAnimationEndListener=onAnimationEndListener;\n  if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {\n    doOnEnd();\n    return;\n  }\n  int rippleCX, rippleCY, maxRadius;\n  if (mTriggerView != null) {\n    int[] tvLocation=new int[2];\n    mTriggerView.getLocationInWindow(tvLocation);\n    final int tvCX=tvLocation[0] + mTriggerView.getWidth() / 2;\n    final int tvCY=tvLocation[1] + mTriggerView.getHeight() / 2;\n    int[] avLocation=new int[2];\n    mAnimView.getLocationInWindow(avLocation);\n    final int avLX=avLocation[0];\n    final int avTY=avLocation[1];\n    int triggerX=Math.max(avLX,tvCX);\n    triggerX=Math.min(triggerX,avLX + mAnimView.getWidth());\n    int triggerY=Math.max(avTY,tvCY);\n    triggerY=Math.min(triggerY,avTY + mAnimView.getHeight());\n    int avW=mAnimView.getWidth();\n    int avH=mAnimView.getHeight();\n    rippleCX=triggerX - avLX;\n    rippleCY=triggerY - avTY;\n    int maxW=Math.max(rippleCX,avW - rippleCX);\n    int maxH=Math.max(rippleCY,avH - rippleCY);\n    maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n  }\n else {\n    rippleCX=(mAnimView.getLeft() + mAnimView.getRight()) / 2;\n    rippleCY=(mAnimView.getTop() + mAnimView.getBottom()) / 2;\n    int w=mAnimView.getWidth();\n    int h=mAnimView.getHeight();\n    maxRadius=(int)Math.sqrt(w * w + h * h) + 1;\n  }\n  if (isShow && mEndRadius == null)   mEndRadius=maxRadius + 0F;\n else   if (!isShow && mStartRadius == null)   mStartRadius=maxRadius + 0F;\n  try {\n    Animator anim=ViewAnimationUtils.createCircularReveal(mAnimView,rippleCX,rippleCY,mStartRadius,mEndRadius);\n    mAnimView.setVisibility(View.VISIBLE);\n    anim.setDuration(mDurationMills);\n    anim.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animation){\n        super.onAnimationEnd(animation);\n        doOnEnd();\n      }\n    }\n);\n    anim.start();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    doOnEnd();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 387,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 157,
        "endColumnNumber" : 75
      },
      "nodeContext" : "maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "maxH",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 157,
      "startColumnNumber" : 65,
      "endLineNumber" : 157,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 157,
        "startColumnNumber" : 58,
        "endLineNumber" : 157,
        "endColumnNumber" : 69
      },
      "nodeContext" : "maxH * maxH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 157,
        "startColumnNumber" : 44,
        "endLineNumber" : 157,
        "endColumnNumber" : 69
      },
      "nodeContext" : "maxW * maxW + maxH * maxH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 157,
        "startColumnNumber" : 34,
        "endLineNumber" : 157,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Math.sqrt(maxW * maxW + maxH * maxH)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 157,
        "startColumnNumber" : 28,
        "endLineNumber" : 157,
        "endColumnNumber" : 70
      },
      "nodeContext" : "(int)Math.sqrt(maxW * maxW + maxH * maxH)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 157,
        "startColumnNumber" : 28,
        "endLineNumber" : 157,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 157,
        "endColumnNumber" : 74
      },
      "nodeContext" : "maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 157,
        "endColumnNumber" : 75
      },
      "nodeContext" : "maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 129,
        "startColumnNumber" : 38,
        "endLineNumber" : 158,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int[] tvLocation=new int[2];\n  mTriggerView.getLocationInWindow(tvLocation);\n  final int tvCX=tvLocation[0] + mTriggerView.getWidth() / 2;\n  final int tvCY=tvLocation[1] + mTriggerView.getHeight() / 2;\n  int[] avLocation=new int[2];\n  mAnimView.getLocationInWindow(avLocation);\n  final int avLX=avLocation[0];\n  final int avTY=avLocation[1];\n  int triggerX=Math.max(avLX,tvCX);\n  triggerX=Math.min(triggerX,avLX + mAnimView.getWidth());\n  int triggerY=Math.max(avTY,tvCY);\n  triggerY=Math.min(triggerY,avTY + mAnimView.getHeight());\n  int avW=mAnimView.getWidth();\n  int avH=mAnimView.getHeight();\n  rippleCX=triggerX - avLX;\n  rippleCY=triggerY - avTY;\n  int maxW=Math.max(rippleCX,avW - rippleCX);\n  int maxH=Math.max(rippleCY,avH - rippleCY);\n  maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 129,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (mTriggerView != null) {\n  int[] tvLocation=new int[2];\n  mTriggerView.getLocationInWindow(tvLocation);\n  final int tvCX=tvLocation[0] + mTriggerView.getWidth() / 2;\n  final int tvCY=tvLocation[1] + mTriggerView.getHeight() / 2;\n  int[] avLocation=new int[2];\n  mAnimView.getLocationInWindow(avLocation);\n  final int avLX=avLocation[0];\n  final int avTY=avLocation[1];\n  int triggerX=Math.max(avLX,tvCX);\n  triggerX=Math.min(triggerX,avLX + mAnimView.getWidth());\n  int triggerY=Math.max(avTY,tvCY);\n  triggerY=Math.min(triggerY,avTY + mAnimView.getHeight());\n  int avW=mAnimView.getWidth();\n  int avH=mAnimView.getHeight();\n  rippleCX=triggerX - avLX;\n  rippleCY=triggerY - avTY;\n  int maxW=Math.max(rippleCX,avW - rippleCX);\n  int maxH=Math.max(rippleCY,avH - rippleCY);\n  maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n}\n else {\n  rippleCX=(mAnimView.getLeft() + mAnimView.getRight()) / 2;\n  rippleCY=(mAnimView.getTop() + mAnimView.getBottom()) / 2;\n  int w=mAnimView.getWidth();\n  int h=mAnimView.getHeight();\n  maxRadius=(int)Math.sqrt(w * w + h * h) + 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 246,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 119,
        "startColumnNumber" : 70,
        "endLineNumber" : 195,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  mOnAnimationEndListener=onAnimationEndListener;\n  if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {\n    doOnEnd();\n    return;\n  }\n  int rippleCX, rippleCY, maxRadius;\n  if (mTriggerView != null) {\n    int[] tvLocation=new int[2];\n    mTriggerView.getLocationInWindow(tvLocation);\n    final int tvCX=tvLocation[0] + mTriggerView.getWidth() / 2;\n    final int tvCY=tvLocation[1] + mTriggerView.getHeight() / 2;\n    int[] avLocation=new int[2];\n    mAnimView.getLocationInWindow(avLocation);\n    final int avLX=avLocation[0];\n    final int avTY=avLocation[1];\n    int triggerX=Math.max(avLX,tvCX);\n    triggerX=Math.min(triggerX,avLX + mAnimView.getWidth());\n    int triggerY=Math.max(avTY,tvCY);\n    triggerY=Math.min(triggerY,avTY + mAnimView.getHeight());\n    int avW=mAnimView.getWidth();\n    int avH=mAnimView.getHeight();\n    rippleCX=triggerX - avLX;\n    rippleCY=triggerY - avTY;\n    int maxW=Math.max(rippleCX,avW - rippleCX);\n    int maxH=Math.max(rippleCY,avH - rippleCY);\n    maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n  }\n else {\n    rippleCX=(mAnimView.getLeft() + mAnimView.getRight()) / 2;\n    rippleCY=(mAnimView.getTop() + mAnimView.getBottom()) / 2;\n    int w=mAnimView.getWidth();\n    int h=mAnimView.getHeight();\n    maxRadius=(int)Math.sqrt(w * w + h * h) + 1;\n  }\n  if (isShow && mEndRadius == null)   mEndRadius=maxRadius + 0F;\n else   if (!isShow && mStartRadius == null)   mStartRadius=maxRadius + 0F;\n  try {\n    Animator anim=ViewAnimationUtils.createCircularReveal(mAnimView,rippleCX,rippleCY,mStartRadius,mEndRadius);\n    mAnimView.setVisibility(View.VISIBLE);\n    anim.setDuration(mDurationMills);\n    anim.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animation){\n        super.onAnimationEnd(animation);\n        doOnEnd();\n      }\n    }\n);\n    anim.start();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    doOnEnd();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 379,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2895,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 9
      },
      "nodeContext" : "public void go(OnAnimationEndListener onAnimationEndListener){\n  mOnAnimationEndListener=onAnimationEndListener;\n  if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {\n    doOnEnd();\n    return;\n  }\n  int rippleCX, rippleCY, maxRadius;\n  if (mTriggerView != null) {\n    int[] tvLocation=new int[2];\n    mTriggerView.getLocationInWindow(tvLocation);\n    final int tvCX=tvLocation[0] + mTriggerView.getWidth() / 2;\n    final int tvCY=tvLocation[1] + mTriggerView.getHeight() / 2;\n    int[] avLocation=new int[2];\n    mAnimView.getLocationInWindow(avLocation);\n    final int avLX=avLocation[0];\n    final int avTY=avLocation[1];\n    int triggerX=Math.max(avLX,tvCX);\n    triggerX=Math.min(triggerX,avLX + mAnimView.getWidth());\n    int triggerY=Math.max(avTY,tvCY);\n    triggerY=Math.min(triggerY,avTY + mAnimView.getHeight());\n    int avW=mAnimView.getWidth();\n    int avH=mAnimView.getHeight();\n    rippleCX=triggerX - avLX;\n    rippleCY=triggerY - avTY;\n    int maxW=Math.max(rippleCX,avW - rippleCX);\n    int maxH=Math.max(rippleCY,avH - rippleCY);\n    maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n  }\n else {\n    rippleCX=(mAnimView.getLeft() + mAnimView.getRight()) / 2;\n    rippleCY=(mAnimView.getTop() + mAnimView.getBottom()) / 2;\n    int w=mAnimView.getWidth();\n    int h=mAnimView.getHeight();\n    maxRadius=(int)Math.sqrt(w * w + h * h) + 1;\n  }\n  if (isShow && mEndRadius == null)   mEndRadius=maxRadius + 0F;\n else   if (!isShow && mStartRadius == null)   mStartRadius=maxRadius + 0F;\n  try {\n    Animator anim=ViewAnimationUtils.createCircularReveal(mAnimView,rippleCX,rippleCY,mStartRadius,mEndRadius);\n    mAnimView.setVisibility(View.VISIBLE);\n    anim.setDuration(mDurationMills);\n    anim.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animation){\n        super.onAnimationEnd(animation);\n        doOnEnd();\n      }\n    }\n);\n    anim.start();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    doOnEnd();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 387,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 157,
        "endColumnNumber" : 75
      },
      "nodeContext" : "maxRadius=(int)Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 157,
    "startColumnNumber" : 58,
    "endLineNumber" : 157,
    "endColumnNumber" : 62
  }, {
    "charLength" : 4,
    "startLineNumber" : 157,
    "startColumnNumber" : 65,
    "endLineNumber" : 157,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  } ]
}