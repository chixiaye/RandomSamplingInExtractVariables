{
  "id" : 139,
  "expression" : "values",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-hadoop/src/test/java/org/apache/druid/indexer/HadoopDruidIndexerConfigTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "values",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 98,
      "startColumnNumber" : 89,
      "endLineNumber" : 98,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 98,
        "startColumnNumber" : 51,
        "endLineNumber" : 98,
        "endColumnNumber" : 96
      },
      "nodeContext" : "new MapBasedInputRow(timestamp,dims,values)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 98,
        "startColumnNumber" : 34,
        "endLineNumber" : 98,
        "endColumnNumber" : 97
      },
      "nodeContext" : "config.getBucket(new MapBasedInputRow(timestamp,dims,values))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 98,
        "startColumnNumber" : 34,
        "endLineNumber" : 98,
        "endColumnNumber" : 103
      },
      "nodeContext" : "config.getBucket(new MapBasedInputRow(timestamp,dims,values)).get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 98,
        "startColumnNumber" : 17,
        "endLineNumber" : 98,
        "endColumnNumber" : 103
      },
      "nodeContext" : "expectedBucket=config.getBucket(new MapBasedInputRow(timestamp,dims,values)).get()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 104
      },
      "nodeContext" : "final Bucket expectedBucket=config.getBucket(new MapBasedInputRow(timestamp,dims,values)).get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<HadoopyShardSpec> shardSpecs=new ArrayList<>();\n  final int partitionCount=10;\n  for (int i=0; i < partitionCount; i++) {\n    shardSpecs.add(new HadoopyShardSpec(new HashBasedNumberedShardSpec(i,partitionCount,i,partitionCount,null,HashPartitionFunction.MURMUR3_32_ABS,new DefaultObjectMapper()),i));\n  }\n  HadoopIngestionSpec spec=new HadoopIngestionSpecBuilder().shardSpecs(ImmutableMap.of(DateTimes.of(\"2010-01-01T01:00:00\").getMillis(),shardSpecs)).build();\n  HadoopDruidIndexerConfig config=HadoopDruidIndexerConfig.fromSpec(spec);\n  final List<String> dims=Arrays.asList(\"diM1\",\"dIM2\");\n  final ImmutableMap<String,Object> values=ImmutableMap.of(\"Dim1\",\"1\",\"DiM2\",\"2\",\"dim1\",\"3\",\"dim2\",\"4\");\n  final long timestamp=DateTimes.of(\"2010-01-01T01:00:01\").getMillis();\n  final Bucket expectedBucket=config.getBucket(new MapBasedInputRow(timestamp,dims,values)).get();\n  final long nextBucketTimestamp=Granularities.MINUTE.bucketEnd(DateTimes.utc(timestamp)).getMillis();\n  for (int i=0; timestamp + i < nextBucketTimestamp; i++) {\n    Assert.assertEquals(expectedBucket.partitionNum,config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1724,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testHashedBucketSelection(){\n  List<HadoopyShardSpec> shardSpecs=new ArrayList<>();\n  final int partitionCount=10;\n  for (int i=0; i < partitionCount; i++) {\n    shardSpecs.add(new HadoopyShardSpec(new HashBasedNumberedShardSpec(i,partitionCount,i,partitionCount,null,HashPartitionFunction.MURMUR3_32_ABS,new DefaultObjectMapper()),i));\n  }\n  HadoopIngestionSpec spec=new HadoopIngestionSpecBuilder().shardSpecs(ImmutableMap.of(DateTimes.of(\"2010-01-01T01:00:00\").getMillis(),shardSpecs)).build();\n  HadoopDruidIndexerConfig config=HadoopDruidIndexerConfig.fromSpec(spec);\n  final List<String> dims=Arrays.asList(\"diM1\",\"dIM2\");\n  final ImmutableMap<String,Object> values=ImmutableMap.of(\"Dim1\",\"1\",\"DiM2\",\"2\",\"dim1\",\"3\",\"dim2\",\"4\");\n  final long timestamp=DateTimes.of(\"2010-01-01T01:00:01\").getMillis();\n  final Bucket expectedBucket=config.getBucket(new MapBasedInputRow(timestamp,dims,values)).get();\n  final long nextBucketTimestamp=Granularities.MINUTE.bucketEnd(DateTimes.utc(timestamp)).getMillis();\n  for (int i=0; timestamp + i < nextBucketTimestamp; i++) {\n    Assert.assertEquals(expectedBucket.partitionNum,config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 206,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 104
      },
      "nodeContext" : "final Bucket expectedBucket=config.getBucket(new MapBasedInputRow(timestamp,dims,values)).get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.indexer.ImmutableMap<java.lang.String,java.lang.Object>"
  }, {
    "nodeContext" : "values",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 104,
      "startColumnNumber" : 69,
      "endLineNumber" : 104,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 104,
        "startColumnNumber" : 27,
        "endLineNumber" : 104,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new MapBasedInputRow(timestamp + i,dims,values)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 77
      },
      "nodeContext" : "config.getBucket(new MapBasedInputRow(timestamp + i,dims,values))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 83
      },
      "nodeContext" : "config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 96
      },
      "nodeContext" : "config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "Assert.assertEquals(expectedBucket.partitionNum,config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 8
      },
      "nodeContext" : "Assert.assertEquals(expectedBucket.partitionNum,config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 101,
        "startColumnNumber" : 62,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertEquals(expectedBucket.partitionNum,config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; timestamp + i < nextBucketTimestamp; i++) {\n  Assert.assertEquals(expectedBucket.partitionNum,config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<HadoopyShardSpec> shardSpecs=new ArrayList<>();\n  final int partitionCount=10;\n  for (int i=0; i < partitionCount; i++) {\n    shardSpecs.add(new HadoopyShardSpec(new HashBasedNumberedShardSpec(i,partitionCount,i,partitionCount,null,HashPartitionFunction.MURMUR3_32_ABS,new DefaultObjectMapper()),i));\n  }\n  HadoopIngestionSpec spec=new HadoopIngestionSpecBuilder().shardSpecs(ImmutableMap.of(DateTimes.of(\"2010-01-01T01:00:00\").getMillis(),shardSpecs)).build();\n  HadoopDruidIndexerConfig config=HadoopDruidIndexerConfig.fromSpec(spec);\n  final List<String> dims=Arrays.asList(\"diM1\",\"dIM2\");\n  final ImmutableMap<String,Object> values=ImmutableMap.of(\"Dim1\",\"1\",\"DiM2\",\"2\",\"dim1\",\"3\",\"dim2\",\"4\");\n  final long timestamp=DateTimes.of(\"2010-01-01T01:00:01\").getMillis();\n  final Bucket expectedBucket=config.getBucket(new MapBasedInputRow(timestamp,dims,values)).get();\n  final long nextBucketTimestamp=Granularities.MINUTE.bucketEnd(DateTimes.utc(timestamp)).getMillis();\n  for (int i=0; timestamp + i < nextBucketTimestamp; i++) {\n    Assert.assertEquals(expectedBucket.partitionNum,config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1724,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testHashedBucketSelection(){\n  List<HadoopyShardSpec> shardSpecs=new ArrayList<>();\n  final int partitionCount=10;\n  for (int i=0; i < partitionCount; i++) {\n    shardSpecs.add(new HadoopyShardSpec(new HashBasedNumberedShardSpec(i,partitionCount,i,partitionCount,null,HashPartitionFunction.MURMUR3_32_ABS,new DefaultObjectMapper()),i));\n  }\n  HadoopIngestionSpec spec=new HadoopIngestionSpecBuilder().shardSpecs(ImmutableMap.of(DateTimes.of(\"2010-01-01T01:00:00\").getMillis(),shardSpecs)).build();\n  HadoopDruidIndexerConfig config=HadoopDruidIndexerConfig.fromSpec(spec);\n  final List<String> dims=Arrays.asList(\"diM1\",\"dIM2\");\n  final ImmutableMap<String,Object> values=ImmutableMap.of(\"Dim1\",\"1\",\"DiM2\",\"2\",\"dim1\",\"3\",\"dim2\",\"4\");\n  final long timestamp=DateTimes.of(\"2010-01-01T01:00:01\").getMillis();\n  final Bucket expectedBucket=config.getBucket(new MapBasedInputRow(timestamp,dims,values)).get();\n  final long nextBucketTimestamp=Granularities.MINUTE.bucketEnd(DateTimes.utc(timestamp)).getMillis();\n  for (int i=0; timestamp + i < nextBucketTimestamp; i++) {\n    Assert.assertEquals(expectedBucket.partitionNum,config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 206,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 96
      },
      "nodeContext" : "config.getBucket(new MapBasedInputRow(timestamp + i,dims,values)).get().partitionNum",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.indexer.ImmutableMap<java.lang.String,java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 98,
    "startColumnNumber" : 89,
    "endLineNumber" : 98,
    "endColumnNumber" : 95
  }, {
    "charLength" : 6,
    "startLineNumber" : 104,
    "startColumnNumber" : 69,
    "endLineNumber" : 104,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}