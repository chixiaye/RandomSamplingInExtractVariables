{
  "id" : 324,
  "expression" : "false",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 254,
      "startColumnNumber" : 96,
      "endLineNumber" : 254,
      "endColumnNumber" : 101
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 254,
        "startColumnNumber" : 36,
        "endLineNumber" : 254,
        "endColumnNumber" : 102
      },
      "nodeContext" : "resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 254,
        "startColumnNumber" : 4,
        "endLineNumber" : 254,
        "endColumnNumber" : 103
      },
      "nodeContext" : "this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 254,
        "startColumnNumber" : 4,
        "endLineNumber" : 254,
        "endColumnNumber" : 104
      },
      "nodeContext" : "this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 252,
        "startColumnNumber" : 7,
        "endLineNumber" : 255,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2311,
        "startLineNumber" : 252,
        "startColumnNumber" : 3,
        "endLineNumber" : 297,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n}\n catch (NoUniqueBeanDefinitionException ex) {\n  logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n  try {\n    this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n  }\n catch (  NoSuchBeanDefinitionException ex2) {\n    if (logger.isInfoEnabled()) {\n      logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n    }\n  }\n}\ncatch (NoSuchBeanDefinitionException ex) {\n  logger.trace(\"Could not find default TaskScheduler bean\",ex);\n  try {\n    this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n  }\n catch (  NoUniqueBeanDefinitionException ex2) {\n    logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n    try {\n      this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n    }\n catch (    NoSuchBeanDefinitionException ex3) {\n      if (logger.isInfoEnabled()) {\n        logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n      }\n    }\n  }\ncatch (  NoSuchBeanDefinitionException ex2) {\n    logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n    logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 167,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 250,
        "startColumnNumber" : 74,
        "endLineNumber" : 298,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.state(this.beanFactory != null,\"BeanFactory must be set to find scheduler by type\");\n  try {\n    this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n  }\n catch (  NoUniqueBeanDefinitionException ex) {\n    logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n    try {\n      this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n    }\n catch (    NoSuchBeanDefinitionException ex2) {\n      if (logger.isInfoEnabled()) {\n        logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n      }\n    }\n  }\ncatch (  NoSuchBeanDefinitionException ex) {\n    logger.trace(\"Could not find default TaskScheduler bean\",ex);\n    try {\n      this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n    }\n catch (    NoUniqueBeanDefinitionException ex2) {\n      logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n      try {\n        this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n      }\n catch (      NoSuchBeanDefinitionException ex3) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n        }\n      }\n    }\ncatch (    NoSuchBeanDefinitionException ex2) {\n      logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n      logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2488,
        "startLineNumber" : 250,
        "startColumnNumber" : 2,
        "endLineNumber" : 298,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {\n  Assert.state(this.beanFactory != null,\"BeanFactory must be set to find scheduler by type\");\n  try {\n    this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n  }\n catch (  NoUniqueBeanDefinitionException ex) {\n    logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n    try {\n      this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n    }\n catch (    NoSuchBeanDefinitionException ex2) {\n      if (logger.isInfoEnabled()) {\n        logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n      }\n    }\n  }\ncatch (  NoSuchBeanDefinitionException ex) {\n    logger.trace(\"Could not find default TaskScheduler bean\",ex);\n    try {\n      this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n    }\n catch (    NoUniqueBeanDefinitionException ex2) {\n      logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n      try {\n        this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n      }\n catch (      NoSuchBeanDefinitionException ex3) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n        }\n      }\n    }\ncatch (    NoSuchBeanDefinitionException ex2) {\n      logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n      logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 192,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3056,
        "startLineNumber" : 235,
        "startColumnNumber" : 35,
        "endLineNumber" : 301,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.scheduler != null) {\n    this.registrar.setScheduler(this.scheduler);\n  }\n  if (this.beanFactory instanceof ListableBeanFactory) {\n    Map<String,SchedulingConfigurer> beans=((ListableBeanFactory)this.beanFactory).getBeansOfType(SchedulingConfigurer.class);\n    List<SchedulingConfigurer> configurers=new ArrayList<>(beans.values());\n    AnnotationAwareOrderComparator.sort(configurers);\n    for (    SchedulingConfigurer configurer : configurers) {\n      configurer.configureTasks(this.registrar);\n    }\n  }\n  if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {\n    Assert.state(this.beanFactory != null,\"BeanFactory must be set to find scheduler by type\");\n    try {\n      this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n    }\n catch (    NoUniqueBeanDefinitionException ex) {\n      logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n      try {\n        this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n      }\n catch (      NoSuchBeanDefinitionException ex2) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n        }\n      }\n    }\ncatch (    NoSuchBeanDefinitionException ex) {\n      logger.trace(\"Could not find default TaskScheduler bean\",ex);\n      try {\n        this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n      }\n catch (      NoUniqueBeanDefinitionException ex2) {\n        logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n        try {\n          this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n        }\n catch (        NoSuchBeanDefinitionException ex3) {\n          if (logger.isInfoEnabled()) {\n            logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n          }\n        }\n      }\ncatch (      NoSuchBeanDefinitionException ex2) {\n        logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n        logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n      }\n    }\n  }\n  this.registrar.afterPropertiesSet();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 279,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3090,
        "startLineNumber" : 235,
        "startColumnNumber" : 1,
        "endLineNumber" : 301,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void finishRegistration(){\n  if (this.scheduler != null) {\n    this.registrar.setScheduler(this.scheduler);\n  }\n  if (this.beanFactory instanceof ListableBeanFactory) {\n    Map<String,SchedulingConfigurer> beans=((ListableBeanFactory)this.beanFactory).getBeansOfType(SchedulingConfigurer.class);\n    List<SchedulingConfigurer> configurers=new ArrayList<>(beans.values());\n    AnnotationAwareOrderComparator.sort(configurers);\n    for (    SchedulingConfigurer configurer : configurers) {\n      configurer.configureTasks(this.registrar);\n    }\n  }\n  if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {\n    Assert.state(this.beanFactory != null,\"BeanFactory must be set to find scheduler by type\");\n    try {\n      this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n    }\n catch (    NoUniqueBeanDefinitionException ex) {\n      logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n      try {\n        this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n      }\n catch (      NoSuchBeanDefinitionException ex2) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n        }\n      }\n    }\ncatch (    NoSuchBeanDefinitionException ex) {\n      logger.trace(\"Could not find default TaskScheduler bean\",ex);\n      try {\n        this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n      }\n catch (      NoUniqueBeanDefinitionException ex2) {\n        logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n        try {\n          this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n        }\n catch (        NoSuchBeanDefinitionException ex3) {\n          if (logger.isInfoEnabled()) {\n            logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n          }\n        }\n      }\ncatch (      NoSuchBeanDefinitionException ex2) {\n        logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n        logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n      }\n    }\n  }\n  this.registrar.afterPropertiesSet();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 254,
        "startColumnNumber" : 4,
        "endLineNumber" : 254,
        "endColumnNumber" : 104
      },
      "nodeContext" : "this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 275,
      "startColumnNumber" : 104,
      "endLineNumber" : 275,
      "endColumnNumber" : 109
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 275,
        "startColumnNumber" : 33,
        "endLineNumber" : 275,
        "endColumnNumber" : 110
      },
      "nodeContext" : "resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 275,
        "startColumnNumber" : 5,
        "endLineNumber" : 275,
        "endColumnNumber" : 111
      },
      "nodeContext" : "this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 275,
        "startColumnNumber" : 5,
        "endLineNumber" : 275,
        "endColumnNumber" : 112
      },
      "nodeContext" : "this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 274,
        "startColumnNumber" : 8,
        "endLineNumber" : 276,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1230,
        "startLineNumber" : 274,
        "startColumnNumber" : 4,
        "endLineNumber" : 296,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n}\n catch (NoUniqueBeanDefinitionException ex2) {\n  logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n  try {\n    this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n  }\n catch (  NoSuchBeanDefinitionException ex3) {\n    if (logger.isInfoEnabled()) {\n      logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n    }\n  }\n}\ncatch (NoSuchBeanDefinitionException ex2) {\n  logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n  logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 86,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 1364,
        "startLineNumber" : 271,
        "startColumnNumber" : 44,
        "endLineNumber" : 297,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  logger.trace(\"Could not find default TaskScheduler bean\",ex);\n  try {\n    this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n  }\n catch (  NoUniqueBeanDefinitionException ex2) {\n    logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n    try {\n      this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n    }\n catch (    NoSuchBeanDefinitionException ex3) {\n      if (logger.isInfoEnabled()) {\n        logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n      }\n    }\n  }\ncatch (  NoSuchBeanDefinitionException ex2) {\n    logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n    logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 271,
        "startColumnNumber" : 3,
        "endLineNumber" : 297,
        "endColumnNumber" : 4
      },
      "nodeContext" : "catch (NoSuchBeanDefinitionException ex) {\n  logger.trace(\"Could not find default TaskScheduler bean\",ex);\n  try {\n    this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n  }\n catch (  NoUniqueBeanDefinitionException ex2) {\n    logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n    try {\n      this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n    }\n catch (    NoSuchBeanDefinitionException ex3) {\n      if (logger.isInfoEnabled()) {\n        logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n      }\n    }\n  }\ncatch (  NoSuchBeanDefinitionException ex2) {\n    logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n    logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 98,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2311,
        "startLineNumber" : 252,
        "startColumnNumber" : 3,
        "endLineNumber" : 297,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n}\n catch (NoUniqueBeanDefinitionException ex) {\n  logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n  try {\n    this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n  }\n catch (  NoSuchBeanDefinitionException ex2) {\n    if (logger.isInfoEnabled()) {\n      logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n    }\n  }\n}\ncatch (NoSuchBeanDefinitionException ex) {\n  logger.trace(\"Could not find default TaskScheduler bean\",ex);\n  try {\n    this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n  }\n catch (  NoUniqueBeanDefinitionException ex2) {\n    logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n    try {\n      this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n    }\n catch (    NoSuchBeanDefinitionException ex3) {\n      if (logger.isInfoEnabled()) {\n        logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n      }\n    }\n  }\ncatch (  NoSuchBeanDefinitionException ex2) {\n    logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n    logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 167,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 250,
        "startColumnNumber" : 74,
        "endLineNumber" : 298,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assert.state(this.beanFactory != null,\"BeanFactory must be set to find scheduler by type\");\n  try {\n    this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n  }\n catch (  NoUniqueBeanDefinitionException ex) {\n    logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n    try {\n      this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n    }\n catch (    NoSuchBeanDefinitionException ex2) {\n      if (logger.isInfoEnabled()) {\n        logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n      }\n    }\n  }\ncatch (  NoSuchBeanDefinitionException ex) {\n    logger.trace(\"Could not find default TaskScheduler bean\",ex);\n    try {\n      this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n    }\n catch (    NoUniqueBeanDefinitionException ex2) {\n      logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n      try {\n        this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n      }\n catch (      NoSuchBeanDefinitionException ex3) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n        }\n      }\n    }\ncatch (    NoSuchBeanDefinitionException ex2) {\n      logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n      logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2488,
        "startLineNumber" : 250,
        "startColumnNumber" : 2,
        "endLineNumber" : 298,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {\n  Assert.state(this.beanFactory != null,\"BeanFactory must be set to find scheduler by type\");\n  try {\n    this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n  }\n catch (  NoUniqueBeanDefinitionException ex) {\n    logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n    try {\n      this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n    }\n catch (    NoSuchBeanDefinitionException ex2) {\n      if (logger.isInfoEnabled()) {\n        logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n      }\n    }\n  }\ncatch (  NoSuchBeanDefinitionException ex) {\n    logger.trace(\"Could not find default TaskScheduler bean\",ex);\n    try {\n      this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n    }\n catch (    NoUniqueBeanDefinitionException ex2) {\n      logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n      try {\n        this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n      }\n catch (      NoSuchBeanDefinitionException ex3) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n        }\n      }\n    }\ncatch (    NoSuchBeanDefinitionException ex2) {\n      logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n      logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 192,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3056,
        "startLineNumber" : 235,
        "startColumnNumber" : 35,
        "endLineNumber" : 301,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.scheduler != null) {\n    this.registrar.setScheduler(this.scheduler);\n  }\n  if (this.beanFactory instanceof ListableBeanFactory) {\n    Map<String,SchedulingConfigurer> beans=((ListableBeanFactory)this.beanFactory).getBeansOfType(SchedulingConfigurer.class);\n    List<SchedulingConfigurer> configurers=new ArrayList<>(beans.values());\n    AnnotationAwareOrderComparator.sort(configurers);\n    for (    SchedulingConfigurer configurer : configurers) {\n      configurer.configureTasks(this.registrar);\n    }\n  }\n  if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {\n    Assert.state(this.beanFactory != null,\"BeanFactory must be set to find scheduler by type\");\n    try {\n      this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n    }\n catch (    NoUniqueBeanDefinitionException ex) {\n      logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n      try {\n        this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n      }\n catch (      NoSuchBeanDefinitionException ex2) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n        }\n      }\n    }\ncatch (    NoSuchBeanDefinitionException ex) {\n      logger.trace(\"Could not find default TaskScheduler bean\",ex);\n      try {\n        this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n      }\n catch (      NoUniqueBeanDefinitionException ex2) {\n        logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n        try {\n          this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n        }\n catch (        NoSuchBeanDefinitionException ex3) {\n          if (logger.isInfoEnabled()) {\n            logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n          }\n        }\n      }\ncatch (      NoSuchBeanDefinitionException ex2) {\n        logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n        logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n      }\n    }\n  }\n  this.registrar.afterPropertiesSet();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 279,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3090,
        "startLineNumber" : 235,
        "startColumnNumber" : 1,
        "endLineNumber" : 301,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void finishRegistration(){\n  if (this.scheduler != null) {\n    this.registrar.setScheduler(this.scheduler);\n  }\n  if (this.beanFactory instanceof ListableBeanFactory) {\n    Map<String,SchedulingConfigurer> beans=((ListableBeanFactory)this.beanFactory).getBeansOfType(SchedulingConfigurer.class);\n    List<SchedulingConfigurer> configurers=new ArrayList<>(beans.values());\n    AnnotationAwareOrderComparator.sort(configurers);\n    for (    SchedulingConfigurer configurer : configurers) {\n      configurer.configureTasks(this.registrar);\n    }\n  }\n  if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {\n    Assert.state(this.beanFactory != null,\"BeanFactory must be set to find scheduler by type\");\n    try {\n      this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,false));\n    }\n catch (    NoUniqueBeanDefinitionException ex) {\n      logger.trace(\"Could not find unique TaskScheduler bean\",ex);\n      try {\n        this.registrar.setTaskScheduler(resolveSchedulerBean(this.beanFactory,TaskScheduler.class,true));\n      }\n catch (      NoSuchBeanDefinitionException ex2) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"More than one TaskScheduler bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex.getBeanNamesFound());\n        }\n      }\n    }\ncatch (    NoSuchBeanDefinitionException ex) {\n      logger.trace(\"Could not find default TaskScheduler bean\",ex);\n      try {\n        this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n      }\n catch (      NoUniqueBeanDefinitionException ex2) {\n        logger.trace(\"Could not find unique ScheduledExecutorService bean\",ex2);\n        try {\n          this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,true));\n        }\n catch (        NoSuchBeanDefinitionException ex3) {\n          if (logger.isInfoEnabled()) {\n            logger.info(\"More than one ScheduledExecutorService bean exists within the context, and \" + \"none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' \" + \"(possibly as an alias); or implement the SchedulingConfigurer interface and call \"+ \"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: \"+ ex2.getBeanNamesFound());\n          }\n        }\n      }\ncatch (      NoSuchBeanDefinitionException ex2) {\n        logger.trace(\"Could not find default ScheduledExecutorService bean\",ex2);\n        logger.info(\"No TaskScheduler/ScheduledExecutorService bean found for scheduled processing\");\n      }\n    }\n  }\n  this.registrar.afterPropertiesSet();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 275,
        "startColumnNumber" : 5,
        "endLineNumber" : 275,
        "endColumnNumber" : 112
      },
      "nodeContext" : "this.registrar.setScheduler(resolveSchedulerBean(this.beanFactory,ScheduledExecutorService.class,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 254,
    "startColumnNumber" : 96,
    "endLineNumber" : 254,
    "endColumnNumber" : 101
  }, {
    "charLength" : 5,
    "startLineNumber" : 275,
    "startColumnNumber" : 104,
    "endLineNumber" : 275,
    "endColumnNumber" : 109
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}