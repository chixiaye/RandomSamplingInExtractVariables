{
  "id" : 268,
  "expression" : "admin",
  "projectName" : "apache@pulsar",
  "commitID" : "d488ed2ad35efe3be9791a82c5b7c0ae125dea23",
  "filePath" : "pulsar-broker/src/test/java/org/apache/pulsar/schema/SchemaTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "admin",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 566,
      "startColumnNumber" : 8,
      "endLineNumber" : 566,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 566,
        "startColumnNumber" : 8,
        "endLineNumber" : 566,
        "endColumnNumber" : 26
      },
      "nodeContext" : "admin.namespaces()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 566,
        "startColumnNumber" : 8,
        "endLineNumber" : 568,
        "endColumnNumber" : 46
      },
      "nodeContext" : "admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 566,
        "startColumnNumber" : 8,
        "endLineNumber" : 568,
        "endColumnNumber" : 47
      },
      "nodeContext" : "admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 566,
        "startColumnNumber" : 8,
        "endLineNumber" : 566,
        "endColumnNumber" : 26
      },
      "nodeContext" : "admin.namespaces()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.client.admin.PulsarAdmin"
  }, {
    "nodeContext" : "admin",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 570,
      "startColumnNumber" : 8,
      "endLineNumber" : 570,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 570,
        "startColumnNumber" : 8,
        "endLineNumber" : 570,
        "endColumnNumber" : 22
      },
      "nodeContext" : "admin.topics()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 570,
        "startColumnNumber" : 8,
        "endLineNumber" : 570,
        "endColumnNumber" : 55
      },
      "nodeContext" : "admin.topics().createPartitionedTopic(topic,2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 570,
        "startColumnNumber" : 8,
        "endLineNumber" : 570,
        "endColumnNumber" : 56
      },
      "nodeContext" : "admin.topics().createPartitionedTopic(topic,2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 555,
        "startColumnNumber" : 107,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3337,
        "startLineNumber" : 555,
        "startColumnNumber" : 4,
        "endLineNumber" : 618,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testKeyValueSchemaWithStructs(KeyValueEncodingType keyValueEncodingType) throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicName=\"test-kv-schema-\" + randomName(16);\n  final String topic=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicName).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(CLUSTER_NAME));\n  admin.topics().createPartitionedTopic(topic,2);\n  Producer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> producer=pulsarClient.newProducer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).topic(topic).create();\n  Consumer<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> consumer=pulsarClient.newConsumer(Schema.KeyValue(Schema.AVRO(Schemas.PersonOne.class),Schema.AVRO(Schemas.PersonTwo.class),keyValueEncodingType)).subscriptionName(\"test-sub\").topic(topic).subscribe();\n  Consumer<GenericRecord> consumer2=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).subscriptionName(\"test-sub2\").topic(topic).subscribe();\n  Schemas.PersonOne key=new Schemas.PersonOne(8787);\n  Schemas.PersonTwo value=new Schemas.PersonTwo(323,\"foo\");\n  producer.send(new KeyValue<>(key,value));\n  Message<KeyValue<Schemas.PersonOne,Schemas.PersonTwo>> message=consumer.receive();\n  Message<GenericRecord> message2=consumer2.receive();\n  log.info(\"message: {}\",message.getValue(),message.getValue().getClass());\n  log.info(\"message2: {}\",message2.getValue().getNativeObject(),message2.getValue().getNativeObject().getClass());\n  KeyValue<GenericRecord,GenericRecord> keyValue2=(KeyValue<GenericRecord,GenericRecord>)message2.getValue().getNativeObject();\n  assertEquals(message.getValue().getKey().id,keyValue2.getKey().getField(\"id\"));\n  assertEquals(message.getValue().getValue().id,keyValue2.getValue().getField(\"id\"));\n  assertEquals(message.getValue().getValue().name,keyValue2.getValue().getField(\"name\"));\n  Schema<?> schema=message.getReaderSchema().get();\n  Schema<?> schemaFromGenericRecord=message.getReaderSchema().get();\n  KeyValueSchema keyValueSchema=(KeyValueSchema)schema;\n  KeyValueSchema keyValueSchemaFromGenericRecord=(KeyValueSchema)schemaFromGenericRecord;\n  assertEquals(keyValueSchema.getSchemaInfo(),keyValueSchemaFromGenericRecord.getSchemaInfo());\n  if (keyValueEncodingType == KeyValueEncodingType.SEPARATED) {\n    assertNotNull(message.getKeyBytes());\n    assertNotNull(message2.getKeyBytes());\n  }\n else {\n    assertNull(message.getKey());\n    assertNull(message2.getKey());\n  }\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 570,
        "startColumnNumber" : 8,
        "endLineNumber" : 570,
        "endColumnNumber" : 56
      },
      "nodeContext" : "admin.topics().createPartitionedTopic(topic,2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.client.admin.PulsarAdmin"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 566,
    "startColumnNumber" : 8,
    "endLineNumber" : 566,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 570,
    "startColumnNumber" : 8,
    "endLineNumber" : 570,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}