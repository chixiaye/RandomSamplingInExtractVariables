{
  "id" : 482,
  "expression" : "Koala.DAMPING",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Koala.DAMPING",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 258,
      "startColumnNumber" : 22,
      "endLineNumber" : 258,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 258,
        "startColumnNumber" : 2,
        "endLineNumber" : 258,
        "endColumnNumber" : 35
      },
      "nodeContext" : "koala.velocity.x*=Koala.DAMPING",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 258,
        "startColumnNumber" : 2,
        "endLineNumber" : 258,
        "endColumnNumber" : 36
      },
      "nodeContext" : "koala.velocity.x*=Koala.DAMPING;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3905,
        "startLineNumber" : 149,
        "startColumnNumber" : 44,
        "endLineNumber" : 259,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (deltaTime == 0)   return;\n  if (deltaTime > 0.1f)   deltaTime=0.1f;\n  koala.stateTime+=deltaTime;\n  if ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.5f,1)) && koala.grounded) {\n    koala.velocity.y+=Koala.JUMP_VELOCITY;\n    koala.state=Koala.State.Jumping;\n    koala.grounded=false;\n  }\n  if (Gdx.input.isKeyPressed(Keys.LEFT) || Gdx.input.isKeyPressed(Keys.A) || isTouched(0,0.25f)) {\n    koala.velocity.x=-Koala.MAX_VELOCITY;\n    if (koala.grounded)     koala.state=Koala.State.Walking;\n    koala.facesRight=false;\n  }\n  if (Gdx.input.isKeyPressed(Keys.RIGHT) || Gdx.input.isKeyPressed(Keys.D) || isTouched(0.25f,0.5f)) {\n    koala.velocity.x=Koala.MAX_VELOCITY;\n    if (koala.grounded)     koala.state=Koala.State.Walking;\n    koala.facesRight=true;\n  }\n  if (Gdx.input.isKeyJustPressed(Keys.B))   debug=!debug;\n  koala.velocity.add(0,GRAVITY);\n  koala.velocity.x=MathUtils.clamp(koala.velocity.x,-Koala.MAX_VELOCITY,Koala.MAX_VELOCITY);\n  if (Math.abs(koala.velocity.x) < 1) {\n    koala.velocity.x=0;\n    if (koala.grounded)     koala.state=Koala.State.Standing;\n  }\n  koala.velocity.scl(deltaTime);\n  Rectangle koalaRect=rectPool.obtain();\n  koalaRect.set(koala.position.x,koala.position.y,Koala.WIDTH,Koala.HEIGHT);\n  int startX, startY, endX, endY;\n  if (koala.velocity.x > 0) {\n    startX=endX=(int)(koala.position.x + Koala.WIDTH + koala.velocity.x);\n  }\n else {\n    startX=endX=(int)(koala.position.x + koala.velocity.x);\n  }\n  startY=(int)(koala.position.y);\n  endY=(int)(koala.position.y + Koala.HEIGHT);\n  getTiles(startX,startY,endX,endY,tiles);\n  koalaRect.x+=koala.velocity.x;\n  for (  Rectangle tile : tiles) {\n    if (koalaRect.overlaps(tile)) {\n      koala.velocity.x=0;\n      break;\n    }\n  }\n  koalaRect.x=koala.position.x;\n  if (koala.velocity.y > 0) {\n    startY=endY=(int)(koala.position.y + Koala.HEIGHT + koala.velocity.y);\n  }\n else {\n    startY=endY=(int)(koala.position.y + koala.velocity.y);\n  }\n  startX=(int)(koala.position.x);\n  endX=(int)(koala.position.x + Koala.WIDTH);\n  getTiles(startX,startY,endX,endY,tiles);\n  koalaRect.y+=koala.velocity.y;\n  for (  Rectangle tile : tiles) {\n    if (koalaRect.overlaps(tile)) {\n      if (koala.velocity.y > 0) {\n        koala.position.y=tile.y - Koala.HEIGHT;\n        TiledMapTileLayer layer=(TiledMapTileLayer)map.getLayers().get(\"walls\");\n        layer.setCell((int)tile.x,(int)tile.y,null);\n      }\n else {\n        koala.position.y=tile.y + tile.height;\n        koala.grounded=true;\n      }\n      koala.velocity.y=0;\n      break;\n    }\n  }\n  rectPool.free(koalaRect);\n  koala.position.add(koala.velocity);\n  koala.velocity.scl(1 / deltaTime);\n  koala.velocity.x*=Koala.DAMPING;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 646,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3948,
        "startLineNumber" : 149,
        "startColumnNumber" : 1,
        "endLineNumber" : 259,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void updateKoala(float deltaTime){\n  if (deltaTime == 0)   return;\n  if (deltaTime > 0.1f)   deltaTime=0.1f;\n  koala.stateTime+=deltaTime;\n  if ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.5f,1)) && koala.grounded) {\n    koala.velocity.y+=Koala.JUMP_VELOCITY;\n    koala.state=Koala.State.Jumping;\n    koala.grounded=false;\n  }\n  if (Gdx.input.isKeyPressed(Keys.LEFT) || Gdx.input.isKeyPressed(Keys.A) || isTouched(0,0.25f)) {\n    koala.velocity.x=-Koala.MAX_VELOCITY;\n    if (koala.grounded)     koala.state=Koala.State.Walking;\n    koala.facesRight=false;\n  }\n  if (Gdx.input.isKeyPressed(Keys.RIGHT) || Gdx.input.isKeyPressed(Keys.D) || isTouched(0.25f,0.5f)) {\n    koala.velocity.x=Koala.MAX_VELOCITY;\n    if (koala.grounded)     koala.state=Koala.State.Walking;\n    koala.facesRight=true;\n  }\n  if (Gdx.input.isKeyJustPressed(Keys.B))   debug=!debug;\n  koala.velocity.add(0,GRAVITY);\n  koala.velocity.x=MathUtils.clamp(koala.velocity.x,-Koala.MAX_VELOCITY,Koala.MAX_VELOCITY);\n  if (Math.abs(koala.velocity.x) < 1) {\n    koala.velocity.x=0;\n    if (koala.grounded)     koala.state=Koala.State.Standing;\n  }\n  koala.velocity.scl(deltaTime);\n  Rectangle koalaRect=rectPool.obtain();\n  koalaRect.set(koala.position.x,koala.position.y,Koala.WIDTH,Koala.HEIGHT);\n  int startX, startY, endX, endY;\n  if (koala.velocity.x > 0) {\n    startX=endX=(int)(koala.position.x + Koala.WIDTH + koala.velocity.x);\n  }\n else {\n    startX=endX=(int)(koala.position.x + koala.velocity.x);\n  }\n  startY=(int)(koala.position.y);\n  endY=(int)(koala.position.y + Koala.HEIGHT);\n  getTiles(startX,startY,endX,endY,tiles);\n  koalaRect.x+=koala.velocity.x;\n  for (  Rectangle tile : tiles) {\n    if (koalaRect.overlaps(tile)) {\n      koala.velocity.x=0;\n      break;\n    }\n  }\n  koalaRect.x=koala.position.x;\n  if (koala.velocity.y > 0) {\n    startY=endY=(int)(koala.position.y + Koala.HEIGHT + koala.velocity.y);\n  }\n else {\n    startY=endY=(int)(koala.position.y + koala.velocity.y);\n  }\n  startX=(int)(koala.position.x);\n  endX=(int)(koala.position.x + Koala.WIDTH);\n  getTiles(startX,startY,endX,endY,tiles);\n  koalaRect.y+=koala.velocity.y;\n  for (  Rectangle tile : tiles) {\n    if (koalaRect.overlaps(tile)) {\n      if (koala.velocity.y > 0) {\n        koala.position.y=tile.y - Koala.HEIGHT;\n        TiledMapTileLayer layer=(TiledMapTileLayer)map.getLayers().get(\"walls\");\n        layer.setCell((int)tile.x,(int)tile.y,null);\n      }\n else {\n        koala.position.y=tile.y + tile.height;\n        koala.grounded=true;\n      }\n      koala.velocity.y=0;\n      break;\n    }\n  }\n  rectPool.free(koalaRect);\n  koala.position.add(koala.velocity);\n  koala.velocity.scl(1 / deltaTime);\n  koala.velocity.x*=Koala.DAMPING;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 653,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 258,
        "startColumnNumber" : 2,
        "endLineNumber" : 258,
        "endColumnNumber" : 36
      },
      "nodeContext" : "koala.velocity.x*=Koala.DAMPING;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 258,
    "startColumnNumber" : 22,
    "endLineNumber" : 258,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}