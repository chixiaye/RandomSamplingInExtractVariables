{
  "id" : 382,
  "expression" : "0",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-core/src/test/java/com/netflix/eureka2/transport/AvroCodecPerf.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 32,
      "startColumnNumber" : 21,
      "endLineNumber" : 32,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 32,
        "startColumnNumber" : 17,
        "endLineNumber" : 32,
        "endColumnNumber" : 22
      },
      "nodeContext" : "l=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 32,
        "startColumnNumber" : 13,
        "endLineNumber" : 32,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int l=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 702,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int l=0; l < loops; l++) {\n  AvroCodec codec=new AvroCodec(REGISTRATION_PROTOCOL_MODEL_SET,REGISTRATION_AVRO_SCHEMA,reflectData);\n  EmbeddedChannel ch=new EmbeddedChannel(codec);\n  for (int i=0; i < messageCount; i++) {\n    assertTrue(\"Message should be written successfully to the channel\",ch.writeOutbound(instanceInfo));\n    ch.writeInbound(ch.readOutbound());\n    InstanceInfo received=(InstanceInfo)ch.readInbound();\n    assertThat(received,is(equalTo(instanceInfo)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 888,
        "startLineNumber" : 29,
        "startColumnNumber" : 35,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SchemaReflectData reflectData=new SchemaReflectData(REGISTRATION_AVRO_SCHEMA);\n  InstanceInfo instanceInfo=SampleInstanceInfo.EurekaReadServer.build();\n  for (int l=0; l < loops; l++) {\n    AvroCodec codec=new AvroCodec(REGISTRATION_PROTOCOL_MODEL_SET,REGISTRATION_AVRO_SCHEMA,reflectData);\n    EmbeddedChannel ch=new EmbeddedChannel(codec);\n    for (int i=0; i < messageCount; i++) {\n      assertTrue(\"Message should be written successfully to the channel\",ch.writeOutbound(instanceInfo));\n      ch.writeInbound(ch.readOutbound());\n      InstanceInfo received=(InstanceInfo)ch.readInbound();\n      assertThat(received,is(equalTo(instanceInfo)));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void runRegistrations(){\n  SchemaReflectData reflectData=new SchemaReflectData(REGISTRATION_AVRO_SCHEMA);\n  InstanceInfo instanceInfo=SampleInstanceInfo.EurekaReadServer.build();\n  for (int l=0; l < loops; l++) {\n    AvroCodec codec=new AvroCodec(REGISTRATION_PROTOCOL_MODEL_SET,REGISTRATION_AVRO_SCHEMA,reflectData);\n    EmbeddedChannel ch=new EmbeddedChannel(codec);\n    for (int i=0; i < messageCount; i++) {\n      assertTrue(\"Message should be written successfully to the channel\",ch.writeOutbound(instanceInfo));\n      ch.writeInbound(ch.readOutbound());\n      InstanceInfo received=(InstanceInfo)ch.readInbound();\n      assertThat(received,is(equalTo(instanceInfo)));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 32,
        "startColumnNumber" : 13,
        "endLineNumber" : 32,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int l=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 25,
      "endLineNumber" : 37,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 37,
        "startColumnNumber" : 21,
        "endLineNumber" : 37,
        "endColumnNumber" : 26
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 37,
        "startColumnNumber" : 17,
        "endLineNumber" : 37,
        "endColumnNumber" : 26
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 361,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < messageCount; i++) {\n  assertTrue(\"Message should be written successfully to the channel\",ch.writeOutbound(instanceInfo));\n  ch.writeInbound(ch.readOutbound());\n  InstanceInfo received=(InstanceInfo)ch.readInbound();\n  assertThat(received,is(equalTo(instanceInfo)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 670,
        "startLineNumber" : 32,
        "startColumnNumber" : 40,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  AvroCodec codec=new AvroCodec(REGISTRATION_PROTOCOL_MODEL_SET,REGISTRATION_AVRO_SCHEMA,reflectData);\n  EmbeddedChannel ch=new EmbeddedChannel(codec);\n  for (int i=0; i < messageCount; i++) {\n    assertTrue(\"Message should be written successfully to the channel\",ch.writeOutbound(instanceInfo));\n    ch.writeInbound(ch.readOutbound());\n    InstanceInfo received=(InstanceInfo)ch.readInbound();\n    assertThat(received,is(equalTo(instanceInfo)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 702,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int l=0; l < loops; l++) {\n  AvroCodec codec=new AvroCodec(REGISTRATION_PROTOCOL_MODEL_SET,REGISTRATION_AVRO_SCHEMA,reflectData);\n  EmbeddedChannel ch=new EmbeddedChannel(codec);\n  for (int i=0; i < messageCount; i++) {\n    assertTrue(\"Message should be written successfully to the channel\",ch.writeOutbound(instanceInfo));\n    ch.writeInbound(ch.readOutbound());\n    InstanceInfo received=(InstanceInfo)ch.readInbound();\n    assertThat(received,is(equalTo(instanceInfo)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 888,
        "startLineNumber" : 29,
        "startColumnNumber" : 35,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SchemaReflectData reflectData=new SchemaReflectData(REGISTRATION_AVRO_SCHEMA);\n  InstanceInfo instanceInfo=SampleInstanceInfo.EurekaReadServer.build();\n  for (int l=0; l < loops; l++) {\n    AvroCodec codec=new AvroCodec(REGISTRATION_PROTOCOL_MODEL_SET,REGISTRATION_AVRO_SCHEMA,reflectData);\n    EmbeddedChannel ch=new EmbeddedChannel(codec);\n    for (int i=0; i < messageCount; i++) {\n      assertTrue(\"Message should be written successfully to the channel\",ch.writeOutbound(instanceInfo));\n      ch.writeInbound(ch.readOutbound());\n      InstanceInfo received=(InstanceInfo)ch.readInbound();\n      assertThat(received,is(equalTo(instanceInfo)));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void runRegistrations(){\n  SchemaReflectData reflectData=new SchemaReflectData(REGISTRATION_AVRO_SCHEMA);\n  InstanceInfo instanceInfo=SampleInstanceInfo.EurekaReadServer.build();\n  for (int l=0; l < loops; l++) {\n    AvroCodec codec=new AvroCodec(REGISTRATION_PROTOCOL_MODEL_SET,REGISTRATION_AVRO_SCHEMA,reflectData);\n    EmbeddedChannel ch=new EmbeddedChannel(codec);\n    for (int i=0; i < messageCount; i++) {\n      assertTrue(\"Message should be written successfully to the channel\",ch.writeOutbound(instanceInfo));\n      ch.writeInbound(ch.readOutbound());\n      InstanceInfo received=(InstanceInfo)ch.readInbound();\n      assertThat(received,is(equalTo(instanceInfo)));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 37,
        "startColumnNumber" : 17,
        "endLineNumber" : 37,
        "endColumnNumber" : 26
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 32,
    "startColumnNumber" : 21,
    "endLineNumber" : 32,
    "endColumnNumber" : 22
  }, {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 25,
    "endLineNumber" : 37,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}