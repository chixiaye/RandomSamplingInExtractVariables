{
  "id" : 300,
  "expression" : "costMatrix",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "costMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 82,
      "startColumnNumber" : 32,
      "endLineNumber" : 82,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 48
      },
      "nodeContext" : "randomFillSymmetricMatrix(costMatrix,100)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 49
      },
      "nodeContext" : "randomFillSymmetricMatrix(costMatrix,100);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 538,
        "startLineNumber" : 79,
        "startColumnNumber" : 45,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int n=Math.max(1,(int)(Math.random() * 11)) * 2;\n  double[][] costMatrix=new double[n][n];\n  randomFillSymmetricMatrix(costMatrix,100);\n  MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n  int[] matching=mwpm.getMinWeightCostMatching();\n  Set<Integer> set=new HashSet<>();\n  for (int i=0; i < matching.length; i++) {\n    set.add(matching[i]);\n  }\n  assertThat(set.size()).isEqualTo(matching.length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  int n=Math.max(1,(int)(Math.random() * 11)) * 2;\n  double[][] costMatrix=new double[n][n];\n  randomFillSymmetricMatrix(costMatrix,100);\n  MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n  int[] matching=mwpm.getMinWeightCostMatching();\n  Set<Integer> set=new HashSet<>();\n  for (int i=0; i < matching.length; i++) {\n    set.add(matching[i]);\n  }\n  assertThat(set.size()).isEqualTo(matching.length);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 78,
        "startColumnNumber" : 47,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int loop=0; loop < LOOPS; loop++) {\n    int n=Math.max(1,(int)(Math.random() * 11)) * 2;\n    double[][] costMatrix=new double[n][n];\n    randomFillSymmetricMatrix(costMatrix,100);\n    MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n    int[] matching=mwpm.getMinWeightCostMatching();\n    Set<Integer> set=new HashSet<>();\n    for (int i=0; i < matching.length; i++) {\n      set.add(matching[i]);\n    }\n    assertThat(set.size()).isEqualTo(matching.length);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 642,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testMatchingOutputsUniqueNodes(){\n  for (int loop=0; loop < LOOPS; loop++) {\n    int n=Math.max(1,(int)(Math.random() * 11)) * 2;\n    double[][] costMatrix=new double[n][n];\n    randomFillSymmetricMatrix(costMatrix,100);\n    MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n    int[] matching=mwpm.getMinWeightCostMatching();\n    Set<Integer> set=new HashSet<>();\n    for (int i=0; i < matching.length; i++) {\n      set.add(matching[i]);\n    }\n    assertThat(set.size()).isEqualTo(matching.length);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 118,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 49
      },
      "nodeContext" : "randomFillSymmetricMatrix(costMatrix,100);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "double[][]"
  }, {
    "nodeContext" : "costMatrix",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 84,
      "startColumnNumber" : 75,
      "endLineNumber" : 84,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 84,
        "startColumnNumber" : 42,
        "endLineNumber" : 84,
        "endColumnNumber" : 86
      },
      "nodeContext" : "new MinimumWeightPerfectMatching(costMatrix)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 84,
        "startColumnNumber" : 35,
        "endLineNumber" : 84,
        "endColumnNumber" : 86
      },
      "nodeContext" : "mwpm=new MinimumWeightPerfectMatching(costMatrix)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 87
      },
      "nodeContext" : "MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 538,
        "startLineNumber" : 79,
        "startColumnNumber" : 45,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int n=Math.max(1,(int)(Math.random() * 11)) * 2;\n  double[][] costMatrix=new double[n][n];\n  randomFillSymmetricMatrix(costMatrix,100);\n  MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n  int[] matching=mwpm.getMinWeightCostMatching();\n  Set<Integer> set=new HashSet<>();\n  for (int i=0; i < matching.length; i++) {\n    set.add(matching[i]);\n  }\n  assertThat(set.size()).isEqualTo(matching.length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  int n=Math.max(1,(int)(Math.random() * 11)) * 2;\n  double[][] costMatrix=new double[n][n];\n  randomFillSymmetricMatrix(costMatrix,100);\n  MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n  int[] matching=mwpm.getMinWeightCostMatching();\n  Set<Integer> set=new HashSet<>();\n  for (int i=0; i < matching.length; i++) {\n    set.add(matching[i]);\n  }\n  assertThat(set.size()).isEqualTo(matching.length);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 78,
        "startColumnNumber" : 47,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int loop=0; loop < LOOPS; loop++) {\n    int n=Math.max(1,(int)(Math.random() * 11)) * 2;\n    double[][] costMatrix=new double[n][n];\n    randomFillSymmetricMatrix(costMatrix,100);\n    MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n    int[] matching=mwpm.getMinWeightCostMatching();\n    Set<Integer> set=new HashSet<>();\n    for (int i=0; i < matching.length; i++) {\n      set.add(matching[i]);\n    }\n    assertThat(set.size()).isEqualTo(matching.length);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 642,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testMatchingOutputsUniqueNodes(){\n  for (int loop=0; loop < LOOPS; loop++) {\n    int n=Math.max(1,(int)(Math.random() * 11)) * 2;\n    double[][] costMatrix=new double[n][n];\n    randomFillSymmetricMatrix(costMatrix,100);\n    MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n    int[] matching=mwpm.getMinWeightCostMatching();\n    Set<Integer> set=new HashSet<>();\n    for (int i=0; i < matching.length; i++) {\n      set.add(matching[i]);\n    }\n    assertThat(set.size()).isEqualTo(matching.length);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 118,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 87
      },
      "nodeContext" : "MinimumWeightPerfectMatching mwpm=new MinimumWeightPerfectMatching(costMatrix);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "double[][]"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 82,
    "startColumnNumber" : 32,
    "endLineNumber" : 82,
    "endColumnNumber" : 42
  }, {
    "charLength" : 10,
    "startLineNumber" : 84,
    "startColumnNumber" : 75,
    "endLineNumber" : 84,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}