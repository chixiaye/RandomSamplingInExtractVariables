{
  "id" : 192,
  "expression" : "0",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/datastructures/trie/Trie.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 31,
      "startColumnNumber" : 22,
      "endLineNumber" : 31,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 23
      },
      "nodeContext" : "numInserts <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 83
      },
      "nodeContext" : "if (numInserts <= 0) throw new IllegalArgumentException(\"numInserts has to be greater than zero\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1013,
        "startLineNumber" : 28,
        "startColumnNumber" : 52,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (key == null)   throw new IllegalArgumentException(\"Null not permitted in trie\");\n  if (numInserts <= 0)   throw new IllegalArgumentException(\"numInserts has to be greater than zero\");\n  Node node=root;\n  boolean created_new_node=false;\n  boolean is_prefix=false;\n  for (int i=0; i < key.length(); ++i) {\n    char ch=key.charAt(i);\n    Node nextNode=node.children.get(ch);\n    if (nextNode == null) {\n      nextNode=new Node(ch);\n      node.addChild(nextNode,ch);\n      created_new_node=true;\n    }\n else {\n      if (nextNode.isWordEnding)       is_prefix=true;\n    }\n    node=nextNode;\n    node.count+=numInserts;\n  }\n  if (node != root)   node.isWordEnding=true;\n  return is_prefix || !created_new_node;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 28,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public boolean insert(String key,int numInserts){\n  if (key == null)   throw new IllegalArgumentException(\"Null not permitted in trie\");\n  if (numInserts <= 0)   throw new IllegalArgumentException(\"numInserts has to be greater than zero\");\n  Node node=root;\n  boolean created_new_node=false;\n  boolean is_prefix=false;\n  for (int i=0; i < key.length(); ++i) {\n    char ch=key.charAt(i);\n    Node nextNode=node.children.get(ch);\n    if (nextNode == null) {\n      nextNode=new Node(ch);\n      node.addChild(nextNode,ch);\n      created_new_node=true;\n    }\n else {\n      if (nextNode.isWordEnding)       is_prefix=true;\n    }\n    node=nextNode;\n    node.count+=numInserts;\n  }\n  if (node != root)   node.isWordEnding=true;\n  return is_prefix || !created_new_node;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 23
      },
      "nodeContext" : "numInserts <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 39,
      "startColumnNumber" : 17,
      "endLineNumber" : 39,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 39,
        "startColumnNumber" : 13,
        "endLineNumber" : 39,
        "endColumnNumber" : 18
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 39,
        "startColumnNumber" : 9,
        "endLineNumber" : 39,
        "endColumnNumber" : 18
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 503,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < key.length(); ++i) {\n  char ch=key.charAt(i);\n  Node nextNode=node.children.get(ch);\n  if (nextNode == null) {\n    nextNode=new Node(ch);\n    node.addChild(nextNode,ch);\n    created_new_node=true;\n  }\n else {\n    if (nextNode.isWordEnding)     is_prefix=true;\n  }\n  node=nextNode;\n  node.count+=numInserts;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1013,
        "startLineNumber" : 28,
        "startColumnNumber" : 52,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (key == null)   throw new IllegalArgumentException(\"Null not permitted in trie\");\n  if (numInserts <= 0)   throw new IllegalArgumentException(\"numInserts has to be greater than zero\");\n  Node node=root;\n  boolean created_new_node=false;\n  boolean is_prefix=false;\n  for (int i=0; i < key.length(); ++i) {\n    char ch=key.charAt(i);\n    Node nextNode=node.children.get(ch);\n    if (nextNode == null) {\n      nextNode=new Node(ch);\n      node.addChild(nextNode,ch);\n      created_new_node=true;\n    }\n else {\n      if (nextNode.isWordEnding)       is_prefix=true;\n    }\n    node=nextNode;\n    node.count+=numInserts;\n  }\n  if (node != root)   node.isWordEnding=true;\n  return is_prefix || !created_new_node;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 28,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public boolean insert(String key,int numInserts){\n  if (key == null)   throw new IllegalArgumentException(\"Null not permitted in trie\");\n  if (numInserts <= 0)   throw new IllegalArgumentException(\"numInserts has to be greater than zero\");\n  Node node=root;\n  boolean created_new_node=false;\n  boolean is_prefix=false;\n  for (int i=0; i < key.length(); ++i) {\n    char ch=key.charAt(i);\n    Node nextNode=node.children.get(ch);\n    if (nextNode == null) {\n      nextNode=new Node(ch);\n      node.addChild(nextNode,ch);\n      created_new_node=true;\n    }\n else {\n      if (nextNode.isWordEnding)       is_prefix=true;\n    }\n    node=nextNode;\n    node.count+=numInserts;\n  }\n  if (node != root)   node.isWordEnding=true;\n  return is_prefix || !created_new_node;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 39,
        "startColumnNumber" : 9,
        "endLineNumber" : 39,
        "endColumnNumber" : 18
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 31,
    "startColumnNumber" : 22,
    "endLineNumber" : 31,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 39,
    "startColumnNumber" : 17,
    "endLineNumber" : 39,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}