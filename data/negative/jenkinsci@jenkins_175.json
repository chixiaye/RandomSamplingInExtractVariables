{
  "id" : 175,
  "expression" : "\"not-secret\"",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"not-secret\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 865,
      "startColumnNumber" : 31,
      "endLineNumber" : 865,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 865,
        "startColumnNumber" : 15,
        "endLineNumber" : 865,
        "endColumnNumber" : 43
      },
      "nodeContext" : "publicContent=\"not-secret\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 865,
        "startColumnNumber" : 8,
        "endLineNumber" : 865,
        "endColumnNumber" : 44
      },
      "nodeContext" : "String publicContent=\"not-secret\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4412,
        "startLineNumber" : 855,
        "startColumnNumber" : 80,
        "endLineNumber" : 937,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FreeStyleProject p=j.createFreeStyleProject();\n  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());\n  File jobWorkspaceFolder=new File(new File(j.jenkins.getRootDir(),\"workspace\"),p.name);\n  File folderInsideWorkspace=new File(jobWorkspaceFolder,\"asset\");\n  folderInsideWorkspace.mkdir();\n  File fileTarget=new File(folderInsideWorkspace,\"goal.txt\");\n  String publicContent=\"not-secret\";\n  FileUtils.write(fileTarget,publicContent,StandardCharsets.UTF_8);\n  if (Functions.isWindows()) {\n    String script=loadContentFromResource(\"insideWorkspaceStructure.bat\");\n    p.getBuildersList().add(new BatchFile(script));\n  }\n else {\n    String script=loadContentFromResource(\"insideWorkspaceStructure.sh\");\n    p.getBuildersList().add(new Shell(script));\n  }\n  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());\n  JenkinsRule.WebClient wc=j.createWebClient();\n  wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,allOf(containsString(\"asset\"),not(containsString(\"to_internal1\")),not(containsString(\"to_internal_goal1\")),containsString(\"intermediateFolder\"),not(containsString(\"to_internal2\")),not(containsString(\"to_internal_goal2\"))));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/to_internal1/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,containsString(publicContent));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4546,
        "startLineNumber" : 853,
        "startColumnNumber" : 4,
        "endLineNumber" : 937,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Issue({\"SECURITY-904\",\"SECURITY-1452\"}) public void symlink_insideWorkspace_areNotAllowedAnymore() throws Exception {\n  FreeStyleProject p=j.createFreeStyleProject();\n  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());\n  File jobWorkspaceFolder=new File(new File(j.jenkins.getRootDir(),\"workspace\"),p.name);\n  File folderInsideWorkspace=new File(jobWorkspaceFolder,\"asset\");\n  folderInsideWorkspace.mkdir();\n  File fileTarget=new File(folderInsideWorkspace,\"goal.txt\");\n  String publicContent=\"not-secret\";\n  FileUtils.write(fileTarget,publicContent,StandardCharsets.UTF_8);\n  if (Functions.isWindows()) {\n    String script=loadContentFromResource(\"insideWorkspaceStructure.bat\");\n    p.getBuildersList().add(new BatchFile(script));\n  }\n else {\n    String script=loadContentFromResource(\"insideWorkspaceStructure.sh\");\n    p.getBuildersList().add(new Shell(script));\n  }\n  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());\n  JenkinsRule.WebClient wc=j.createWebClient();\n  wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,allOf(containsString(\"asset\"),not(containsString(\"to_internal1\")),not(containsString(\"to_internal_goal1\")),containsString(\"intermediateFolder\"),not(containsString(\"to_internal2\")),not(containsString(\"to_internal_goal2\"))));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/to_internal1/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,containsString(publicContent));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 479,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 865,
        "startColumnNumber" : 8,
        "endLineNumber" : 865,
        "endColumnNumber" : 44
      },
      "nodeContext" : "String publicContent=\"not-secret\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 865,
    "startColumnNumber" : 31,
    "endLineNumber" : 865,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}