{
  "id" : 114,
  "expression" : "serverList",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-zookeeper-utils/src/main/java/org/apache/pulsar/zookeeper/ZookeeperClientFactoryImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "serverList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 46,
      "startColumnNumber" : 41,
      "endLineNumber" : 46,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 46,
        "startColumnNumber" : 27,
        "endLineNumber" : 68,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new ZooKeeper(serverList,zkSessionTimeoutMillis,event -> {\n  if (event.getType() == Event.EventType.None) {\nswitch (event.getState()) {\ncase ConnectedReadOnly:      checkArgument(canBeReadOnly);\ncase SyncConnected:    internalFuture.complete(null);\n  break;\ncase Expired:internalFuture.completeExceptionally(KeeperException.create(KeeperException.Code.SESSIONEXPIRED));\nbreak;\ndefault:log.warn(\"Unexpected ZK event received: {}\",event);\nbreak;\n}\n}\n}\n,canBeReadOnly)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 62,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 46,
        "startColumnNumber" : 22,
        "endLineNumber" : 68,
        "endColumnNumber" : 29
      },
      "nodeContext" : "zk=new ZooKeeper(serverList,zkSessionTimeoutMillis,event -> {\n  if (event.getType() == Event.EventType.None) {\nswitch (event.getState()) {\ncase ConnectedReadOnly:      checkArgument(canBeReadOnly);\ncase SyncConnected:    internalFuture.complete(null);\n  break;\ncase Expired:internalFuture.completeExceptionally(KeeperException.create(KeeperException.Code.SESSIONEXPIRED));\nbreak;\ndefault:log.warn(\"Unexpected ZK event received: {}\",event);\nbreak;\n}\n}\n}\n,canBeReadOnly)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 64,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 936,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 30
      },
      "nodeContext" : "ZooKeeper zk=new ZooKeeper(serverList,zkSessionTimeoutMillis,event -> {\n  if (event.getType() == Event.EventType.None) {\nswitch (event.getState()) {\ncase ConnectedReadOnly:      checkArgument(canBeReadOnly);\ncase SyncConnected:    internalFuture.complete(null);\n  break;\ncase Expired:internalFuture.completeExceptionally(KeeperException.create(KeeperException.Code.SESSIONEXPIRED));\nbreak;\ndefault:log.warn(\"Unexpected ZK event received: {}\",event);\nbreak;\n}\n}\n}\n,canBeReadOnly);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 67,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1434,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  CompletableFuture<Void> internalFuture=new CompletableFuture<>();\n  ZooKeeper zk=new ZooKeeper(serverList,zkSessionTimeoutMillis,event -> {\n    if (event.getType() == Event.EventType.None) {\nswitch (event.getState()) {\ncase ConnectedReadOnly:        checkArgument(canBeReadOnly);\ncase SyncConnected:      internalFuture.complete(null);\n    break;\ncase Expired:  internalFuture.completeExceptionally(KeeperException.create(KeeperException.Code.SESSIONEXPIRED));\nbreak;\ndefault:log.warn(\"Unexpected ZK event received: {}\",event);\nbreak;\n}\n}\n}\n,canBeReadOnly);\ninternalFuture.thenRun(() -> {\nlog.info(\"ZooKeeper session established: {}\",zk);\nfuture.complete(zk);\n}\n).exceptionally((exception) -> {\nlog.error(\"Failed to establish ZooKeeper session: {}\",exception.getMessage());\nfuture.completeExceptionally(exception);\nreturn null;\n}\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  CompletableFuture<Void> internalFuture=new CompletableFuture<>();\n  ZooKeeper zk=new ZooKeeper(serverList,zkSessionTimeoutMillis,event -> {\n    if (event.getType() == Event.EventType.None) {\nswitch (event.getState()) {\ncase ConnectedReadOnly:        checkArgument(canBeReadOnly);\ncase SyncConnected:      internalFuture.complete(null);\n    break;\ncase Expired:  internalFuture.completeExceptionally(KeeperException.create(KeeperException.Code.SESSIONEXPIRED));\nbreak;\ndefault:log.warn(\"Unexpected ZK event received: {}\",event);\nbreak;\n}\n}\n}\n,canBeReadOnly);\ninternalFuture.thenRun(() -> {\nlog.info(\"ZooKeeper session established: {}\",zk);\nfuture.complete(zk);\n}\n).exceptionally((exception) -> {\nlog.error(\"Failed to establish ZooKeeper session: {}\",exception.getMessage());\nfuture.completeExceptionally(exception);\nreturn null;\n}\n);\n}\n catch (IllegalArgumentException|IOException e) {\nfuture.completeExceptionally(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 133,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1769,
        "startLineNumber" : 38,
        "startColumnNumber" : 119,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean canBeReadOnly=sessionType == SessionType.AllowReadOnly;\n  CompletableFuture<ZooKeeper> future=new CompletableFuture<>();\n  try {\n    CompletableFuture<Void> internalFuture=new CompletableFuture<>();\n    ZooKeeper zk=new ZooKeeper(serverList,zkSessionTimeoutMillis,event -> {\n      if (event.getType() == Event.EventType.None) {\nswitch (event.getState()) {\ncase ConnectedReadOnly:          checkArgument(canBeReadOnly);\ncase SyncConnected:        internalFuture.complete(null);\n      break;\ncase Expired:    internalFuture.completeExceptionally(KeeperException.create(KeeperException.Code.SESSIONEXPIRED));\n  break;\ndefault:log.warn(\"Unexpected ZK event received: {}\",event);\nbreak;\n}\n}\n}\n,canBeReadOnly);\ninternalFuture.thenRun(() -> {\nlog.info(\"ZooKeeper session established: {}\",zk);\nfuture.complete(zk);\n}\n).exceptionally((exception) -> {\nlog.error(\"Failed to establish ZooKeeper session: {}\",exception.getMessage());\nfuture.completeExceptionally(exception);\nreturn null;\n}\n);\n}\n catch (IllegalArgumentException|IOException e) {\nfuture.completeExceptionally(e);\n}\nreturn future;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1898,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CompletableFuture<ZooKeeper> create(String serverList,SessionType sessionType,int zkSessionTimeoutMillis){\n  boolean canBeReadOnly=sessionType == SessionType.AllowReadOnly;\n  CompletableFuture<ZooKeeper> future=new CompletableFuture<>();\n  try {\n    CompletableFuture<Void> internalFuture=new CompletableFuture<>();\n    ZooKeeper zk=new ZooKeeper(serverList,zkSessionTimeoutMillis,event -> {\n      if (event.getType() == Event.EventType.None) {\nswitch (event.getState()) {\ncase ConnectedReadOnly:          checkArgument(canBeReadOnly);\ncase SyncConnected:        internalFuture.complete(null);\n      break;\ncase Expired:    internalFuture.completeExceptionally(KeeperException.create(KeeperException.Code.SESSIONEXPIRED));\n  break;\ndefault:log.warn(\"Unexpected ZK event received: {}\",event);\nbreak;\n}\n}\n}\n,canBeReadOnly);\ninternalFuture.thenRun(() -> {\nlog.info(\"ZooKeeper session established: {}\",zk);\nfuture.complete(zk);\n}\n).exceptionally((exception) -> {\nlog.error(\"Failed to establish ZooKeeper session: {}\",exception.getMessage());\nfuture.completeExceptionally(exception);\nreturn null;\n}\n);\n}\n catch (IllegalArgumentException|IOException e) {\nfuture.completeExceptionally(e);\n}\nreturn future;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 178,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 46,
        "startColumnNumber" : 27,
        "endLineNumber" : 68,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new ZooKeeper(serverList,zkSessionTimeoutMillis,event -> {\n  if (event.getType() == Event.EventType.None) {\nswitch (event.getState()) {\ncase ConnectedReadOnly:      checkArgument(canBeReadOnly);\ncase SyncConnected:    internalFuture.complete(null);\n  break;\ncase Expired:internalFuture.completeExceptionally(KeeperException.create(KeeperException.Code.SESSIONEXPIRED));\nbreak;\ndefault:log.warn(\"Unexpected ZK event received: {}\",event);\nbreak;\n}\n}\n}\n,canBeReadOnly)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 62,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 46,
    "startColumnNumber" : 41,
    "endLineNumber" : 46,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}